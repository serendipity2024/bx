'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var axios = _interopDefault(require('axios'));
var get = _interopDefault(require('lodash.get'));
var jsCookie = _interopDefault(require('js-cookie'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

// A type of promise-like that resolves synchronously and supports only one observer

const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== "undefined" ? (Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator"))) : "@@iterator";

const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== "undefined" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator"))) : "@@asyncIterator";

// Asynchronously call a function and send errors to recovery continuation
function _catch(body, recover) {
	try {
		var result = body();
	} catch(e) {
		return recover(e);
	}
	if (result && result.then) {
		return result.then(void 0, recover);
	}
	return result;
}

var ApiService =
/*#__PURE__*/
function () {
  function ApiService() {
    var _this = this;

    this.get = function (endPoint, params, config) {
      return new Promise(function (resolve, reject) {
        if (!_this.axios) {
          reject("Couldn't create service");
        }

        _this.axios.get(endPoint, _extends({
          params: params
        }, config)).then(function (response) {
          resolve(response);
        })["catch"](function (error) {
          reject(error);
        });
      });
    };

    this.getOne = function (endPoint, key, config) {
      return new Promise(function (resolve, reject) {
        if (!_this.axios) {
          reject(new Error("Couldn't create service"));
        }

        _this.axios.get(endPoint + "/" + key, config).then(function (response) {
          resolve(response);
        })["catch"](function (error) {
          reject(error);
        });
      });
    };

    this.post = function (endPoint, params, config) {
      return new Promise(function (resolve, reject) {
        if (!_this.axios) {
          reject(new Error("Couldn't create service"));
        }

        _this.axios.post(endPoint, params, _extends({}, config)).then(function (response) {
          resolve(response);
        })["catch"](function (error) {
          if (get(error, "response.status") === 401) {
            reject(error);
          }

          reject(error);
        });
      });
    };

    this.put = function (endPoint, params, config) {
      return new Promise(function (resolve, reject) {
        if (!_this.axios) {
          reject(new Error("Couldn't create service"));
        }

        _this.axios.put(endPoint, params, _extends({}, config)).then(function (response) {
          resolve(response);
        })["catch"](function (error) {
          reject(error);
        });
      });
    };

    this.patch = function (endPoint, params, config) {
      return new Promise(function (resolve, reject) {
        if (!_this.axios) {
          reject(new Error("Couldn't create service"));
        }

        _this.axios.patch(endPoint, params, _extends({}, config)).then(function (response) {
          resolve(response);
        })["catch"](function (error) {
          reject(error);
        });
      });
    };

    this["delete"] = function (endPoint, config) {
      return new Promise(function (resolve, reject) {
        if (!_this.axios) {
          reject(new Error("Couldn't create service"));
        }

        _this.axios["delete"](endPoint, _extends({}, config)).then(function (response) {
          resolve(response);
        })["catch"](function (error) {
          reject(error);
        });
      });
    };
  }

  var _proto = ApiService.prototype;

  _proto.createService = function createService(authToken, API_URL) {
    this.API_URL = API_URL;
    var headers = {};

    if (authToken) {
      headers["X-BuilderX-Auth-Token"] = authToken;
      this.authToken = authToken;
    }

    try {
      this.axios = axios.create({
        baseURL: this.API_URL,
        headers: headers
      });
    } catch (error) {
      throw error;
    }
  };

  return ApiService;
}();

var RealtimeIO =
/*#__PURE__*/
function () {
  function RealtimeIO(url, config, headers) {
    this.eventListenersMap = new Map();
    this.url = url;
    this.config = config;
    this.headers = headers;
  }

  RealtimeIO.connect = function connect(url, config, headers) {
    var instance;

    if (RealtimeIO.ioInstance) {
      instance = RealtimeIO.ioInstance;
    } else {
      instance = new RealtimeIO(url, config, headers);
      axios.post(url, config, headers).then(function (response) {
        instance.emit("connect", response);
        instance.poll();
      })["catch"](function (Error) {
        instance.emit("connection-failed", Error);
        instance.poll();
      });
    }

    return instance;
  };

  var _proto = RealtimeIO.prototype;

  _proto.poll = function poll() {
    var _this = this;

    axios.post(this.url, this.config, this.headers).then(function (response) {
      _this.emit("poll", response);

      setTimeout(function () {
        _this.poll();
      }, 10000);
    })["catch"](function () {
      _this.emit("connection-failed");

      setTimeout(function () {
        _this.poll();
      }, 20000);
    });
  };

  _proto.emit = function emit(property, data) {
    var arrayOfListener = this.eventListenersMap.get(property);

    if (arrayOfListener) {
      arrayOfListener.forEach(function (listner) {
        if (listner) {
          listner(data);
        }
      });
    }
  };

  _proto.on = function on(property, listener) {
    var existingArrOfListeners = this.eventListenersMap.get(property);

    if (existingArrOfListeners) {
      existingArrOfListeners.push(listener);
    } else {
      this.eventListenersMap.set(property, [listener]);
    }
  };

  return RealtimeIO;
}();

var transformResponse = function transformResponse(response) {
  return {
    data: response.data ? response.data : _extends({}, response),
    message: response.message ? response.message : "Successfull",
    status: response.status,
    headers: response.headers ? response.headers : {}
  };
};

var errorHandler = function errorHandler(error, resolve, reject) {
  var responseStatus = get(error, "response.status");

  if (responseStatus && responseStatus === 401) {
    resolve(false);
  } else {
    reject(error);
  }
};

var transformShareability = function transformShareability(response) {
  return {
    data: response.data ? response.data.data ? response.data.data : response.data : _extends({}, response),
    message: response.data.message ? response.data.message : "Successfull",
    status: response.status,
    headers: response.headers ? response.headers : {}
  };
};

var defaultConfig = {
  env: "local",
  baseUrl: "https://pre-cloud.builderx.io/api/",
  accessToken:
  /*#__PURE__*/
  jsCookie.get("access-token"),
  googleFontsUrl: "https://www.googleapis.com/webfonts/v1/webfonts?key=",
  localFontsUrl: "http://localhost:8979"
};

var ApiSdk =
/*#__PURE__*/
function () {
  function ApiSdk() {
    var _this = this,
        _this2 = this,
        _this3 = this,
        _this4 = this,
        _this5 = this,
        _this6 = this,
        _this7 = this,
        _this8 = this,
        _this9 = this,
        _this10 = this,
        _this11 = this,
        _this12 = this,
        _this13 = this,
        _this14 = this,
        _this15 = this,
        _this16 = this,
        _this17 = this,
        _this18 = this;

    this.apiService = new ApiService();
    this.config = _extends({}, defaultConfig);
    this.project = {
      get: function (projectId, connectionId) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              return Promise.resolve(_catch(function () {
                var _temp = function () {
                  if (_this.apiService) {
                    return Promise.resolve(_this.apiService.get("projects/" + projectId, {
                      connectionId: connectionId
                    })).then(function (response) {
                      var result = transformResponse(response);
                      resolve(result);
                    });
                  }
                }();

                if (_temp && _temp.then) return _temp.then(function () {});
              }, function (error) {
                errorHandler(error, resolve, reject);
              }));
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      },
      post: function (name) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              return Promise.resolve(_catch(function () {
                var _temp2 = function () {
                  if (_this2.apiService) {
                    return Promise.resolve(_this2.apiService.post("projects", {
                      name: name
                    }, {
                      headers: {
                        "content-type": "application/json"
                      }
                    })).then(function (response) {
                      var result = transformResponse(response);
                      resolve(result);
                    });
                  }
                }();

                if (_temp2 && _temp2.then) return _temp2.then(function () {});
              }, function (error) {
                errorHandler(error, resolve, reject);
              }));
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      },
      update: function (projectId, key, value) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              return Promise.resolve(_catch(function () {
                var _temp3 = function () {
                  if (_this3.apiService) {
                    var _this3$apiService$put;

                    return Promise.resolve(_this3.apiService.put("projects/" + projectId, (_this3$apiService$put = {}, _this3$apiService$put[key] = value, _this3$apiService$put))).then(function (response) {
                      var result = transformResponse(response);
                      resolve(result);
                    });
                  }
                }();

                if (_temp3 && _temp3.then) return _temp3.then(function () {});
              }, function (error) {
                errorHandler(error, resolve, reject);
              }));
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      },
      clone: function (projectId, params) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              return Promise.resolve(_catch(function () {
                var _temp4 = function () {
                  if (_this4.apiService) {
                    return Promise.resolve(_this4.apiService.get("/project-clone/" + projectId, params)).then(function (response) {
                      var result = transformResponse(response);
                      resolve(result);
                    });
                  }
                }();

                if (_temp4 && _temp4.then) return _temp4.then(function () {});
              }, function (error) {
                errorHandler(error, resolve, reject);
              }));
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      },
      shareability: function (project_id, type, access, email, mode) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              return Promise.resolve(_catch(function () {
                var _temp5 = function () {
                  if (_this5.apiService) {
                    return Promise.resolve(_this5.apiService.post("projects-shareability", {
                      project_id: project_id,
                      type: type,
                      access: access,
                      email: email,
                      mode: mode
                    })).then(function (response) {
                      var result = transformShareability(response);
                      resolve(result);
                    });
                  }
                }();

                if (_temp5 && _temp5.then) return _temp5.then(function () {});
              }, function (error) {
                errorHandler(error, resolve, reject);
              }));
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      }
    };
    this.files = {
      get: function (name, projectId) {
        if (name === void 0) {
          name = "";
        }

        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              return Promise.resolve(_catch(function () {
                var _temp6 = function () {
                  if (_this6.apiService) {
                    return Promise.resolve(_this6.apiService.get("files", {
                      name: name,
                      projectId: projectId
                    })).then(function (response) {
                      var result = transformShareability(response);
                      resolve(result);
                    });
                  }
                }();

                if (_temp6 && _temp6.then) return _temp6.then(function () {});
              }, function (error) {
                errorHandler(error, resolve, reject);
              }));
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      },
      "delete": function (dbFileId, connectionId) {
        if (connectionId === void 0) {
          connectionId = "";
        }

        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              return Promise.resolve(_catch(function () {
                var _temp7 = function () {
                  if (_this7.apiService) {
                    return Promise.resolve(_this7.apiService["delete"]("files/" + dbFileId + "?connectionId=" + connectionId)).then(function (response) {
                      resolve(response);
                    });
                  }
                }();

                if (_temp7 && _temp7.then) return _temp7.then(function () {});
              }, function (error) {
                errorHandler(error, resolve, reject);
              }));
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      },
      patch: function (dbFileId) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              return Promise.resolve(_catch(function () {
                var _temp8 = function () {
                  if (_this8.apiService) {
                    return Promise.resolve(_this8.apiService.patch("files/" + dbFileId, {
                      deleted_at: "1"
                    })).then(function (response) {
                      resolve(response);
                    });
                  }
                }();

                if (_temp8 && _temp8.then) return _temp8.then(function () {});
              }, function (error) {
                errorHandler(error, resolve, reject);
              }));
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      },
      exists: function (projectId, filePath) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              return Promise.resolve(_catch(function () {
                var _temp9 = function () {
                  if (_this9.apiService) {
                    return Promise.resolve(_this9.apiService.get("get-file-content/" + projectId + "?fileName=" + filePath)).then(function (response) {
                      resolve(response);
                    });
                  }
                }();

                if (_temp9 && _temp9.then) return _temp9.then(function () {});
              }, function (error) {
                errorHandler(error, resolve, reject);
              }));
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      }
    };
    this.projectLog = {
      post: function (domainJSON) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              return Promise.resolve(_catch(function () {
                var _temp10 = function () {
                  if (_this10.apiService) {
                    return Promise.resolve(_this10.apiService.post("projects/log", {
                      data: JSON.parse(domainJSON)
                    })).then(function (response) {
                      resolve(response);
                    });
                  }
                }();

                if (_temp10 && _temp10.then) return _temp10.then(function () {});
              }, function (error) {
                errorHandler(error, resolve, reject);
              }));
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      }
    };
    this.fileContent = {
      get: function (fileId) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              return Promise.resolve(_catch(function () {
                var _temp11 = function () {
                  if (_this11.apiService) {
                    return Promise.resolve(_this11.apiService.get("file-content", {
                      fileId: fileId
                    })).then(function (response) {
                      resolve(response);
                    });
                  }
                }();

                if (_temp11 && _temp11.then) return _temp11.then(function () {});
              }, function (error) {
                errorHandler(error, resolve, reject);
              }));
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      },
      post: function (params, config) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              return Promise.resolve(_catch(function () {
                var _temp12 = function () {
                  if (_this12.apiService) {
                    return Promise.resolve(_this12.apiService.post("file-content", params, config)).then(function (response) {
                      var result = transformResponse(response);
                      resolve(result);
                    });
                  }
                }();

                if (_temp12 && _temp12.then) return _temp12.then(function () {});
              }, function (error) {
                errorHandler(error, resolve, reject);
              }));
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      }
    };
    this.user = {
      get: function (userId) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              return Promise.resolve(_catch(function () {
                var _temp13 = function () {
                  if (_this13.apiService) {
                    return Promise.resolve(_this13.apiService.get("users/" + userId)).then(function (response) {
                      var result = transformResponse(response);
                      resolve(result);
                    });
                  }
                }();

                if (_temp13 && _temp13.then) return _temp13.then(function () {});
              }, function (error) {
                errorHandler(error, resolve, reject);
              }));
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      },
      patch: function (userId, params, config) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              return Promise.resolve(_catch(function () {
                var _temp14 = function () {
                  if (_this14.apiService) {
                    return Promise.resolve(_this14.apiService.patch("users/" + userId, params, config)).then(function (response) {
                      resolve(response);
                    });
                  }
                }();

                if (_temp14 && _temp14.then) return _temp14.then(function () {});
              }, function (error) {
                errorHandler(error, resolve, reject);
              }));
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      }
    };
    this.teams = {
      get: function (teamId, params) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              return Promise.resolve(_catch(function () {
                var _temp15 = function () {
                  if (_this15.apiService) {
                    return Promise.resolve(_this15.apiService.get("settings/teams/json/" + teamId, params)).then(function (response) {
                      var result = transformResponse(response);
                      resolve(result);
                    });
                  }
                }();

                if (_temp15 && _temp15.then) return _temp15.then(function () {});
              }, function (error) {
                errorHandler(error, resolve, reject);
              }));
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      }
    };
    this.poll = {
      connect: function connect(url, config, headers) {
        return RealtimeIO.connect(url, config, headers);
      }
    };
    this.raw = {
      getBlob: function (path, params) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              var _temp17 = _catch(function () {
                return Promise.resolve(axios.get(path, params)).then(function (response) {
                  resolve(response);
                });
              }, function (error) {
                errorHandler(error, resolve, reject);
              });

              return Promise.resolve(_temp17 && _temp17.then ? _temp17.then(function () {}) : void 0);
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      },
      checkPort: function (portNumber) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              var _temp19 = _catch(function () {
                return Promise.resolve(axios.get("http://localhost:" + portNumber + "/checkPort" // TODO: get base url as config in init
                )).then(function (response) {
                  resolve(response);
                });
              }, function (error) {
                errorHandler(error, resolve, reject);
              });

              return Promise.resolve(_temp19 && _temp19.then ? _temp19.then(function () {}) : void 0);
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      }
    };
    this.assets = {
      getFont: function (fontUrl, path, params) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              var _temp21 = _catch(function () {
                return Promise.resolve(axios.get(fontUrl + "getFont?id=" + path, params)).then(function (response) {
                  resolve(response);
                });
              }, function (error) {
                errorHandler(error, resolve, reject);
              });

              return Promise.resolve(_temp21 && _temp21.then ? _temp21.then(function () {}) : void 0);
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      },
      getCloudImage: function (cloudImagePath, params) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              var _temp23 = _catch(function () {
                return Promise.resolve(axios.get(cloudImagePath, params)).then(function (response) {
                  resolve(response);
                });
              }, function (error) {
                errorHandler(error, resolve, reject);
              });

              return Promise.resolve(_temp23 && _temp23.then ? _temp23.then(function () {}) : void 0);
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      },
      getGoogleFonts: function (BUILDERX_FONT_API_KEY) {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              var _temp25 = _catch(function () {
                return Promise.resolve(axios.get(_this16.config.googleFontsUrl + BUILDERX_FONT_API_KEY)).then(function (response) {
                  resolve(response);
                });
              }, function (error) {
                errorHandler(error, resolve, reject);
              });

              return Promise.resolve(_temp25 && _temp25.then ? _temp25.then(function () {}) : void 0);
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      },
      fetchLocalFonts: function () {
        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              var _temp27 = _catch(function () {
                return Promise.resolve(axios.get(_this17.config.localFontsUrl || defaultConfig.localFontsUrl)).then(function (response) {
                  resolve(response);
                });
              }, function (error) {
                errorHandler(error, resolve, reject);
              });

              return Promise.resolve(_temp27 && _temp27.then ? _temp27.then(function () {}) : void 0);
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      },
      uploadAsset: function (projectId, filePath, data, connectionId, type) {
        if (connectionId === void 0) {
          connectionId = "";
        }

        try {
          return Promise.resolve(new Promise(function (resolve, reject) {
            try {
              try {
                var name = filePath;
                var fileContentFormData = new FormData();
                fileContentFormData.append("projectId", projectId);
                fileContentFormData.append("name", name);
                fileContentFormData.append("connectionId", connectionId);
                fileContentFormData.append("content", data);
                fileContentFormData.append("contentType", type);
                var headers = {
                  "content-type": "multipart/form-data"
                };

                _this18.fileContent.post(fileContentFormData, {
                  headers: headers
                }).then(function (res) {
                  resolve(res.data.fileId);
                })["catch"](function (err) {
                  console.error(err, filePath, "writeFile failed");
                  reject(err);
                });
              } catch (error) {
                reject(error);
              }

              return Promise.resolve();
            } catch (e) {
              return Promise.reject(e);
            }
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      }
    };
  }

  var _proto = ApiSdk.prototype;

  _proto.init = function init(config) {
    this.config = _extends({}, this.config, {}, config);
    this.apiService.createService(this.config.accessToken, this.config.baseUrl || defaultConfig.baseUrl); // TODO: INstead of passing multiple params, pass `this` (instance of ApiSdk) to apiService
  };

  _proto.auth = function auth() {
    try {
      var _this20 = this;

      return Promise.resolve(new Promise(function (resolve, reject) {
        try {
          return Promise.resolve(_catch(function () {
            var _temp28 = function () {
              if (_this20.apiService) {
                return Promise.resolve(_this20.apiService.get("get-my-id")).then(function (response) {
                  if (response.data.id) {
                    var result = transformResponse(response);
                    resolve(result);
                  } else {
                    reject("Not Authenticated");
                  }
                });
              }
            }();

            if (_temp28 && _temp28.then) return _temp28.then(function () {});
          }, function (error) {
            reject(error);
          }));
        } catch (e) {
          return Promise.reject(e);
        }
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  return ApiSdk;
}();

var apiSdk =
/*#__PURE__*/
new ApiSdk();

exports.ApiSdk = ApiSdk;
exports.apiSdk = apiSdk;
//# sourceMappingURL=api-sdk.cjs.development.js.map
