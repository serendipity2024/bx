import ApiService from "./apiService";
import RealtimeIO from "./realtimeIO";
import APIResponse, { Auth, Project, ProjectShareability, File, User, FileContent, Team } from "./interfaces";
interface Config {
    env?: string;
    baseUrl?: string;
    accessToken?: string;
    googleFontsUrl?: string;
    localFontsUrl?: string;
}
declare class ApiSdk {
    apiService: ApiService;
    config: Config;
    init(config: Config): void;
    auth(): Promise<APIResponse<Auth>>;
    project: {
        get: (projectId: string, connectionId?: string | undefined) => Promise<APIResponse<Project>>;
        post: (name: string) => Promise<APIResponse<Project>>;
        update: (projectId: string, key: string, value: any) => Promise<APIResponse<Project>>;
        clone: (projectId: string, params?: {
            [key: string]: any;
        } | undefined) => Promise<any>;
        shareability: (project_id: string, type: string, access: string, email?: string | undefined, mode?: string | undefined) => Promise<APIResponse<ProjectShareability>>;
    };
    files: {
        get: (name?: string, projectId?: string | undefined) => Promise<APIResponse<File>>;
        delete: (dbFileId: string, connectionId?: string) => Promise<any>;
        patch: (dbFileId: string) => Promise<any>;
        exists: (projectId: string, filePath: string) => Promise<any>;
    };
    projectLog: {
        post: (domainJSON: string) => Promise<any>;
    };
    fileContent: {
        get: (fileId?: string | undefined) => Promise<any>;
        post: (params?: {
            [key: string]: any;
        } | undefined, config?: {
            [key: string]: any;
        } | undefined) => Promise<APIResponse<FileContent>>;
    };
    user: {
        get: (userId: string) => Promise<APIResponse<User>>;
        patch: (userId: string, params?: {
            [key: string]: any;
        } | undefined, config?: {
            [key: string]: any;
        } | undefined) => Promise<any>;
    };
    teams: {
        get: (teamId: string, params?: {
            [key: string]: any;
        } | undefined) => Promise<APIResponse<Team>>;
    };
    poll: {
        connect: (url: string, config: any, headers: any) => RealtimeIO;
    };
    raw: {
        getBlob: (path: string, params?: {
            [key: string]: any;
        } | undefined) => Promise<any>;
        checkPort: (portNumber: number) => Promise<any>;
    };
    assets: {
        getFont: (fontUrl: string, path: string, params?: {
            [key: string]: any;
        } | undefined) => Promise<any>;
        getCloudImage: (cloudImagePath: string, params?: {
            [key: string]: any;
        } | undefined) => Promise<any>;
        getGoogleFonts: (BUILDERX_FONT_API_KEY: string) => Promise<any>;
        fetchLocalFonts: () => Promise<any>;
        uploadAsset: (projectId: string, filePath: string, data: string | Blob, connectionId: string | undefined, type: "image" | "font") => Promise<any>;
    };
}
declare const apiSdk: ApiSdk;
export { apiSdk, ApiSdk };
