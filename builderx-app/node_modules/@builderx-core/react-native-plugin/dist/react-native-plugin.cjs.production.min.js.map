{"version":3,"file":"react-native-plugin.cjs.production.min.js","sources":["../src/react-native/utils/index.ts","../src/react-native/MapStyle.ts","../src/react-native/constants.ts","../src/react-native/LayerCodeGen.ts","../src/react-native/layers/ViewCodeGen.ts","../src/react-native/layers/FileCodeGen.ts","../src/react-native/specialLayers/LiteralCodeGen.ts","../src/react-native/layers/TextCodeGen.ts","../src/conversions/pathUtils.ts","../src/conversions/toSVGPath.ts","../src/react-native/layers/ImageCodeGen.ts","../src/react-native/layers/EllipseCodeGen.ts","../src/react-native/layers/ScrollViewCodeGen.ts","../src/react-native/layers/TextInputCodeGen.ts","../src/react-native/layers/SymbolLayerCodeGen.ts","../src/react-native/layers/TouchableOpacityCodeGen.ts","../src/react-native/specialLayers/CenterCodeGen.ts","../src/react-native/specialLayers/ExpressionStatementCodeGen.ts","../src/react-native/specialLayers/BinaryExpressionCodeGen.ts","../src/react-native/specialLayers/ExpressionCodeGen.ts","../src/react-native/specialLayers/ConditionalExpressionCodeGen.ts","../src/react-native/specialLayers/LogicalExpressionCodeGen.ts","../src/react-native/layers/PathCodeGen.ts","../src/react-native/layers/LoopCodeGen.ts","../src/react-native/layers/RootCodeGen.ts","../src/utils.ts","../src/react-native/layers/WrapperCodeGen.ts","../src/react-native/layers/InlineViewCodeGen.ts","../src/react-native/layers/IconCodeGen.ts","../src/react-native/layers/ActivityIndicatorCodeGen.ts","../src/react-native/layers/MapViewCodeGen.ts","../src/react-native/layers/SwitchCodeGen.ts","../src/react-native/layers/SliderCodeGen.ts","../src/react-native/BaseCodeGen.ts","../src/react-native/ReactNativeEngine.ts","../src/ExpoFiles/index.ts","../src/ReactNativeCodeGen/index.ts"],"sourcesContent":["import { Context } from '../types';\nimport { replace, includes, escape, get } from 'lodash';\n\n// import BaseCodeGen from \"../BaseCodeGen\";\n// import { layerJSON } from \"src/AstModule/src/intialState\";\n\nexport const getRandomString = (length: number = 6) => {\n  let text = '';\n  let possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  text = possible.charAt(Math.floor(Math.random() * 52));\n  for (let i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n};\nexport const addImportToContext = (\n  context: Context,\n  layerJSON: any,\n  generateJSLiteralCode?: any\n) => {\n  if (layerJSON.import.layerName.includes('.')) {\n    return;\n  }\n  // Write import transformation code after this line\n\n  if (layerJSON.import.packageName === 'native') {\n    layerJSON.import.packageName = 'react-native';\n  }\n\n  // For backwards compatibility with older version of Expo\n  if (layerJSON.import.layerName === 'MapView') {\n    layerJSON.import.packageName = 'react-native-maps';\n    layerJSON.import.isDefaultImport = true;\n  }\n\n  if (\n    layerJSON.import.packageName === '@builderx/icons' ||\n    layerJSON.import.packageName === 'VectorIcons'\n  ) {\n    if (typeof layerJSON.props.type === 'string') {\n      layerJSON.import.packageName = `react-native-vector-icons/${layerJSON.props.type}`;\n    } else {\n      let currentFamily = getCurrentFamily(layerJSON, generateJSLiteralCode);\n      layerJSON.import.packageName = `react-native-vector-icons/${currentFamily}`;\n    }\n  }\n\n  if (layerJSON.type === 'symbol') {\n    if (context.filePath.indexOf('screens') !== -1) {\n      layerJSON.import.packageName = `../components/${layerJSON.import.layerName}`;\n    } else if (context.filePath.indexOf('preview') !== -1) {\n      layerJSON.import.packageName = `./components/${layerJSON.import.layerName}`;\n    } else if (\n      context.filePath.indexOf('symbols') !== -1 ||\n      context.filePath.indexOf('components') !== -1\n    ) {\n      layerJSON.import.packageName = `./${layerJSON.import.layerName}`;\n    }\n  }\n\n  if (!context.imports[layerJSON.import.packageName]) {\n    context.imports[layerJSON.import.packageName] = {\n      named: [],\n      default: false,\n    };\n  }\n\n  const contextImportObj = context.imports[layerJSON.import.packageName];\n  if (layerJSON.import.isDefaultImport) {\n    if (\n      layerJSON.import.packageName.indexOf('react-native-vector-icons') !==\n        -1 &&\n      context.iconCount > 1\n    ) {\n      let currentFamily = getCurrentFamily(layerJSON, generateJSLiteralCode);\n      contextImportObj.default = `${currentFamily}${layerJSON.import.layerName}`;\n    } else {\n      contextImportObj.default = layerJSON.import.layerName;\n    }\n  } else if (\n    layerJSON.import.layerName === 'Image' &&\n    layerJSON.import.packageName === 'react-native-svg'\n  ) {\n    context.imports[layerJSON.import.packageName] = {\n      named: [\n        { name: layerJSON.import.layerName, asName: layerJSON.import.asName },\n      ],\n      default: false,\n    };\n  } else {\n    if (contextImportObj.named.indexOf(layerJSON.import.layerName) === -1) {\n      contextImportObj.named.push(layerJSON.import.layerName);\n    }\n  }\n};\n\nexport const isTabViewSpecificStyleProp = (propName: string) => {\n  return (\n    ['tabBarStyle', 'indicatorStyle', 'labelStyle', 'tabStyle'].indexOf(\n      propName\n    ) !== -1\n  );\n};\n\nexport const escapeTextForJSX = (text: string) => {\n  if (typeof text === 'string') {\n    text = text.trim();\n    text = escape(text);\n  }\n  if (includes(text, '\\n')) {\n    text = replace(text, new RegExp('\\n', 'g'), `{\\\"\\\\n\"}`);\n    text = replace(text, new RegExp('\\t', 'g'), `{\\\"\\\\t\"}`);\n  }\n  return text;\n};\nexport const getIconCount = (context: Context, layer: any) => {\n  if (!layer) {\n    return 0;\n  }\n  layer.children.forEach((child: any) => {\n    if (get(child, 'children', 0) && child.children.length !== 0) {\n      getIconCount(context, child);\n    }\n    if (\n      get(child, 'import.layerName', 0) &&\n      child.import.layerName === 'Icon'\n    ) {\n      context.iconCount = context.iconCount + 1;\n    }\n  });\n  return context.iconCount;\n};\n// export const hasDuplicateLayers = (layer: any) => {\n//   let hasDuplicatechildren = false;\n//   layer.children.forEach((child: any) => {\n//     let currentStyleName = child.styleName;\n//     layer.children.forEach((innerChild: any) => {\n//       if (child !== innerChild) {\n//         if (innerChild.styleName === currentStyleName) {\n//         }\n//       }\n//     });\n//   });\n// };\nexport const getCurrentFamily = (\n  layerJSON: any,\n  generateJSLiteralCode: any\n) => {\n  let conditionalStatement = generateJSLiteralCode(layerJSON.props.type);\n  let currentFamily = '';\n  let families = [\n    'Entypo',\n    'EvilIcons',\n    'Feather',\n    'FontAwesome',\n    'MaterialIcons',\n    'MaterialCommunityIcons',\n    'SimpleLineIcons',\n    'Octicons',\n    'Zocial',\n    'Ionicons',\n  ];\n  for (let i = 0; i < families.length; i++) {\n    if (conditionalStatement.indexOf(families[i]) !== -1) {\n      currentFamily = families[i];\n      break;\n    }\n  }\n  return currentFamily;\n};\nexport const isButtonLayer = (layer: any) => {\n  if (layer.type === 'touchableOpacity' && layer.hasOwnProperty('navigateTo')) {\n    return true;\n  }\n  return false;\n};\n\nexport function getFilteredImageStyle(style: any) {\n  const filteredImageStyle: any = {};\n\n  if (\n    (style.borderWidth || style.borderLeftWidth || style.borderRightWidth) &&\n    style.width\n  ) {\n    const borderRightWidth = style.borderRightWidth\n      ? style.borderRightWidth\n      : style.borderWidth\n      ? style.borderWidth\n      : 0;\n    const borderLeftWidth = style.borderLeftWidth\n      ? style.borderLeftWidth\n      : style.borderWidth\n      ? style.borderWidth\n      : 0;\n    filteredImageStyle.width =\n      style.width - (borderRightWidth + borderLeftWidth);\n  }\n\n  if (\n    (style.borderWidth || style.borderTopWidth || style.borderBottomWidth) &&\n    style.height\n  ) {\n    const borderTopWidth = style.borderTopWidth\n      ? style.borderTopWidth\n      : style.borderWidth\n      ? style.borderWidth\n      : 0;\n    const borderBottomWidth = style.borderBottomWidth\n      ? style.borderBottomWidth\n      : style.borderWidth\n      ? style.borderWidth\n      : 0;\n    filteredImageStyle.height =\n      style.height - (borderTopWidth + borderBottomWidth);\n  }\n\n  if (\n    style.borderRadius ||\n    style.borderTopLeftRadius ||\n    style.borderTopRightRadius ||\n    style.borderBottomRightRadius ||\n    style.borderBottomLeftRadius\n  ) {\n    style.overflow = 'hidden';\n  }\n  if (style.opacity) {\n    filteredImageStyle.opacity = style.opacity;\n    delete style.opacity;\n  }\n  return filteredImageStyle;\n}\n","export const MapStyles: any = {\n  Standard: [],\n  Silver: [\n    {\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#f5f5f5',\n        },\n      ],\n    },\n    {\n      elementType: 'labels.icon',\n      stylers: [\n        {\n          visibility: 'off',\n        },\n      ],\n    },\n    {\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#616161',\n        },\n      ],\n    },\n    {\n      elementType: 'labels.text.stroke',\n      stylers: [\n        {\n          color: '#f5f5f5',\n        },\n      ],\n    },\n    {\n      featureType: 'administrative.land_parcel',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#bdbdbd',\n        },\n      ],\n    },\n    {\n      featureType: 'poi',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#eeeeee',\n        },\n      ],\n    },\n    {\n      featureType: 'poi',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#757575',\n        },\n      ],\n    },\n    {\n      featureType: 'poi.park',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#e5e5e5',\n        },\n      ],\n    },\n    {\n      featureType: 'poi.park',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#9e9e9e',\n        },\n      ],\n    },\n    {\n      featureType: 'road',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#ffffff',\n        },\n      ],\n    },\n    {\n      featureType: 'road.arterial',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#757575',\n        },\n      ],\n    },\n    {\n      featureType: 'road.highway',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#dadada',\n        },\n      ],\n    },\n    {\n      featureType: 'road.highway',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#616161',\n        },\n      ],\n    },\n    {\n      featureType: 'road.local',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#9e9e9e',\n        },\n      ],\n    },\n    {\n      featureType: 'transit.line',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#e5e5e5',\n        },\n      ],\n    },\n    {\n      featureType: 'transit.station',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#eeeeee',\n        },\n      ],\n    },\n    {\n      featureType: 'water',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#c9c9c9',\n        },\n      ],\n    },\n    {\n      featureType: 'water',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#9e9e9e',\n        },\n      ],\n    },\n  ],\n  Retro: [\n    {\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#ebe3cd',\n        },\n      ],\n    },\n    {\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#523735',\n        },\n      ],\n    },\n    {\n      elementType: 'labels.text.stroke',\n      stylers: [\n        {\n          color: '#f5f1e6',\n        },\n      ],\n    },\n    {\n      featureType: 'administrative',\n      elementType: 'geometry.stroke',\n      stylers: [\n        {\n          color: '#c9b2a6',\n        },\n      ],\n    },\n    {\n      featureType: 'administrative.land_parcel',\n      elementType: 'geometry.stroke',\n      stylers: [\n        {\n          color: '#dcd2be',\n        },\n      ],\n    },\n    {\n      featureType: 'administrative.land_parcel',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#ae9e90',\n        },\n      ],\n    },\n    {\n      featureType: 'landscape.natural',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#dfd2ae',\n        },\n      ],\n    },\n    {\n      featureType: 'poi',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#dfd2ae',\n        },\n      ],\n    },\n    {\n      featureType: 'poi',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#93817c',\n        },\n      ],\n    },\n    {\n      featureType: 'poi.park',\n      elementType: 'geometry.fill',\n      stylers: [\n        {\n          color: '#a5b076',\n        },\n      ],\n    },\n    {\n      featureType: 'poi.park',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#447530',\n        },\n      ],\n    },\n    {\n      featureType: 'road',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#f5f1e6',\n        },\n      ],\n    },\n    {\n      featureType: 'road.arterial',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#fdfcf8',\n        },\n      ],\n    },\n    {\n      featureType: 'road.highway',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#f8c967',\n        },\n      ],\n    },\n    {\n      featureType: 'road.highway',\n      elementType: 'geometry.stroke',\n      stylers: [\n        {\n          color: '#e9bc62',\n        },\n      ],\n    },\n    {\n      featureType: 'road.highway.controlled_access',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#e98d58',\n        },\n      ],\n    },\n    {\n      featureType: 'road.highway.controlled_access',\n      elementType: 'geometry.stroke',\n      stylers: [\n        {\n          color: '#db8555',\n        },\n      ],\n    },\n    {\n      featureType: 'road.local',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#806b63',\n        },\n      ],\n    },\n    {\n      featureType: 'transit.line',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#dfd2ae',\n        },\n      ],\n    },\n    {\n      featureType: 'transit.line',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#8f7d77',\n        },\n      ],\n    },\n    {\n      featureType: 'transit.line',\n      elementType: 'labels.text.stroke',\n      stylers: [\n        {\n          color: '#ebe3cd',\n        },\n      ],\n    },\n    {\n      featureType: 'transit.station',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#dfd2ae',\n        },\n      ],\n    },\n    {\n      featureType: 'water',\n      elementType: 'geometry.fill',\n      stylers: [\n        {\n          color: '#b9d3c2',\n        },\n      ],\n    },\n    {\n      featureType: 'water',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#92998d',\n        },\n      ],\n    },\n  ],\n  Dark: [\n    {\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#212121',\n        },\n      ],\n    },\n    {\n      elementType: 'labels.icon',\n      stylers: [\n        {\n          visibility: 'off',\n        },\n      ],\n    },\n    {\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#757575',\n        },\n      ],\n    },\n    {\n      elementType: 'labels.text.stroke',\n      stylers: [\n        {\n          color: '#212121',\n        },\n      ],\n    },\n    {\n      featureType: 'administrative',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#757575',\n        },\n      ],\n    },\n    {\n      featureType: 'administrative.country',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#9e9e9e',\n        },\n      ],\n    },\n    {\n      featureType: 'administrative.land_parcel',\n      stylers: [\n        {\n          visibility: 'off',\n        },\n      ],\n    },\n    {\n      featureType: 'administrative.locality',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#bdbdbd',\n        },\n      ],\n    },\n    {\n      featureType: 'poi',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#757575',\n        },\n      ],\n    },\n    {\n      featureType: 'poi.park',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#181818',\n        },\n      ],\n    },\n    {\n      featureType: 'poi.park',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#616161',\n        },\n      ],\n    },\n    {\n      featureType: 'poi.park',\n      elementType: 'labels.text.stroke',\n      stylers: [\n        {\n          color: '#1b1b1b',\n        },\n      ],\n    },\n    {\n      featureType: 'road',\n      elementType: 'geometry.fill',\n      stylers: [\n        {\n          color: '#2c2c2c',\n        },\n      ],\n    },\n    {\n      featureType: 'road',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#8a8a8a',\n        },\n      ],\n    },\n    {\n      featureType: 'road.arterial',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#373737',\n        },\n      ],\n    },\n    {\n      featureType: 'road.highway',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#3c3c3c',\n        },\n      ],\n    },\n    {\n      featureType: 'road.highway.controlled_access',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#4e4e4e',\n        },\n      ],\n    },\n    {\n      featureType: 'road.local',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#616161',\n        },\n      ],\n    },\n    {\n      featureType: 'transit',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#757575',\n        },\n      ],\n    },\n    {\n      featureType: 'water',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#000000',\n        },\n      ],\n    },\n    {\n      featureType: 'water',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#3d3d3d',\n        },\n      ],\n    },\n  ],\n  Night: [\n    {\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#242f3e',\n        },\n      ],\n    },\n    {\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#746855',\n        },\n      ],\n    },\n    {\n      elementType: 'labels.text.stroke',\n      stylers: [\n        {\n          color: '#242f3e',\n        },\n      ],\n    },\n    {\n      featureType: 'administrative.locality',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#d59563',\n        },\n      ],\n    },\n    {\n      featureType: 'poi',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#d59563',\n        },\n      ],\n    },\n    {\n      featureType: 'poi.park',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#263c3f',\n        },\n      ],\n    },\n    {\n      featureType: 'poi.park',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#6b9a76',\n        },\n      ],\n    },\n    {\n      featureType: 'road',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#38414e',\n        },\n      ],\n    },\n    {\n      featureType: 'road',\n      elementType: 'geometry.stroke',\n      stylers: [\n        {\n          color: '#212a37',\n        },\n      ],\n    },\n    {\n      featureType: 'road',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#9ca5b3',\n        },\n      ],\n    },\n    {\n      featureType: 'road.highway',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#746855',\n        },\n      ],\n    },\n    {\n      featureType: 'road.highway',\n      elementType: 'geometry.stroke',\n      stylers: [\n        {\n          color: '#1f2835',\n        },\n      ],\n    },\n    {\n      featureType: 'road.highway',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#f3d19c',\n        },\n      ],\n    },\n    {\n      featureType: 'transit',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#2f3948',\n        },\n      ],\n    },\n    {\n      featureType: 'transit.station',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#d59563',\n        },\n      ],\n    },\n    {\n      featureType: 'water',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#17263c',\n        },\n      ],\n    },\n    {\n      featureType: 'water',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#515c6d',\n        },\n      ],\n    },\n    {\n      featureType: 'water',\n      elementType: 'labels.text.stroke',\n      stylers: [\n        {\n          color: '#17263c',\n        },\n      ],\n    },\n  ],\n  Aubergine: [\n    {\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#1d2c4d',\n        },\n      ],\n    },\n    {\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#8ec3b9',\n        },\n      ],\n    },\n    {\n      elementType: 'labels.text.stroke',\n      stylers: [\n        {\n          color: '#1a3646',\n        },\n      ],\n    },\n    {\n      featureType: 'administrative.country',\n      elementType: 'geometry.stroke',\n      stylers: [\n        {\n          color: '#4b6878',\n        },\n      ],\n    },\n    {\n      featureType: 'administrative.land_parcel',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#64779e',\n        },\n      ],\n    },\n    {\n      featureType: 'administrative.province',\n      elementType: 'geometry.stroke',\n      stylers: [\n        {\n          color: '#4b6878',\n        },\n      ],\n    },\n    {\n      featureType: 'landscape.man_made',\n      elementType: 'geometry.stroke',\n      stylers: [\n        {\n          color: '#334e87',\n        },\n      ],\n    },\n    {\n      featureType: 'landscape.natural',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#023e58',\n        },\n      ],\n    },\n    {\n      featureType: 'poi',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#283d6a',\n        },\n      ],\n    },\n    {\n      featureType: 'poi',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#6f9ba5',\n        },\n      ],\n    },\n    {\n      featureType: 'poi',\n      elementType: 'labels.text.stroke',\n      stylers: [\n        {\n          color: '#1d2c4d',\n        },\n      ],\n    },\n    {\n      featureType: 'poi.park',\n      elementType: 'geometry.fill',\n      stylers: [\n        {\n          color: '#023e58',\n        },\n      ],\n    },\n    {\n      featureType: 'poi.park',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#3C7680',\n        },\n      ],\n    },\n    {\n      featureType: 'road',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#304a7d',\n        },\n      ],\n    },\n    {\n      featureType: 'road',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#98a5be',\n        },\n      ],\n    },\n    {\n      featureType: 'road',\n      elementType: 'labels.text.stroke',\n      stylers: [\n        {\n          color: '#1d2c4d',\n        },\n      ],\n    },\n    {\n      featureType: 'road.highway',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#2c6675',\n        },\n      ],\n    },\n    {\n      featureType: 'road.highway',\n      elementType: 'geometry.stroke',\n      stylers: [\n        {\n          color: '#255763',\n        },\n      ],\n    },\n    {\n      featureType: 'road.highway',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#b0d5ce',\n        },\n      ],\n    },\n    {\n      featureType: 'road.highway',\n      elementType: 'labels.text.stroke',\n      stylers: [\n        {\n          color: '#023e58',\n        },\n      ],\n    },\n    {\n      featureType: 'transit',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#98a5be',\n        },\n      ],\n    },\n    {\n      featureType: 'transit',\n      elementType: 'labels.text.stroke',\n      stylers: [\n        {\n          color: '#1d2c4d',\n        },\n      ],\n    },\n    {\n      featureType: 'transit.line',\n      elementType: 'geometry.fill',\n      stylers: [\n        {\n          color: '#283d6a',\n        },\n      ],\n    },\n    {\n      featureType: 'transit.station',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#3a4762',\n        },\n      ],\n    },\n    {\n      featureType: 'water',\n      elementType: 'geometry',\n      stylers: [\n        {\n          color: '#0e1626',\n        },\n      ],\n    },\n    {\n      featureType: 'water',\n      elementType: 'labels.text.fill',\n      stylers: [\n        {\n          color: '#4e6d70',\n        },\n      ],\n    },\n  ],\n};\n","export const ACCEPTED_IMAGE_FORMATS = [\n  'image/gif',\n  'image/png',\n  'image/jpeg',\n  'image/jpg',\n];\nexport const MARGIN_PROPERTIES = [\n  'margin',\n  'marginBottom',\n  'marginHorizontal',\n  'marginLeft',\n  'marginRight',\n  'marginTop',\n  'marginVertical',\n];\nexport const FLEX_PROPERTIES = [\n  'flexDirection',\n  'justifyContent',\n  'alignItems',\n  'alignSelf',\n  'flex',\n];\n\nexport const LAYOUT_PROPERTIES = [\n  'bottom',\n  'direction',\n  'fontSize',\n  'fontFamily',\n  'height',\n  'left',\n  'maxHeight',\n  'maxWidth',\n  'minHeight',\n  'minWidth',\n  'padding',\n  'paddingBottom',\n  'paddingHorizontal',\n  'paddingLeft',\n  'paddingRight',\n  'paddingTop',\n  'paddingVertical',\n  'position',\n  'right',\n  'rotation',\n  'width',\n  'top',\n  'transform',\n  'lineHeight',\n  'letterSpacing',\n  ...FLEX_PROPERTIES,\n  ...MARGIN_PROPERTIES,\n];\n\nexport const ROUNDABLE_LAYOUT_PROPERTIES = [\n  'bottom',\n  'fontSize',\n  'height',\n  'left',\n  'maxHeight',\n  'maxWidth',\n  'minHeight',\n  'minWidth',\n  'padding',\n  'paddingBottom',\n  'paddingHorizontal',\n  'paddingLeft',\n  'paddingRight',\n  'paddingTop',\n  'paddingVertical',\n  'right',\n  'width',\n  'top',\n  ...MARGIN_PROPERTIES,\n];\n\nexport const ROUNDABLE_TO_TWO_DECIMALS_LAYOUT_PROPERTIES = ['flex'];\n\nexport const LAYOUT_PROPERTIES_RENDER_FILTER = [\n  'bottom',\n  'height',\n  'left',\n  'position',\n  'right',\n  'rotation',\n  'width',\n  'top',\n  'transform',\n  'flexDirection',\n  'justifyContent',\n  'alignItems',\n  'alignSelf',\n  'flex',\n  ...MARGIN_PROPERTIES,\n];\nexport const TAG_NAME_STYLE_NAME_MAPPING = {\n  View: 'rect',\n  Text: 'text',\n  TouchableOpacity: 'button',\n  Image: 'image',\n  Icon: 'icon',\n  TextInput: 'textInput',\n  ScrollView: 'scrollArea',\n  Slider: 'slider',\n  Switch: 'switch',\n  Picker: 'itemPicker',\n  ActivityIndicator: 'activityIndicator',\n  TabView: 'tab',\n  Swiper: 'carousel',\n  FlatList: 'list',\n  Ellipse: 'ellipse',\n  Group: 'group',\n};\nexport const DEBUG_POINTER_EVENTS = false;\nexport const RENDER_WIREFRAME = false;\nexport const START_STORYBOOK =\n  process.env.NODE_ENV === 'production' ? false : false; // Set this true to use testpad\nexport const ENABLE_EXTENSION_LOG = true;\n\nexport { MapStyles } from './MapStyle';\n","import { forEach, get, round } from 'lodash';\nimport { Config, ExtraParams, Context } from './types';\nimport {\n  MapStyles,\n  ROUNDABLE_LAYOUT_PROPERTIES,\n  ROUNDABLE_TO_TWO_DECIMALS_LAYOUT_PROPERTIES,\n} from './constants';\nimport { isTabViewSpecificStyleProp } from './utils';\nimport * as path from 'path';\n\ntype JSLiteralTypes =\n  | 'string'\n  | 'number'\n  | 'bigint'\n  | 'boolean'\n  | 'symbol'\n  | 'undefined'\n  | 'object'\n  | 'function'\n  | 'array';\n\nexport default abstract class LayerCodeGen {\n  //@ts-ignore\n  context: Context;\n  //@ts-ignore\n  config: Config;\n  abstract generate(json: any, extraParams: ExtraParams): string;\n\n  generateChildren = (layer: any, extraParams: ExtraParams) => {\n    let childrenCode = '';\n    layer.children.forEach((child: any) => {\n      if (\n        [\n          'expressionStatement',\n          'binaryExpression',\n          'expression',\n          'conditionalExpression',\n          'logicalExpression',\n        ].includes(child.type)\n      ) {\n        childrenCode += `{${this.context.baseCodeGen.generate(\n          child,\n          extraParams\n        )}\n      }`;\n      } else {\n        childrenCode += `${this.context.baseCodeGen.generate(\n          child,\n          extraParams\n        )}\n      `;\n      }\n    });\n\n    return childrenCode;\n  };\n\n  generateProps = (json: any, extraParams: ExtraParams) => {\n    let propsCode = '';\n    if (json.props) {\n      if (json.import.layerName === 'FlatList') {\n        json.props = { ...json.props, data: [{}, {}] };\n      }\n      forEach(json.props, (propValue: any, propName: string) => {\n        if (propName === 'onPress') {\n          if (typeof propValue === 'string') {\n            propsCode = `${propName}={${propValue.replace(/;/g, '')}}`;\n          } else {\n            // TODO: Handle conditional navigation\n            propsCode +=\n              '/* Conditional navigation not supported at the moment */';\n          }\n          // TODO: check for all callback props\n        } else if (\n          get(json, 'import.layerName') === 'FlatList' &&\n          propName === 'renderItem'\n        ) {\n          propsCode += `${propName}={({ item, separators }) => ${this.context.baseCodeGen.generate(\n            propValue,\n            extraParams\n          )}}`;\n        } else if (\n          get(json, 'import.layerName') === 'FlatList' &&\n          (propName === 'ListHeaderComponent' ||\n            propName === 'ListFooterComponent' ||\n            propName === 'ItemSeparatorComponent')\n        ) {\n          propsCode += `${propName}={() => ${this.context.baseCodeGen.generate(\n            propValue,\n            extraParams\n          )}}`;\n        } else if (\n          get(json, 'import.layerName') === 'Switch' &&\n          (propName === 'onTintColor' || propName === 'tintColor')\n        ) {\n          let onOffColorCode = '';\n\n          if (get(json, 'props.onTintColor')) {\n            onOffColorCode += `true: ${this.generateJSLiteralCode(\n              get(json, 'props.onTintColor'),\n              extraParams\n            )},`;\n          }\n          if (get(json, 'props.tintColor')) {\n            onOffColorCode += `false: ${this.generateJSLiteralCode(\n              get(json, 'props.tintColor'),\n              extraParams\n            )}`;\n          }\n\n          delete get(json, 'props', {}).onTintColor;\n          delete get(json, 'props', {}).tintColor;\n\n          if (onOffColorCode) {\n            propsCode += `trackColor={{${onOffColorCode}}}`;\n          }\n        } else if (\n          get(json, 'import.layerName') === 'Switch' &&\n          propName === 'thumbTintColor'\n        ) {\n          if (propValue) {\n            if (typeof propValue === 'string') {\n              propsCode += `thumbColor=${this.generateJSLiteralCode(\n                propValue,\n                extraParams\n              )}`;\n            } else {\n              propsCode += `thumbColor={${this.generateJSLiteralCode(\n                propValue,\n                extraParams\n              )}}`;\n            }\n          }\n        } else if (\n          get(json, 'import.layerName') === 'MapView' &&\n          propName === 'provider'\n        ) {\n          propsCode += `${propName}={${this.generateJSLiteralCode(\n            propValue,\n            extraParams,\n            true\n          )}}`;\n        } else if (propName === 'source') {\n          propsCode += this.generateSourcePropCode(\n            path.basename(propValue.uri)\n          );\n        } else if (\n          get(json, 'import.layerName') === 'MapView' &&\n          propName === 'customMapStyle'\n        ) {\n          propValue = MapStyles[propValue];\n          propsCode += `${propName}={${this.generateJSLiteralCode(\n            propValue,\n            extraParams\n          )}}`;\n        } else if (\n          get(json, 'import.layerName') === 'Icon' &&\n          propName === 'type'\n        ) {\n          // Do nothing and Skip\n        } else if (\n          !isTabViewSpecificStyleProp(propName) &&\n          propName !== 'style' &&\n          propName !== 'contentContainerStyle' &&\n          propName !== 'imageStyle'\n        ) {\n          if (typeof propValue === 'string') {\n            propsCode += `${propName}=${this.generateJSLiteralCode(\n              propValue,\n              extraParams\n            )}`;\n          } else {\n            const ellipseProps = ['cx', 'cy', 'rx', 'ry'];\n            if (ellipseProps.includes(propName)) {\n              propValue = round(propValue);\n            }\n            propsCode += `${propName}={${this.generateJSLiteralCode(\n              propValue,\n              extraParams\n            )}}`;\n          }\n        }\n      });\n    }\n\n    return propsCode;\n  };\n\n  generateSymbolOverrideProps(scopeVariables: any, extraParams: ExtraParams) {\n    let code = '';\n    forEach(scopeVariables, (value: any, key: string) => {\n      if (typeof value === 'string') {\n        code += `${key.replace('this.props.', '')}=${this.generateJSLiteralCode(\n          value,\n          extraParams\n        )}`;\n      } else {\n        code += `${key.replace(\n          'this.props.',\n          ''\n        )}={${this.generateJSLiteralCode(value, extraParams)}}`;\n      }\n    });\n    return code;\n  }\n  generateStyle = (\n    json: any,\n    extraParams: ExtraParams,\n    stylePropName: string = 'style'\n  ) => {\n    if (get(json, 'import.layerName') === 'Picker.Item') {\n      return '';\n    }\n\n    const style = get(json, `props.${stylePropName}`, {});\n\n    // if (stylePropName === \"imageStyle\" && Object.keys(style).length === 0) {\n    //   return \"\";\n    // }\n    // if (\n    //   json.type === \"root\" &&\n    //   this.context.filePath.indexOf(\"symbols\") !== -1\n    // ) {\n    //   delete json.props.style.flex;\n    // }\n    // if (json.type === \"text\") {\n    //   json.props.style.fontFamily\n    //     ? json.props.style.fontFamily\n    //     : delete json.props.style.fontFamily;\n    // }\n    const conditionalStyles: { [key: string]: string } = {};\n    forEach(style, (styleValue: any, styleProperty: any) => {\n      if (\n        styleValue &&\n        [\n          'expressionStatement',\n          'binaryExpression',\n          'expression',\n          'conditionalExpression',\n          'logicalExpression',\n        ].includes(styleValue.type)\n      ) {\n        conditionalStyles[styleProperty] = this.context.baseCodeGen.generate(\n          styleValue,\n          extraParams\n        );\n\n        delete this.context.styles[json.styleName][styleProperty];\n      }\n    });\n\n    if (Object.keys(conditionalStyles).length !== 0) {\n      let conditionalStyleObjCode = '';\n      forEach(\n        conditionalStyles,\n        (code, styleProperty) =>\n          (conditionalStyleObjCode += `${styleProperty}: ${code},`)\n      );\n      return `${stylePropName}={[\n        styles.${json.styleName}${\n        stylePropName !== 'style' ? '_' + stylePropName : ''\n      },\n        {\n          ${conditionalStyleObjCode}\n        }\n      ]}`;\n    }\n    if (\n      json.type === 'root' &&\n      (this.context.filePath.indexOf('symbols') !== -1 ||\n        this.context.filePath.indexOf('components') !== -1)\n    ) {\n      return `${stylePropName}={[styles.${json.styleName},props.style]${\n        stylePropName !== 'style' ? '_' + stylePropName : ''\n      }}`;\n    }\n    return `${stylePropName}={styles.${json.styleName}${\n      stylePropName !== 'style' ? '_' + stylePropName : ''\n    }}`;\n  };\n\n  generateSourcePropCode(imageName: string, category?: string) {\n    const assetsRelativePath = this.config.isPreviewFile\n      ? './assets/images/'\n      : '../assets/images/';\n    if (category === 'svgImage') {\n      return `${assetsRelativePath}${imageName}`;\n    }\n    return `source={require(\"${assetsRelativePath}${imageName}\")}`;\n  }\n\n  generateJSLiteralCode = (\n    literal: any,\n    extraParams: ExtraParams,\n    jsExpression: boolean = false\n  ) => {\n    let code = '';\n\n    let literalType: JSLiteralTypes = typeof literal;\n\n    if (literal === null) {\n      literalType = literal; // Handle null literal, otherwise it takes type object\n    }\n    if (Array.isArray(literal)) {\n      literalType = 'array';\n    }\n\n    switch (literalType) {\n      case 'object':\n        // TODO:if is not handelled\n        if (\n          [\n            'expressionStatement',\n            'binaryExpression',\n            'expression',\n            'conditionalExpression',\n            'logicalExpression',\n          ].includes(literal.type)\n        ) {\n          code = this.context.baseCodeGen.generate(literal, extraParams);\n        } else {\n          code = `${this.generateJSObjectCode(literal, extraParams)}`;\n        }\n        break;\n      case 'array':\n        code = `${this.generateJSArrayCode(literal, extraParams)}`;\n        break;\n      case 'boolean':\n        code = `${literal}`;\n        break;\n      case 'number':\n        code = String(literal); // TODO: consider setValueinInt\n        break;\n      case 'string':\n      default:\n        if (jsExpression) {\n          code = `${literal}`;\n        } else {\n          code = `\"${literal}\"`;\n        }\n    }\n    return code;\n  };\n\n  generateJSObjectCode = (obj: any, extraParams: ExtraParams) => {\n    let code = '';\n    if (obj.hasOwnProperty('display') && obj['display'] === 'none') {\n      let { height, width, display, opacity, ...restObj } = obj;\n      obj = { ...restObj, height: 0, width: 0, opacity: 0 };\n    }\n    forEach(obj, (value, key) => {\n      if (value !== undefined) {\n        if (ROUNDABLE_LAYOUT_PROPERTIES.includes(key)) {\n          if (typeof value === 'number') {\n            value = Math.round(value);\n          } else if (typeof value === 'string' && value.includes('%')) {\n            // For percentage values\n            let numValue = parseFloat(value.replace('%', ''));\n            numValue = Math.round(numValue * 100) / 100;\n            value = numValue + '%';\n          }\n        } else if (ROUNDABLE_TO_TWO_DECIMALS_LAYOUT_PROPERTIES.includes(key)) {\n          if (typeof value === 'number') {\n            value = Math.round(value * 100) / 100;\n          }\n        }\n\n        code += `${key}: ${this.generateJSLiteralCode(value, extraParams)},\n        `;\n      }\n    });\n\n    return `{\n      ${code}\n    }`;\n  };\n\n  generateJSArrayCode = (obj: any, extraParams: ExtraParams) => {\n    let code = '';\n    obj.forEach((value: any) => {\n      code += `${this.generateJSLiteralCode(value, extraParams)},\n      `;\n    });\n\n    return `[\n      ${code}\n    ]`;\n  };\n}\n","import { Context, ExtraParams } from '../types';\nimport { addImportToContext, getFilteredImageStyle } from '../utils';\nimport LayerCodeGen from '../LayerCodeGen';\nimport { get } from 'lodash';\n\nexport default class ViewCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    const newParams = { ...extraParams, parent: json };\n    this.context.styles[json.styleName] = json.props.style;\n    addImportToContext(this.context, json);\n\n    let layerStylePropCode = this.generateStyle(json, newParams);\n\n    if (json.props.style.gradient) {\n      const gradient = json.props.style.gradient;\n      delete json.props.style.gradient;\n      json.props.imageStyle = getFilteredImageStyle(json.props.style);\n      this.context.styles[`${json.styleName}_imageStyle`] =\n        json.props.imageStyle;\n\n      layerStylePropCode += ` ${this.generateStyle(\n        json,\n        { ...extraParams, parent: json },\n        'imageStyle'\n      )}`;\n\n      addImportToContext(this.context, {\n        import: {\n          isDefaultImport: false,\n          layerName: 'ImageBackground',\n          packageName: 'react-native',\n        },\n      });\n      delete json.props.style['backgroundImage'];\n      const width = get(json, 'props.style.width');\n      const height = get(json, 'props.style.height');\n\n      const gradientImage = json.props.gradientImage;\n      delete json.props.gradientImage;\n\n      if (\n        (height && typeof height === 'string' && height.includes('%')) ||\n        (width && typeof width === 'string' && width.includes('%'))\n      ) {\n        return `<View style={[${this.generateJSLiteralCode(\n          json.props.style,\n          newParams\n        )}, {overflow:\"hidden\"}]} >\n          <ImageBackground ${this.generateProps(\n            json,\n            newParams\n          )} style={{width: \"100%\", height: \"100%\"}} ${this.generateStyle(\n          json,\n          { ...extraParams, parent: json },\n          'imageStyle'\n        )} ${this.generateSourcePropCode(\n          gradientImage\n        )}>${this.generateChildren(json, newParams)}</ImageBackground>\n        </View>`;\n      }\n      return `<ImageBackground ${this.generateProps(\n        json,\n        newParams\n      )}  ${layerStylePropCode} ${this.generateSourcePropCode(\n        gradientImage\n      )}>${this.generateChildren(json, newParams)}</ImageBackground>`;\n    } else {\n      return `<View ${this.generateProps(\n        json,\n        newParams\n      )} ${layerStylePropCode}>\n      ${this.generateChildren(json, newParams)}\n      </View>`;\n    }\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport { forEach } from 'lodash';\nimport LayerCodeGen from '../LayerCodeGen';\nimport { getIconCount, isButtonLayer } from '../utils';\nexport default class FileCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generateStyleNames(extraParams: ExtraParams) {\n    return this.generateJSLiteralCode(this.context.styles as any, extraParams);\n  }\n  generateConditionalVariables() {\n    let conditionalVariables = '';\n    for (let i = 0; i < this.context.conditionals.length; i++) {\n      conditionalVariables += `let ${this.context.conditionals[i]}=true;`;\n    }\n    return conditionalVariables;\n  }\n  generateImports() {\n    let importsCode = '';\n    forEach(this.context.imports, (importObj, packageName) => {\n      let defaultImportCode = '';\n      if (importObj.default) {\n        defaultImportCode =\n          importObj.named.length > 0\n            ? `${importObj.default},`\n            : importObj.default;\n      }\n\n      let namedImportsCode = '';\n\n      forEach(importObj.named, (layerName: any, index) => {\n        if (index === 0) {\n          namedImportsCode += '{ ';\n        }\n\n        if (typeof layerName === 'object') {\n          if (\n            layerName.hasOwnProperty('name') &&\n            layerName.hasOwnProperty('asName')\n          ) {\n            namedImportsCode += `${layerName.name} as ${layerName.asName},`;\n          }\n        } else {\n          namedImportsCode += `${layerName}, `;\n        }\n        if (index === importObj.named.length - 1) {\n          namedImportsCode += '}';\n        }\n      });\n\n      if (importObj.named.length > 0 || importObj.default) {\n        importsCode += `import ${defaultImportCode} ${namedImportsCode} from \"${packageName}\";\n        `;\n      }\n    });\n\n    return importsCode;\n  }\n  isNavigatingButton = (json: any) => {\n    let hasButtonLayer = false;\n    json.layer.children.forEach((child: any): any => {\n      if (isButtonLayer(child)) {\n        hasButtonLayer = true;\n      }\n    });\n    return hasButtonLayer;\n  };\n  isFileComponent = () => {\n    if (\n      this.context.filePath.indexOf('component') !== -1 ||\n      this.context.filePath.indexOf('symbol') !== -1\n    ) {\n      return true;\n    }\n    return false;\n  };\n  includeProps = (json: any) => {\n    return this.isFileComponent() || this.isNavigatingButton(json);\n  };\n  generate(json: any, extraParams: ExtraParams): string {\n    let className = json.path;\n    className = className.substring(\n      className.lastIndexOf('/') + 1,\n      className.lastIndexOf('.')\n    );\n    this.context.filePath = json.path;\n    const layersCode = this.context.baseCodeGen.generate(json.layer, {\n      ...extraParams,\n      parent: json,\n    });\n\n    return `${this.generateImports()}\n      ${this.generateConditionalVariables()}\n    function ${className}(props) {\n        return ${layersCode};\n    }\n\n    const styles = StyleSheet.create(${this.generateStyleNames(extraParams)});\n\n    export default ${className}`;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport LayerCodeGen from '../LayerCodeGen';\nimport { get, replace } from 'lodash';\nimport { escapeTextForJSX } from './../utils';\nexport default class LiteralCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    if (get(json, 'value.type', '') === 'unknown') {\n      return 'null';\n    } else if (json.value && json.value.type) {\n      return this.context.baseCodeGen.generate(json.value, extraParams);\n    }\n\n    if (typeof json.value === 'string') {\n      if (extraParams && !extraParams.textLiteral) {\n        json.value = escapeTextForJSX(json.value);\n      } else {\n        const newLine = '\\\\' + 'n';\n        json.value = replace(json.value, new RegExp('\\n', 'g'), newLine);\n        const tab = '\\\\' + 't';\n        json.value = replace(json.value, new RegExp('\\t', 'g'), tab);\n      }\n\n      // Only replace opening curly braces `{` with `{\"{\"} and `\n      if (extraParams && !extraParams.textLiteral) {\n        json.value = json.value.replace(/(\\{+)([^\"])/g, `{\"$1\"}$2`);\n      }\n\n      return this.generateJSLiteralCode(\n        json.value,\n        extraParams,\n        extraParams && typeof extraParams.textLiteral === 'boolean'\n          ? !extraParams.textLiteral\n          : false\n      );\n    } else {\n      // const errorMessage = `json.value should be string but received ${JSON.stringify(\n      //   json.value\n      // )} for ${this.context.filePath}`;\n      // console.error(errorMessage);\n      // this.context.baseCodeGen.ipc.executeCommand(\"captureErrorForSentry\", [\n      //   new Error(errorMessage)\n      // ]);\n      // if (json.value.toString) {\n      //   json.value = json.value.toString();\n      // } else {\n      //   const errorMessage2 = `json.value should be string but received ${JSON.stringify(\n      //     json.value\n      //   )} for ${this.context.filePath}`;\n      //   console.error(errorMessage2);\n      //   this.context.baseCodeGen.ipc.executeCommand(\"captureErrorForSentry\", [\n      //     new Error(errorMessage2)\n      //   ]);\n      //   json.value = \"\";\n      // }\n\n      return this.generateJSLiteralCode(json.value, extraParams, true);\n    }\n\n    // return json.value;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport { addImportToContext } from '../utils';\nimport LayerCodeGen from '../LayerCodeGen';\n\nexport default class TextCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    delete json.props.style.fontWeight;\n    delete json.props.style.fontStyle;\n    json.props.style.fontFamily = json.props.style.fontPostscriptName;\n    delete json.props.style.fontPostscriptName;\n    this.context.styles[json.styleName] = json.props.style;\n    addImportToContext(this.context, json);\n\n    return `<Text ${this.generateProps(json, {\n      ...extraParams,\n      parent: json,\n    })} ${this.generateStyle(json, { ...extraParams, parent: json })}>\n      ${this.generateChildren(json, {\n        ...extraParams,\n        parent: json,\n        textLiteral: false,\n      })}\n    </Text>`;\n  }\n}\n","import { Point, Coordinate } from './types';\n\nfunction getManipulatedPath(layer: any, paperPath: any) {\n  // TODO: keep this order, otherwise malfunctions\n  // adds roatation\n  if (layer.rotation) {\n    paperPath.rotate(-layer.rotation);\n  }\n  // checks for flip\n  if (layer.isFlippedHorizontal || layer.isFlippedVertical) {\n    paperPath.scale(\n      layer.isFlippedHorizontal ? -1 : 1,\n      layer.isFlippedVertical ? -1 : 1\n    );\n  }\n  paperPath.closed = layer.isClosed;\n  return paperPath;\n}\n\nfunction convertPointsArrayBool(\n  points: any,\n  frame: any,\n  referenceFrame: any,\n  scalingFactor: number\n) {\n  let newPoints = [];\n  if (points && points.length > 0) {\n    let pointsApplied =\n      points[0].point !== points[points.length - 1].point\n        ? points\n        : getValidPoints(points);\n    for (let i = 0; i < pointsApplied.length; i++) {\n      let tempPoint: any = {};\n      tempPoint.cornerRadius = pointsApplied[i].cornerRadius;\n      tempPoint.curveMode = pointsApplied[i].curveMode;\n      tempPoint.hasCurveTo = pointsApplied[i].hasCurveTo;\n      tempPoint.hasCurveFrom = pointsApplied[i].hasCurveFrom;\n      tempPoint.curveFrom = convertPointBool(\n        pointsApplied[i].curveFrom,\n        frame,\n        referenceFrame,\n        scalingFactor\n      );\n      tempPoint.curveTo = convertPointBool(\n        pointsApplied[i].curveTo,\n        frame,\n        referenceFrame,\n        scalingFactor\n      );\n      tempPoint.point = convertPointBool(\n        pointsApplied[i].point,\n        frame,\n        referenceFrame,\n        scalingFactor\n      );\n      newPoints.push(tempPoint);\n    }\n  }\n  return newPoints;\n}\n\nfunction convertPointBool(\n  point: any,\n  frame: any,\n  referenceFrame: any,\n  scalingFactor: any\n) {\n  let tempP1 = point.split(',');\n  let px = tempP1[0].slice(1);\n  let py = tempP1[1].slice(0, -1);\n  px = (px * frame.width + frame.x) * scalingFactor;\n  py = (py * frame.height + frame.y) * scalingFactor;\n\n  return {\n    x: parseFloat(px.toFixed(4)),\n    y: parseFloat(py.toFixed(4)),\n  };\n}\n\n// function to convert Sketch points json to Bx json\nexport function convertPointsArray(\n  points: any,\n  frame: any,\n  referenceFrame: any,\n  maskingDisplacement: any,\n  scalingFactor: number\n) {\n  let newPoints = [];\n  if (points && points.length > 0) {\n    for (let i = 0; i < points.length; i++) {\n      let tempPoint: any = {};\n      tempPoint.cornerRadius = points[i].cornerRadius;\n      tempPoint.curveMode = points[i].curveMode;\n      tempPoint.hasCurveTo = points[i].hasCurveTo;\n      tempPoint.hasCurveFrom = points[i].hasCurveFrom;\n      tempPoint.curveFrom = convertPoint(\n        points[i].curveFrom,\n        frame,\n        referenceFrame,\n        maskingDisplacement,\n        scalingFactor\n      );\n      tempPoint.curveTo = convertPoint(\n        points[i].curveTo,\n        frame,\n        referenceFrame,\n        maskingDisplacement,\n        scalingFactor\n      );\n      tempPoint.point = convertPoint(\n        points[i].point,\n        frame,\n        referenceFrame,\n        maskingDisplacement,\n        scalingFactor\n      );\n      newPoints.push(tempPoint);\n    }\n  }\n  return newPoints;\n}\n\nfunction convertPoint(\n  point: any,\n  frame: any,\n  referenceFrame: any,\n  maskingDisplacement: any,\n  scalingFactor: number\n) {\n  let tempP1 = point.split(',');\n  let px = tempP1[0].slice(1);\n  let py = tempP1[1].slice(0, -1);\n  px =\n    ((px * frame.width + maskingDisplacement.x) * frame.width * scalingFactor) /\n    referenceFrame.width;\n  py =\n    ((py * frame.height + maskingDisplacement.y) *\n      frame.height *\n      scalingFactor) /\n    referenceFrame.height;\n\n  return {\n    x: parseFloat(px.toFixed(4)),\n    y: parseFloat(py.toFixed(4)),\n  };\n}\n\nfunction getValidPoints(points: any) {\n  let newPoints = points.slice(1, points.length - 1);\n  let obj = {\n    _class: 'curvePoint',\n    cornerRadius: points[0].cornerRadius,\n    curveMode: points[0].curveMode,\n    curveTo: points[0].hasCurveTo\n      ? points[0].curveTo\n      : points[points.length - 1].curveTo,\n    curveFrom: points[0].hasCurveFrom\n      ? points[0].curveFrom\n      : points[points.length - 1].curveFrom,\n    hasCurveFrom: points[0].hasCurveFrom\n      ? true\n      : points[points.length - 1].hasCurveFrom,\n    hasCurveTo: points[0].hasCurveTo\n      ? true\n      : points[points.length - 1].hasCurveTo,\n    point: points[0].point,\n  };\n  newPoints.unshift(obj);\n  return newPoints;\n}\n\nexport function getRadiusAdjustment(\n  pointsArray: Array<Point>,\n  currentIndex: number,\n  nextIndex: number,\n  maxRadius: number\n): Coordinate {\n  if (!pointsArray[currentIndex] || !pointsArray[nextIndex]) {\n    return { x: 0, y: 0 };\n  }\n  const radius =\n    maxRadius > pointsArray[currentIndex].cornerRadius\n      ? pointsArray[currentIndex].cornerRadius\n      : maxRadius;\n  const x0 = pointsArray[currentIndex].point.x;\n  const y0 = pointsArray[currentIndex].point.y;\n  const x1 = pointsArray[nextIndex].point.x;\n  const y1 = pointsArray[nextIndex].point.y;\n  if (x1 === x0 && y1 === y0) {\n    return { x: 0, y: 0 };\n  } else if (x1 === x0) {\n    return {\n      x: 0,\n      y: y1 > y0 ? radius : -radius,\n    };\n  } else {\n    let angle: any = Math.atan2(y1 - y0, x1 - x0);\n    return {\n      x: Math.cos(angle) * radius,\n      y: Math.sin(angle) * radius,\n    };\n  }\n}\n","import { Point, Coordinate } from './types';\nimport { getRadiusAdjustment } from './pathUtils';\nexport default function generateSVGPath(\n  pointsArray: Array<Point>,\n  strokeWidthOffset: number,\n  isClosed: boolean,\n  viewBox: string\n) {\n  let generatedPath = '';\n  if (!pointsArray) {\n    return '';\n  }\n  const dims: Array<any> =\n    viewBox && viewBox.split ? viewBox.split(' ') : [0, 0, 100, 100];\n  const maxRadius = Math.min(dims[2] - dims[0], dims[3] - dims[1]) / 2;\n  strokeWidthOffset = strokeWidthOffset <= 1 ? 0 : strokeWidthOffset / 2;\n  let initialIndex = 0; // Maintains track of each shape start after combining\n  let d1: Coordinate = { x: 0, y: 0 }; // Distance with radius\n  for (let i = 0; i < pointsArray.length; i++) {\n    if (i === initialIndex) {\n      // Moving to initial points with \"M\"\n      let xy0 = pointsArray[i].point;\n      if (pointsArray[i].cornerRadius) {\n        d1 = getRadiusAdjustment(pointsArray, i, i + 1, maxRadius);\n      }\n      let x0 = (strokeWidthOffset + xy0.x + d1.x).toFixed(2);\n      let y0 = (strokeWidthOffset + xy0.y + d1.y).toFixed(2);\n      generatedPath += 'M' + x0 + ' ' + y0 + ' ';\n      generatedPath += getNextPathPoint(\n        pointsArray,\n        i,\n        strokeWidthOffset,\n        initialIndex,\n        maxRadius\n      );\n    } else if (isFillerCondition(pointsArray[i])) {\n      initialIndex = i + 1;\n      if (i !== pointsArray.length - 1 && isFillerClosed(pointsArray[i])) {\n        generatedPath += 'Z ';\n      }\n    } else if (\n      i === pointsArray.length - 1 ||\n      (i !== pointsArray.length - 1 && isFillerCondition(pointsArray[i + 1]))\n    ) {\n      // adding additional point in the end of string\n      if (\n        isClosed &&\n        pointsArray[i].point.x !== pointsArray[initialIndex].point.x &&\n        pointsArray[i].point.y !== pointsArray[initialIndex].point.y\n      ) {\n        let pointTo = pointsArray[initialIndex].point;\n        let radiusPoint;\n        if (pointsArray[i].cornerRadius) {\n          d1 = getRadiusAdjustment(pointsArray, i, initialIndex, maxRadius);\n          const passedPointIndex = pointsArray[initialIndex + 1]\n            ? initialIndex + 1\n            : initialIndex;\n          let d2 = getRadiusAdjustment(\n            pointsArray,\n            initialIndex,\n            passedPointIndex,\n            maxRadius\n          );\n          let px0 = (strokeWidthOffset + pointTo.x + d2.x).toFixed(2);\n          let py0 = (strokeWidthOffset + pointTo.y + d2.y).toFixed(2);\n          let curveFromX0 = (strokeWidthOffset + pointTo.x - d1.x / 2).toFixed(\n            2\n          );\n          let curveFromY0 = (strokeWidthOffset + pointTo.y - d1.y / 2).toFixed(\n            2\n          );\n          let curveToX0 = (strokeWidthOffset + pointTo.x + d2.x / 2).toFixed(2);\n          let curveToY0 = (strokeWidthOffset + pointTo.y + d2.y / 2).toFixed(2);\n          radiusPoint =\n            'C' +\n            curveFromX0 +\n            ' ' +\n            curveFromY0 +\n            ' ' +\n            curveToX0 +\n            ' ' +\n            curveToY0 +\n            ' ' +\n            px0 +\n            ' ' +\n            py0 +\n            ' ';\n        }\n        let px = (strokeWidthOffset + pointTo.x - d1.x).toFixed(2);\n        let py = (strokeWidthOffset + pointTo.y - d1.y).toFixed(2);\n        let curveFromPoint = pointsArray[i].curveFrom;\n        let curveFromX = (strokeWidthOffset + curveFromPoint.x).toFixed(2);\n        let curveFromY = (strokeWidthOffset + curveFromPoint.y).toFixed(2);\n        let curveTo = pointsArray[initialIndex].curveTo;\n        let curveToX = (strokeWidthOffset + curveTo.x).toFixed(2);\n        let curveToY = (strokeWidthOffset + curveTo.y).toFixed(2);\n        if (\n          (pointsArray[initialIndex] && pointsArray[initialIndex].hasCurveTo) ||\n          pointsArray[i].hasCurveFrom\n        ) {\n          generatedPath +=\n            'C' +\n            curveFromX +\n            ' ' +\n            curveFromY +\n            ' ' +\n            curveToX +\n            ' ' +\n            curveToY +\n            ' ' +\n            px +\n            ' ' +\n            py +\n            ' ' +\n            (radiusPoint || '');\n        } else {\n          generatedPath += 'L' + px + ' ' + py + ' ' + (radiusPoint || '');\n        }\n      }\n    } else {\n      generatedPath += getNextPathPoint(\n        pointsArray,\n        i,\n        strokeWidthOffset,\n        initialIndex,\n        maxRadius\n      );\n    }\n  }\n  if (isClosed) {\n    generatedPath += 'Z';\n  }\n  // console.log(\"*** generatedPath\", generatedPath);\n  return generatedPath;\n}\n\nfunction getNextPathPoint(\n  pointsArray: Array<Point>,\n  i: number,\n  strokeWidthOffset: number,\n  initialIndex: number,\n  maxRadius: number\n) {\n  if (i + 1 >= pointsArray.length) {\n    return '';\n  }\n  let nextPoint = '';\n  let pointTo = pointsArray[i + 1].point;\n  let d1: Coordinate = { x: 0, y: 0 };\n  let radiusPoint;\n  if (pointsArray[i].cornerRadius) {\n    d1 = getRadiusAdjustment(pointsArray, i, i + 1, maxRadius);\n    const passedPointIndex = pointsArray[i + 2] ? i + 2 : initialIndex;\n    const d2 = getRadiusAdjustment(\n      pointsArray,\n      i + 1,\n      passedPointIndex,\n      maxRadius\n    );\n    let px0 = (strokeWidthOffset + pointTo.x + d2.x).toFixed(2);\n    let py0 = (strokeWidthOffset + pointTo.y + d2.y).toFixed(2);\n    let curveFromX0 = (strokeWidthOffset + pointTo.x - d1.x / 2).toFixed(2);\n    let curveFromY0 = (strokeWidthOffset + pointTo.y - d1.y / 2).toFixed(2);\n    let curveToX0 = (strokeWidthOffset + pointTo.x + d2.x / 2).toFixed(2);\n    let curveToY0 = (strokeWidthOffset + pointTo.y + d2.y / 2).toFixed(2);\n    radiusPoint =\n      'C' +\n      curveFromX0 +\n      ' ' +\n      curveFromY0 +\n      ' ' +\n      curveToX0 +\n      ' ' +\n      curveToY0 +\n      ' ' +\n      px0 +\n      ' ' +\n      py0 +\n      ' ';\n  }\n  let px = (strokeWidthOffset + pointTo.x - d1.x).toFixed(2);\n  let py = (strokeWidthOffset + pointTo.y - d1.y).toFixed(2);\n\n  let curveFromPoint = pointsArray[i].curveFrom;\n  let curveFromX = (strokeWidthOffset + curveFromPoint.x).toFixed(2);\n  let curveFromY = (strokeWidthOffset + curveFromPoint.y).toFixed(2);\n\n  let curveTo = pointsArray[i + 1].curveTo;\n  let curveToX = (strokeWidthOffset + curveTo.x).toFixed(2);\n  let curveToY = (strokeWidthOffset + curveTo.y).toFixed(2);\n  if (\n    (pointsArray[i + 1] && pointsArray[i + 1].hasCurveTo) ||\n    pointsArray[i].hasCurveFrom\n  ) {\n    nextPoint +=\n      'C' +\n      curveFromX +\n      ' ' +\n      curveFromY +\n      ' ' +\n      curveToX +\n      ' ' +\n      curveToY +\n      ' ' +\n      px +\n      ' ' +\n      py +\n      ' ' +\n      (radiusPoint || '');\n  } else {\n    nextPoint += 'L' + px + ' ' + py + ' ' + (radiusPoint || '');\n  }\n  return nextPoint;\n}\n\nfunction isFillerCondition(point: any): boolean {\n  return (\n    (point.cornerRadius === 777 && point.curveMode === 777) ||\n    (point.cornerRadius === 776 && point.curveMode === 776)\n  );\n}\nfunction isFillerClosed(point: any): boolean {\n  return point.cornerRadius === 776 && point.curveMode === 776;\n}\n","import { Context, ExtraParams } from '../types';\nimport {\n  addImportToContext,\n  getFilteredImageStyle,\n  getRandomString,\n} from '../utils';\nimport LayerCodeGen from '../LayerCodeGen';\nimport { generateSVGPath } from '../../conversions';\nimport { get, forEach } from 'lodash';\nimport * as path from 'path';\nexport default class ImageCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n  generateDefs(json: any, maskId: string) {\n    let defsCode = '';\n    let maskCode = '';\n    let maskPathCode = `<Path fill=\"white\" d={\"${generateSVGPath(\n      json.props.mask,\n      0,\n      true,\n      json.props.viewBox\n    )}\"}/>`;\n    // const viewBox = json.props.viewBox.split(\" \");\n    maskCode = `<Mask id=\"${maskId}\" x={0} y={0}>\n      ${maskPathCode}\n      </Mask>`;\n\n    if (maskCode) {\n      defsCode = `<Defs>\n    ${maskCode}\n    </Defs>`;\n    }\n    return defsCode;\n  }\n  generate(json: any, extraParams: ExtraParams): string {\n    addImportToContext(this.context, json);\n    this.context.styles[json.styleName] = json.props.style;\n    if (json.props.mask) {\n      addImportToContext(this.context, {\n        import: {\n          isDefaultImport: false,\n          layerName: 'Defs',\n          packageName: 'react-native-svg',\n        },\n      });\n      addImportToContext(this.context, {\n        import: {\n          isDefaultImport: false,\n          layerName: 'Svg',\n          packageName: 'react-native-svg',\n        },\n      });\n      addImportToContext(this.context, {\n        import: {\n          isDefaultImport: false,\n          layerName: 'Path',\n          packageName: 'react-native-svg',\n        },\n      });\n      addImportToContext(this.context, {\n        import: {\n          isDefaultImport: false,\n          layerName: 'Mask',\n          packageName: 'react-native-svg',\n        },\n      });\n      const { viewBox, style } = json.props;\n      const svgJson = { ...json, props: { viewBox, style } };\n      const maskId = getRandomString();\n      return `<Svg ${this.generateProps(svgJson, {\n        ...extraParams,\n        parent: json,\n      })} ${this.generateStyle(json, { ...extraParams, parent: json })}>\n      ${this.generateDefs(json, maskId)}\n      <SvgImage href={require(\"${this.generateSourcePropCode(\n        path.basename(json.props.source.uri),\n        'svgImage'\n      )}\")} x={${json.props.svgDims.x}} y={${json.props.svgDims.y}} width={${\n        json.props.svgDims.width\n      }} height={${json.props.svgDims.height}} mask={\"url(#${maskId})\"}>\n      ${this.generateChildren(json, { ...extraParams, parent: json })}\n      </SvgImage>\n      </Svg>`;\n    }\n\n    let layerStylePropCode = this.generateStyle(json, {\n      ...extraParams,\n      parent: json,\n    });\n\n    let tagName = 'Image';\n    if (json.children.length !== 0) {\n      json.props.imageStyle = getFilteredImageStyle(json.props.style);\n      this.context.styles[`${json.styleName}_imageStyle`] =\n        json.props.imageStyle;\n      tagName = 'ImageBackground';\n      addImportToContext(this.context, {\n        import: {\n          isDefaultImport: false,\n          layerName: 'ImageBackground',\n          packageName: 'react-native',\n        },\n      });\n\n      layerStylePropCode += ` ${this.generateStyle(\n        json,\n        { ...extraParams, parent: json },\n        'imageStyle'\n      )}`;\n    }\n\n    return `<${tagName} ${this.generateProps(json, {\n      ...extraParams,\n      parent: json,\n    })} ${layerStylePropCode}>\n      ${this.generateChildren(json, { ...extraParams, parent: json })}\n    </${tagName}>`;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport { addImportToContext } from '../utils';\nimport LayerCodeGen from '../LayerCodeGen';\n\nexport default class EllipseCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    json.props.viewBox = json.props.viewBox\n      .split(' ')\n      .map((v: string) => Math.round(parseFloat(v) * 100) / 100)\n      .join(' ');\n    this.context.styles[json.styleName] = json.props.style;\n    addImportToContext(this.context, json);\n    addImportToContext(this.context, {\n      import: {\n        isDefaultImport: true,\n        layerName: 'Svg',\n        packageName: 'react-native-svg',\n      },\n    });\n\n    const { viewBox, style, ...ellipseProps } = json.props;\n\n    const ellipseJson = { ...json, props: ellipseProps };\n    const svgJson = { ...json, props: { viewBox, style } };\n    return `<Svg ${this.generateProps(svgJson, {\n      ...extraParams,\n      parent: json,\n    })} ${this.generateStyle(json, { ...extraParams, parent: json })}>\n    <Ellipse ${this.generateProps(ellipseJson, {\n      ...extraParams,\n      parent: json,\n    })}>\n      ${this.generateChildren(json, { ...extraParams, parent: json })}\n    </Ellipse>\n    </Svg>`;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport { addImportToContext } from '../utils';\nimport LayerCodeGen from '../LayerCodeGen';\nimport { forEach } from 'lodash';\n\nexport const LAYOUT_PROPERTIES_AFFECTING_CHILDREN = [\n  'alignContent',\n  'alignItems',\n  'direction',\n  'flexDirection',\n  'flexWrap',\n  'justifyContent',\n  'overflow',\n  'padding',\n  'paddingBottom',\n  'paddingEnd',\n  'paddingHorizontal',\n  'paddingLeft',\n  'paddingRight',\n  'paddingStart',\n  'paddingTop',\n  'paddingVertical',\n];\n\nfunction getScrollViewContentContainerStyle(layer: any) {\n  const scrollViewContentContainerStyle: any = {};\n\n  if (layer.props.horizontal) {\n    const totalWidth = getTotalWidthForScrollView(layer);\n\n    scrollViewContentContainerStyle.width = totalWidth;\n    scrollViewContentContainerStyle.height = layer.props.style.height;\n  } else {\n    const totalHeight = getTotalHeightForScrollView(layer);\n\n    scrollViewContentContainerStyle.height = totalHeight;\n    scrollViewContentContainerStyle.width = layer.props.style.width;\n  }\n\n  forEach(layer.props.style, (value, key) => {\n    if (LAYOUT_PROPERTIES_AFFECTING_CHILDREN.includes(key)) {\n      scrollViewContentContainerStyle[key] = value;\n      delete layer.props.style[key];\n    }\n  });\n\n  return scrollViewContentContainerStyle;\n}\n\nfunction getTotalHeightForScrollView(layer: any): number {\n  let totalMaxHeight = 0;\n\n  forEach(layer.children, compiledChild => {\n    const childBoundingClientRect = compiledChild.rcDims;\n    if (\n      childBoundingClientRect.height + childBoundingClientRect.y >\n      totalMaxHeight\n    ) {\n      totalMaxHeight =\n        childBoundingClientRect.height + childBoundingClientRect.y;\n    }\n  });\n\n  const layerBoundingClientRect = layer.rcDims;\n  if (layerBoundingClientRect.height > totalMaxHeight) {\n    totalMaxHeight = layerBoundingClientRect.height;\n  } else {\n    totalMaxHeight = totalMaxHeight;\n  }\n\n  return totalMaxHeight;\n}\n\nfunction getTotalWidthForScrollView(layer: any): number {\n  let totalMaxWidth = 0;\n\n  forEach(layer.children, compiledChild => {\n    const childBoundingClientRect = compiledChild.rcDims;\n    if (\n      childBoundingClientRect.width + childBoundingClientRect.x >\n      totalMaxWidth\n    ) {\n      totalMaxWidth = childBoundingClientRect.width + childBoundingClientRect.x;\n    }\n  });\n\n  const layerBoundingClientRect = layer.rcDims;\n  if (layerBoundingClientRect.width > totalMaxWidth) {\n    totalMaxWidth = layerBoundingClientRect.width;\n  } else {\n    totalMaxWidth = totalMaxWidth;\n  }\n\n  return totalMaxWidth;\n}\n\nexport default class ScrollViewCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    this.context.styles[json.styleName] = json.props.style;\n    addImportToContext(this.context, json);\n    addImportToContext(this.context, {\n      import: {\n        isDefaultImport: false,\n        layerName: 'View',\n        packageName: 'react-native',\n      },\n    });\n    let layerSpecificStyles = '';\n\n    const contentContainerStyle = getScrollViewContentContainerStyle(json);\n\n    this.context.styles[\n      `${json.styleName}_contentContainerStyle`\n    ] = contentContainerStyle;\n    layerSpecificStyles += `${this.generateStyle(\n      json,\n      { ...extraParams, parent: json },\n      'contentContainerStyle'\n    )}`;\n\n    return `<View ${this.generateStyle(json, {\n      ...extraParams,\n      parent: json,\n    })}><ScrollView ${this.generateProps(json, {\n      ...extraParams,\n      parent: json,\n    })} ${layerSpecificStyles}>\n      ${this.generateChildren(json, { ...extraParams, parent: json })}\n    </ScrollView></View>`;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport { addImportToContext } from '../utils';\nimport LayerCodeGen from '../LayerCodeGen';\nimport { includes, replace } from 'lodash';\n\nexport default class TextInputCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    delete json.props.style.fontWeight;\n    delete json.props.style.fontStyle;\n    json.props.style.fontFamily = json.props.style.fontPostscriptName;\n    delete json.props.style.fontPostscriptName;\n\n    this.context.styles[json.styleName] = json.props.style;\n    addImportToContext(this.context, json);\n\n    if (includes(json.props.placeholder, '\\n')) {\n      json.props.placeholder = replace(\n        json.props.placeholder,\n        new RegExp('\\n', 'g'),\n        ' '\n      );\n      json.props.placeholder = replace(\n        json.props.placeholder,\n        new RegExp('\\t', 'g'),\n        ' '\n      );\n    }\n    delete json.props.value;\n\n    return `<TextInput ${this.generateProps(json, {\n      ...extraParams,\n      parent: json,\n    })} ${this.generateStyle(json, { ...extraParams, parent: json })}>\n      ${this.generateChildren(json, { ...extraParams, parent: json })}\n    </TextInput>`;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport { addImportToContext } from '../utils';\nimport LayerCodeGen from '../LayerCodeGen';\n\nexport default class SymbolLayerCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    this.context.styles[json.styleName] = json.props.style;\n    addImportToContext(this.context, json);\n\n    const tagName = json.import.layerName;\n    return `<${tagName} ${this.generateProps(json, {\n      ...extraParams,\n      parent: json,\n    })} ${this.generateSymbolOverrideProps(json.scopeVariables, {\n      ...extraParams,\n      parent: json,\n    })}${this.generateStyle(json, { ...extraParams, parent: json })}>\n      ${this.generateChildren(json, { ...extraParams, parent: json })}\n    </${tagName}>`;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport { addImportToContext } from '../utils';\nimport LayerCodeGen from '../LayerCodeGen';\n\nexport default class TouchableOpacityCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    this.context.styles[json.styleName] = json.props.style;\n    const isInSymbol =\n      this.context.filePath.indexOf('symbols') !== -1 ||\n      this.context.filePath.indexOf('components') !== -1;\n    const navigate = !json.navigateTo\n      ? ''\n      : isInSymbol\n      ? `onPress = {() => console.log(\"Navigate to ${json.navigateTo}\")}`\n      : json.navigateTo === 'Go Back'\n      ? `onPress = {() => props.navigation.goBack()}`\n      : `onPress = {() => props.navigation.navigate(\"${json.navigateTo}\")}`;\n    addImportToContext(this.context, json);\n    return `<TouchableOpacity ${this.generateProps(json, {\n      ...extraParams,\n      parent: json,\n    })}\n    ${json.navigateTo ? `${navigate}` : ''} ${this.generateStyle(json, {\n      ...extraParams,\n      parent: json,\n    })}>\n      ${this.generateChildren(json, { ...extraParams, parent: json })}\n    </TouchableOpacity>`;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport { addImportToContext } from '../utils';\nimport LayerCodeGen from '../LayerCodeGen';\n\nexport default class CenterCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generateCenterProps(template: any) {\n    if (template.centerVertical && !template.centerHorizontal) {\n      return 'vertical';\n    } else if (!template.centerVertical && template.centerHorizontal) {\n      return 'horizontal';\n    }\n    return '';\n  }\n\n  generate(json: any, extraParams?: ExtraParams): string {\n    addImportToContext(this.context, {\n      import: {\n        isDefaultImport: false,\n        layerName: 'Center',\n        packageName: '@builderx/utils',\n      },\n    });\n\n    const propsCode = this.generateCenterProps(json.template);\n\n    delete json.template.centerHorizontal;\n    delete json.template.centerVertical;\n\n    return `<Center ${propsCode} >\n      ${this.context.baseCodeGen.generate(json, extraParams)}\n    </Center>`;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport LayerCodeGen from '../LayerCodeGen';\n\nexport default class ExpressionStatementCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  getCondtionalASTFromJSON(conditionJSON: any, fileId: string): any {\n    //\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    return this.context.baseCodeGen.generate(json.expression, {\n      ...extraParams,\n      textLiteral: true,\n    });\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport LayerCodeGen from '../LayerCodeGen';\n\nexport default class BinaryExpressionCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  getCondtionalASTFromJSON(conditionJSON: any, fileId: string): any {\n    //\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    // addImportToContext(this.context, {\n    //   import: {\n    //     isDefaultImport: false,\n    //     layerName: \"Platform\",\n    //     packageName: \"react-native\"\n    //   }\n    // });\n    return `\n      ${this.context.baseCodeGen.generate(json.left, extraParams)}\n        ${json.operator}\n        ${this.context.baseCodeGen.generate(json.right, extraParams)}\n      `;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport { addImportToContext } from '../utils';\nimport LayerCodeGen from '../LayerCodeGen';\n\nexport default class ExpressionCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  getCondtionalASTFromJSON(conditionJSON: any, fileId: string): any {\n    //\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    let expression = json.expression;\n    if (expression !== 'platform' && expression.indexOf('.') === -1) {\n      this.context.conditionals.push(expression);\n    }\n    if (expression === 'platform') {\n      addImportToContext(this.context, {\n        import: {\n          isDefaultImport: false,\n          layerName: 'Platform',\n          packageName: 'react-native',\n        },\n      });\n      expression = 'Platform.OS';\n    }\n    return this.generateJSLiteralCode(expression, extraParams, true);\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport LayerCodeGen from '../LayerCodeGen';\nimport { get } from 'lodash';\nexport default class ConditionalExpressionCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  getCondtionalASTFromJSON(conditionJSON: any, fileId: string): any {\n    //\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    let expression = get(json, 'test.expression', undefined);\n    if (expression) {\n      expression = expression.replace('this.props', 'props');\n    }\n    return `${this.context.baseCodeGen.generate(json.test, {\n      ...extraParams,\n      textLiteral: false,\n    })} ?\n    ${this.context.baseCodeGen.generate(json.consequent, {\n      ...extraParams,\n      textLiteral: true,\n    })} : ${this.context.baseCodeGen.generate(json.alternate, {\n      ...extraParams,\n      textLiteral: true,\n    })}`;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport LayerCodeGen from '../LayerCodeGen';\n\nexport default class LogicalExpressionCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  getCondtionalASTFromJSON(conditionJSON: any, fileId: string): any {\n    //\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    let leftExp = this.context.baseCodeGen.generate(json.left, extraParams);\n    if (leftExp.indexOf('this.props') !== -1) {\n      leftExp = leftExp.replace('this.props', 'props');\n    }\n    const rightExp = this.context.baseCodeGen.generate(json.right, {\n      ...extraParams,\n      textLiteral: true,\n    });\n    return `\n      (${leftExp})\n      ${json.operator}\n        (${rightExp})\n      `;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport { addImportToContext, getRandomString } from '../utils';\nimport LayerCodeGen from '../LayerCodeGen';\nimport { generateSVGPath } from '../../conversions';\nimport { forEach, get } from 'lodash';\n\nexport default class PathCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generateDefs(json: any) {\n    let defsCode = '';\n    let gradId, maskId;\n\n    let gradientCode = '';\n    const gradient = json.props.style.gradient;\n    delete json.props.style.gradient;\n\n    if (gradient && gradient.gradientType === 'LinearGradient') {\n      let x1 = gradient.from.x;\n      x1 = typeof x1 === 'number' ? x1 * 100 : parseFloat(x1) * 100;\n\n      let y1 = gradient.from.y;\n      y1 = typeof y1 === 'number' ? y1 * 100 : parseFloat(y1) * 100;\n\n      let x2 = gradient.to.x;\n      x2 = typeof x2 === 'number' ? x2 * 100 : parseFloat(x2) * 100;\n\n      let y2 = gradient.to.y;\n      y2 = typeof y2 === 'number' ? y2 * 100 : parseFloat(y2) * 100;\n\n      gradId = getRandomString();\n\n      const linearGradProps = `id=\"${gradId}\" x1=\"${x1}%\" x2=\"${x2}%\" y1=\"${y1}%\" y2=\"${y2}%\"`;\n\n      let stopsCode = '';\n\n      forEach(gradient.stops, (stop: any) => {\n        if (typeof stop.offset === 'string') {\n          stop.offset = parseFloat(stop.offset);\n        }\n\n        stopsCode += `<Stop offset=\"${stop.offset\n          .toFixed(2)\n          .toString()}\" stopColor=\"${stop.stopColor}\" />`;\n      });\n\n      gradientCode = `<LinearGradient ${linearGradProps}>\n      ${stopsCode}\n      </LinearGradient>`;\n    }\n\n    let maskCode = '';\n    if (json.props.mask) {\n      let maskPathD = generateSVGPath(\n        json.props.mask,\n        1,\n        true,\n        json.props.viewBox\n      );\n\n      let maskPathCode = `<Path d=\"${maskPathD}\" fill=\"white\" />`;\n\n      let viewBox = ['0', '0', json.rcDims.width + '', json.rcDims.height + ''];\n\n      if (json.props.viewBox) {\n        // TODO: We're getting props.viewBox undeifned in some case which should never happen\n        viewBox = json.props.viewBox.split(' ');\n      }\n\n      maskId = getRandomString();\n      maskCode = `<Mask id=\"${maskId}\" x={0} y={0} width={${parseInt(\n        viewBox[2],\n        10\n      )}} height={${parseInt(viewBox[3], 10)}}>\n      ${maskPathCode}\n      </Mask>`;\n    }\n\n    if (gradientCode || maskCode) {\n      defsCode = `<Defs>\n    ${gradientCode}\n    ${maskCode}\n    </Defs>`;\n    }\n    return {\n      code: defsCode,\n      gradId,\n      maskId,\n    };\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    json.props.viewBox = json.props.viewBox\n      .split(' ')\n      .map((v: string) => Math.round(parseFloat(v) * 100) / 100)\n      .join(' ');\n    delete json.props.gradientImage;\n    this.context.styles[json.styleName] = json.props.style;\n    addImportToContext(this.context, json);\n    addImportToContext(this.context, {\n      import: {\n        isDefaultImport: true,\n        layerName: 'Svg',\n        packageName: 'react-native-svg',\n      },\n    });\n\n    if (json.props.style.gradient) {\n      addImportToContext(this.context, {\n        import: {\n          isDefaultImport: false,\n          layerName: 'Stop',\n          packageName: 'react-native-svg',\n        },\n      });\n      addImportToContext(this.context, {\n        import: {\n          isDefaultImport: false,\n          layerName: 'Defs',\n          packageName: 'react-native-svg',\n        },\n      });\n      addImportToContext(this.context, {\n        import: {\n          isDefaultImport: false,\n          layerName: 'LinearGradient',\n          packageName: 'react-native-svg',\n        },\n      });\n    }\n\n    if (json.props.mask) {\n      addImportToContext(this.context, {\n        import: {\n          isDefaultImport: false,\n          layerName: 'Defs',\n          packageName: 'react-native-svg',\n        },\n      });\n      addImportToContext(this.context, {\n        import: {\n          isDefaultImport: false,\n          layerName: 'Mask',\n          packageName: 'react-native-svg',\n        },\n      });\n    }\n\n    const { viewBox, style, points, isClosed, ...pathProps } = json.props;\n    const svgPath = generateSVGPath(\n      points,\n      json.props.strokeWidth || 0,\n      isClosed,\n      viewBox\n    );\n\n    const pathJson = { ...json, props: { ...pathProps, d: svgPath } };\n    const svgJson = { ...json, props: { viewBox, style } };\n\n    const { gradId, maskId, code: defsCode } = this.generateDefs(json);\n\n    if (gradId) {\n      pathJson.props.fill = `url(#${gradId})`;\n    }\n    if (maskId) {\n      pathJson.props.mask = `url(#${maskId})`;\n    }\n\n    return `<Svg ${this.generateProps(svgJson, {\n      ...extraParams,\n      parent: json,\n    })} ${this.generateStyle(json, { ...extraParams, parent: json })}>\n    ${defsCode}\n    <Path ${this.generateProps(pathJson, { ...extraParams, parent: json })}>\n      ${this.generateChildren(json, { ...extraParams, parent: json })}\n    </Path>\n    </Svg>`;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport { addImportToContext } from '../utils';\nimport LayerCodeGen from '../LayerCodeGen';\n\nexport default class LoopCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    addImportToContext(this.context, {\n      import: {\n        isDefaultImport: false,\n        layerName: 'times',\n        packageName: 'lodash',\n      },\n    });\n\n    return ` {times(${\n      json.template.repetitions\n    }, () =>  ${this.context.baseCodeGen.generate(json.children[0], {\n      ...extraParams,\n      parent: json,\n    })})}`;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport { addImportToContext, getFilteredImageStyle } from '../utils';\nimport LayerCodeGen from '../LayerCodeGen';\n// import { IStatusBar } from \"common-interfaces\";\n\nexport interface IStatusBar {\n  display: boolean;\n  barStyle: 'light-content' | 'dark-content' | 'default';\n  animated: boolean;\n  backgroundColor?: string;\n}\n\nfunction isStatusBarDefault(statusBar: IStatusBar) {\n  return (\n    statusBar.display === true &&\n    statusBar.barStyle === 'default' &&\n    statusBar.backgroundColor === undefined &&\n    statusBar.animated === false\n  );\n}\n\nexport default class RootCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    this.context.styles[json.styleName] = json.props.style;\n    addImportToContext(this.context, json);\n\n    let layerStylePropCode = this.generateStyle(json, {\n      ...extraParams,\n      parent: json,\n    });\n\n    let statusBarCode = '';\n\n    if (!isStatusBarDefault(extraParams.parent.statusBar)) {\n      addImportToContext(this.context, {\n        import: {\n          isDefaultImport: false,\n          layerName: 'StatusBar',\n          packageName: 'react-native',\n        },\n      });\n\n      const statusBar: IStatusBar = extraParams.parent.statusBar;\n\n      statusBarCode = `<StatusBar \n      ${statusBar.display === false ? 'hidden' : ''} \n      ${statusBar.animated === true ? 'animated' : ''} \n      ${\n        statusBar.barStyle !== 'default'\n          ? `barStyle=\"${statusBar.barStyle}\"`\n          : ''\n      } \n      ${\n        statusBar.backgroundColor\n          ? `backgroundColor=\"${statusBar.backgroundColor}\"`\n          : ''\n      } />`;\n    }\n\n    const gradient = json.props.style.gradient;\n    delete json.props.style.gradient;\n    if (gradient) {\n      // TODO: Currently, we won't get gradient for root layer but this condition is handled incorrectly,\n      // should fix for future cases\n      json.props.imageStyle = getFilteredImageStyle(json.props.style);\n      this.context.styles[`${json.styleName}_imageStyle`] =\n        json.props.imageStyle;\n\n      layerStylePropCode += ` ${this.generateStyle(\n        json,\n        { ...extraParams, parent: json },\n        'imageStyle'\n      )}`;\n\n      addImportToContext(this.context, {\n        import: {\n          isDefaultImport: false,\n          layerName: 'ImageBackground',\n          packageName: 'react-native',\n        },\n      });\n      delete json.props.style['backgroundImage'];\n      const gradientImage = json.props.gradientImage;\n      delete json.props.gradientImage;\n      return `<ImageBackground ${this.generateProps(json, {\n        ...extraParams,\n        parent: json,\n      })} ${layerStylePropCode} ${this.generateSourcePropCode(\n        gradientImage\n      )}/>`;\n    } else {\n      return `<${json.import.layerName} ${this.generateProps(json, {\n        ...extraParams,\n        parent: json,\n      })} ${this.generateStyle(json, { ...extraParams, parent: json })}>\n      ${statusBarCode}\n      ${this.generateChildren(json, { ...extraParams, parent: json })}\n      </${json.import.layerName}>`;\n    }\n  }\n}\n","import { ExtraParams } from './react-native/types';\nimport { get, isArray, findIndex, keys, isNil } from 'lodash';\n\nfunction randomString(length: number) {\n  var text = '';\n  var possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  text = possible.charAt(Math.floor(Math.random() * 52));\n  for (var i = 0; i < length - 1; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n\nexport function updateWrapperStyleName(json: any, extraParams: ExtraParams) {\n  if (json.type === 'row' || json.type === 'column' || json.type === 'stack') {\n    const firstChildStyleName = get(\n      json,\n      'children.0.styleName',\n      randomString(6)\n    );\n    json.styleName =\n      firstChildStyleName +\n      json.type.charAt(0).toUpperCase() +\n      json.type.slice(1);\n  } else if (json.type === 'flexFiller') {\n    const siblingsLength = get(extraParams, 'parent.children.length', 1);\n    const previousSiblingStyleName = get(\n      extraParams,\n      'parent.children.0.styleName'\n    );\n    if (previousSiblingStyleName && previousSiblingStyleName !== 'flexFiller') {\n      json.styleName = previousSiblingStyleName + 'Filler';\n    } else {\n      json.styleName =\n        get(\n          extraParams,\n          `parent.children.${siblingsLength - 1}.styleName`,\n          randomString(6)\n        ) + 'Filler';\n    }\n    // const previousSiblingStyleName = get(\n    //   extraParams,\n    //   \"parent.children.0.styleName\",\n    // );\n    // json.styleName = previousSiblingStyleName + \"Filler\";\n  }\n}\n\nexport function isSymbolFile(filePath: string) {\n  // this.context.filePath.indexOf(\"symbols\") === -1 &&\n  //     this.context.filePath.indexOf(\"components\") === -1\n  return filePath.includes('symbols') || filePath.includes('components');\n}\n\nexport function getRotation(transform: any) {\n  let rotation = 0;\n  if (transform) {\n    const transformValue = isArray(transform) ? transform : transform['value'];\n\n    let index = findIndex(transformValue, (item: any) => {\n      let rotate = keys(item).indexOf('rotate');\n      return rotate !== -1 && !isNil(item['rotate']);\n    });\n    if (index > -1) {\n      let value: any =\n        transformValue[index]['rotate'] && transformValue[index]['rotate'].type\n          ? transformValue[index]['rotate'].value\n          : transformValue[index]['rotate'];\n      if (value && value.indexOf) {\n        if (value.indexOf('rad') > -1) {\n          value = parseFloat(value.slice(0, -3));\n          rotation = (value * 180) / Math.PI;\n        } else {\n          value = parseFloat(value.slice(0, -3));\n          rotation = value;\n        }\n      }\n    }\n  }\n  return rotation;\n}\n","import { Context, ExtraParams } from '../types';\nimport { addImportToContext } from '../utils';\nimport LayerCodeGen from '../LayerCodeGen';\nimport { get } from 'lodash';\nimport { updateWrapperStyleName } from '../../utils';\n\nexport default class WrapperCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    addImportToContext(this.context, json);\n\n    const childrenCode = this.generateChildren(json, {\n      ...extraParams,\n      parent: json,\n    });\n    // let {\n    //   flexDirection,\n    //   display,\n    //   position,\n    //   height,\n    //   width,\n    //   flex,\n    //   ...restStyles\n    // } = json.props.style;\n    // if (json.type === \"stack\") {\n    //   restStyles = { ...restStyles, height, width, flex, position };\n    // } else if (json.type === \"row\" || json.type === \"column\") {\n    //   restStyles = { ...restStyles, height, width, flex };\n    // } else if (json.type === \"body\") {\n    //   restStyles = { ...restStyles, flexDirection };\n    // }\n    // this.context.styles[json.styleName] =\n    //   json.type === \"stack\"\n    //     ? { position: \"relative\" }\n    //     : json.type === \"body\"\n    //     ? { flex: 1 }\n    //     : { flexDirection: json.type };\n\n    updateWrapperStyleName(json, extraParams);\n\n    this.context.styles[json.styleName] = json.props.style;\n\n    return `<View ${this.generateProps(json, {\n      ...extraParams,\n      parent: json,\n    })} style={styles.${json.styleName}}>\n      ${childrenCode}\n      </View>`;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport { addImportToContext, getRandomString } from '../utils';\nimport LayerCodeGen from '../LayerCodeGen';\n\nexport default class InlineViewCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    addImportToContext(this.context, json);\n    const randomStyleName = getRandomString(6);\n    this.context.styles[randomStyleName] = json.props.style;\n    return `<View ${this.generateProps(json, {\n      ...extraParams,\n      parent: json,\n    })} style={styles.${randomStyleName}}>\n      ${this.generateChildren(json, { ...extraParams, parent: json })}\n      </View>`;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport {\n  addImportToContext,\n  isTabViewSpecificStyleProp,\n  getCurrentFamily,\n} from '../utils';\n\nimport LayerCodeGen from '../LayerCodeGen';\nimport { forEach } from 'lodash';\n\nexport default class IconCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    this.context.styles[json.styleName] = json.props.style;\n    addImportToContext(this.context, json, this.generateJSLiteralCode);\n    let tagName = '';\n    let layerSpecificStyles = '';\n\n    let currentFamily = getCurrentFamily(json, this.generateJSLiteralCode);\n    tagName =\n      this.context.iconCount > 1\n        ? `${currentFamily}${json.import.layerName}`\n        : json.import.layerName;\n\n    delete json.props.style.fontPostscriptName;\n\n    return `<${tagName} ${this.generateProps(json, {\n      ...extraParams,\n      parent: json,\n    })} ${this.generateStyle(json, {\n      ...extraParams,\n      parent: json,\n    })} ${layerSpecificStyles}>\n      ${this.generateChildren(json, { ...extraParams, parent: json })}\n    </${tagName}>`;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport {\n  addImportToContext,\n  isTabViewSpecificStyleProp,\n  getCurrentFamily,\n} from '../utils';\n\nimport LayerCodeGen from '../LayerCodeGen';\nimport { forEach } from 'lodash';\n\nexport default class ActivityIndicatorCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    this.context.styles[json.styleName] = json.props.style;\n    addImportToContext(this.context, json, this.generateJSLiteralCode);\n    let tagName = '';\n    let layerSpecificStyles = '';\n\n    tagName = json.import.layerName;\n\n    return `<${tagName} ${this.generateProps(json, {\n      ...extraParams,\n      parent: json,\n    })} ${this.generateStyle(json, {\n      ...extraParams,\n      parent: json,\n    })} ${layerSpecificStyles}>\n      ${this.generateChildren(json, { ...extraParams, parent: json })}\n    </${tagName}>`;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport {\n  addImportToContext,\n  isTabViewSpecificStyleProp,\n  getCurrentFamily,\n} from '../utils';\n\nimport LayerCodeGen from '../LayerCodeGen';\nimport { forEach } from 'lodash';\n\nexport default class MapViewCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    this.context.styles[json.styleName] = json.props.style;\n    addImportToContext(this.context, json, this.generateJSLiteralCode);\n    let tagName = '';\n    let layerSpecificStyles = '';\n\n    tagName = json.import.layerName;\n\n    return `<${tagName} ${this.generateProps(json, {\n      ...extraParams,\n      parent: json,\n    })} ${this.generateStyle(json, {\n      ...extraParams,\n      parent: json,\n    })} ${layerSpecificStyles}>\n      ${this.generateChildren(json, { ...extraParams, parent: json })}\n    </${tagName}>`;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport {\n  addImportToContext,\n  isTabViewSpecificStyleProp,\n  getCurrentFamily,\n} from '../utils';\n\nimport LayerCodeGen from '../LayerCodeGen';\nimport { forEach } from 'lodash';\n\nexport default class SwitchCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    this.context.styles[json.styleName] = json.props.style;\n    addImportToContext(this.context, json, this.generateJSLiteralCode);\n    let tagName = '';\n    let layerSpecificStyles = '';\n\n    tagName = json.import.layerName;\n\n    return `<${tagName} ${this.generateProps(json, {\n      ...extraParams,\n      parent: json,\n    })} ${this.generateStyle(json, {\n      ...extraParams,\n      parent: json,\n    })} ${layerSpecificStyles}>\n      ${this.generateChildren(json, { ...extraParams, parent: json })}\n    </${tagName}>`;\n  }\n}\n","import { Context, ExtraParams } from '../types';\nimport {\n  addImportToContext,\n  isTabViewSpecificStyleProp,\n  getCurrentFamily,\n} from '../utils';\n\nimport LayerCodeGen from '../LayerCodeGen';\nimport { forEach } from 'lodash';\n\nexport default class SliderCodeGen extends LayerCodeGen {\n  context: Context;\n  constructor(context: Context) {\n    super();\n    this.context = context;\n  }\n\n  generate(json: any, extraParams: ExtraParams): string {\n    this.context.styles[json.styleName] = json.props.style;\n    addImportToContext(this.context, json, this.generateJSLiteralCode);\n    let tagName = '';\n    let layerSpecificStyles = '';\n\n    tagName = json.import.layerName;\n\n    return `<${tagName} ${this.generateProps(json, {\n      ...extraParams,\n      parent: json,\n    })} ${this.generateStyle(json, {\n      ...extraParams,\n      parent: json,\n    })} ${layerSpecificStyles}>\n      ${this.generateChildren(json, { ...extraParams, parent: json })}\n    </${tagName}>`;\n  }\n}\n","import { entries, get, isNil, isArray, findIndex, keys } from 'lodash';\nimport ViewCodeGen from './layers/ViewCodeGen';\nimport FileCodeGen from './layers/FileCodeGen';\nimport LiteralCodeGen from './specialLayers/LiteralCodeGen';\nimport { Context, ExtraParams } from './types';\nimport LayerCodeGen from './LayerCodeGen';\nimport TextCodeGen from './layers/TextCodeGen';\nimport ImageCodeGen from './layers/ImageCodeGen';\nimport EllipseCodeGen from './layers/EllipseCodeGen';\nimport ScrollViewCodeGen from './layers/ScrollViewCodeGen';\nimport TextInputCodeGen from './layers/TextInputCodeGen';\nimport SymbolLayerCodeGen from './layers/SymbolLayerCodeGen';\nimport TouchableOpacityCodeGen from './layers/TouchableOpacityCodeGen';\nimport CenterCodeGen from './specialLayers/CenterCodeGen';\nimport ExpressionStatementCodeGen from './specialLayers/ExpressionStatementCodeGen';\nimport BinaryExpressionCodeGen from './specialLayers/BinaryExpressionCodeGen';\nimport ExpressionCodeGen from './specialLayers/ExpressionCodeGen';\nimport ConditionalExpressionCodeGen from './specialLayers/ConditionalExpressionCodeGen';\nimport LogicalExpressionCodeGen from './specialLayers/LogicalExpressionCodeGen';\nimport PathCodeGen from './layers/PathCodeGen';\nimport LoopCodeGen from './layers/LoopCodeGen';\nimport RootCodeGen from './layers/RootCodeGen';\nimport WrapperCodeGen from './layers/WrapperCodeGen';\nimport InlineViewCodeGen from './layers/InlineViewCodeGen';\nimport { getIconCount } from './utils';\nimport IconCodeGen from './layers/IconCodeGen';\nimport ActivityIndicatorCodeGen from './layers/ActivityIndicatorCodeGen';\nimport MapViewCodeGen from './layers/MapViewCodeGen';\nimport SwitchCodeGen from './layers/SwitchCodeGen';\nimport SliderCodeGen from './layers/SliderCodeGen';\nimport { getRotation } from '../utils';\n\nexport default class BaseCodeGen extends LayerCodeGen {\n  context: Context = {\n    styles: {},\n    imports: {\n      react: {\n        named: ['Component'],\n        default: 'React',\n      },\n      'react-native': {\n        named: ['StyleSheet'],\n        default: false,\n      },\n    },\n    conditionals: [],\n    filePath: '',\n    iconCount: 0,\n    baseCodeGen: this,\n    // this.\n  };\n\n  // TODO: any => LayerCodeGen in next line\n  componentCodeGenMap = new Map<string, any>(\n    entries({\n      view: ViewCodeGen,\n      root: RootCodeGen,\n      file: FileCodeGen,\n      text: TextCodeGen,\n      image: ImageCodeGen,\n      ellipse: EllipseCodeGen,\n      scrollView: ScrollViewCodeGen,\n      symbol: SymbolLayerCodeGen,\n      textInput: TextInputCodeGen,\n      touchableOpacity: TouchableOpacityCodeGen,\n      path: PathCodeGen,\n      literal: LiteralCodeGen,\n      icon: IconCodeGen,\n      activityIndicator: ActivityIndicatorCodeGen,\n      mapView: MapViewCodeGen,\n      slider: SliderCodeGen,\n      switch: SwitchCodeGen,\n      expressionStatement: ExpressionStatementCodeGen,\n      binaryExpression: BinaryExpressionCodeGen,\n      expression: ExpressionCodeGen,\n      conditionalExpression: ConditionalExpressionCodeGen,\n      logicalExpression: LogicalExpressionCodeGen,\n      loop: LoopCodeGen,\n      stack: WrapperCodeGen,\n      row: WrapperCodeGen,\n      body: WrapperCodeGen,\n      column: WrapperCodeGen,\n      flexFiller: WrapperCodeGen,\n      inlineView: InlineViewCodeGen,\n    })\n  );\n\n  generate = (json: any, extraParams?: ExtraParams) => {\n    let iconCount = this.context.iconCount;\n    if (json.type === 'file') {\n      iconCount = getIconCount(this.context, json.layer);\n    }\n    this.context.iconCount = iconCount;\n    const LayerCodeGenClass = this.componentCodeGenMap.get(json.type);\n    let display = get(json, 'props.style.display', undefined);\n    if (display === 'flex') {\n      delete json.props.style.display;\n    }\n\n    let flexDirection = get(json, 'props.style.flexDirection', undefined);\n    if (flexDirection === 'column') {\n      delete json.props.style.flexDirection;\n    }\n\n    let opacity = get(json, 'props.style.opacity', undefined);\n    if (opacity === 1) {\n      delete json.props.style.opacity;\n    }\n\n    let borderRadius = get(json, 'props.style.borderRadius', undefined);\n    if (borderRadius === 0) {\n      delete json.props.style.borderRadius;\n    }\n\n    let transform = get(json, 'props.style.transform', undefined);\n    if (transform) {\n      const rotation = getRotation(transform);\n      if (rotation) {\n        json.props.style.transform = [\n          {\n            rotate: rotation.toFixed(2) + 'deg',\n          },\n        ];\n      } else {\n        delete json.props.style.transform;\n      }\n    }\n\n    // Deleting source_local field for image layer\n    // source_local to store local image url\n    let sourceLocal = get(json, 'props.source_local', undefined);\n    if (sourceLocal) {\n      delete json.props.source_local;\n    }\n    if (\n      get(json, 'template.centerVertical') ||\n      get(json, 'template.centerHorizontal')\n    ) {\n      const centerCodeGen = new CenterCodeGen(this.context);\n      centerCodeGen.config = this.config;\n      return centerCodeGen.generate(json, extraParams);\n    }\n    if (LayerCodeGenClass) {\n      const layerCodeGen = new LayerCodeGenClass(this.context);\n      layerCodeGen.config = this.config;\n      return layerCodeGen.generate(json, extraParams);\n    } else {\n      console.error(json.type + ' layer not handled');\n    }\n\n    return '';\n  };\n}\n","import BaseCodeGen from './BaseCodeGen';\nimport prettier from 'prettier/standalone';\nimport prettierBabylon from 'prettier/parser-babylon';\nimport Engine from '../types/Engine';\nimport { Config } from './types';\nimport { forEach } from 'lodash';\nimport * as path from 'path';\nexport default class ReactNativeEngine implements Engine {\n  static engineName = 'react-native';\n\n  getFileCode(fileJSON: any, config: Config) {\n    // console.log(fileJSON, \"codeengine*\");\n    const baseCodeGen = new BaseCodeGen();\n    baseCodeGen.config = config;\n    let code = baseCodeGen.generate(fileJSON, { parent: fileJSON });\n    // TODO: Temporary Fix in case if this.props is still present in the code\n    code = code.replace(/this.props/g, 'props');\n    code = prettier.format(code, {\n      plugins: [prettierBabylon],\n      parser: 'babylon',\n    });\n    return code;\n  }\n  getAppFiles(files: {\n    artboards: string[];\n    assets: string[];\n    missingAssets: any[];\n  }) {\n    // console.log(files, \"files\");\n    let stackNavigator = `DrawerNavigation: {\n      screen: DrawerNavigation\n    },`;\n    let navigator = ``;\n    let imports = ``;\n    forEach(files.artboards, (artboard: any) => {\n      navigator += `${artboard}:${artboard},`;\n\n      imports += `import ${artboard} from \"./src/screens/${artboard}\";`;\n    });\n    stackNavigator += navigator;\n\n    let fonts = '';\n    forEach(files.assets, (font: any) => {\n      fonts += `\"${path.basename(\n        font,\n        path.extname(font)\n      )}\": require(\".${font}\"),`;\n    });\n\n    forEach(files.missingAssets, missingAsset => {\n      fonts += `\"${path.basename(\n        missingAsset.file.path,\n        path.extname(missingAsset.file.path)\n      )}\": require(\".${missingAsset.fallbackPath}\"),`;\n    });\n\n    fonts = `Font.loadAsync({\n      ${fonts}\n    })`;\n\n    const code = `import React,{useState} from 'react';\n    import { createAppContainer } from \"react-navigation\";\n    import { createStackNavigator } from \"react-navigation-stack\";\n    import { createDrawerNavigator } from \"react-navigation-drawer\";\n    import { AppLoading } from \"expo\";\n    ${files.assets.length > 0 ? `import * as Font from \"expo-font\";` : ''}\n    ${imports}\n\n    const DrawerNavigation = createDrawerNavigator({${navigator}});\n\n    const StackNavigation = createStackNavigator({${stackNavigator}},\n      {\n        headerMode: \"none\"\n      });\n\n      const AppContainer = createAppContainer(StackNavigation);\n\n      function App() {\n        const [isLoadingComplete, setLoadingComplete] = useState(false);\n        if (!isLoadingComplete) {\n        return (\n        <AppLoading\n        startAsync={loadResourcesAsync}\n        onError={handleLoadingError}\n        onFinish={() => handleFinishLoading(setLoadingComplete)}\n        />\n        );\n      }\n      else {\n        return isLoadingComplete ? <AppContainer/> : <AppLoading />;\n      }\n    }\n    async function loadResourcesAsync() {\n      await Promise.all([\n      \n      ${fonts}\n      \n      ]);\n      }  \n      function handleLoadingError(error) {\n\n        console.warn(error);\n        \n        }\n        \n        function handleFinishLoading(setLoadingComplete) {\n        \n        setLoadingComplete(true);\n        \n        }\n        \n        export default App`;\n    return [\n      {\n        path: '/App.js',\n        content: prettier.format(code, {\n          plugins: [prettierBabylon],\n          parser: 'babylon',\n        }),\n      },\n    ];\n  }\n\n  getIndexWithFont(assets: string[]) {\n    let fonts = '';\n    forEach(assets, (font: any) => {\n      fonts += `\"${path.basename(\n        font,\n        path.extname(font)\n      )}\": require(\".${font.replace('src/assets', 'assets')}\"),`;\n    });\n\n    fonts = `await Font.loadAsync({\n      ${fonts}\n    });`;\n    const code = `import React from 'react';\n    import { YellowBox } from 'react-native';\n    import { AppLoading } from \"expo\";\n    import Index from \"./index\";\n    ${assets.length > 0 ? `import * as Font from \"expo-font\";` : ''}\n\n    export default class IndexWithFont extends React.Component {\n\n      constructor() {\n        super();\n        this.state = {\n          fontLoaded: false\n        };\n        YellowBox.ignoreWarnings([\n          'Warning: componentWillMount is deprecated',\n          'Warning: componentWillReceiveProps is deprecated',\n          'Warning: componentWillUpdate is deprecated',\n        ]);\n      }\n\n      ${assets.length > 0 ? 'async' : ''} componentDidMount() {\n        ${assets.length > 0 ? fonts : ''}\n        this.setState({ fontLoaded: true });\n      }\n\n      render() {\n        return this.state.fontLoaded ? <Index /> : <AppLoading />;\n      }\n    }`;\n    return [\n      {\n        path: './indexWithFont.js',\n        content: prettier.format(code, {\n          plugins: [prettierBabylon],\n          parser: 'babylon',\n        }),\n      },\n    ];\n  }\n}\n","export const packageJSON = {\n  private: true,\n  main: 'node_modules/expo/AppEntry.js',\n  scripts: {\n    start: 'expo start',\n    android: 'expo start --android',\n    ios: 'expo start --ios',\n    web: 'expo start --web',\n    eject: 'expo eject',\n  },\n  dependencies: {\n    '@builderx/utils': '~0.1.7',\n    expo: '^35.0.0',\n    'expo-font': '~7.0.0',\n    lodash: '~4.17.4',\n    react: '16.8.3',\n    'react-dom': '16.8.3',\n    'react-native':\n      'https://github.com/expo/react-native/archive/sdk-35.0.0.tar.gz',\n    'react-native-gesture-handler': '~1.3.0',\n    'react-native-reanimated': '~1.2.0',\n    'react-native-screens': '~1.0.0-alpha.23',\n    'react-native-svg': '9.9.5',\n    'react-native-web': '~0.11.7',\n    'react-native-web-maps': '^0.2.0',\n    'react-navigation': '4.0.10',\n    'react-navigation-drawer': '~2.3.3',\n    'react-navigation-stack': '~1.10.3',\n  },\n  devDependencies: {\n    'babel-plugin-module-resolver': '^4.0.0',\n    'babel-preset-expo': '^7.0.0',\n  },\n};\n\nexport const appJSON = {\n  expo: {\n    name: 'BxProject',\n    slug: 'BxProject',\n    privacy: 'public',\n    sdkVersion: '35.0.0',\n    platforms: ['ios', 'android', 'web'],\n    version: '1.0.0',\n    orientation: 'portrait',\n    updates: {\n      fallbackToCacheTimeout: 0,\n    },\n    ios: {\n      supportsTablet: true,\n    },\n  },\n};\n\nexport const babelConfigJSContent = `module.exports = function (api) {\n  api.cache(true);\n  return {\n    presets: [\"babel-preset-expo\"],\n    plugins: [\n      [\n        \"module-resolver\",\n        {\n          root: [\"./src\"],\n          alias: {\n            \"react-native-maps\": \"react-native-web-maps\",\n          },\n        },\n      ],\n    ],\n  };\n};\n`;\n\nexport const indexHTML = `<!DOCTYPE html>\n<html lang=\"%LANG_ISO_CODE%\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <!-- \n      This viewport works for phones with notches.\n      It's optimized for gestures by disabling global zoom.\n     -->\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1.00001, viewport-fit=cover\"\n    />\n    <title>%WEB_TITLE%</title>\n    <script src=\"https://maps.googleapis.com/maps/api/js?key=<YOUR_GOOGLE_API_KEY>\"></script>\n    <style>\n      /**\n       * Extend the react-native-web reset:\n       * https://github.com/necolas/react-native-web/blob/master/packages/react-native-web/src/exports/StyleSheet/initialRules.js\n       */\n      html,\n      body,\n      #root {\n        width: 100%;\n        /* To smooth any scrolling behavior */\n        -webkit-overflow-scrolling: touch;\n        margin: 0px;\n        padding: 0px;\n        /* Allows content to fill the viewport and go beyond the bottom */\n        min-height: 100%;\n      }\n      #root {\n        flex-shrink: 0;\n        flex-basis: auto;\n        flex-grow: 1;\n        display: flex;\n        flex: 1;\n      }\n\n      html {\n        scroll-behavior: smooth;\n        /* Prevent text size change on orientation change https://gist.github.com/tfausak/2222823#file-ios-8-web-app-html-L138 */\n        -webkit-text-size-adjust: 100%;\n        height: 100%;\n      }\n\n      body {\n        display: flex;\n        /* Allows you to scroll below the viewport; default value is visible */\n        overflow-y: auto;\n        overscroll-behavior-y: none;\n        text-rendering: optimizeLegibility;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        -ms-overflow-style: scrollbar;\n      }\n      /* Enable for apps that support dark-theme */\n      /*@media (prefers-color-scheme: dark) {\n        body {\n          background-color: black;\n        }\n      }*/\n    </style>\n  </head>\n\n  <body>\n    <!-- \n      A generic no script element with a reload button and a message.\n      Feel free to customize this however you'd like.\n    -->\n    <noscript>\n      <form\n        action=\"\"\n        style=\"\n          background-color: #fff;\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          z-index: 9999;\n        \"\n      >\n        <div\n          style=\"\n            font-size: 18px;\n            font-family: Helvetica, sans-serif;\n            line-height: 24px;\n            margin: 10%;\n            width: 80%;\n          \"\n        >\n          <p>Oh no! It looks like JavaScript is not enabled in your browser.</p>\n          <p style=\"margin: 20px 0;\">\n            <button\n              type=\"submit\"\n              style=\"\n                background-color: #4630eb;\n                border-radius: 100px;\n                border: none;\n                box-shadow: none;\n                color: #fff;\n                cursor: pointer;\n                font-weight: bold;\n                line-height: 20px;\n                padding: 6px 16px;\n              \"\n            >\n              Reload\n            </button>\n          </p>\n        </div>\n      </form>\n    </noscript>\n    <!-- The root element for your Expo app. -->\n    <div id=\"root\"></div>\n  </body>\n</html>\n\n`;\n\n// tslint:disable: max-line-length\nexport const flowConfigContent = `[ignore]\n; We fork some components by platform\n.*/*[.]android.js\n\n; Ignore templates for 'react-native init'\n<PROJECT_ROOT>/node_modules/react-native/local-cli/templates/.*\n\n; Ignore RN jest\n<PROJECT_ROOT>/node_modules/react-native/jest/.*\n\n; Ignore RNTester\n<PROJECT_ROOT>/node_modules/react-native/RNTester/.*\n\n; Ignore the website subdir\n<PROJECT_ROOT>/node_modules/react-native/website/.*\n\n; Ignore the Dangerfile\n<PROJECT_ROOT>/node_modules/react-native/danger/dangerfile.js\n\n; Ignore Fbemitter\n<PROJECT_ROOT>/node_modules/fbemitter/.*\n\n; Ignore \"BUCK\" generated dirs\n<PROJECT_ROOT>/node_modules/react-native/\\.buckd/\n\n; Ignore unexpected extra \"@providesModule\"\n.*/node_modules/.*/node_modules/fbjs/.*\n\n; Ignore polyfills\n<PROJECT_ROOT>/node_modules/react-native/Libraries/polyfills/.*\n\n; Ignore various node_modules\n<PROJECT_ROOT>/node_modules/react-native-gesture-handler/.*\n<PROJECT_ROOT>/node_modules/expo/.*\n<PROJECT_ROOT>/node_modules/react-navigation/.*\n<PROJECT_ROOT>/node_modules/xdl/.*\n<PROJECT_ROOT>/node_modules/reqwest/.*\n<PROJECT_ROOT>/node_modules/metro-bundler/.*\n\n[include]\n\n[libs]\nnode_modules/react-native/Libraries/react-native/react-native-interface.js\nnode_modules/react-native/flow/\nnode_modules/expo/flow/\n\n[options]\nemoji=true\n\nmodule.system=haste\n\nmodule.file_ext=.js\nmodule.file_ext=.jsx\nmodule.file_ext=.json\nmodule.file_ext=.ios.js\n\nmunge_underscores=true\n\nmodule.name_mapper='^[./a-zA-Z0-9$_-]+\\.\\(bmp\\|gif\\|jpg\\|jpeg\\|png\\|psd\\|svg\\|webp\\|m4v\\|mov\\|mp4\\|mpeg\\|mpg\\|webm\\|aac\\|aiff\\|caf\\|m4a\\|mp3\\|wav\\|html\\|pdf\\)$' -> 'RelativeImageStub'\n\nsuppress_type=$FlowIssue\nsuppress_type=$FlowFixMe\nsuppress_type=$FlowFixMeProps\nsuppress_type=$FlowFixMeState\nsuppress_type=$FixMe\n\nsuppress_comment=\\\\(.\\\\|\\n\\\\)*\\\\$FlowFixMe\\\\($\\\\|[^(]\\\\|(\\\\(>=0\\\\.\\\\(5[0-6]\\\\|[1-4][0-9]\\\\|[0-9]\\\\).[0-9]\\\\)? *\\\\(site=[a-z,_]*react_native_oss[a-z,_]*\\\\)?)\\\\)\nsuppress_comment=\\\\(.\\\\|\\n\\\\)*\\\\$FlowIssue\\\\((\\\\(>=0\\\\.\\\\(5[0-6]\\\\|[1-4][0-9]\\\\|[0-9]\\\\).[0-9]\\\\)? *\\\\(site=[a-z,_]*react_native_oss[a-z,_]*\\\\)?)\\\\)?:? #[0-9]+\nsuppress_comment=\\\\(.\\\\|\\n\\\\)*\\\\$FlowFixedInNextDeploy\nsuppress_comment=\\\\(.\\\\|\\n\\\\)*\\\\$FlowExpectedError\n\nunsafe.enable_getters_and_setters=true\n\n[version]\n^0.56.0\n`;\n\nexport const watchmanConfigContent = `{}\n`;\n\nexport const gitIgnoreContent = `# See https://help.github.com/ignore-files/ for more about ignoring files.\n\n# expo\n.expo/\n\n# dependencies\n/node_modules\n\n# misc\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n`;\n\nexport const componentReadme = `This component was created with [BuilderX](https://builderx.io/).\n\n## BuilderX uses third party libraries for some of the react-native components such as\n\n\\`\\`\\`\n@builderx/utils@0.1.6\nlodash\nreact-navigation@4.0.10\nreact-native-svg\nreact-native-maps\n\\`\\`\\`\n\nYou can add these packages by running \\`yarn add [packageName]\\` or \\`npm install [packageName]\\`.\n\n## Please add the extracted component folder in your project and import the component folder.\n\nE.g. import Component from \\`[folder path]\\`.\n\n**Note: You might need to load custom fonts that have been used in the component. Font files are available in the \\`assets/fonts\\` folder. You can add this code to load these fonts**\n\n### For Expo project\n\n\\`\\`\\`\nimport { Font } from \"expo\";\n\nasync componentDidMount(){\n  await Font.loadAsync({\n    <font-name>:require(<relative-path-to-font-file>)\n  })\n}\n\\`\\`\\`\n\n### For React-Native project\n\n1. Add rnpm to package.json providing the path to the font files.\n\\`\\`\\`\n\"rnpm\": {\n  \"assets\": [\n    \"./src/assets/fonts/\"\n  ]\n}\n\\`\\`\\`\n2. Run react-native link.\n`;\n\nexport const projectReadme = `This project was created with [BuilderX](https://builderx.io/).\n\n## BuilderX uses third party libraries for some of the react-native components such as\n\n\\`\\`\\`\n@builderx/utils@0.1.6\nlodash\nreact-navigation@4.0.10\nreact-native-svg\nreact-native-maps\n\\`\\`\\`\n\nThese packages are included as dependencies in package.json file\n\n## Steps to run project\n\nIn the project directory, you can run:\n\n### \\`yarn\\` or \\`npm install\\`\n\nThis will add the dependencies required to run the project.\n\n### \\`yarn start\\` or \\`npm start\\`\n\nThis will start the project.\n\n**Note: BuilderX generates Expo project at the moment, if you want to add custom fonts in your create-react-native-app project please refer these steps**\n\n1. Add Fonts to an \"assets/fonts\" folder in the root of your project.\n2. Add rnpm to package.json providing the path to the font files:\n\n\\`\\`\\`\n\"rnpm\": {\n  \"assets\": [\n    \"./assets/fonts/\"\n  ]\n}\n\\`\\`\\`\n\n3. Run react-native link\n\n##### This should add your custom fonts in the react native project.\n\n`;\n","import ReactNativeEngine from '../react-native/ReactNativeEngine';\nimport * as ExpoFiles from '../ExpoFiles';\nconst reactNativeEngine: ReactNativeEngine = new ReactNativeEngine();\nclass ReactNativeCodeEngine {\n  constructor() {\n    // this.baseCondeGen = new BaseCodeGen();\n  }\n  meta: any = {\n    name: 'react-native',\n    displayName: 'React Native',\n    icon:\n      'https://pre-cloud.builderx.io/assets/plugins/component/icons/React.svg',\n  };\n  execute: any = (fileJSON: any, config: any) => {\n    return reactNativeEngine.getFileCode(fileJSON, config);\n  };\n  getFiles: any = () => {\n    return ExpoFiles;\n  };\n\n  getFilesToWrite: any = () => {\n    const filesMap = new Map();\n\n    filesMap.set('/package.json', {\n      content: JSON.stringify(ExpoFiles.packageJSON, null, 2),\n    });\n    filesMap.set('/app.json', {\n      content: JSON.stringify(ExpoFiles.appJSON, null, 2),\n    });\n    filesMap.set('/babel.config.js', {\n      content: ExpoFiles.babelConfigJSContent,\n    });\n    filesMap.set('/web/index.html', { content: ExpoFiles.indexHTML });\n    filesMap.set('/.watchmanconfig', {\n      content: ExpoFiles.watchmanConfigContent,\n    });\n    filesMap.set('/.flowconfig', { content: ExpoFiles.flowConfigContent });\n    filesMap.set('/.gitignore', { content: ExpoFiles.gitIgnoreContent });\n    filesMap.set('/README.md', { content: ExpoFiles.projectReadme });\n\n    return filesMap;\n  };\n}\n\nexport default class ReactNativeCodeGen {\n  name = 'ReactNativeCodeGen';\n  session: any;\n  init(session: any) {\n    this.session = session;\n  }\n  activate() {\n    const codeEngine = new ReactNativeCodeEngine();\n    this.session.addCodeEngine(codeEngine);\n  }\n\n  deactivate() {}\n\n  logSession() {\n    this.session.executeFunction('logSession');\n  }\n}\n"],"names":["getRandomString","length","text","possible","charAt","Math","floor","random","i","addImportToContext","context","layerJSON","generateJSLiteralCode","layerName","includes","packageName","isDefaultImport","props","type","currentFamily","getCurrentFamily","filePath","indexOf","imports","named","contextImportObj","iconCount","name","asName","push","getIconCount","layer","children","forEach","child","get","conditionalStatement","families","getFilteredImageStyle","style","filteredImageStyle","borderWidth","borderLeftWidth","borderRightWidth","width","borderTopWidth","borderBottomWidth","height","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","opacity","MapStyles","Standard","Silver","elementType","stylers","color","visibility","featureType","Retro","Dark","Night","Aubergine","ROUNDABLE_LAYOUT_PROPERTIES","ROUNDABLE_TO_TWO_DECIMALS_LAYOUT_PROPERTIES","LayerCodeGen","extraParams","childrenCode","_this","baseCodeGen","generate","json","propsCode","data","propValue","propName","replace","generateSourcePropCode","path","uri","isTabViewSpecificStyleProp","round","onOffColorCode","onTintColor","tintColor","stylePropName","conditionalStyles","styleValue","styleProperty","styles","styleName","Object","keys","conditionalStyleObjCode","code","literal","jsExpression","literalType","Array","isArray","generateJSObjectCode","generateJSArrayCode","String","obj","hasOwnProperty","value","key","undefined","numValue","parseFloat","generateSymbolOverrideProps","scopeVariables","_this2","imageName","category","assetsRelativePath","this","config","isPreviewFile","ViewCodeGen","newParams","parent","layerStylePropCode","generateStyle","gradient","imageStyle","gradientImage","generateProps","generateChildren","FileCodeGen","hasButtonLayer","isFileComponent","isNavigatingButton","generateStyleNames","generateConditionalVariables","conditionalVariables","conditionals","generateImports","importsCode","importObj","defaultImportCode","namedImportsCode","index","className","substring","lastIndexOf","layersCode","LiteralCodeGen","textLiteral","trim","escape","RegExp","TextCodeGen","fontWeight","fontStyle","fontFamily","fontPostscriptName","getRadiusAdjustment","pointsArray","currentIndex","nextIndex","maxRadius","x","y","radius","cornerRadius","x0","point","y0","x1","y1","angle","atan2","cos","sin","generateSVGPath","strokeWidthOffset","isClosed","viewBox","generatedPath","dims","split","min","initialIndex","d1","xy0","toFixed","getNextPathPoint","isFillerCondition","curveMode","pointTo","radiusPoint","d2","px0","py0","px","py","curveFromPoint","curveFrom","curveFromX","curveFromY","curveTo","curveToX","curveToY","hasCurveTo","hasCurveFrom","ImageCodeGen","generateDefs","maskId","maskCode","defsCode","mask","svgJson","source","svgDims","tagName","EllipseCodeGen","map","v","join","ellipseJson","LAYOUT_PROPERTIES_AFFECTING_CHILDREN","ScrollViewCodeGen","layerSpecificStyles","contentContainerStyle","scrollViewContentContainerStyle","horizontal","totalWidth","totalMaxWidth","compiledChild","childBoundingClientRect","rcDims","layerBoundingClientRect","getTotalWidthForScrollView","totalHeight","totalMaxHeight","getTotalHeightForScrollView","getScrollViewContentContainerStyle","TextInputCodeGen","placeholder","SymbolLayerCodeGen","TouchableOpacityCodeGen","isInSymbol","navigate","navigateTo","CenterCodeGen","generateCenterProps","template","centerVertical","centerHorizontal","ExpressionStatementCodeGen","getCondtionalASTFromJSON","conditionJSON","fileId","expression","BinaryExpressionCodeGen","left","operator","right","ExpressionCodeGen","ConditionalExpressionCodeGen","test","consequent","alternate","LogicalExpressionCodeGen","leftExp","rightExp","PathCodeGen","gradId","gradientCode","gradientType","from","x2","to","y2","linearGradProps","stopsCode","stops","stop","offset","toString","stopColor","maskPathCode","parseInt","points","pathJson","d","strokeWidth","fill","LoopCodeGen","repetitions","RootCodeGen","statusBarCode","statusBar","display","barStyle","backgroundColor","animated","isStatusBarDefault","randomString","getRotation","transform","rotation","transformValue","findIndex","item","isNil","slice","PI","WrapperCodeGen","firstChildStyleName","toUpperCase","siblingsLength","previousSiblingStyleName","updateWrapperStyleName","InlineViewCodeGen","randomStyleName","IconCodeGen","ActivityIndicatorCodeGen","MapViewCodeGen","SwitchCodeGen","SliderCodeGen","BaseCodeGen","react","Map","entries","view","root","file","image","ellipse","scrollView","symbol","textInput","touchableOpacity","icon","activityIndicator","mapView","slider","expressionStatement","binaryExpression","conditionalExpression","logicalExpression","loop","stack","row","body","column","flexFiller","inlineView","LayerCodeGenClass","componentCodeGenMap","flexDirection","rotate","source_local","centerCodeGen","layerCodeGen","console","error","ReactNativeEngine","getFileCode","fileJSON","prettier","format","plugins","prettierBabylon","parser","getAppFiles","files","stackNavigator","navigator","artboards","artboard","fonts","assets","font","missingAssets","missingAsset","fallbackPath","content","getIndexWithFont","packageJSON","main","scripts","start","android","ios","web","eject","dependencies","expo","lodash","devDependencies","appJSON","slug","privacy","sdkVersion","platforms","version","orientation","updates","fallbackToCacheTimeout","supportsTablet","babelConfigJSContent","indexHTML","flowConfigContent","gitIgnoreContent","projectReadme","reactNativeEngine","ReactNativeCodeEngine","displayName","ExpoFiles","filesMap","set","JSON","stringify","init","session","activate","codeEngine","addCodeEngine","deactivate","logSession","executeFunction"],"mappings":"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"}