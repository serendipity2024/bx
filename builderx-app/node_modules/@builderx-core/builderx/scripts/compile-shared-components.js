const pascalCase = require("pascal-case");
const camelCase = require("lodash").camelCase;

(async function() {
  const path = require("path");
  const fs = require("fs-extra");

  const server = require("../../server/dist/index");
  const AST = server.AST;

  const ast = new AST();

  const files = await ast.fileService.readFolder(
    path.join(__dirname, "../src/shared-components/SharedComponentsJS/")
  );
  // console.log(files.map(file => file.path));
  const sharedComponentsJsonPath =
    "../src/shared-components/SharedComponentsJSON/";

  files.forEach(async file => {
    const filePathParts = file.path.split(/\/|\./);
    if (file.path.endsWith("assets")) {
      ast.fileService.copyFile(
        file.path,
        path.join(
          __dirname,
          sharedComponentsJsonPath,
          filePathParts[10],
          "ComponentDefinitions",
          filePathParts[11],
          filePathParts[12]
        )
      );
    }
    if (path.extname(file.path) !== ".js") {
      // console.log(file.path, "before");
      return;
    }
    const fileJSON = await ast.getJSONForSharedComponent(
      file.path,
      path.join(__dirname, "src/symbols")
    );

    const fileJSONParts = fileJSON.path.split(/\/|\./);
    fileJSON.path =
      "/src/symbols/" + fileJSONParts[2] + pascalCase(fileJSONParts[4]) + ".js";

    delete fileJSON.content;

    // await fs.emptyDir(
    //   path.join(
    //     __dirname,
    //     sharedComponentsJsonPath,
    //     "Material/ComponentDefinitions"
    //   )
    // );
    // await fs.emptyDir(
    //   path.join(__dirname, sharedComponentsJsonPath, "Material/Symbols")
    // );
    // await fs.emptyDir(
    //   path.join(
    //     __dirname,
    //     sharedComponentsJsonPath,
    //     "Cupertino/ComponentDefinitions"
    //   )
    // );
    // await fs.emptyDir(
    //   path.join(__dirname, sharedComponentsJsonPath, "Cupertino/Symbols")
    // );

    ast.fileService.writeFile(
      path.join(
        __dirname,
        sharedComponentsJsonPath,
        fileJSONParts[2],
        "Symbols",
        pascalCase(fileJSONParts[4]) + ".ts"
      ),
      `export default ${JSON.stringify(fileJSON, null, 2)};
    `
    );

    const className = pascalCase(
      fileJSONParts[2] + pascalCase(fileJSONParts[4])
    );

    ast.fileService.writeFile(
      path.join(
        __dirname,
        sharedComponentsJsonPath,
        fileJSONParts[2],
        "ComponentDefinitions",
        fileJSONParts[3],
        pascalCase(fileJSONParts[4]) + ".ts"
      ),
      `import { ComponentDefinition } from "common-interfaces";

  const ${camelCase(fileJSONParts[2]) +
    pascalCase(fileJSONParts[4]) +
    "Schema"}: ComponentDefinition = {
    version: "0.0.1",
    template: {
      type: "symbol",
      import: {
        layerName: "${className}",
        packageName: "/src/symbols/${className}.js",
        isDefaultImport: true,
        asName: ""
      },
      locked: false,
      template: {
        centerVertical: false,
        centerHorizontal: false
      },
      props: {
        style: {}
      },
      children: []
    },
    thumbnail: "",
    name: "${className}",
    symbols: ["${className}"],
    controlsProperty: [],
    componentRenderDefinition: ""
  };
  export default ${camelCase(fileJSONParts[2]) +
    pascalCase(fileJSONParts[4]) +
    "Schema"};
  `
    );
  });
})();
