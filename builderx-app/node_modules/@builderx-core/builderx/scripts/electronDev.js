process.env.BABEL_ENV = "development";
process.env.NODE_ENV = "development";

require("dotenv").config();
const spawn = require("child_process").spawn;
const path = require("path");
const fs = require("fs-extra");

process.env.BABEL_ENV = "development";
process.env.NODE_ENV = "development";

require("../config/env");
const electronDev = spawn(
  "concurrently",
  [
    "BROWSER=none yarn start",
    `node node_modules/.bin/wait-on http://localhost:${
      process.env.PORT
    } && node --max_old_space_size=8000 node_modules/.bin/electron .`
  ],
  { stdio: "inherit", cwd: path.join(__dirname, "..") }
);

function exitHandler(options, exitCode) {
  console.log("process exited with code", exitCode);
  if (options.cleanup) console.log("clean");
  if (exitCode || exitCode === 0) console.log(exitCode);
  if (options.exit) process.exit();
}

//do something when app is closing
process.on("exit", exitHandler.bind(null, { cleanup: true }));

//catches ctrl+c event
process.on("SIGINT", exitHandler.bind(null, { exit: true }));

// catches "kill pid" (for example: nodemon restart)
process.on("SIGUSR1", exitHandler.bind(null, { exit: true }));
process.on("SIGUSR2", exitHandler.bind(null, { exit: true }));

//catches uncaught exceptions
process.on("uncaughtException", exitHandler.bind(null, { exit: true }));
