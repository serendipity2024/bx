import Serializable, { types } from "./Serializable";

class Model extends Serializable {
  eventListenerMap: Map<any, any>;
  getFields(): any {
    return {
      eventListenerMap: types.ignore
    };
  }
}

class Props extends Model {
  abc: string;
  xyz: number;
  style: string;
  getFields(): any {
    return {
      abc: types.literal,
      style: types.literal,
      xyz: types.literal
    };
  }
}

class EllipseProps extends Props {
  c: string;
  style: string;
  stroke: string;
  getFields() {
    return {
      c: types.literal,
      style: types.literal,
      stroke: types.literal
    };
  }
}

abstract class Layer extends Model {
  abstract props: Props;

  constructor() {
    super();
  }
  getFields(): { [key: string]: any } {
    return {};
  }
}

class EllipseLayer extends Layer {
  props: EllipseProps;
  newName: string;
  getFields(): { [key: string]: any } {
    return { props: EllipseProps, newName: types.literal };
  }
}

const ellipse = EllipseLayer.fromJS({
  newName: "Efwefef",
  props: {
    c: "wff",
    stroke: "kenbdgg",
    style: "mcmnbcnc",
    xyz: 56,
    iushef: "wdwghd"
  }
});

console.log(ellipse);
