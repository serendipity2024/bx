import { IEvent, StylePropNameType } from "common-interfaces";
import { forEach, get } from "lodash";
import * as React from "react";
import BorderRadiusBox from "./BorderRadiusBox";
import { Session } from "session";
type propType = {
  layer: any;
  onEvent: (event: IEvent) => void;
  session: Session;
  stylePropName: StylePropNameType;
};
const borderTypes = [
  "borderRadius",
  "borderTopLeftRadius",
  "borderTopRightRadius",
  "borderBottomRightRadius",
  "borderBottomLeftRadius"
];
export default class BorderRadiusEditor extends React.PureComponent<
  propType,
  {}
> {
  onUpdate = () => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.layer.ui.on("borderRadius", this.onUpdate);
    this.props.layer.props[this.props.stylePropName].on(
      borderTypes,
      this.onUpdate
    );
  }
  componentDidUpdate(prevProps: propType) {
    prevProps.layer.ui.off("borderRadius", this.onUpdate);
    prevProps.layer.props[prevProps.stylePropName].off(
      borderTypes,
      this.onUpdate
    );
    this.props.layer.ui.on("borderRadius", this.onUpdate);
    this.props.layer.props[this.props.stylePropName].on(
      borderTypes,
      this.onUpdate
    );
  }
  componentWillUnmount() {
    this.props.layer.ui.off("borderRadius", this.onUpdate);
    this.props.layer.props[this.props.stylePropName].off(
      borderTypes,
      this.onUpdate
    );
  }
  onChangeEnd = (e: any, eventName: string) => {
    const borderRadius = this.getLayerBorderRadiusProperties();
    let val = Number(get(e, "target.value", 0));
    if (!borderRadius) {
      return;
    }
    let borderRadiusVal: { [key: string]: number | boolean } = {};

    if (borderRadius.lock) {
      borderRadiusVal = { borderRadius: val, lock: true };
    } else {
      let allTrue = true;
      let borderRadiusKey: string;
      forEach(borderRadius, (value: boolean, key: string) => {
        if (key === "lock") {
          return;
        }
        if (key === "top") {
          borderRadiusKey = "TopLeft";
        } else if (key === "right") {
          borderRadiusKey = "TopRight";
        } else if (key === "bottom") {
          borderRadiusKey = "BottomRight";
        } else if (key === "left") {
          borderRadiusKey = "BottomLeft";
        }
        if (value) {
          borderRadiusVal[`border${borderRadiusKey}Radius`] = val;
        }
        allTrue = allTrue && value;
      });
      if (allTrue) {
        borderRadiusVal = { borderRadius: val, lock: true };
      }
    }
    let type = "updateLayerBorderRadius";
    if (eventName === "onChange") {
      type = "updateLayerBorderRadiusAndSkip";
    } else if (eventName === "onMouseDown") {
      type = "updateLayerBorderRadiusAndForget";
    }
    // if (
    //   borderRadiusVal &&
    //   Object.values(borderRadiusVal)[0] === 0 &&
    //   borderRadiusVal.lock
    // ) {
    //   Object.keys(borderRadiusVal).forEach((key: string) => {
    //     if (borderTypes.includes(key)) {
    //       this.removeStyleAttribute(key);
    //     }
    //   });
    // } else {
    this.props.onEvent({
      type: type,
      payload: {
        properties: borderRadiusVal,
        key: "borderRadius"
      },
      target: this.props.layer,
      originalEvent: e
    });
    // }
  };
  onClickLockIcon = (e: any) => {
    const borderRadius = this.getLayerBorderRadiusProperties();
    if (!borderRadius) {
      return;
    }
    const value = !borderRadius.lock;

    this.props.onEvent({
      type: "updateEditorState",
      payload: {
        key: "borderRadius",
        properties: {
          lock: value,
          left: value,
          right: value,
          bottom: value,
          top: value
        }
      },
      target: this.props.layer,
      originalEvent: e
    });
  };
  getStyleAttribute = (propName: string) => {
    return this.props.layer.props.getResolvedStyleAttribute(
      propName,
      this.props.stylePropName
    );
  };
  getCurrentSelectedBorderRadiusValue = () => {
    let borderRadius,
      borderTopLeftRadius,
      borderTopRightRadius,
      borderBottomRightRadius,
      borderBottomLeftRadius;
    const defaultValue = 0;

    borderRadius = this.getStyleAttribute("borderRadius");
    borderBottomLeftRadius = this.getStyleAttribute("borderBottomLeftRadius");
    borderTopLeftRadius = this.getStyleAttribute("borderTopLeftRadius");
    borderTopRightRadius = this.getStyleAttribute("borderTopRightRadius");
    borderBottomRightRadius = this.getStyleAttribute("borderBottomRightRadius");

    const borderRadiusUI = this.getLayerBorderRadiusProperties();

    if (!borderRadiusUI) {
      return;
    }
    if (
      borderRadiusUI.lock ||
      (borderRadiusUI.top &&
        borderRadiusUI.right &&
        borderRadiusUI.bottom &&
        borderRadiusUI.left)
    ) {
      return borderRadius;
    }
    if (borderRadiusUI.top) {
      return borderTopLeftRadius;
    }
    if (borderRadiusUI.bottom) {
      return borderBottomRightRadius;
    }
    if (borderRadiusUI.left) {
      return borderBottomLeftRadius;
    }
    if (borderRadiusUI.right) {
      return borderTopRightRadius;
    }
    if (
      borderBottomLeftRadius === borderTopLeftRadius &&
      borderBottomLeftRadius === borderTopRightRadius &&
      borderBottomLeftRadius === borderBottomRightRadius
    ) {
      return borderBottomLeftRadius;
    }
    if (
      !borderRadiusUI.top &&
      !borderRadiusUI.right &&
      !borderRadiusUI.bottom &&
      !borderRadiusUI.left
    ) {
      return defaultValue;
    }
  };
  removeStyleAttribute(propName: string) {
    this.props.onEvent({
      type: "removeStyleAttribute",
      payload: {
        key: propName,
        stylePropName: this.props.stylePropName
      },
      target: this.props.layer,
      originalEvent: null
    });
  }
  getLayerBorderRadiusProperties = () => {
    return this.props.layer.ui.borderRadius;
  };

  updateEditorState = (propertyNameValue: string) => {
    const borderRadius = this.getLayerBorderRadiusProperties();
    if (!borderRadius) {
      return;
    }
    let editorVal: { [key: string]: boolean } = {};

    if (propertyNameValue === "borderRadius") {
      editorVal = { lock: true };
    } else {
      if (propertyNameValue === "borderBottomLeftRadius") {
        if (
          !borderRadius.left &&
          borderRadius.top &&
          borderRadius.right &&
          borderRadius.bottom
        ) {
          editorVal = { lock: true, left: !borderRadius.left };
        } else if (
          borderRadius.left &&
          borderRadius.top &&
          borderRadius.right &&
          borderRadius.bottom
        ) {
          editorVal = {
            lock: false,
            left: true,
            right: false,
            bottom: false,
            top: false
          };
        } else {
          editorVal = { lock: false, left: !borderRadius.left };
        }
      }
      if (propertyNameValue === "borderTopRightRadius") {
        if (
          !borderRadius.right &&
          borderRadius.top &&
          borderRadius.left &&
          borderRadius.bottom
        ) {
          editorVal = { lock: true, right: !borderRadius.right };
        } else if (
          borderRadius.left &&
          borderRadius.top &&
          borderRadius.right &&
          borderRadius.bottom
        ) {
          editorVal = {
            lock: false,
            left: false,
            right: true,
            bottom: false,
            top: false
          };
        } else {
          editorVal = { lock: false, right: !borderRadius.right };
        }
      }
      if (propertyNameValue === "borderTopLeftRadius") {
        if (
          !borderRadius.top &&
          borderRadius.left &&
          borderRadius.right &&
          borderRadius.bottom
        ) {
          editorVal = { lock: true, top: !borderRadius.top };
        } else if (
          borderRadius.left &&
          borderRadius.top &&
          borderRadius.right &&
          borderRadius.bottom
        ) {
          editorVal = {
            lock: false,
            left: false,
            right: false,
            bottom: false,
            top: true
          };
        } else {
          editorVal = { lock: false, top: !borderRadius.top };
        }
      }
      if (propertyNameValue === "borderBottomRightRadius") {
        if (
          !borderRadius.bottom &&
          borderRadius.top &&
          borderRadius.right &&
          borderRadius.left
        ) {
          editorVal = { lock: true, bottom: !borderRadius.bottom };
        } else if (
          borderRadius.left &&
          borderRadius.top &&
          borderRadius.right &&
          borderRadius.bottom
        ) {
          editorVal = {
            lock: false,
            left: false,
            right: false,
            bottom: true,
            top: false
          };
        } else {
          editorVal = { lock: false, bottom: !borderRadius.bottom };
        }
      }
    }
    this.props.onEvent({
      type: "updateEditorState",
      payload: {
        key: "borderRadius",
        properties: editorVal
      },
      target: this.props.layer,
      originalEvent: null
    });
  };
  render() {
    return (
      <BorderRadiusBox
        session={this.props.session}
        currentValue={this.getCurrentSelectedBorderRadiusValue()}
        borderRadius={this.props.layer.ui.borderRadius}
        onChangeEnd={this.onChangeEnd}
        onClickLockIcon={this.onClickLockIcon}
        updateEditorState={this.updateEditorState}
      />
    );
  }
}
