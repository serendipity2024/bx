import { ControlsProperty, IEvent } from "common-interfaces";
import {
  Button,
  Checkbox,
  CheckboxTick,
  FormCol,
  FormRow,
  Icon,
  Text
} from "components-x";
import { Layer } from "domain-x";
import * as React from "react";
import { Session } from "session";
type propType = {
  property: ControlsProperty;
  layer: Layer;
  session: Session;
  onEvent: (event: IEvent) => void;
  recordingConditionals: boolean;
};
export default class ComponentEditor extends React.PureComponent<propType, {}> {
  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.layer.on("props", this.onUpdate);
    if (this.props.property.propertyName) {
      this.props.layer.props.on(
        this.props.property.propertyName,
        this.onUpdate
      );
    }
  }
  componentDidUpdate(prevProps: propType) {
    prevProps.layer.off("props", this.onUpdate);
    if (prevProps.property.propertyName) {
      prevProps.layer.props.off(prevProps.property.propertyName, this.onUpdate);
    }
    this.props.layer.on("props", this.onUpdate);
    if (this.props.property.propertyName) {
      this.props.layer.props.on(
        this.props.property.propertyName,
        this.onUpdate
      );
    }
  }
  componentWillUnmount() {
    this.props.layer.off("props", this.onUpdate);
    if (this.props.property.propertyName) {
      this.props.layer.props.off(
        this.props.property.propertyName,
        this.onUpdate
      );
    }
  }
  emitEvent(eventName: string) {
    if (!this.props.recordingConditionals) {
      this.props.onEvent({
        type: eventName,
        payload: {
          key: this.props.property.propertyName,
          value:
            eventName === "editComponent" && this.props.property.propertyName
              ? this.props.layer.props.getProp(this.props.property.propertyName)
              : this.props.property.value.defaultValue
        },
        target: this.props.layer,
        originalEvent: null
      });
    }
  }
  render() {
    if (!this.props.property.propertyName) {
      return null;
    }
    let componentValue = this.props.layer.props.getProp(
      this.props.property.propertyName
    );
    return (
      <FormRow>
        <FormCol>
          <Checkbox style={{ flex: 0, paddingRight: 7 }}>
            <CheckboxTick
              noMargin
              checked={componentValue}
              onChange={() => this.emitEvent("toggleComponent")}
            />
          </Checkbox>
        </FormCol>
        <FormCol first uiSize={2}>
          <Text>{this.props.property.title}</Text>
        </FormCol>
        <FormCol>
          <Button
            disabled={!componentValue}
            onClick={() => this.emitEvent("editComponent")}
          >
            <Icon size={16} name="pencil" />
          </Button>
        </FormCol>
      </FormRow>
    );
  }
}
