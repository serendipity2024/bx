import * as React from "react";
import { FormCol, SelectX } from "components-x";
import { IEvent } from "common-interfaces";
import { DomainLayer } from "domain-x";
import { find } from "lodash";
import { Session } from "session";
type propTypes = {
  layer: DomainLayer;
  value: any;
  session: Session;
  onEvent: (event: IEvent) => void;
  getAllArtboardsName: () => { name: string; isDrawer: boolean }[];
};
export default class OverridesNavigationEditor extends React.Component<
  propTypes,
  any
> {
  constructor(props: any) {
    super(props);
  }
  // componentDidMount() {
  //   this.props.layer.on(["navigateTo"], this.onUpdate);
  //   this.props.layer.props.on("onPress", this.onUpdate);
  // }
  // onUpdate = () => {
  //   this.forceUpdate();
  // };
  // componentWillUnmount() {
  //   this.props.layer.off(["navigateTo"], this.onUpdate);
  //   this.props.layer.props.off("onPress", this.onUpdate);
  // }
  disableNavigation(e: any) {
    // console.log("NavigationEditor");
  }
  handleNavigation = (screenName: string) => {
    let screenObj = this.findArtboardObj(screenName);
    if (screenObj === null || screenObj === undefined) {
      return;
    }
    this.props.onEvent({
      type: "setOverride",
      payload: { value: screenObj.name },
      target: this.props.layer,
      originalEvent: null
    });
  };
  findArtboardObj = (val: string) => {
    return find(
      this.props.getAllArtboardsName(),
      (artboardObj: { name: string; isDrawer: boolean }) => {
        return artboardObj.name === val;
      }
    );
  };
  render() {
    const selectedArtboardName = this.props.value;
    const artboardsName = this.props.getAllArtboardsName();
    return (
      <FormCol
        uiBackground={900}
        uiSize={7}
        style={{
          pointerEvents: selectedArtboardName === "disabled" ? "none" : "auto"
        }}
      >
        <SelectX
          options={artboardsName}
          value={
            !selectedArtboardName || selectedArtboardName === "disabled"
              ? { name: "", isDrawer: false }
              : this.findArtboardObj(selectedArtboardName)
          }
          renderOption={(option: any) => option}
          extractValue={(option: any) => option.name}
          renderValue={(option: any) => option.name}
          onChange={(val: any) => this.handleNavigation(val)}
          placeholder={"Artboard Name"}
          tooltip="Navigation"
          filter={(inputValue: string) =>
            artboardsName.filter(
              (artboards: { name: string; isDrawer: boolean }) =>
                !inputValue || artboards.name.includes(inputValue)
            )
          }
        />
      </FormCol>
    );
  }
}
