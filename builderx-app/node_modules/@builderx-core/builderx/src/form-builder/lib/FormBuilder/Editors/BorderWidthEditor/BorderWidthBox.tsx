import {
  BorderWidth,
  BorderWidthLock,
  BottomBorderWidth,
  Checkbox,
  CheckboxTick,
  ColorPicker,
  FormCol,
  FormRow,
  Icon,
  InputGroupInput,
  LeftBorderWidth,
  PropertyHeader,
  RightBorderWidth,
  Slider,
  Text,
  TopBorderWidth,
  WrapperDiv,
  SelectX
} from "components-x";
import { BoxModel } from "domain-x";
import { isNil, get, debounce } from "lodash";
import * as React from "react";
import { Session } from "session";
const borderStyleArray = [
  "solid",
  // "hidden",
  "dotted",
  "dashed"
  // "double",
  // "groove",
  // "ridge",
  // "inset",
  // "outset",
  // "initial",
  // "inherit"
];
class BorderWidthBox extends React.Component<
  {
    disabled: boolean;
    currentValue: { width: number; color: string } | undefined;
    borderWidth: BoxModel;
    onChangeEnd: (
      e: any,
      eventName: string,
      eventType?: string,
      commandType?: string
    ) => void;
    onClickLockIcon: (e: any) => void;
    updateEditorState: (prop: string) => void;
    session: Session;
    enableBorderWidthEditor: () => void;
    handleBorderWidthToggle: () => void;
    borderStyle: string;
    robot: any;
  },
  any
> {
  handleOnClick = (propertyName: string) => {
    if (this.props.disabled) {
      this.props.enableBorderWidthEditor();
    }
    this.props.updateEditorState(propertyName);
  };
  handleLockClickIcon = (e: any) => {
    if (this.props.disabled) {
      this.props.enableBorderWidthEditor();
    }
    this.props.onClickLockIcon(e);
  };
  onPickerOpen = () => {
    this.colorValueOnOpen = this.props.currentValue
      ? this.props.currentValue.color
      : "#000000";
    this.props.onChangeEnd(
      this.colorValueOnOpen,
      "onChange",
      "color",
      "AndForget"
    );
  };
  onPickerClose = () => {
    const colorValue = this.props.currentValue
      ? this.props.currentValue.color
      : "#000000";

    if (colorValue === this.colorValueOnOpen) {
      return;
    }
    this.props.onChangeEnd(colorValue, "onChange", "color", "");
  };
  colorValueOnOpen: string;
  render() {
    return (
      <>
        <PropertyHeader uiSize="auto" open paddingLeft={0}>
          <WrapperDiv style={{ display: "flex" }}>
            <Checkbox style={{ flex: 0, paddingRight: 7 }}>
              <CheckboxTick
                noMargin
                checked={!this.props.disabled}
                onChange={this.props.handleBorderWidthToggle}
              />
            </Checkbox>
            <Text uiSize="m">Border</Text>
          </WrapperDiv>
        </PropertyHeader>
        <FormRow>
          <FormCol name="bx-border-colorPicker" first={true} uiSize={2}>
            <ColorPicker
              value={
                this.props.currentValue
                  ? this.props.currentValue.color
                  : "#000000"
              }
              disabled={this.props.disabled}
              onPickerClose={this.onPickerClose}
              onPickerOpen={this.onPickerOpen}
              onChangeColor={(color: string) => {
                this.props.onChangeEnd(color, "onChange", "color", "AndSkip");
              }}
              robot={this.props.robot}
            />
          </FormCol>
          <FormCol uiSize={10}>
            <SelectX
              options={borderStyleArray}
              value={this.props.borderStyle}
              disabled={this.props.disabled}
              renderOption={(option: any) => option}
              extractValue={(option: any) => option}
              renderValue={(option: any) => option}
              onChange={(e: any) =>
                this.props.onChangeEnd(e, "onChange", "borderStyle")
              }
              placeholder={"Style"}
              tooltip="Border Style"
              filter={(inputValue: string) =>
                borderStyleArray.filter(
                  (style: any) => !inputValue || style.includes(inputValue)
                )
              }
            />
          </FormCol>
        </FormRow>
        <FormRow>
          <FormCol first={true} uiSize={2}>
            <BorderWidth>
              <TopBorderWidth
                selected={
                  this.props.disabled ? false : this.props.borderWidth.top
                }
                onClick={() => this.handleOnClick("borderTopWidth")}
              />
              <LeftBorderWidth
                selected={
                  this.props.disabled ? false : this.props.borderWidth.left
                }
                onClick={() => this.handleOnClick("borderLeftWidth")}
              />
              <RightBorderWidth
                selected={
                  this.props.disabled ? false : this.props.borderWidth.right
                }
                onClick={() => this.handleOnClick("borderRightWidth")}
              />
              <BottomBorderWidth
                selected={
                  this.props.disabled ? false : this.props.borderWidth.bottom
                }
                onClick={() => this.handleOnClick("borderBottomWidth")}
              />
              <BorderWidthLock>
                <Icon
                  name={this.props.borderWidth.lock ? "lock" : "unlock"}
                  size={16}
                  onClick={(e: any) => this.handleLockClickIcon(e)}
                />
              </BorderWidthLock>
            </BorderWidth>
          </FormCol>
          <FormCol first={true} uiSize={7}>
            <Slider
              name="bx-borderWidth-slider"
              disabled={this.props.disabled}
              min={0}
              max={100}
              value={
                this.props.currentValue && !isNil(this.props.currentValue.width)
                  ? this.props.currentValue.width
                  : 0
              }
              onChange={(e: any) => {
                this.props.onChangeEnd(e.target.value, "onChange");
              }}
              onMouseUp={(e: any) => {
                this.props.onChangeEnd(e.target.value, "onMouseUp");
              }}
              onMouseDown={(e: any) => {
                this.props.onChangeEnd(e.target.value, "onMouseDown");
              }}
            />
          </FormCol>
          <FormCol uiSize={2}>
            <InputGroupInput
              undo={this.props.session.commandManager.undo}
              redo={this.props.session.commandManager.redo}
              isDisabled={this.props.disabled}
              type="number"
              validator={e => !isNaN(parseInt(e.target.value, 10))}
              value={
                this.props.currentValue && !isNil(this.props.currentValue.width)
                  ? this.props.currentValue.width
                  : 0
              }
              // onFocus={(e: any) =>
              //   this.props.onChangeEnd(
              //     parseFloat(get(e, "target.value", 0)),
              //     "onMouseDown",
              //     "width"
              //   )
              // }
              // onBlur={(e: any) =>
              //   this.props.onChangeEnd(
              //     parseFloat(get(e, "target.value", 0)),
              //     "onMouseUp",
              //     "width"
              //   )
              // }
              onChange={debounce(
                (e: any) =>
                  this.props.onChangeEnd(
                    parseFloat(get(e, "target.value", 0)),
                    "onMouseUp",
                    "width"
                  ),
                600
              )}
            />
          </FormCol>
        </FormRow>
      </>
    );
  }
}

export default BorderWidthBox;
