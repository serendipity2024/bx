import * as React from "react";

import {
  MarginLayout,
  MarginLock,
  MarginTopSelector as TopSelector,
  MarginLeftSelector as LeftSelector,
  MarginRightSelector as RightSelector,
  MarginBottomSelector as BottomSelector,
  FormGroup,
  FormRow,
  WrapperDiv,
  FormCol,
  Text,
  Icon,
  Slider,
  InputGroupInput
} from "components-x";
import { BoxModel } from "domain-x";
import { debounce } from "lodash";
import { Session } from "session";

export default class extends React.Component<
  {
    title: string;
    currentValue: number;
    margin: BoxModel;
    onChangeEnd: (e: any, eventName: string) => void;
    session: Session;
    onClickLockIcon: (e: any) => void;
    updateEditorState: (prop: string) => void;
  },
  any
> {
  render() {
    const margin: BoxModel = this.props.margin;
    return (
      <FormGroup noPadding style={{ display: "table-caption" }}>
        <FormCol first>
          <Text uiSize="m">
            {this.props.title ? this.props.title : "Margin Editor Title"}
          </Text>
        </FormCol>
        <FormCol first uiSize={4} style={{ paddingTop: 12 }}>
          <WrapperDiv uiBackground={700} style={{ padding: 8 }}>
            <MarginLayout>
              <TopSelector
                selected={margin.top}
                onClick={() => {
                  this.props.updateEditorState("marginTop");
                }}
              />
              <LeftSelector
                selected={margin.left}
                onClick={() => {
                  this.props.updateEditorState("marginLeft");
                }}
              />
              <RightSelector
                selected={margin.right}
                onClick={() => {
                  this.props.updateEditorState("marginRight");
                }}
              />
              <BottomSelector
                selected={margin.bottom}
                onClick={() => {
                  this.props.updateEditorState("marginBottom");
                }}
              />
              <MarginLock>
                <Icon
                  name={margin.lock ? "lock" : "unlock"}
                  size={16}
                  onClick={this.props.onClickLockIcon}
                />
              </MarginLock>
            </MarginLayout>
          </WrapperDiv>
        </FormCol>
        <FormCol first>
          <FormRow style={{ paddingLeft: 0, paddingRight: 0 }}>
            <FormCol first uiSize={3}>
              <Slider
                min={0}
                max={100}
                value={this.props.currentValue ? this.props.currentValue : 0}
                onMouseDown={(e: any) => {
                  this.props.onChangeEnd(e, "onMouseDown");
                }}
                onChange={(e: any) => {
                  this.props.onChangeEnd(e, "onChange");
                }}
                onMouseUp={(e: any) => {
                  this.props.onChangeEnd(e, "onMouseUp");
                }}
              />
            </FormCol>
            <FormCol uiSize={2}>
              <InputGroupInput
                undo={this.props.session.commandManager.undo}
                redo={this.props.session.commandManager.redo}
                type="number"
                validator={e => !isNaN(parseInt(e.target.value, 10))}
                value={this.props.currentValue ? this.props.currentValue : 0}
                // onChange={(e: any) => {
                //   this.props.onChangeEnd(e, "onChange");
                // }}
                // onFocus={(e: any) => this.props.onChangeEnd(e, "onMouseDown")}
                // onBlur={(e: any) => this.props.onChangeEnd(e, "onMouseUp")}
                onChange={debounce(
                  (e: any) => this.props.onChangeEnd(e, "onMouseUp"),
                  600
                )}
              />
            </FormCol>
          </FormRow>
        </FormCol>
      </FormGroup>
    );
  }
}
