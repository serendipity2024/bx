import * as React from "react";
import { IEvent } from "common-interfaces";
import { DomainLayer } from "domain-x";
import {
  FormGroup,
  FormRow,
  FormCol,
  Icon,
  Button,
  InputGroupInput
} from "components-x";
import { Session } from "session";
import DropdownInput from "./../../Components/DropdownInput";
type propType = {
  layer: DomainLayer;
  onEvent: (event: IEvent) => void;
  session: Session;
  recordingConditionals: boolean;
};
export default class TabViewEditor extends React.PureComponent<propType, any> {
  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.layer.on("children", this.onUpdate);
    this.props.layer.props.on("activeTabIndex", this.onUpdate);
    this.props.layer.children.forEach((child: any) => {
      child.props.on("title", this.onUpdate);
    });
  }
  componentDidUpdate(prevProps: propType) {
    prevProps.layer.off("children", this.onUpdate);
    prevProps.layer.props.off("activeTabIndex", this.onUpdate);
    prevProps.layer.children.forEach((child: any) => {
      child.props.off("title", this.onUpdate);
    });
    this.props.layer.on("children", this.onUpdate);
    this.props.layer.props.on("activeTabIndex", this.onUpdate);
    this.props.layer.children.forEach((child: any) => {
      child.props.on("title", this.onUpdate);
    });
  }
  componentWillUnmount() {
    this.props.layer.off("children", this.onUpdate);
    this.props.layer.props.off("activeTabIndex", this.onUpdate);
    this.props.layer.children.forEach((child: any) => {
      child.props.off("title", this.onUpdate);
    });
  }
  addNewTab = () => {
    if (!this.props.recordingConditionals) {
      this.props.onEvent({
        type: "addTab",
        payload: null,
        target: this.props.layer,
        originalEvent: null
      });
    }
  };

  removeTab = (index: number) => {
    if (!this.props.recordingConditionals) {
      this.props.onEvent({
        type: "removeTab",
        payload: index,
        target: this.props.layer,
        originalEvent: null
      });
    }
  };

  changeTabTitle = (e: any, index: number) => {
    if (!this.props.recordingConditionals) {
      this.props.onEvent({
        payload: {
          key: "title",
          value: e.target.value
        },
        type: "setProp",
        originalEvent: e,
        target: this.props.layer.children[index]
      });
    }
  };

  editTab = (index: number) => {
    if (!this.props.recordingConditionals) {
      let targetLayer;
      if (
        this.props.layer.type === "thirdParty" &&
        this.props.layer.import.layerName === "TabView"
      ) {
        targetLayer = this.props.layer.children[index].children[0];
      } else if (
        this.props.layer.type === "thirdParty" &&
        this.props.layer.import.layerName === "TabContent"
      ) {
        targetLayer = this.props.layer.children[0];
      }
      this.props.onEvent({
        type: "editTab",
        payload: index,
        target: targetLayer,
        originalEvent: null
      });
    }
  };

  render() {
    const layer = this.props.layer;
    let childrenIndices = [];
    for (let i = 0; i < layer.children.length; i++) {
      childrenIndices.push(i);
    }
    return (
      <FormGroup>
        {layer &&
          layer.children.map((child: any, index: number) => {
            return (
              <FormRow key={index}>
                <FormCol first uiSize={2}>
                  <InputGroupInput
                    undo={this.props.session.commandManager.undo}
                    redo={this.props.session.commandManager.redo}
                    value={child.props.title}
                    autoFocus
                    onChange={(e: any) => this.changeTabTitle(e, index)}
                  />
                </FormCol>
                {layer.children.length > 1 ? (
                  <FormCol>
                    <Button onClick={() => this.removeTab(index)}>
                      <Icon size={16} name="close" />
                    </Button>
                  </FormCol>
                ) : null}
                <FormCol>
                  <Button onClick={() => this.editTab(index)}>
                    <Icon size={16} name="pencil" />
                  </Button>
                </FormCol>
              </FormRow>
            );
          })}
        <FormRow>
          <FormCol>
            <Button onClick={() => this.addNewTab()}>Add new tab</Button>
          </FormCol>
        </FormRow>
        <FormRow>
          <DropdownInput
            key={"active-tabview-tab"}
            session={this.props.session}
            layer={layer}
            onEvent={
              this.props.recordingConditionals
                ? () => {
                    //
                  }
                : this.props.onEvent
            }
            property={{
              propertyName: "activeTabIndex",
              title: "Active Tab",
              type: "enum",
              value: {
                options: childrenIndices,
                defaultValue: 0
              },
              category: "props"
            }}
            propertyName={"activeTabIndex"}
            propertyTitle={"Active Tab"}
            category={"props"}
            options={childrenIndices}
            defaultValue={0}
          />
        </FormRow>
      </FormGroup>
    );
  }
}
