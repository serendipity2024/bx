import { IEvent } from "common-interfaces";
import {
  Checkbox,
  CheckboxTick,
  FormCol,
  FormGroup,
  FormRow,
  InputGroupInput,
  Text
} from "components-x";
import { Layer as DomainLayer } from "domain-x";
import * as React from "react";
import { Session } from "session";

interface PropType {
  layer: any;
  session: Session;
  onEvent: (event: IEvent) => void;
}

export default class LoopEditor extends React.PureComponent<PropType, {}> {
  parentLayer: DomainLayer;
  constructor(props: PropType) {
    super(props);
    this.parentLayer = this.props.layer.parent;
  }
  componentDidMount() {
    if (this.parentLayer) {
      this.parentLayer.template.on("repetitions", this.onUpdate);
    }
  }

  componentDidUpdate() {
    this.parentLayer.template.off("repetitions", this.onUpdate);
    this.parentLayer = this.props.layer.parent;
    this.parentLayer.template.on("repetitions", this.onUpdate);
  }

  componentWillUnmount() {
    if (this.parentLayer) {
      this.parentLayer.template.off("repetitions", this.onUpdate);
    }
  }

  onUpdate = () => {
    this.forceUpdate();
  };
  handleLoopToggle = (e: any) => {
    this.props.onEvent({
      type: "toggleLoop",
      target: this.props.layer,
      originalEvent: e,
      payload: {}
    });
  };
  handleChange = (e: any, loopLayer: DomainLayer) => {
    this.props.onEvent({
      type: "setRepetitions",
      target: loopLayer,
      originalEvent: e,
      payload: {
        value: Number(e.target.value)
      }
    });
  };
  render() {
    const isLoop =
      this.props.layer.parent && this.props.layer.parent.type === "loop";
    const loopLayer = isLoop ? this.props.layer.parent : null;
    if (this.props.layer.isLayoutChild) {
      return null;
    }
    return (
      <FormGroup noPadding>
        <FormRow>
          <FormCol first={true} uiSize={1}>
            <Checkbox>
              <CheckboxTick
                noMargin
                checked={isLoop}
                onChange={this.handleLoopToggle}
              />
            </Checkbox>
          </FormCol>
          <FormCol uiSize={9}>
            <Text>Repetitions</Text>
          </FormCol>
          <FormCol uiSize={3}>
            <InputGroupInput
              undo={this.props.session.commandManager.undo}
              redo={this.props.session.commandManager.redo}
              validator={e => {
                let val = parseInt(e.target.value, 10);
                return !isNaN(val) && val >= 0;
              }}
              type="number"
              min="0"
              disabled={!isLoop}
              value={loopLayer ? loopLayer.template.repetitions : ""}
              onChange={(e: any) => this.handleChange(e, loopLayer)}
            />
          </FormCol>
        </FormRow>
      </FormGroup>
    );
  }
}
