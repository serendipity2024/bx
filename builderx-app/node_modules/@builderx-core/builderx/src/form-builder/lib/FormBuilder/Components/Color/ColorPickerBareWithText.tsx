import * as React from "react";
import { FormCol, FormRow, Text, Checkbox, CheckboxTick } from "components-x";
import { Layer } from "domain-x";
import { ControlsProperty, IEvent } from "common-interfaces";
import ColorPickerBare from "./ColorPickerBare";
import { Session } from "session";
type propType = {
  layer: Layer;
  property: ControlsProperty;
  session: Session;
  onEvent: (event: IEvent) => void;
  robot: any;
};
export default class ColorPickerBareWithText extends React.PureComponent<
  propType,
  any
> {
  colorValueOnOpen: any;
  componentDidMount() {
    if (this.props.property.propertyName) {
      if (this.props.property.category === "props") {
        this.props.layer.props.on(
          this.props.property.propertyName,
          this.onUpdate
        );
      } else {
        this.props.layer.props.style.on(
          this.props.property.propertyName,
          this.onUpdate
        );
      }
    }
  }
  componentDidUpdate(prevProps: propType) {
    if (prevProps.property.propertyName) {
      if (prevProps.property.category === "props") {
        prevProps.layer.props.off(
          prevProps.property.propertyName,
          this.onUpdate
        );
      } else {
        prevProps.layer.props.style.off(
          prevProps.property.propertyName,
          this.onUpdate
        );
      }
    }
    if (this.props.property.propertyName) {
      if (this.props.property.category === "props") {
        this.props.layer.props.on(
          this.props.property.propertyName,
          this.onUpdate
        );
      } else {
        this.props.layer.props.style.on(
          this.props.property.propertyName,
          this.onUpdate
        );
      }
    }
  }
  componentWillUnmount() {
    if (this.props.property.propertyName) {
      if (this.props.property.category === "props") {
        this.props.layer.props.off(
          this.props.property.propertyName,
          this.onUpdate
        );
      } else {
        this.props.layer.props.style.off(
          this.props.property.propertyName,
          this.onUpdate
        );
      }
    }
  }
  onUpdate = (key: string) => {
    this.forceUpdate();
  };

  getLayerColor = () => {
    const { layer, property } = this.props;
    return property.category === "props"
      ? property.propertyName && layer.props.getProp(property.propertyName)
      : property.propertyName &&
          layer.props.getStyleAttribute(property.propertyName);
  };

  handleFillToggle = () => {
    const propertyName = this.props.property.propertyName;
    if (propertyName) {
      let value = this.props.layer.props.getProp(propertyName);
      if (!value) {
        this.props.onEvent({
          payload: {
            key: propertyName,
            value: "rgba(230, 230, 230,1)"
          },
          type:
            this.props.property.category === "props"
              ? "setProp"
              : "setStyleAttribute",
          target: this.props.layer,
          originalEvent: null
        });
      } else {
        this.props.onEvent({
          payload: {
            key: propertyName
          },
          type:
            this.props.property.category === "props"
              ? "removeProp"
              : "removeStyleAttribute",
          target: this.props.layer,
          originalEvent: null
        });
      }
    }
  };
  handleChangeColor = (color: string, type: string = "") => {
    const { layer, property } = this.props;
    this.props.onEvent({
      payload: {
        key: property.propertyName,
        value: color
      },
      type:
        property.category === "props"
          ? "setProp" + type
          : "setStyleAttribute" + type,
      target: layer,
      originalEvent: null
    });
  };
  onPickerOpen = () => {
    this.colorValueOnOpen = this.getLayerColor();
    this.handleChangeColor(this.colorValueOnOpen, "AndForget");
  };
  onPickerClose = () => {
    const backgroundValue = this.getLayerColor();

    if (backgroundValue === this.colorValueOnOpen) {
      return;
    }
    this.handleChangeColor(backgroundValue);
  };
  render() {
    const { layer, property } = this.props;
    const propertyValue = this.getLayerColor();
    return (
      <FormRow key={property.propertyName}>
        <FormCol uiSize={4} first>
          <FormRow>
            <Checkbox style={{ flex: 0, paddingRight: 7 }}>
              <CheckboxTick
                noMargin
                checked={typeof propertyValue === "string"}
                onChange={this.handleFillToggle}
              />
            </Checkbox>
            <Text uiSize="s">{this.props.property.title}</Text>
          </FormRow>
        </FormCol>
        <FormCol uiSize={2}>
          <ColorPickerBare
            showGradient={false}
            renderType={"color"}
            layer={layer}
            property={property}
            propertyValue={propertyValue}
            onChangeColor={(color: any) =>
              this.handleChangeColor(color, "AndSkip")
            }
            onPickerClose={this.onPickerClose}
            onPickerOpen={this.onPickerOpen}
            robot={this.props.robot}
          />
        </FormCol>
      </FormRow>
    );
  }
}
