import * as React from "react";
import { IEvent } from "common-interfaces";
import {
  Button,
  ButtonGroup,
  Checkbox,
  CheckboxLabel,
  CheckboxTick,
  FormCol,
  FormRow,
  Icon,
  Text
} from "components-x";
import { Layer } from "domain-x";
import ColumnElement from "./ColumnElement";
import RowElement from "./RowElement";
import { Session } from "session";

type propType = {
  layer: Layer;
  session: Session;
  rootLayer: Layer;
  onEvent: (event: IEvent) => void;
};
const rerenderProps = ["flex", "position", "flexDirection", "flexWrap"];
class Parent extends React.PureComponent<propType, any> {
  componentDidMount() {
    this.props.layer.props.style.on(rerenderProps, this.onUpdate);
    this.props.layer.forEachChild(child =>
      child.props.style.on("position", this.onUpdate)
    );
  }
  onUpdate = () => {
    this.forceUpdate();
  };
  componentDidUpdate(prevProps: propType) {
    prevProps.layer.props.style.off(rerenderProps, this.onUpdate);
    prevProps.layer.forEachChild(child =>
      child.props.style.off("position", this.onUpdate)
    );
    this.props.layer.props.style.on(rerenderProps, this.onUpdate);
    this.props.layer.forEachChild(child =>
      child.props.style.on("position", this.onUpdate)
    );
  }
  componentWillUnmount() {
    this.props.layer.props.style.off(rerenderProps, this.onUpdate);
    this.props.layer.forEachChild(child =>
      child.props.style.off("position", this.onUpdate)
    );
  }

  reverseFlexDirection = (event: any, flexDirection: string) => {
    let newFlexDirection = "column-reverse";
    switch (flexDirection) {
      case "row":
        newFlexDirection = "row-reverse";
        break;
      case "row-reverse":
        newFlexDirection = "row";
        break;
      case "column":
        newFlexDirection = "column-reverse";
        break;
      case "column-reverse":
        newFlexDirection = "column";
        break;
      default:
        newFlexDirection = "column-reverse";
        break;
    }
    this.props.onEvent({
      payload: {
        key: "flexDirection",
        value: newFlexDirection
      },
      originalEvent: event,
      target: this.props.layer,
      type: "setStyleAttribute"
    });
  };
  getRowOrColumnElements = (flexDirection: string) => {
    if (flexDirection === "row" || flexDirection === "row-reverse") {
      return (
        <RowElement
          layer={this.props.layer}
          session={this.props.session}
          onEvent={this.props.onEvent}
        />
      );
    } else if (
      !flexDirection ||
      flexDirection === "column" ||
      flexDirection === "column-reverse"
    ) {
      return (
        <ColumnElement
          layer={this.props.layer}
          session={this.props.session}
          onEvent={this.props.onEvent}
        />
      );
    } else {
      return null;
    }
  };
  getFlexRootElements = () => {
    const flexDirection = this.props.layer.props.getResolvedStyleAttribute(
      "flexDirection"
    );
    const flexWrap = this.props.layer.props.getResolvedStyleAttribute(
      "flexWrap"
    );
    return (
      <>
        {this.getRowOrColumnElements(flexDirection)}
        <FormRow>
          <FormCol first uiSize={1}>
            <ButtonGroup uiSize="xs">
              <Button
                flexible
                borderRight
                uiBackground={700}
                onClick={(event: any) => {
                  this.props.onEvent({
                    payload: {
                      key: "flexWrap",
                      value: "nowrap"
                    },
                    originalEvent: event,
                    target: this.props.layer,
                    type: "setStyleAttribute"
                  });
                }}
                active={flexWrap !== "wrap"}
              >
                <Icon name="no-wrap" size={14} data-tip="No Wrap" />
              </Button>
              <Button
                flexible
                onClick={(event: any) => {
                  this.props.onEvent({
                    payload: {
                      key: "flexWrap",
                      value: "wrap"
                    },
                    originalEvent: event,
                    target: this.props.layer,
                    type: "setStyleAttribute"
                  });
                }}
                active={flexWrap === "wrap"}
                uiBackground={700}
              >
                <Icon name="wrap" size={14} data-tip="Wrap" />
              </Button>
            </ButtonGroup>
          </FormCol>
          <FormCol uiSize={2}>
            <Checkbox>
              <CheckboxTick
                checked={
                  flexDirection === "column-reverse" ||
                  flexDirection === "row-reverse"
                }
                onChange={(event: any) => {
                  this.reverseFlexDirection(event, flexDirection);
                }}
              />
              <CheckboxLabel>Reverse Layout</CheckboxLabel>
            </Checkbox>
          </FormCol>
        </FormRow>
      </>
    );
  };
  render() {
    return (
      <>
        {this.props.layer.getLayerElementType() === "flex"
          ? this.getFlexRootElements()
          : null}
        {this.props.layer.getFlexChildrenLayerIds().length &&
        !(
          this.props.layer.import.layerName === "ScrollView" &&
          this.props.layer !== this.props.rootLayer
        ) ? (
          <FormRow>
            <FormCol first uiSize={4}>
              <Button
                danger
                borderLeft
                borderRight
                borderRadius
                flexible
                uiSize={"s"}
                actionBtn
                caption={
                  <Text uiSize="s" uiColor={50} uppercase letterSpacing bold>
                    Reset Layout
                  </Text>
                }
                onClick={(event: any) => {
                  this.props.onEvent({
                    payload: {},
                    originalEvent: event,
                    target: this.props.layer,
                    type: "changeToAbsolute"
                  });
                }}
              />
            </FormCol>
          </FormRow>
        ) : null}
      </>
    );
  }
}

export default Parent;
