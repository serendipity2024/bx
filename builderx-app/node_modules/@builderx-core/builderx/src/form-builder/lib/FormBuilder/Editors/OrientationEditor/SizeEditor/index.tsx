import { IEvent } from "common-interfaces";
import {
  Button,
  ButtonGroup,
  ButtonGroupLeft,
  ButtonGroupRight,
  FormCol,
  FormGroup,
  FormRow,
  Icon,
  InputGroup,
  InputGroupInput,
  InputGroupLeft,
  InputGroupRight,
  Text,
  WrapperDiv
} from "components-x";
import { Layer } from "domain-x";
import { isNil, debounce } from "lodash";
import * as React from "react";
import { Session } from "session";

type SizeEditorProps = {
  layers: Array<Layer>;
  session: Session;
  onEvent: (event: IEvent) => void;
  getBoundingBox: () => {
    x: number;
    y: number;
    width: number;
    height: number;
    rotation: number;
  };
  captureErrorForSentry: (err: Error) => void;
};
export default class SizeEditor extends React.PureComponent<
  SizeEditorProps,
  {}
> {
  widthInputVal: number;
  heightInputVal: number;
  heightInputRef: any;
  widthInputRef: any;
  onUpdate = (key: any) => {
    this.forceUpdate();
  };
  onUpdateDom = (key: any) => {
    let boundingBox;
    boundingBox = this.props.getBoundingBox();
    if (this.heightInputRef) {
      this.heightInputRef.value = Math.round(boundingBox.height);
    }
    if (this.widthInputRef) {
      this.widthInputRef.value = Math.round(boundingBox.width);
    }
  };
  componentDidMount() {
    this.props.layers.forEach(layer => {
      layer.props.style.on(["width", "height"], this.onUpdate);
      layer.on("aspectRatio", this.onUpdate);
      layer.on("onDragLayer", this.onUpdateDom);
      layer.children.forEach(child => {
        if (child instanceof Layer) {
          child.props.style.on(["flex", "position"], this.onUpdate);
        }
      });
    });

    const boundingBox = this.props.getBoundingBox();
    this.widthInputVal = boundingBox.width;
    this.heightInputVal = boundingBox.height;
  }

  componentDidUpdate(prevProps: SizeEditorProps) {
    prevProps.layers.forEach(layer => {
      layer.props.style.off(["width", "height"], this.onUpdate);
      layer.off("aspectRatio", this.onUpdate);
      layer.off("onDragLayer", this.onUpdateDom);
      layer.children.forEach(child => {
        if (child instanceof Layer) {
          child.props.style.off(["flex", "position"], this.onUpdate);
        }
      });
    });
    this.props.layers.forEach(layer => {
      layer.props.style.on(["width", "height"], this.onUpdate);
      layer.on("onDragLayer", this.onUpdateDom);
      layer.on("aspectRatio", this.onUpdate);
      layer.children.forEach(child => {
        if (child instanceof Layer) {
          child.props.style.on(["flex", "position"], this.onUpdate);
        }
      });
    });
  }

  componentWillUnmount() {
    this.props.layers.forEach(layer => {
      layer.props.style.off(["width", "height"], this.onUpdate);
      layer.off("aspectRatio", this.onUpdate);
      layer.off("onDragLayer", this.onUpdateDom);
      layer.children.forEach(child => {
        if (child instanceof Layer) {
          child.props.style.off(["flex", "position"], this.onUpdate);
        }
      });
    });
  }

  handleChange = (data: string, e: any, type: string) => {
    let value: any = parseFloat(e.target.value);
    value = !isNil(value) && !isNaN(value) ? value : 0;
    var deltaX = 0;
    var deltaY = 0;
    if (data === "width") {
      if (!isNil(this.widthInputVal)) {
        deltaX = value - this.widthInputVal;
      }
      this.widthInputVal = value;
    } else if (data === "height") {
      if (!isNil(this.heightInputVal)) {
        deltaY = value - this.heightInputVal;
      }
      this.heightInputVal = value;
    }
    this.props.onEvent({
      originalEvent: e,
      payload: {
        dimensions: {
          ...this.props.getBoundingBox(),
          [data]: value
        },
        deltaX: deltaX,
        deltaY: deltaY,
        handle: ["B", "R"]
      },
      type: type,
      target: this.props.layers
    });
    if (
      isNil(parseFloat(e.target.value)) ||
      isNaN(parseFloat(e.target.value))
    ) {
      value = undefined;
    }
  };
  toggleAspectRatioLock = () => {
    let hasAspectRatio = this.getFilteredLayers().some((layer: Layer) =>
      layer.aspectRatio ? true : false
    );
    this.props.onEvent({
      type: hasAspectRatio ? "unlockAspectRatio" : "lockAspectRatio",
      target: this.getFilteredLayers(),
      originalEvent: {},
      payload: {},
      manageControls: true
    });
  };
  getFilteredLayers = () => {
    return this.props.layers.filter(
      (layer: Layer) =>
        !(
          layer.type === "text" &&
          layer.heightMode === "auto" &&
          layer.widthMode === "auto"
        )
    );
  };
  render() {
    if (!this.props.layers) {
      return null;
    }

    const disabled = !this.props.layers;

    let boundingBox;
    boundingBox = this.props.getBoundingBox();
    this.widthInputVal = boundingBox.width;
    this.heightInputVal = boundingBox.height;

    const isAutoDoable =
      this.props.layers[this.props.layers.length - 1].isAutoDoable &&
      this.props.layers.length === 1;

    const widthMode = this.props.layers[this.props.layers.length - 1].widthMode;
    const heightMode = this.props.layers[this.props.layers.length - 1]
      .heightMode;
    const disableWidthMode =
      widthMode === "percent" &&
      this.props.layers[0].parent.type === "thirdParty";
    const disableHeightMode =
      heightMode === "percent" &&
      this.props.layers[0].parent.type === "thirdParty";
    const hasAspectRatio = this.props.layers.some((layer: Layer) =>
      layer.aspectRatio ? true : false
    );
    return (
      <WrapperDiv>
        <FormGroup noPadding>
          <FormRow>
            <FormCol first uiSize={4}>
              <InputGroup disabled={disabled}>
                <InputGroupLeft>
                  <Text uiSize="xs" textAlign="left">
                    W
                  </Text>
                </InputGroupLeft>
                <InputGroupRight>
                  <InputGroupInput
                    undo={this.props.session.commandManager.undo}
                    redo={this.props.session.commandManager.redo}
                    uiSize="l"
                    ref={(ref: any) => {
                      this.widthInputRef = ref;
                    }}
                    disabled={disableWidthMode}
                    type="number"
                    validator={e => !isNaN(parseInt(e.target.value, 10))}
                    value={
                      !isNil(boundingBox.width)
                        ? Math.round(boundingBox.width)
                        : ""
                    }
                    onChange={debounce(
                      (e: any) =>
                        this.handleChange("width", e, "moveResizeLayer"),
                      600
                    )}
                  />
                </InputGroupRight>
              </InputGroup>
            </FormCol>
            <FormCol uiSize={1}>
              {this.getFilteredLayers().length ? (
                <Button
                  onClick={this.toggleAspectRatioLock}
                  flexible
                  transparent
                  icon={
                    <Icon
                      name={hasAspectRatio ? "lock2" : "unlock2"}
                      size={14}
                    />
                  }
                />
              ) : null}
            </FormCol>
            <FormCol uiSize={4}>
              <InputGroup disabled={disabled}>
                <InputGroupLeft>
                  <Text uiSize="xs" textAlign="left">
                    H
                  </Text>
                </InputGroupLeft>
                <InputGroupRight>
                  <InputGroupInput
                    undo={this.props.session.commandManager.undo}
                    redo={this.props.session.commandManager.redo}
                    uiSize="l"
                    ref={(ref: any) => {
                      this.heightInputRef = ref;
                    }}
                    disabled={disableHeightMode}
                    validator={e => !isNaN(parseInt(e.target.value, 10))}
                    type="number"
                    value={
                      !isNil(boundingBox.height)
                        ? Math.round(boundingBox.height)
                        : ""
                    }
                    onChange={debounce(
                      (e: any) =>
                        this.handleChange("height", e, "moveResizeLayer"),
                      600
                    )}
                  />
                </InputGroupRight>
              </InputGroup>
            </FormCol>
          </FormRow>
        </FormGroup>
        {this.props.layers[0].type !== "ellipse" &&
          this.props.layers[0].type !== "svg" &&
          this.props.layers[0].type !== "path" && (
            <FormGroup noPadding paddingTop>
              <FormRow>
                <FormCol first flex uiSize={1}>
                  <ButtonGroupLeft width={11}>
                    <Text uiSize="xs" textAlign="left">
                      W
                    </Text>
                  </ButtonGroupLeft>
                  <ButtonGroupRight>
                    <ButtonGroup uiSize="xs">
                      <Button
                        uiSize="xs"
                        borderRight
                        onClick={(e: any) => {
                          this.props.onEvent({
                            originalEvent: e,
                            payload: { key: "width" },
                            type: "setFill",
                            target: this.props.layers
                          });
                        }}
                        active={widthMode === "fill"}
                        flexible
                        icon={
                          <Icon
                            active={widthMode === "fill"}
                            name="infinity"
                            size={13}
                          />
                        }
                        data-tip="Set Width to Fill"
                      />
                      <Button
                        uiSize="xs"
                        borderRight
                        flexible
                        active={widthMode === "fixed"}
                        onClick={(e: any) => {
                          this.props.onEvent({
                            originalEvent: e,
                            payload: { key: "width" },
                            type: "setFixed",
                            target: this.props.layers
                          });
                        }}
                        icon={
                          <Icon
                            active={widthMode === "fixed"}
                            name="horizontal-pixel"
                            size={13}
                          />
                        }
                        data-tip="Set Width to Fixed"
                      />
                      <Button
                        uiSize="xs"
                        borderRight
                        flexible
                        active={widthMode === "percent"}
                        icon={
                          <Icon
                            active={widthMode === "percent"}
                            name="icon_percentage"
                            size={10}
                          />
                        }
                        onClick={(e: any) => {
                          this.props.onEvent({
                            originalEvent: e,
                            payload: { key: "width" },
                            type: "setPercent",
                            target: this.props.layers
                          });
                        }}
                        data-tip="Set Width to Percentage"
                      />
                      {isAutoDoable && (
                        <Button
                          uiSize="xs"
                          disabled={!isAutoDoable}
                          onClick={(e: any) => {
                            this.props.onEvent({
                              originalEvent: e,
                              payload: { key: "width" },
                              type: "setAuto",
                              target: this.props.layers
                            });
                          }}
                          active={widthMode === "auto"}
                          flexible
                          caption="auto"
                          data-tip="Set Width to Auto"
                        />
                      )}
                    </ButtonGroup>
                  </ButtonGroupRight>
                </FormCol>
              </FormRow>
              <FormRow>
                <FormCol first flex uiSize={1}>
                  <ButtonGroupLeft width={11}>
                    <Text uiSize="xs" textAlign="left">
                      H
                    </Text>
                  </ButtonGroupLeft>
                  <ButtonGroupRight>
                    <ButtonGroup uiSize="xs">
                      <Button
                        uiSize="xs"
                        borderRight
                        onClick={(e: any) => {
                          this.props.onEvent({
                            originalEvent: e,
                            payload: { key: "height" },
                            type: "setFill",
                            target: this.props.layers
                          });
                        }}
                        active={heightMode === "fill"}
                        flexible
                        icon={
                          <Icon
                            active={heightMode === "fill"}
                            name="infinity"
                            size={13}
                          />
                        }
                        data-tip="Set Height to Fill"
                      />
                      <Button
                        uiSize="xs"
                        borderRight
                        active={heightMode === "fixed"}
                        flexible
                        onClick={(e: any) => {
                          this.props.onEvent({
                            originalEvent: e,
                            payload: { key: "height" },
                            type: "setFixed",
                            target: this.props.layers
                          });
                        }}
                        icon={
                          <Icon
                            active={heightMode === "fixed"}
                            name="vertical-pixel"
                            size={13}
                          />
                        }
                        data-tip="Set Height to Fixed"
                      />
                      <Button
                        uiSize="xs"
                        borderRight
                        onClick={(e: any) => {
                          this.props.onEvent({
                            originalEvent: e,
                            payload: { key: "height" },
                            type: "setPercent",
                            target: this.props.layers
                          });
                        }}
                        active={heightMode === "percent"}
                        flexible
                        icon={
                          <Icon
                            active={widthMode === "percent"}
                            name="icon_percentage"
                            size={10}
                          />
                        }
                        data-tip="Set Height to Percentage"
                      />
                      {isAutoDoable && (
                        <Button
                          disabled={!isAutoDoable}
                          onClick={(e: any) => {
                            this.props.onEvent({
                              originalEvent: e,
                              payload: { key: "height" },
                              type: "setAuto",
                              target: this.props.layers
                            });
                          }}
                          active={heightMode === "auto"}
                          flexible
                          caption="auto"
                          data-tip="Set Height to Auto"
                        />
                      )}
                    </ButtonGroup>
                  </ButtonGroupRight>
                </FormCol>
              </FormRow>
            </FormGroup>
          )}
      </WrapperDiv>
    );
  }
}
