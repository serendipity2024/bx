import * as React from "react";
import { IEvent } from "common-interfaces";
import { InputGroupInput } from "components-x";
import { debounce } from "lodash";
import { Session } from "session";
type propType = {
  value: string | number;
  onChange: (event: IEvent, value: string) => void;
  session: Session;
};
export default class InputGroupHOC extends React.Component<propType, any> {
  constructor(props: propType) {
    super(props);
    this.state = { value: props.value };
  }
  // tslint:disable-next-line:member-ordering
  debouncedOnEvent = debounce(
    (e: any) => {
      this.props.onChange(e, this.state.value);
    },
    600,
    {}
  );
  componentWillReceiveProps(nextProps: propType) {
    if (nextProps.value !== this.state.value) {
      this.setState({ value: nextProps.value ? nextProps.value : "" });
    }
  }
  render() {
    return (
      <InputGroupInput
        undo={this.props.session.commandManager.undo}
        redo={this.props.session.commandManager.redo}
        value={this.state.value}
        onChange={(e: any) => {
          this.setState({ value: e.target.value });
          this.debouncedOnEvent(e);
        }}
        // onFocus={(e: any) => {
        //   this.props.onFocus(e);
        // }}
        // onBlur={(e: any) => {
        //   this.props.onBlur(e);
        // }}
      />
    );
  }
}
