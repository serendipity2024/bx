import * as React from "react";
import { Component } from "react";

import {
  Button,
  Icon,
  ButtonGroup,
  FormRow,
  FormGroup,
  FormCol
} from "components-x";
import { Layer } from "domain-x";
import { IEvent } from "common-interfaces";
import { Session } from "session";
type propType = {
  layer: Layer;
  session: Session;
  onEvent: (event: IEvent) => void;
};
const rerenderProps = ["flexDirection", "alignSelf"];
class ChildrenElement extends Component<propType, any> {
  constructor(props: propType) {
    super(props);
  }
  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.layer.props.style.on(rerenderProps, this.onUpdate);
  }
  componentDidUpdate(prevProps: propType) {
    prevProps.layer.props.style.off(rerenderProps, this.onUpdate);
    this.props.layer.props.style.on(rerenderProps, this.onUpdate);
  }
  componentWillUnmount() {
    this.props.layer.props.style.off(rerenderProps, this.onUpdate);
  }
  onClick(event: any, key: string, value: string | undefined) {
    this.props.onEvent({
      payload: {
        key: key,
        value: value
      },
      originalEvent: event,
      target: this.props.layer,
      type: value ? "setStyleAttribute" : "removeStyleAttribute"
    });
  }
  render() {
    const layerProps = this.props.layer.props;
    const alignSelf = layerProps.getResolvedStyleAttribute("alignSelf");
    const parentFlexDirection = this.props.layer.getParentLayerFlexDirection();
    const alignSelfIsDoable = this.props.layer.setAlignSelfIsDoable;
    return (
      <React.Fragment>
        <FormGroup
          style={{ paddingBottom: 5, paddingLeft: 0, paddingRight: 0 }}
          noPaddingTop
        >
          <FormRow>
            <FormCol first={true} flex={true} uiSize={1}>
              <ButtonGroup uiSize="xs">
                <Button
                  active={alignSelfIsDoable && alignSelf === "flex-start"}
                  disabled={!alignSelfIsDoable}
                  onClick={(e: any) => {
                    let value =
                      alignSelf === "flex-start" ? undefined : "flex-start";
                    this.onClick(e, "alignSelf", value);
                  }}
                  borderRight
                  noPadding
                  flexible
                  data-tip="Align layer to start"
                  icon={
                    <Icon
                      name={
                        parentFlexDirection === "row"
                          ? "horizontal-flexitem-selfstart"
                          : "flexitem-selfstart"
                      }
                      size={16}
                    />
                  }
                />
                <Button
                  active={alignSelfIsDoable && alignSelf === "center"}
                  disabled={!alignSelfIsDoable}
                  onClick={(e: any) => {
                    let value = alignSelf === "center" ? undefined : "center";
                    this.onClick(e, "alignSelf", value);
                  }}
                  borderRight
                  noPadding
                  flexible
                  data-tip="Align layer to center"
                  icon={
                    <Icon
                      name={
                        parentFlexDirection === "row"
                          ? "horizontal-flexitem-selfcenter"
                          : "flexitem-selfcenter"
                      }
                      size={16}
                    />
                  }
                />
                <Button
                  active={alignSelfIsDoable && alignSelf === "flex-end"}
                  disabled={!alignSelfIsDoable}
                  onClick={(e: any) => {
                    let value =
                      alignSelf === "flex-end" ? undefined : "flex-end";
                    this.onClick(e, "alignSelf", value);
                  }}
                  data-tip="Align layer to end"
                  borderRight
                  noPadding
                  flexible
                  icon={
                    <Icon
                      name={
                        parentFlexDirection === "row"
                          ? "horizontal-flexitem-selfend"
                          : "flexitem-selfend"
                      }
                      size={16}
                    />
                  }
                />
                <Button
                  active={alignSelfIsDoable && alignSelf === "stretch"}
                  disabled={!alignSelfIsDoable}
                  onClick={(e: any) => {
                    let value = alignSelf === "stretch" ? undefined : "stretch";
                    this.onClick(e, "alignSelf", value);
                  }}
                  borderRight
                  noPadding
                  flexible
                  data-tip="Align layer to stretch"
                  icon={
                    <Icon
                      name={
                        parentFlexDirection === "row"
                          ? "horizontal-flexitem-selfstretch"
                          : "flexitem-selfstretch"
                      }
                      size={16}
                    />
                  }
                />
                <Button
                  active={alignSelfIsDoable && alignSelf === "baseline"}
                  disabled={!alignSelfIsDoable}
                  onClick={(e: any) => {
                    let value =
                      alignSelf === "baseline" ? undefined : "baseline";
                    this.onClick(e, "alignSelf", value);
                  }}
                  data-tip="Align layer to baseline"
                  borderRight
                  noPadding
                  flexible
                  icon={
                    <Icon
                      name={
                        parentFlexDirection === "row"
                          ? "horizontal-flexitem-selfbaseline"
                          : "flexitem-selfbaseline"
                      }
                      size={16}
                    />
                  }
                />
              </ButtonGroup>
            </FormCol>
          </FormRow>
        </FormGroup>
      </React.Fragment>
    );
  }
}

export default ChildrenElement;
