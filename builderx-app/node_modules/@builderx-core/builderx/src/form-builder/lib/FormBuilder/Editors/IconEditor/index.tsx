import { IEvent } from "common-interfaces";
import { COLORS, Button, FormRow, Text, FormGroup } from "components-x";
import { Domain, Layer } from "domain-x";
import * as React from "react";
import { IconModalDialog } from "dialog-x";
import Icon from "@builderx/icons";
import { Session } from "session";
type propType = {
  onEvent: (event: IEvent) => void;
  layer: Layer;
  key: string;
  domain: Domain;
  session: Session;
};

export default class IconEditor extends React.Component<propType, any> {
  constructor(props: propType) {
    super(props);
    this.state = {
      showEditor: true,
      show: false
    };
  }
  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.layer.props.on(["name", "type"], this.onUpdate);
  }
  componentDidUpdate(prevProps: propType) {
    prevProps.layer.props.off(["name", "type"], this.onUpdate);
    this.props.layer.props.on(["name", "type"], this.onUpdate);
  }
  componentWillUnmount() {
    this.props.layer.props.off(["name", "type"], this.onUpdate);
  }
  render() {
    const iconName = this.props.layer.props.getResolvedProp("name");
    const iconFamily = this.props.layer.props.getResolvedProp("type");
    return (
      <FormGroup>
        <FormRow marginLeft={10} style={{ width: "100%" }} wrapContent>
          <Icon
            name={iconName}
            type={iconFamily}
            style={{ fontSize: 20, color: COLORS.primary[50] }}
          />
          <Text paddingLeft={8}>{iconFamily}</Text>
          <Text paddingLeft={4}>></Text>
          <Text paddingLeft={4}>{iconName}</Text>
        </FormRow>
        <FormRow style={{ width: "93%" }} marginLeft={7}>
          <Button
            flexible
            borderRadius
            border
            actionBtn
            uiBackground={600}
            onClick={async (e: any) => {
              let response: any = await IconModalDialog(
                true,
                iconFamily,
                iconName
              );
              if (response && response.iconName && response.iconFamily) {
                this.props.onEvent({
                  target: this.props.layer,
                  originalEvent: e,
                  payload: {
                    key: "name",
                    value: response.iconName
                  },
                  type: "setPropAndForget"
                });

                this.props.onEvent({
                  target: this.props.layer,
                  originalEvent: e,
                  payload: {
                    key: "type",
                    value: response.iconFamily
                  },
                  type: "setProp"
                });
              }
            }}
          >
            <Text bold uiColor={0} className="p-1">
              CHANGE ICON
            </Text>
          </Button>
        </FormRow>
      </FormGroup>
    );
  }
}
