import * as React from "react";
import { Text, FormRow, FormCol, InputGroupInput, Slider } from "components-x";
import { Layer } from "domain-x";
import { ControlsProperty, IEvent } from "common-interfaces";
import { isNil, round, debounce } from "lodash";
import { Session } from "session";

type propType = {
  onEvent: (event: IEvent) => void;
  layer: Layer;
  session: Session;
  property: ControlsProperty;
};

class SliderInput extends React.PureComponent<propType, any> {
  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  addEventListeners = (props: propType) => {
    if (props.property.propertyName) {
      if (props.property.category === "props") {
        props.layer.props.on(props.property.propertyName, this.onUpdate);
      } else {
        props.layer.props.style.on(props.property.propertyName, this.onUpdate);
      }
    }
  };
  removeEventListeners = (props: propType) => {
    if (props.property.propertyName) {
      if (props.property.category === "props") {
        props.layer.props.off(props.property.propertyName, this.onUpdate);
      } else {
        props.layer.props.style.off(props.property.propertyName, this.onUpdate);
      }
    }
  };
  componentDidMount() {
    this.addEventListeners(this.props);
  }
  componentDidUpdate(prevProps: propType) {
    this.removeEventListeners(prevProps);
    this.addEventListeners(this.props);
  }
  componentWillUnmount() {
    this.removeEventListeners(this.props);
  }
  onValueChange = (e: any, type: string, isOpacity: any) => {
    const { propertyName } = this.props.property;
    const value = parseInt(e.target.value, 10);
    this.props.onEvent({
      payload: {
        key: propertyName,
        value: isOpacity ? value / 100 : value
      },
      type,
      target: this.props.layer,
      originalEvent: e
    });
    // }
  };
  render() {
    const { title, propertyName, category } = this.props.property;
    let minValue = this.props.property.value.min;
    let maxValue = this.props.property.value.max;
    if (!propertyName || isNil(minValue) || isNil(maxValue)) {
      return null;
    }
    const isOpacity =
      propertyName && propertyName.toLowerCase().includes("opacity");
    let value;
    if (category === "props") {
      value = this.props.layer.props.getProp(propertyName);
    } else {
      value = this.props.layer.props.getResolvedStyleAttribute(propertyName);
    }
    if (isNil(value)) {
      value = this.props.property.value.defaultValue;
    }
    if (isOpacity) {
      minValue *= 100;
      maxValue *= 100;
      value *= 100;
    }
    return (
      <FormRow key={propertyName}>
        <FormCol first={true} uiSize={2}>
          <Text uiSize="s">{title}</Text>
        </FormCol>
        <FormCol uiSize={7}>
          <Slider
            min={round(minValue)}
            max={round(maxValue)}
            onChange={(e: any) => {
              this.onValueChange(
                e,
                category === "props"
                  ? "setPropAndSkip"
                  : "setStyleAttributeAndSkip",
                isOpacity
              );
            }}
            onMouseUp={(e: any) => {
              this.onValueChange(
                e,
                category === "props" ? "setProp" : "setStyleAttribute",
                isOpacity
              );
            }}
            onMouseDown={(e: any) => {
              this.onValueChange(
                e,
                category === "props"
                  ? "setPropAndForget"
                  : "setStyleAttributeAndForget",
                isOpacity
              );
            }}
            value={round(value)}
          />
        </FormCol>
        <FormCol uiSize={3} className="p-0 ml-3">
          <InputGroupInput
            undo={this.props.session.commandManager.undo}
            redo={this.props.session.commandManager.redo}
            type="number"
            validator={e => {
              let val = parseInt(e.target.value, 10);
              return (
                !isNaN(val) &&
                !isNil(maxValue) &&
                val <= round(maxValue) &&
                !isNil(minValue) &&
                val >= round(minValue)
              );
            }}
            min={round(minValue)}
            max={round(maxValue)}
            value={round(value)}
            // onFocus={(e: any) =>
            //   this.onValueChange(
            //     e,
            //     category === "props"
            //       ? "setPropAndForget"
            //       : "setStyleAttributeAndForget",
            //     isOpacity
            //   )
            // }
            // onBlur={(e: any) =>
            //   this.onValueChange(
            //     e,
            //     category === "props" ? "setProp" : "setStyleAttribute",
            //     isOpacity
            //   )
            // }
            onChange={debounce(
              (e: any) =>
                this.onValueChange(
                  e,
                  category === "props" ? "setProp" : "setStyleAttribute",
                  isOpacity
                ),
              600
            )}
          />
        </FormCol>
      </FormRow>
    );
  }
}
export default SliderInput;
