import { ControlsProperty, IEvent } from "common-interfaces";
import {
  Checkbox,
  CheckboxLabel,
  CheckboxTick,
  FormCol,
  FormRow,
  Text
} from "components-x";
import { Layer } from "domain-x";
import { isNil } from "lodash";
import * as React from "react";
import { Session } from "session";
type propType = {
  onEvent: (event: IEvent) => void;
  layer: Layer;
  session: Session;
  property: ControlsProperty;
};
class BooleanInput extends React.PureComponent<propType, any> {
  onUpdate = (key: string) => {
    this.forceUpdate();
  };

  componentDidMount() {
    if (this.props.property.propertyName) {
      if (this.props.property.category === "props") {
        this.props.layer.props.on(
          this.props.property.propertyName,
          this.onUpdate
        );
      } else {
        this.props.layer.props.style.on(
          this.props.property.propertyName,
          this.onUpdate
        );
      }
    }
  }
  componentDidUpdate(prevProps: propType) {
    if (prevProps.property.propertyName) {
      if (prevProps.property.category === "props") {
        prevProps.layer.props.off(
          prevProps.property.propertyName,
          this.onUpdate
        );
      } else {
        prevProps.layer.props.style.off(
          prevProps.property.propertyName,
          this.onUpdate
        );
      }
    }
    if (this.props.property.propertyName) {
      if (this.props.property.category === "props") {
        this.props.layer.props.on(
          this.props.property.propertyName,
          this.onUpdate
        );
      } else {
        this.props.layer.props.style.on(
          this.props.property.propertyName,
          this.onUpdate
        );
      }
    }
  }
  componentWillUnmount() {
    if (this.props.property.propertyName) {
      if (this.props.property.category === "props") {
        this.props.layer.props.off(
          this.props.property.propertyName,
          this.onUpdate
        );
      } else {
        this.props.layer.props.style.off(
          this.props.property.propertyName,
          this.onUpdate
        );
      }
    }
  }

  render() {
    const propertyName = this.props.property.propertyName;
    const category = this.props.property.category;
    if (!propertyName) {
      return null;
    }
    let value;
    if (category === "props") {
      value = this.props.layer.props.getProp(propertyName);
    } else {
      value = this.props.layer.props.getResolvedStyleAttribute(propertyName);
    }
    if (isNil(value)) {
      value = this.props.property.value.defaultValue;
    }
    return (
      <FormRow
        key={propertyName}
        marginLeft={propertyName === "horizontal" ? 10 : 0}
        horizontalPadding={propertyName === "horizontal"}
      >
        <FormCol first={true}>
          <Checkbox>
            <CheckboxTick
              noMargin
              checked={value}
              onChange={(e: any) => {
                this.props.onEvent({
                  payload: {
                    key: propertyName,
                    value: e.target.checked
                  },
                  type: category === "props" ? "setProp" : "setStyleAttribute",
                  originalEvent: e,
                  target: this.props.layer
                });
              }}
            />
            <CheckboxLabel>
              <Text>{this.props.property.title}</Text>
            </CheckboxLabel>
          </Checkbox>
        </FormCol>
      </FormRow>
    );
  }
}
export default BooleanInput;
