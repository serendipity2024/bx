import * as React from "react";
import { Text, FormRow, FormCol, InputGroupInput } from "components-x";
import { Layer } from "domain-x";
import { ControlsProperty, IEvent } from "common-interfaces";
import { isNil, debounce } from "lodash";
import { Session } from "session";

type propType = {
  property: ControlsProperty;
  onEvent: (event: IEvent) => void;
  layer: Layer;
  session: Session;
  resolveNodeValue: (node: any) => any;
};
class InputField extends React.PureComponent<propType, any> {
  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  componentDidMount() {
    if (this.props.property.propertyName) {
      if (this.props.property.category === "props") {
        this.props.layer.props.on(
          this.props.property.propertyName,
          this.onUpdate
        );
      } else {
        this.props.layer.props.style.on(
          this.props.property.propertyName,
          this.onUpdate
        );
      }
    }
  }
  componentDidUpdate(prevProps: propType) {
    if (prevProps.property.propertyName) {
      if (prevProps.property.category === "props") {
        prevProps.layer.props.off(
          prevProps.property.propertyName,
          this.onUpdate
        );
      } else {
        prevProps.layer.props.style.off(
          prevProps.property.propertyName,
          this.onUpdate
        );
      }
    }
    if (this.props.property.propertyName) {
      if (this.props.property.category === "props") {
        this.props.layer.props.on(
          this.props.property.propertyName,
          this.onUpdate
        );
      } else {
        this.props.layer.props.style.on(
          this.props.property.propertyName,
          this.onUpdate
        );
      }
    }
  }
  componentWillUnmount() {
    if (this.props.property.propertyName) {
      if (this.props.property.category === "props") {
        this.props.layer.props.off(
          this.props.property.propertyName,
          this.onUpdate
        );
      } else {
        this.props.layer.props.style.off(
          this.props.property.propertyName,
          this.onUpdate
        );
      }
    }
  }
  onEvent = (e: any, setStyleType: "" | "AndForget" | "AndSkip") => {
    const { category } = this.props.property;
    const value =
      this.props.property.type === "number"
        ? parseFloat(e.target.value)
        : e.target.value;

    this.props.onEvent({
      payload: {
        key: this.props.property.propertyName,
        value
      },
      type:
        category === "props"
          ? `setProp${setStyleType}`
          : `setStyleAttribute${setStyleType}`,
      originalEvent: e,
      target: this.props.layer
    });
  };
  render() {
    const { category, propertyName, title } = this.props.property;
    if (!propertyName) {
      return null;
    }
    let value;
    if (category === "props") {
      value = this.props.layer.props.getResolvedProp(propertyName);
    } else {
      value = this.props.layer.props.getResolvedStyleAttribute(propertyName);
    }

    let placeholder =
      this.props.property.value && this.props.property.value.placeholder
        ? this.props.property.value.placeholder
        : undefined;
    value = this.props.resolveNodeValue(value);
    if (isNil(value)) {
      value = this.props.property.value.defaultValue;
    }
    return (
      <FormRow key={title}>
        <FormCol first>
          <Text uiSize="s">{this.props.property.title}</Text>
        </FormCol>
        <FormCol>
          <InputGroupInput
            undo={this.props.session.commandManager.undo}
            redo={this.props.session.commandManager.redo}
            type={this.props.property.type}
            placeholder={placeholder}
            value={value}
            // onFocus={(e: any) => {
            //   this.onEvent(e, "AndForget");
            // }}
            onChange={debounce((e: any) => {
              this.onEvent(e, "");
            }, 600)}
            // onBlur={(e: any) => {
            //   this.onEvent(e, "");
            // }}
          />
        </FormCol>
      </FormRow>
    );
  }
}
export default InputField;
