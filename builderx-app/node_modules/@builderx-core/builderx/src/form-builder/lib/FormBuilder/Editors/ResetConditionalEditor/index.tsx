import * as React from "react";
import { DomainLayer } from "domain-x";
import { IEvent } from "common-interfaces";
import { FormGroup, FormRow, FormCol, Text, Icon, Button } from "components-x";
import { Session } from "session";

type propType = {
  layer: DomainLayer;
  session: Session;
  onEvent: (event: IEvent) => void;
  getRecordingConditions: () => { [key: string]: any };
};
class ResetConditionalEditor extends React.Component<propType, any> {
  constructor(props: any) {
    super(props);
    this.state = {};
  }
  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  componentDidMount() {
    // const file = this.props.layer.parent as DomainFile;
    // file.on("conditionalExpList", this.onUpdate);
  }
  componentDidUpdate(prevProps: propType) {
    // const prevFile = prevProps.layer.parent as DomainFile;
    // const newFile = this.props.layer.parent as DomainFile;
    // if (newFile !== prevFile) {
    //   prevFile.off("conditionalExpList", this.onUpdate);
    //   newFile.on("conditionalExpList", this.onUpdate);
    // }
  }
  componentWillUnmount() {
    // const file = this.props.layer.parent as DomainFile;
    // file.off("conditionalExpList", this.onUpdate);
  }

  render() {
    return (
      <FormRow paddingBottom={10}>
        <FormCol flex first>
          <Button
            flexible
            uiSize={"xs"}
            onClick={(e: any) => {
              this.props.onEvent({
                originalEvent: e,
                target: this.props.layer,
                payload: {},
                type: "resetConditions"
              });
            }}
            caption={<Text>Reset Conditions</Text>}
            icon={<Icon marginRight name="reset-condition" size={13} />}
          />
        </FormCol>
      </FormRow>
    );
  }
}

export default ResetConditionalEditor;
