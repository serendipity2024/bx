import * as React from "react";
import { Text, FormRow, TextArea } from "components-x";
import { IEvent, ControlsProperty } from "common-interfaces";
import { Layer } from "domain-x";
type propType = {
  value: string;
  layer: Layer;
  onEvent: (event: IEvent) => void;
  property: ControlsProperty;
  validateCallbackPropValue: (value: string) => string;
  overrideTitle?: string;
};
export default class CallbackEditorBare extends React.Component<propType, any> {
  inputRef: any;
  constructor(props: any) {
    super(props);
    this.state = { error: false, shouldSync: true };
  }

  componentDidMount() {
    this.inputRef.value = this.props.value;
  }

  componentWillReceiveProps(nextProps: propType) {
    if (this.state.shouldSync) {
      this.inputRef.value = nextProps.value;
    }
  }

  onBlur(e: any) {
    const { propertyName } = this.props.property;
    if (this.state.error) {
      return;
    }
    if (this.props.overrideTitle) {
      this.props.onEvent({
        payload: {
          key: this.props.overrideTitle,
          value: e.target.value,
          propType: "callback"
        },
        type: "setOverride",
        originalEvent: e,
        target: this.props.layer
      });
    } else if (this.inputRef.value) {
      this.props.onEvent({
        payload: {
          key: propertyName,
          value: e.target.value,
          propType: "callback"
        },
        type: "setProp",
        originalEvent: e,
        target: this.props.layer
      });
    } else {
      this.props.onEvent({
        payload: {
          key: propertyName
        },
        type: "removeProp",
        originalEvent: e,
        target: this.props.layer
      });
    }
    this.setState({ shouldSync: true });
  }
  onFocus = async (e: any) => {
    if (this.state.shouldSync) {
      this.inputRef.value = this.props.value;
    }
    this.setState({ shouldSync: false });
  };
  onEvent = async (e: any) => {
    const code = e.target.value;
    let error: any;
    error = await this.props.validateCallbackPropValue(code);
    if (error) {
      this.setState({ error, code });
    } else {
      this.setState({ error: false, code });
    }
  };

  render() {
    return (
      <>
        <FormRow>
          <TextArea
            onBlur={(e: any) => {
              this.onBlur(e);
            }}
            ref={(ref: any) => {
              this.inputRef = ref;
            }}
            onFocus={(e: any) => {
              this.onFocus(e);
            }}
            uiSize="xl"
            type="text"
            cols={40}
            rows={5}
            scroll={true}
            uiBackground={700}
            onChange={(e: any) => {
              this.onEvent(e);
            }}
            fontFamily={"Menlo, Monaco, Courier New monospace"}
          />
        </FormRow>
        <FormRow center noTopPadding>
          <Text style={{ color: "#bb1e1ecc" }}>
            {this.state.error ? this.state.error.message : ""}
          </Text>
        </FormRow>
      </>
    );
  }
}
