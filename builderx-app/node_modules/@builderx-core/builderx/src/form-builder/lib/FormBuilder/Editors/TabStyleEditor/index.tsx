import * as React from "react";
import { IEvent, StylePropNameType } from "common-interfaces";
import Downshift from "downshift";
import { toLower } from "lodash";
import { DomainLayer } from "domain-x";
import {
  FormRow,
  FormCol,
  DropdownItem,
  DropdownExpanded,
  InputDropdown,
  Scrollbars
} from "components-x";
import { Session } from "session";
import ColorInput from "./../../Components/Color/ColorInput";
import BorderWidthEditor from "./../BorderWidthEditor";
import BorderRadiusEditor from "./../BorderRadiusEditor";

type propType = {
  layer: DomainLayer;
  session: Session;
  onEvent: (event: IEvent) => void;
  uiSize: number | "s" | "m" | "l" | "xs" | "xl" | "xxs" | "xxl" | undefined;
  showGradient: boolean;
  robot: any;
  recordingConditionals: boolean;
};
type stateType = { selectedStyle: StylePropNameType };
export default class TabStyleEditor extends React.PureComponent<
  propType,
  stateType
> {
  styleOptions = [
    "style",
    "labelStyle",
    "indicatorStyle",
    "tabStyle",
    "tabBarStyle"
  ];
  constructor(props: propType) {
    super(props);
    this.state = { selectedStyle: "style" };
  }
  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.layer.props[this.state.selectedStyle].on("*", this.onUpdate);
  }
  componentDidUpdate(prevProps: propType, prevState: stateType) {
    prevProps.layer.props[prevState.selectedStyle].off("*", this.onUpdate);
    this.props.layer.props[this.state.selectedStyle].on("*", this.onUpdate);
  }
  componentWillUnmount() {
    this.props.layer.props[this.state.selectedStyle].off("*", this.onUpdate);
  }
  renderDropDownComponent = () => {
    return (
      <FormRow key={`tab-style-editor`}>
        <FormCol uiSize={3}>
          <Downshift
            selectedItem={this.state.selectedStyle}
            onChange={(e: any) => this.handleChange(e)}
          >
            {({
              getButtonProps,
              getItemProps,
              isOpen,
              selectedItem,
              getInputProps,
              selectItem,
              openMenu,
              closeMenu,
              inputValue,
              clearSelection,
              highlightedIndex
            }: any) => (
              <div>
                <InputDropdown
                  onClick={() => {
                    if (isOpen) {
                      selectItem(selectedItem);
                      closeMenu();
                    } else {
                      clearSelection();
                      openMenu();
                    }
                  }}
                  inputProps={getInputProps({
                    placeholder: "tab style"
                  })}
                />

                {isOpen ? (
                  <DropdownExpanded isOpen={isOpen} width="95%">
                    <Scrollbars autoHeight>
                      {this.styleOptions
                        .filter(
                          (o: any) =>
                            !inputValue ||
                            toLower(o).includes(toLower(inputValue))
                        )
                        .map((option: any, index: any) => {
                          return (
                            <DropdownItem
                              key={option}
                              {...getItemProps({
                                item: option
                              })}
                              selected={option === selectedItem}
                              highlighted={highlightedIndex === index}
                            >
                              {option}
                            </DropdownItem>
                          );
                        })}
                    </Scrollbars>
                  </DropdownExpanded>
                ) : null}
              </div>
            )}
          </Downshift>
        </FormCol>
      </FormRow>
    );
  };
  handleChange = (selectedStyle: any) => {
    if (selectedStyle) {
      this.setState({ selectedStyle });
    }
  };
  render() {
    return (
      <>
        {this.renderDropDownComponent()}
        <ColorInput
          uiSize={this.props.uiSize}
          session={this.props.session}
          key={`tab-style-color`}
          layer={this.props.layer}
          onEvent={
            this.props.recordingConditionals
              ? () => {
                  //
                }
              : this.props.onEvent
          }
          property={{
            propertyName: "backgroundColor",
            type: "color",
            title: "Fill",
            value: {
              defaultValue: "#fff"
            },
            category: "style"
          }}
          showGradient={false}
          stylePropName={this.state.selectedStyle}
          robot={this.props.robot}
        />
        <BorderWidthEditor
          key={`tab-style-border-editor`}
          session={this.props.session}
          layer={this.props.layer}
          onEvent={
            this.props.recordingConditionals
              ? () => {
                  //
                }
              : this.props.onEvent
          }
          stylePropName={this.state.selectedStyle}
          robot={this.props.robot}
          value={{}}
        />
        <BorderRadiusEditor
          key={`tab-style-border-radius-editor`}
          session={this.props.session}
          layer={this.props.layer}
          onEvent={
            this.props.recordingConditionals
              ? () => {
                  //
                }
              : this.props.onEvent
          }
          stylePropName={"style"}
        />
      </>
    );
  }
}
