import * as React from "react";
import MarginBox from "./MarginBox";
import { BoxModel, Layer } from "domain-x";
import { forEach, upperFirst } from "lodash";
import { IEvent } from "common-interfaces";
import { Utils } from "utils";
import { Session } from "session";
type propType = {
  title: string;
  session: Session;
  layer: Layer;
  onEvent: (event: IEvent) => void;
};
class ChildMarginBoxContainer extends React.PureComponent<propType, any> {
  constructor(props: any) {
    super(props);
  }
  onUpdate = () => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.layer.ui.on("childMargin", this.onUpdate);
    this.props.layer.forEachChild((child: any) => {
      child.props.style.on(
        ["margin", "marginTop", "marginRight", "marginBottom", "marginLeft"],
        this.onUpdate
      );
    });
  }
  componentDidUpdate(prevProps: propType) {
    prevProps.layer.ui.off("childMargin", this.onUpdate);
    prevProps.layer.forEachChild((child: any) => {
      child.props.style.off(
        ["margin", "marginTop", "marginRight", "marginBottom", "marginLeft"],
        this.onUpdate
      );
    });
    this.props.layer.ui.on("childMargin", this.onUpdate);
    this.props.layer.forEachChild((child: any) => {
      child.props.style.on(
        ["margin", "marginTop", "marginRight", "marginBottom", "marginLeft"],
        this.onUpdate
      );
    });
  }
  componentWillUnmount() {
    this.props.layer.ui.off("childMargin", this.onUpdate);
    this.props.layer.forEachChild((child: any) => {
      child.props.style.off(
        ["margin", "marginTop", "marginRight", "marginBottom", "marginLeft"],
        this.onUpdate
      );
    });
  }
  onChangeEnd = (e: any, eventName: string) => {
    const margin: BoxModel = this.getLayerChildMarginProperties();
    if (!margin) {
      return;
    }
    let marginVal: { [key: string]: number | boolean } = {};
    if (margin.lock) {
      marginVal = { margin: e.target.value, lock: true };
    } else {
      let allTrue = true;
      forEach(margin, (value: boolean, key: string) => {
        if (key === "lock") {
          return;
        }
        if (value) {
          marginVal[`margin${upperFirst(key)}`] = e.target.value;
        }
        allTrue = allTrue && value;
      });
      if (allTrue) {
        marginVal = { margin: e.target.value, lock: true };
      }
    }
    let type = "updateLayerChildMargin";
    if (eventName === "onChange") {
      type = "updateLayerChildMarginAndSkip";
    } else if (eventName === "onMouseDown") {
      type = "updateLayerChildMarginAndForget";
    }
    this.props.onEvent({
      type: type,
      payload: {
        properties: marginVal,
        key: "margin"
      },
      target: this.props.layer,
      originalEvent: e
    });
  };

  onClickLockIcon = (e: any) => {
    const childMargin = this.getLayerChildMarginProperties();
    if (!childMargin) {
      return;
    }
    const value = !childMargin.lock;
    this.props.onEvent({
      type: "updateEditorState",
      payload: {
        key: "childMargin",
        properties: {
          lock: value,
          left: value,
          right: value,
          bottom: value,
          top: value
        }
      },
      target: this.props.layer,
      originalEvent: e
    });
  };

  getChildStyleAttribute = (propName: string) => {
    let value = "";
    const children = this.props.layer.getChildren();
    if (children.length > 0) {
      if (!Utils.shouldIgnoreLayer(children[0].type)) {
        return (children[0] as Layer).props.getResolvedStyleAttribute(propName);
      }
    }
    return value;
  };

  getLayerChildMarginProperties = () => {
    return this.props.layer.ui.childMargin;
  };

  getCurrentSelectedMarginPropValue = () => {
    let marginTop, marginRight, marginBottom, marginLeft, marginAll;
    marginAll = this.getChildStyleAttribute("margin");
    marginLeft = this.getChildStyleAttribute("marginLeft");
    marginTop = this.getChildStyleAttribute("marginTop");
    marginRight = this.getChildStyleAttribute("marginRight");
    marginBottom = this.getChildStyleAttribute("marginBottom");
    const defaultValue = "0";
    const margin = this.getLayerChildMarginProperties();
    if (!margin) {
      return;
    }
    if (
      (margin.top && margin.right && margin.bottom && margin.left) ||
      margin.lock
    ) {
      return marginAll;
    }
    if (margin.top) {
      return marginTop;
    }
    if (margin.bottom) {
      return marginBottom;
    }
    if (margin.left) {
      return marginLeft;
    }
    if (margin.right) {
      return marginRight;
    }

    if (
      marginLeft === marginTop &&
      marginLeft === marginRight &&
      marginLeft === marginBottom
    ) {
      return marginLeft;
    }

    if (!margin.top && !margin.right && !margin.bottom && !margin.left) {
      return defaultValue;
    }
  };

  updateEditorState = (propertyNameValue: string) => {
    const childMargin = this.getLayerChildMarginProperties();
    if (!childMargin) {
      return;
    }
    let editorVal: { [key: string]: boolean } = {};
    if (propertyNameValue === "margin") {
      editorVal = { lock: true };
    } else {
      if (propertyNameValue === "marginLeft") {
        if (
          !childMargin.left &&
          childMargin.top &&
          childMargin.right &&
          childMargin.bottom
        ) {
          editorVal = { lock: true, left: !childMargin.left };
        } else if (
          childMargin.left &&
          childMargin.top &&
          childMargin.right &&
          childMargin.bottom
        ) {
          editorVal = {
            lock: false,
            left: true,
            right: false,
            bottom: false,
            top: false
          };
        } else {
          editorVal = { lock: false, left: !childMargin.left };
        }
      }
      if (propertyNameValue === "marginRight") {
        if (
          !childMargin.right &&
          childMargin.top &&
          childMargin.left &&
          childMargin.bottom
        ) {
          editorVal = { lock: true, right: !childMargin.right };
        } else if (
          childMargin.left &&
          childMargin.top &&
          childMargin.right &&
          childMargin.bottom
        ) {
          editorVal = {
            lock: false,
            left: false,
            right: true,
            bottom: false,
            top: false
          };
        } else {
          editorVal = { lock: false, right: !childMargin.right };
        }
      }
      if (propertyNameValue === "marginTop") {
        if (
          !childMargin.top &&
          childMargin.left &&
          childMargin.right &&
          childMargin.bottom
        ) {
          editorVal = { lock: true, top: !childMargin.top };
        } else if (
          childMargin.left &&
          childMargin.top &&
          childMargin.right &&
          childMargin.bottom
        ) {
          editorVal = {
            lock: false,
            left: false,
            right: false,
            bottom: false,
            top: true
          };
        } else {
          editorVal = { lock: false, top: !childMargin.top };
        }
      }
      if (propertyNameValue === "marginBottom") {
        if (
          !childMargin.bottom &&
          childMargin.top &&
          childMargin.right &&
          childMargin.left
        ) {
          editorVal = { lock: true, bottom: !childMargin.bottom };
        } else if (
          childMargin.left &&
          childMargin.top &&
          childMargin.right &&
          childMargin.bottom
        ) {
          editorVal = {
            lock: false,
            left: false,
            right: false,
            bottom: true,
            top: false
          };
        } else {
          editorVal = { lock: false, bottom: !childMargin.bottom };
        }
      }
    }
    this.props.onEvent({
      type: "updateEditorState",
      payload: {
        key: "childMargin",
        properties: editorVal
      },
      target: this.props.layer,
      originalEvent: null
    });
  };
  render() {
    return (
      <MarginBox
        title={this.props.title}
        session={this.props.session}
        currentValue={this.getCurrentSelectedMarginPropValue()}
        margin={this.props.layer.ui.childMargin}
        onChangeEnd={this.onChangeEnd}
        onClickLockIcon={this.onClickLockIcon}
        updateEditorState={this.updateEditorState}
      />
    );
  }
}

export default ChildMarginBoxContainer;
