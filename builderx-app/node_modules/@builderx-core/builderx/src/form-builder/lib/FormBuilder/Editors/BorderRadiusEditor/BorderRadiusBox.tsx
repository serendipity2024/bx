import * as React from "react";
import {
  BorderRadius,
  TopLeftRadius,
  TopRightRadius,
  BottomLeftRadius,
  BottomRightRadius,
  BorderRadiusLock,
  Icon,
  FormRow,
  FormCol,
  Slider,
  InputGroupInput
} from "components-x";
import { BoxModel } from "domain-x";
import { get, debounce } from "lodash";
import { Session } from "session";

export default class BorderRadiusBox extends React.Component<
  {
    currentValue: number;
    borderRadius: BoxModel;
    onChangeEnd: (e: any, eventName: string) => void;
    onClickLockIcon: (e: any) => void;
    session: Session;
    updateEditorState: (prop: string) => void;
  },
  any
> {
  handleOnClick(propertyName: string) {
    this.props.updateEditorState(propertyName);
  }
  handleLockClickIcon(e: any) {
    this.props.onClickLockIcon(e);
  }
  render() {
    return (
      <FormRow marginTop={5}>
        <FormCol first={true} uiSize={2}>
          <BorderRadius>
            <TopLeftRadius
              selected={this.props.borderRadius.top}
              onClick={() => this.handleOnClick("borderTopLeftRadius")}
            />
            <TopRightRadius
              selected={this.props.borderRadius.right}
              onClick={() => this.handleOnClick("borderTopRightRadius")}
            />
            <BottomLeftRadius
              selected={this.props.borderRadius.left}
              onClick={() => this.handleOnClick("borderBottomLeftRadius")}
            />
            <BottomRightRadius
              selected={this.props.borderRadius.bottom}
              onClick={() => this.handleOnClick("borderBottomRightRadius")}
            />
            <BorderRadiusLock>
              <Icon
                name={this.props.borderRadius.lock ? "lock" : "unlock"}
                size={16}
                onClick={(e: any) => this.handleLockClickIcon(e)}
              />
            </BorderRadiusLock>
          </BorderRadius>
        </FormCol>
        <FormCol first uiSize={7}>
          <Slider
            min={0}
            max={100}
            value={this.props.currentValue ? this.props.currentValue : 0}
            onMouseUp={(e: any) => {
              this.props.onChangeEnd(e, "onMouseUp");
            }}
            onMouseDown={(e: any) => {
              this.props.onChangeEnd(e, "onMouseDown");
            }}
            onChange={(e: any) => {
              this.props.onChangeEnd(e, "onChange");
            }}
          />
        </FormCol>
        <FormCol uiSize={2}>
          <InputGroupInput
            undo={this.props.session.commandManager.undo}
            redo={this.props.session.commandManager.redo}
            validator={e => !isNaN(parseInt(e.target.value, 10))}
            type="number"
            value={this.props.currentValue ? this.props.currentValue : 0}
            // onChange={(e: any) => {
            //   this.props.onChangeEnd(e, "onChange");
            // }}
            // onFocus={(e: any) => this.props.onChangeEnd(e, "onMouseDown")}
            // onBlur={(e: any) => this.props.onChangeEnd(e, "onMouseUp")}
            onChange={debounce(
              (e: any) => this.props.onChangeEnd(e, "onMouseUp"),
              600
            )}
          />
        </FormCol>
      </FormRow>
    );
  }
}
