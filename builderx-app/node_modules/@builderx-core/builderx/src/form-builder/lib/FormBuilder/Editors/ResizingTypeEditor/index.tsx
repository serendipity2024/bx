import * as React from "react";
import { WrapperDiv, FormRow, FormCol, FixedButton, Text } from "components-x";
import ResizingTypeBox from "./ResizingTypeBox";
import {
  ResizingTypeAttributes,
  IEvent,
  IResizingType
} from "common-interfaces";
import { Layer } from "domain-x";
import { Session } from "session";

type propType = {
  layer: Layer;
  session: Session;
  onEvent: (event: IEvent) => void;
  additionalOptions?: any;
  rootLayer: Layer;
};
export default class ResizingTypeEditor extends React.PureComponent<
  propType,
  any
> {
  onUpdate = () => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.layer.props.style.on(["width", "height"], this.onUpdate);
    this.props.layer.ui.on(["resizingType"], this.onUpdate);
  }
  componentDidUpdate(prevProps: propType) {
    prevProps.layer.props.style.off(["width", "height"], this.onUpdate);
    prevProps.layer.ui.off(["resizingType"], this.onUpdate);
    this.props.layer.props.style.on(["width", "height"], this.onUpdate);
    this.props.layer.ui.on(["resizingType"], this.onUpdate);
  }
  componentWillUnmount() {
    this.props.layer.props.style.off(["width", "height"], this.onUpdate);
    this.props.layer.ui.off(["resizingType"], this.onUpdate);
  }
  toggleResizingType = (attribute: ResizingTypeAttributes, e: any) => {
    this.props.onEvent({
      type: "toggleResizingType",
      target: this.props.layer,
      originalEvent: e,
      payload: attribute
    });
  };

  render() {
    if (
      !this.props.layer ||
      (this.props.layer &&
        this.props.layer.import.layerName === "ScrollView" &&
        this.props.layer === this.props.rootLayer)
    ) {
      return null;
    }
    const resizingType: IResizingType = this.props.layer.getResizingType();

    if (!resizingType) {
      return null;
    }
    const height = resizingType.height;
    const width = resizingType.width;

    let isAuto = false;
    if (this.props.layer && this.props.layer.type === "text") {
      isAuto = this.props.layer.isHeightAuto && this.props.layer.isWidthAuto;
    }

    if (this.props.layer.toggleResizingTypeIsDoable()) {
      return (
        <WrapperDiv
          style={{ width: "170px", marginLeft: "11%" }}
          className="pt-2 pb-4"
        >
          <FormRow>
            <FormCol first uiSize={4}>
              <ResizingTypeBox
                layer={this.props.layer}
                session={this.props.session}
                toggleResizingType={this.toggleResizingType}
                additionalOptions={this.props.additionalOptions}
              />
            </FormCol>
            {!(
              this.props.additionalOptions &&
              this.props.additionalOptions.hideSize
            ) && (
              <FormCol uiSize={8}>
                <FormRow>
                  <FormCol first>
                    <FixedButton
                      position="right"
                      selected={width ? true : false}
                      onClick={(e: any) => {
                        if (!isAuto) {
                          this.toggleResizingType("width", e);
                        }
                      }}
                    />
                  </FormCol>
                  <FormCol uiSize={3}>
                    <Text uiSize="s">Fix Width</Text>
                  </FormCol>
                </FormRow>
                <FormRow>
                  <FormCol first>
                    <FixedButton
                      selected={height ? true : false}
                      onClick={(e: any) => {
                        if (!isAuto) {
                          this.toggleResizingType("height", e);
                        }
                      }}
                    />
                  </FormCol>
                  <FormCol uiSize={3}>
                    <Text uiSize="s">Fix Height</Text>
                  </FormCol>
                </FormRow>
              </FormCol>
            )}
          </FormRow>
        </WrapperDiv>
      );
    }
    return null;
  }
}
