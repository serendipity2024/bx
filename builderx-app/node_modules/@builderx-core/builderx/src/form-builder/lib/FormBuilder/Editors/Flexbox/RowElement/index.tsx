import * as React from "react";
import { Component } from "react";
import { Button, Icon, ButtonGroup, FormRow, FormCol } from "components-x";
import { Layer } from "domain-x";
import { IEvent } from "common-interfaces";
import { Session } from "session";
type propType = {
  layer: Layer;
  session: Session;
  onEvent: (event: IEvent) => void;
};
const rerenderProps = ["flexDirection", "alignItems", "justifyContent"];
class RowElement extends Component<propType, any> {
  componentDidMount() {
    this.props.layer.props.style.on(rerenderProps, this.onUpdate);
  }
  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  componentDidUpdate(prevProps: propType) {
    prevProps.layer.props.style.off(rerenderProps, this.onUpdate);
    this.props.layer.props.style.on(rerenderProps, this.onUpdate);
  }
  componentWillUnmount() {
    this.props.layer.props.style.off(rerenderProps, this.onUpdate);
  }

  onClick(event: any, key: string, value: string | undefined) {
    this.props.onEvent({
      payload: {
        key: key,
        value: value
      },
      originalEvent: event,
      target: this.props.layer,
      type: "setStyleAttribute"
    });
  }

  render() {
    const layerProps = this.props.layer.props;
    const alignItems =
      layerProps.getResolvedStyleAttribute("alignItems") || "flex-start";
    const justifyContent = layerProps.getResolvedStyleAttribute(
      "justifyContent"
    );
    const flexDirection = layerProps.getResolvedStyleAttribute("flexDirection");
    const isDisabled = !this.props.layer.setFlexPropertyIsDoable; // not of doable
    return (
      <>
        <FormRow>
          <FormCol first>
            <ButtonGroup uiSize={"xs"}>
              <Button
                data-cypress-id="horizontal-justify-flex-start-button"
                active={justifyContent === "flex-start" ? true : false}
                flexible
                borderRight
                uiBackground={700}
                disabled={isDisabled}
                onClick={(e: any) => {
                  let value =
                    justifyContent === "flex-start" ? undefined : "flex-start";
                  this.onClick(e, "justifyContent", value);
                }}
                icon={
                  <Icon
                    size={14}
                    name={
                      flexDirection === "row-reverse"
                        ? "flexlayout-end"
                        : "flexlayout-start"
                    }
                  />
                }
                data-tip="Align layers to left"
                data-for="tooltip-right"
              />
              <Button
                data-cypress-id="horizontal-justify-center-button"
                active={justifyContent === "center" ? true : false}
                flexible
                borderRight
                uiBackground={700}
                disabled={isDisabled}
                onClick={(e: any) => {
                  let value =
                    justifyContent === "center" ? undefined : "center";
                  this.onClick(e, "justifyContent", value);
                }}
                icon={<Icon size={14} name={"flexlayout-center"} />}
                data-tip="Align layers to middle"
              />

              <Button
                data-cypress-id="horizontal-justify-flex-end-button"
                active={justifyContent === "flex-end" ? true : false}
                flexible
                borderRight
                uiBackground={700}
                disabled={isDisabled}
                onClick={(e: any) => {
                  let value =
                    justifyContent === "flex-end" ? undefined : "flex-end";
                  this.onClick(e, "justifyContent", value);
                }}
                icon={
                  <Icon
                    size={14}
                    name={
                      flexDirection === "row-reverse"
                        ? "flexlayout-start"
                        : "flexlayout-end"
                    }
                  />
                }
                data-tip="Align layers to right"
              />

              <Button
                data-cypress-id="horizontal-justify-space-between-button"
                active={justifyContent === "space-between" ? true : false}
                flexible
                borderRight
                uiBackground={700}
                disabled={isDisabled}
                onClick={(e: any) => {
                  let value =
                    justifyContent === "space-between"
                      ? undefined
                      : "space-between";
                  this.onClick(e, "justifyContent", value);
                }}
                icon={<Icon size={14} name={"flexlayout-spacebetween"} />}
                data-tip="Distribute layers according to space between them"
              />

              <Button
                data-cypress-id="horizontal-justify-space-around-button"
                active={justifyContent === "space-around" ? true : false}
                flexible
                uiBackground={700}
                disabled={isDisabled}
                onClick={(e: any) => {
                  let value =
                    justifyContent === "space-around"
                      ? undefined
                      : "space-around";
                  this.onClick(e, "justifyContent", value);
                }}
                icon={<Icon size={14} name={"flexlayout-spacearound"} />}
                data-tip="Distribute layers according to space around them"
                data-for="tooltip-left"
              />
            </ButtonGroup>
          </FormCol>
        </FormRow>
        <FormRow>
          <FormCol first>
            <ButtonGroup uiSize={"xs"}>
              <Button
                data-cypress-id="horizontal-align-flex-start-button"
                active={alignItems === "flex-start" ? true : false}
                flexible
                borderRight
                uiBackground={700}
                disabled={isDisabled}
                onClick={(e: any) => {
                  let value =
                    alignItems === "flex-start" ? undefined : "flex-start";
                  this.onClick(e, "alignItems", value);
                }}
                icon={
                  <Icon
                    size={14}
                    name={
                      flexDirection === "row"
                        ? "flexlayout-top"
                        : "flexlayout-horizontal-reverse-alignstart"
                    }
                  />
                }
                data-tip="Align layers to top"
                data-for="tooltip-right"
              />
              <Button
                data-cypress-id="horizontal-align-center-button"
                active={alignItems === "center" ? true : false}
                flexible
                borderRight
                uiBackground={700}
                disabled={isDisabled}
                onClick={(e: any) => {
                  let value = alignItems === "center" ? undefined : "center";
                  this.onClick(e, "alignItems", value);
                }}
                icon={
                  <Icon
                    size={14}
                    name={
                      flexDirection === "row"
                        ? "flexlayout-horizontal-align-center"
                        : "flexlayout-horizontal-reverse-aligncenter"
                    }
                  />
                }
                data-tip="Align layers to center"
              />
              <Button
                data-cypress-id="horizontal-align-flex-end-button"
                active={alignItems === "flex-end" ? true : false}
                flexible
                borderRight
                uiBackground={700}
                disabled={isDisabled}
                onClick={(e: any) => {
                  let value =
                    alignItems === "flex-end" ? undefined : "flex-end";
                  this.onClick(e, "alignItems", value);
                }}
                icon={
                  <Icon
                    size={14}
                    name={
                      flexDirection === "row"
                        ? "flexlayout-bottom"
                        : "flexlayout-horizontal-reverse-alignend"
                    }
                  />
                }
                data-tip="Align layers to bottom"
              />
              <Button
                data-cypress-id="horizontal-align-stretch-button"
                active={alignItems === "stretch" ? true : false}
                flexible
                borderRight
                uiBackground={700}
                disabled={isDisabled}
                onClick={(e: any) => {
                  let value = alignItems === "stretch" ? undefined : "stretch";
                  this.onClick(e, "alignItems", value);
                }}
                icon={<Icon size={14} name={"flexlayout-justify"} />}
                data-tip="Distribute layers to stretch horizontally"
              />
              <Button
                data-cypress-id="horizontal-align-baseline-button"
                active={
                  alignItems === "baseline" && justifyContent === "center"
                    ? true
                    : false
                }
                flexible
                uiBackground={700}
                disabled={isDisabled}
                onClick={(e: any) => {
                  let value =
                    alignItems === "baseline" ? undefined : "baseline";
                  this.onClick(e, "alignItems", value);
                }}
                icon={
                  <Icon
                    size={14}
                    name={
                      flexDirection === "row"
                        ? "flexlayout-baseline"
                        : "flexlayout-horizontal-reverse-alignbaseline"
                    }
                  />
                }
                data-tip="Distribute layers to baseline horizontally"
                data-for="tooltip-left"
              />
            </ButtonGroup>
          </FormCol>
        </FormRow>
      </>
    );
  }
}

export default RowElement;
