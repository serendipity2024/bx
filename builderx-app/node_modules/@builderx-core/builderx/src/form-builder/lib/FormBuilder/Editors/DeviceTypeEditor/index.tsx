import { Device, DeviceStore } from "bx-constants";
import { IEvent } from "common-interfaces";
import {
  Button,
  FormCol,
  FormRow,
  Icon,
  Text,
  FormGroup,
  InputGroup,
  InputGroupLeft,
  InputGroupRight,
  InputGroupInput,
  SelectX,
  Checkbox,
  CheckboxTick,
  CheckboxLabel
} from "components-x";
import { File as DomainFile, Layer } from "domain-x";
import { capitalize, isEmpty, toLower, isNil, debounce } from "lodash";
import * as React from "react";
import { Project } from "session";
import { Session } from "session";

type propType = {
  key: string;
  session: Session;
  layer: Layer;
  onEvent: (event: IEvent) => void;
  getRecordingConditions: () => { [key: string]: any };
  getBoundingBox: () => {
    x: number;
    y: number;
    width: number;
    height: number;
    rotation: number;
  };
  project: Project;
  file: DomainFile;
};

const rerenderProps = [
  "scopeVariables",
  "deviceName",
  "deviceOrientation",
  "statusBar"
];
class DeviceTypeEditor extends React.PureComponent<propType, any> {
  hovered: string;
  devices: Array<Device> = [];
  prevOS: string;
  heightInputRef: any;
  widthInputRef: any;
  onUpdate = (keys: any) => {
    this.forceUpdate();
  };
  // attachStatusBarListeners = () => {
  //   const statusBarLayer = this.getStatusBarLayer();
  //   if (statusBarLayer) {
  //     statusBarLayer.props.on("hidden", this.onUpdate);
  //   }
  //   this.props.layer.on("children", this.onUpdate);
  // };
  // removeStatusBarListeners = () => {
  //   const statusBarLayer = this.getStatusBarLayer();
  //   if (statusBarLayer) {
  //     statusBarLayer.props.off("hidden", this.onUpdate);
  //   }
  //   this.props.layer.off("children", this.onUpdate);
  // };

  onUpdateDom = (key: any) => {
    const boundingBox = {
      width: this.props.file.getBoundingClientRect().width,
      height: this.props.file.getBoundingClientRect().height
    };

    if (this.heightInputRef) {
      this.heightInputRef.value = Math.round(boundingBox.height);
    }
    if (this.widthInputRef) {
      this.widthInputRef.value = Math.round(boundingBox.width);
    }
  };
  componentDidMount() {
    this.props.file.on(rerenderProps, this.onUpdate);
    this.props.file.props.style.on(["width", "height"], this.onUpdate);
    // this.attachStatusBarListeners();
    this.fetchDeviceList();
  }

  componentDidUpdate(prevProps: propType) {
    try {
      const prevFile = prevProps.file as DomainFile;
      const newFile = this.props.file;

      if (newFile !== prevFile || newFile.layer !== prevFile.layer) {
        prevFile.off(rerenderProps, this.onUpdate);
        newFile.on(rerenderProps, this.onUpdate);

        prevFile.props.style.off(["width", "height"], this.onUpdate);
        newFile.props.style.on(["width", "height"], this.onUpdate);
      }
      // this.attachStatusBarListeners();
      this.fetchDeviceList();
    } catch (error) {
      console.log(error, "error in DeviceTypeEditor");
    }
  }
  componentWillUnmount() {
    const file = this.props.file as DomainFile;
    file.off(rerenderProps, this.onUpdate);
    file.props.style.off(["width", "height"], this.onUpdate);
    // this.removeStatusBarListeners();
  }
  fetchDeviceList() {
    const currentOS = this.getDeviceOS();
    if (currentOS) {
      if (this.prevOS !== currentOS) {
        this.prevOS = currentOS;
        this.devices = DeviceStore.getDevicesWithSameOS(currentOS);
      }
    } else {
      this.devices = [];
    }
  }
  getDeviceOS() {
    const file = this.props.file;
    const currentDevice = file.scopeVariables["platform"];
    return currentDevice ? currentDevice : "iOS";
  }

  handleChangeValue = (property: string, e: any, type: string) => {
    let value = parseFloat(e.target.value);
    value = !isNil(value) && !isNaN(value) ? value : 0;
    var deltaX = 0;
    var deltaY = 0;
    if (property === "width") {
      deltaX = value - this.props.file.getBoundingClientRect().width;
    }
    if (property === "height") {
      deltaY = value - this.props.file.getBoundingClientRect().height;
    }

    this.props.onEvent({
      originalEvent: e,
      payload: {
        deltaX: deltaX,
        deltaY: deltaY,
        handle: ["B", "R"]
      },
      type: type,
      target: [this.props.file]
    });

    // this.props.onEvent({
    //   payload: {
    //     key: property,
    //     value: value
    //   },
    //   type: "setStyleAttribute",
    //   target: this.props.file,
    //   originalEvent: null
    // });
  };

  handleChange = (property: string, e?: any) => {
    const devices = {
      iOS: "iPhone X",
      Android: "Samsung Note 8",
      Web: "Web 1366"
    };
    if (property === "iOS" || property === "Android" || property === "Web") {
      this.props.onEvent({
        type: "setDeviceName",
        payload: devices[property],
        originalEvent: e
      });
    } else if (property === "deviceName") {
      if (e !== null) {
        this.props.onEvent({
          type: "setDeviceName",
          payload: e,
          originalEvent: null
        });
      }
    } else if (property === "deviceOrientation") {
      if (e !== null) {
        this.props.onEvent({
          type: "setDeviceOrientation",
          payload: e,
          originalEvent: null
        });
      }
    }
  };
  // handleRecording(property: string, e?: any) {
  //   const recordingConditions = this.props.getRecordingConditions();
  //   let osConditionState: string = recordingConditions["platform"];
  //   if (property === "iOS" || property === "Android" || property === "Web") {
  //     if (osConditionState !== property) {
  //       this.handleChange(property);
  //     }
  //     this.props.onEvent({
  //       type: "updateRecordingConditions",
  //       payload: {
  //         key: "platform",
  //         value: osConditionState === property ? undefined : property
  //       },
  //       originalEvent: e
  //     });
  //     this.props.onEvent({
  //       type: "updateRecordingConditions",
  //       payload: {
  //         key: "deviceName",
  //         value: undefined
  //       },
  //       originalEvent: e
  //     });
  //   }
  // }
  toggleStatusBar(e: any) {
    this.props.onEvent({
      type: "setStatusBar",
      payload: {
        ...this.props.file.statusBar,
        display: e.target.checked
      },
      target: this.props.file,
      originalEvent: e
    });
  }

  getStatusBarLayer() {
    const rootLayer = this.props.layer;
    let statusBarLayer: any;
    if (rootLayer.children && typeof rootLayer.children !== "string") {
      rootLayer.children.forEach((childLayer: any) => {
        if (childLayer.type === "statusBar") {
          statusBarLayer = childLayer;
        }
      });
    }
    return statusBarLayer;
  }
  getDeviceNameAndOrientation = () => {
    let { deviceName, deviceOrientation } = this.props.file.scopeVariables;
    const device = DeviceStore.getDeviceByName(deviceName);
    if (device) {
      deviceName = device.name;
    }
    return {
      device,
      deviceName,
      deviceOrientation
    };
  };
  render() {
    const recordingConditions = this.props.getRecordingConditions();
    let osConditionState: string = recordingConditions["platform"];
    let deviceConditionState: any = recordingConditions["deviceName"];
    let deviceOrientationConditionState: any =
      recordingConditions["deviceOrientation"];
    const orientations = ["portrait", "landscape"];
    const {
      device,
      deviceName,
      deviceOrientation
    } = this.getDeviceNameAndOrientation();
    return (
      <>
        {this.props.file.isArtboard() && (
          <>
            <FormRow className="mb-2">
              <FormCol
                first
                uiSize={4}
                onMouseEnter={() => {
                  // this.hovered = "iOS";
                  // this.forceUpdate();
                }}
                onMouseLeave={() => {
                  // this.hovered = "";
                  // this.forceUpdate();
                }}
              >
                <FormRow
                  noPadding
                  noTopPadding
                  style={{ position: "relative", padding: 0 }}
                >
                  <Button
                    transparent
                    disabled={
                      osConditionState === "Android" ||
                      osConditionState === "Web"
                    }
                    style={{ padding: "10px 0px" }}
                    borderTopRadius
                    uiBackground={700}
                    flexible
                    onClick={(e: any) => {
                      this.handleChange("iOS");
                    }}
                    icon={
                      <Icon
                        name="ios"
                        size={32}
                        className={
                          this.getDeviceOS() === "iOS" ? "highlight-filter" : ""
                        }
                      />
                    }
                  />
                  {/* {((this.hovered === "iOS" &&
                osConditionState !== "Android" &&
                osConditionState !== "Web") ||
                osConditionState === "iOS") && (
                <Button
                  active={this.getDeviceOS() === "iOS"}
                  disabled={
                    osConditionState === "Android" || osConditionState === "Web"
                  }
                  uiBackground={700}
                  style={{ position: "absolute", top: 3, right: 6 }}
                  onClick={(e: any) => {
                    this.handleRecording("iOS", e);
                  }}
                  data-tip={!osConditionState ? `Record for iOS` : "Stop Recording"}
                  data-for="tooltip-right"
                  tooltip={
                    <TooltipText uiSize="m" position="right">
                      {!osConditionState ? `Record for iOS` : "Stop Recording"}
                    </TooltipText>
                  }
                  icon={
                    <Icon
                      name={
                        osConditionState === "iOS" ? "pause-record" : "record"
                      }
                      size={10}
                    />
                  }
                />
              )} */}
                </FormRow>
                <FormRow noPadding noTopPadding style={{ padding: 0 }}>
                  <Button
                    transparent
                    disabled={
                      osConditionState === "Android" ||
                      osConditionState === "Web"
                    }
                    borderBottomRadius
                    uiBackground={700}
                    flexible
                    onClick={(e: any) => {
                      this.handleChange("iOS");
                    }}
                    caption="iOS"
                  />
                </FormRow>
              </FormCol>
              <FormCol
                style={{ paddingLeft: 10 }}
                uiSize={4}
                onMouseEnter={() => {
                  // this.hovered = "Android";
                  // this.forceUpdate();
                }}
                onMouseLeave={() => {
                  // this.hovered = "";
                  // this.forceUpdate();
                }}
              >
                <FormRow
                  noPadding
                  noTopPadding
                  style={{ position: "relative", padding: 0 }}
                >
                  <Button
                    transparent
                    disabled={
                      osConditionState === "iOS" || osConditionState === "Web"
                    }
                    style={{ padding: "10px 0px" }}
                    borderTopRadius
                    uiBackground={700}
                    flexible
                    onClick={(e: any) => {
                      this.handleChange("Android");
                    }}
                    icon={
                      <Icon
                        name="android"
                        size={32}
                        className={
                          this.getDeviceOS() === "Android"
                            ? "highlight-filter"
                            : ""
                        }
                      />
                    }
                  />
                  {/* {((this.hovered === "Android" &&
                osConditionState !== "iOS" &&
                osConditionState !== "Web") ||
                osConditionState === "Android") && (
                <Button
                  active={this.getDeviceOS() === "Android"}
                  disabled={
                    osConditionState === "iOS" || osConditionState === "Web"
                  }
                  uiBackground={700}
                  style={{ position: "absolute", top: 3, right: 6 }}
                  onClick={(e: any) => {
                    this.handleRecording("Android", e);
                  }}
                  data-tip={osConditionState
                        ? "Stop Recording"
                        : "Record for Android"}
                  data-for="tooltip-left"
                  tooltip={
                    <TooltipText uiSize="m" position="left">
                      {osConditionState
                        ? "Stop Recording"
                        : "Record for Android"}
                    </TooltipText>
                  }
                  icon={
                    <Icon
                      name={
                        osConditionState === "Android"
                          ? "pause-record"
                          : "record"
                      }
                      size={10}
                    />
                  }
                />
              )} */}
                </FormRow>
                <FormRow noPadding noTopPadding style={{ padding: 0 }}>
                  <Button
                    transparent
                    disabled={
                      osConditionState === "iOS" || osConditionState === "Web"
                    }
                    borderBottomRadius
                    uiBackground={700}
                    flexible
                    onClick={(e: any) => {
                      this.handleChange("Android");
                    }}
                    caption="Android"
                  />
                </FormRow>
              </FormCol>
              <FormCol
                style={{ paddingLeft: 10 }}
                uiSize={4}
                onMouseEnter={() => {
                  // this.hovered = "Web";
                  // this.forceUpdate();
                }}
                onMouseLeave={() => {
                  // this.hovered = "";
                  // this.forceUpdate();
                }}
              >
                <FormRow
                  noPadding
                  noTopPadding
                  style={{ position: "relative", padding: 0 }}
                >
                  <Button
                    transparent
                    disabled={
                      osConditionState === "iOS" ||
                      osConditionState === "Android"
                    }
                    style={{ padding: "10px 0px" }}
                    borderTopRadius
                    uiBackground={700}
                    flexible
                    onClick={(e: any) => {
                      this.handleChange("Web");
                    }}
                    icon={
                      <Icon
                        name="web"
                        size={32}
                        className={
                          this.getDeviceOS() === "Web" ? "highlight-filter" : ""
                        }
                      />
                    }
                  />
                  {/* {((this.hovered === "Web" &&
                osConditionState !== "iOS" &&
                osConditionState !== "Android") ||
                osConditionState === "Web") && (
                <Button
                  active={this.getDeviceOS() === "Web"}
                  disabled={
                    osConditionState === "iOS" || osConditionState === "Android"
                  }
                  uiBackground={700}
                  style={{ position: "absolute", top: 3, right: 6 }}
                  onClick={(e: any) => {
                    this.handleRecording("Web", e);
                  }}
                  data-tip={osConditionState ? "Stop Recording" : "Record for Web"}
                  data-for="tooltip-left"
                  tooltip={
                    <TooltipText uiSize="m" position="left">
                      {osConditionState ? "Stop Recording" : "Record for Web"}
                    </TooltipText>
                  }
                  icon={
                    <Icon
                      name={
                        osConditionState === "Web" ? "pause-record" : "record"
                      }
                      size={10}
                    />
                  }
                />
              )} */}
                </FormRow>
                <FormRow noPadding noTopPadding style={{ padding: 0 }}>
                  <Button
                    transparent
                    disabled={
                      osConditionState === "iOS" ||
                      osConditionState === "Android"
                    }
                    borderBottomRadius
                    uiBackground={700}
                    flexible
                    onClick={(e: any) => {
                      this.handleChange("Web");
                    }}
                    caption="Web"
                  />
                </FormRow>
              </FormCol>
            </FormRow>
            <FormRow>
              <FormCol first>
                <SelectX
                  options={this.devices}
                  value={device}
                  renderOption={(option: any) => (option ? option.name : "")}
                  extractValue={(option: any) =>
                    option ? option.name : "Custom Size"
                  }
                  renderValue={(option: any) => option}
                  onChange={(e: any) => this.handleChange("deviceName", e)}
                  placeholder="Device Name"
                  tooltip="Device Name"
                  filter={(inputValue: string) =>
                    this.devices.filter(
                      (o: any) =>
                        !inputValue ||
                        toLower(o.name).includes(toLower(inputValue))
                    )
                  }
                  disabled={!isEmpty(deviceConditionState)}
                />
              </FormCol>
            </FormRow>

            {this.getDeviceOS() === "Web" || deviceName === "custom" ? (
              ""
            ) : (
              <>
                <FormRow>
                  <FormCol first>
                    <SelectX
                      options={orientations}
                      value={deviceOrientation}
                      renderOption={(option: any) => capitalize(option)}
                      extractValue={(option: any) => option}
                      renderValue={(option: any) => capitalize(option)}
                      onChange={(e: any) =>
                        this.handleChange("deviceOrientation", e)
                      }
                      placeholder="Orientation"
                      tooltip="Orientation"
                      filter={(inputValue: string) =>
                        orientations.filter(
                          (o: any) =>
                            !inputValue ||
                            toLower(o).includes(toLower(inputValue))
                        )
                      }
                      disabled={!isEmpty(deviceOrientationConditionState)}
                    />
                  </FormCol>
                </FormRow>
              </>
            )}
          </>
        )}

        <FormGroup noPadding>
          <FormRow>
            <FormCol first uiSize={2}>
              <InputGroup disabled={false}>
                <InputGroupLeft>
                  <Text uiSize="xs" textAlign="left">
                    W
                  </Text>
                </InputGroupLeft>
                <InputGroupRight>
                  <InputGroupInput
                    undo={this.props.session.commandManager.undo}
                    redo={this.props.session.commandManager.redo}
                    uiSize="l"
                    ref={(ref: any) => {
                      this.widthInputRef = ref;
                    }}
                    validator={e => !isNaN(parseInt(e.target.value, 10))}
                    type="number"
                    value={Math.round(
                      this.props.file.getBoundingClientRect().width
                    )}
                    // onChange={(e: any) => this.handleChangeValue("width", e, "moveResizeLayerAndSkip")}
                    // onFocus={(e: any) =>
                    //   this.handleChangeValue(
                    //     "width",
                    //     e,
                    //     "moveResizeLayerAndForget"
                    //   )
                    // }
                    // onBlur={(e: any) =>
                    //   this.handleChangeValue("width", e, "moveResizeLayer")
                    // }
                    onChange={debounce(
                      (e: any) =>
                        this.handleChangeValue("width", e, "moveResizeLayer"),
                      600
                    )}
                  />
                </InputGroupRight>
              </InputGroup>
            </FormCol>
            <FormCol uiSize={2}>
              <InputGroup disabled={false}>
                <InputGroupLeft>
                  <Text uiSize="xs" textAlign="left">
                    H
                  </Text>
                </InputGroupLeft>
                <InputGroupRight>
                  <InputGroupInput
                    undo={this.props.session.commandManager.undo}
                    redo={this.props.session.commandManager.redo}
                    uiSize="l"
                    ref={(ref: any) => {
                      this.heightInputRef = ref;
                    }}
                    validator={e => !isNaN(parseInt(e.target.value, 10))}
                    type="number"
                    value={Math.round(
                      this.props.file.getBoundingClientRect().height
                    )}
                    // onChange={(e: any) => this.handleChangeValue("height", e)}

                    // onFocus={(e: any) =>
                    //   this.handleChangeValue(
                    //     "height",
                    //     e,
                    //     "moveResizeLayerAndForget"
                    //   )
                    // }
                    // onBlur={(e: any) =>
                    //   this.handleChangeValue("height", e, "moveResizeLayer")
                    // }
                    onChange={debounce(
                      (e: any) =>
                        this.handleChangeValue("height", e, "moveResizeLayer"),
                      600
                    )}
                  />
                </InputGroupRight>
              </InputGroup>
            </FormCol>
          </FormRow>
        </FormGroup>

        {this.getDeviceOS() === "Web" || !this.props.file.isArtboard() ? (
          ""
        ) : (
          <FormRow
            className={
              !this.props.file.statusBar.display ? "pt-2 pb-3" : "pt-2"
            }
          >
            <FormCol first style={{ paddingBottom: 5 }}>
              <Checkbox>
                <CheckboxTick
                  noMargin
                  checked={this.props.file.statusBar.display}
                  onChange={(e: any) => {
                    this.toggleStatusBar(e);
                  }}
                />
                <CheckboxLabel>StatusBar</CheckboxLabel>
              </Checkbox>
            </FormCol>
          </FormRow>
        )}
      </>
    );
  }
}

export default DeviceTypeEditor;
