import * as React from "react";
import { ColorPicker } from "components-x";
import { Layer } from "domain-x";
import { ControlsProperty, IEvent, StylePropNameType } from "common-interfaces";
import { get } from "lodash";
type propType = {
  layer: Layer;
  property: ControlsProperty;
  propertyValue: string;
  showGradient: boolean;
  renderType: string;
  removeGradient?: () => void;
  setGradient?: (val: any) => void;
  onChangeGradient?: (val1: any, val2: any, val3: any, val4: any) => void;
  onChangeIndex?: (activeIndex: number) => void;
  rotateGradient?: (val: any) => void;
  onChangeColor: (
    color: string,
    layer?: Layer,
    stylePropName?: StylePropNameType,
    propertyName?: string
  ) => void;
  onPickerOpen?: () => void;
  onPickerClose?: (closeGradientEditor?: boolean) => void;
  openGradientEditor?: () => void;
  isPickerCloseDisabled?: () => any;
  alignRight?: boolean;
  robot: any;
  onEvent?: (event: IEvent) => void;
  setGradientEditorOpen?: () => void;
  isGradient?: boolean;
};
export default class ColorPickerBare extends React.PureComponent<
  propType,
  { activeIndex: number; sameLayer: boolean }
> {
  constructor(props: propType) {
    super(props);
    this.state = {
      activeIndex: 1,
      sameLayer: true
    };
  }
  onUpdate = (key: string) => {
    this.forceUpdate();
  };

  componentDidMount() {
    this.props.layer.props.style.on("gradient", this.onUpdate);
  }
  componentWillReceiveProps(nextProps: propType) {
    if (this.props.layer !== nextProps.layer) {
      this.props.layer.props.style.off("gradient", this.onUpdate);
      nextProps.layer.props.style.on("gradient", this.onUpdate);
      this.setState({ sameLayer: false });
    } else if (!this.state.sameLayer) {
      this.setState({ sameLayer: true });
    }
    this.getGradientPalette(nextProps);
  }
  componentWillUnmount() {
    this.props.layer.props.style.off("gradient", this.onUpdate);
  }
  getGradientPalette = (props: propType) => {
    let palette: any = [];
    let from: any = { x: 0.5, y: 0 };
    let to: any = { x: 0.5, y: 1 };
    let activeId;
    if (get(props, "layer.props.style.gradient.stops")) {
      get(props, "layer.props.style.gradient.stops").forEach((data: any) => {
        palette.push({
          pos: data.offset,
          color: data.stopColor
        });
      });
      if (get(props, "layer.props.style.gradient.activeIndex")) {
        activeId = get(props.layer, "props.style.gradient.activeIndex") + 1;
      } else {
        activeId = 1;
      }
      if (
        get(props, "layer.props.style.gradient.from") &&
        get(props, "layer.props.style.gradient.to")
      ) {
        from = get(props, "layer.props.style.gradient.from");
        to = get(props, "layer.props.style.gradient.to");
      }
    } else {
      palette = [
        {
          pos: 0,
          color: "red"
        },
        {
          pos: 1,
          color: "white"
        }
      ];
      activeId = 1;
    }
    this.setState({ activeIndex: activeId });
    return { palette, activeId, to, from };
  };
  setGradientEditor = (value: "open" | "close") => {
    if (this.props.onEvent) {
      this.props.onEvent({
        payload: { key: "gradientEditor", value },
        type: "setGradientEditor",
        target: this.props.layer,
        originalEvent: null
      });
    }
  };
  onChangeIndex = (activeIndex: number) => {
    if (this.props.onChangeIndex) {
      this.props.onChangeIndex(activeIndex);
    }
    this.setState({ activeIndex });
  };
  render() {
    return (
      <ColorPicker
        removeGradient={this.props.removeGradient}
        setGradient={this.props.setGradient}
        setGradientEditor={this.setGradientEditor}
        activeId={this.state.activeIndex}
        palette={this.getGradientPalette(this.props).palette}
        to={this.getGradientPalette(this.props).to}
        from={this.getGradientPalette(this.props).from}
        onChangeIndex={this.onChangeIndex}
        onEvent={this.props.onEvent}
        openGradientEditor={this.props.openGradientEditor}
        showGradient={this.props.showGradient}
        onChangeGradient={this.props.onChangeGradient}
        rotateGradient={this.props.rotateGradient}
        onPickerOpen={() => {
          if (this.props.onPickerOpen) {
            this.props.onPickerOpen();
          }
        }}
        onPickerClose={(closeGradientEditor?: boolean) => {
          if (this.props.onPickerClose) {
            this.props.onPickerClose(closeGradientEditor);
          }
        }}
        isPickerCloseDisabled={this.props.isPickerCloseDisabled}
        value={this.props.propertyValue}
        hidePicker={
          !this.state.sameLayer ||
          (!this.state.sameLayer &&
            this.props.property.propertyName &&
            !this.props.layer.props.style.hasOwnProperty(
              this.props.property.propertyName
            ))
        }
        renderType={this.props.renderType}
        onChangeColor={this.props.onChangeColor}
        alignRight={this.props.alignRight}
        robot={this.props.robot}
        isGradient={this.props.isGradient}
      />
    );
  }
}
