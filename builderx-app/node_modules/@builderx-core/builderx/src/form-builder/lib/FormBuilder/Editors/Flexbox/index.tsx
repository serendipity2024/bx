import * as React from "react";
import { WrapperDiv, Button, Icon, Text, FormRow, FormCol } from "components-x";
import Parent from "./Parent";
import ChildrenElement from "./ChildrenElement";
import { Layer } from "domain-x";
import { IEvent } from "common-interfaces";
import { Session } from "session";
type propType = {
  key: string;
  layer: Layer;
  session: Session;
  rootLayer: Layer;
  onEvent: (event: IEvent) => void;
};
export default class FlexboxEditor extends React.PureComponent<propType, any> {
  onUpdate = () => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.layer.on("children", this.onUpdate);
  }
  componentDidUpdate(prevProps: propType) {
    prevProps.layer.off("children", this.onUpdate);
    this.props.layer.on("children", this.onUpdate);
  }
  componentWillUnmount() {
    this.props.layer.off("children", this.onUpdate);
  }

  onEvent = (alignType: string, e: Event) => {
    this.props.onEvent({
      type: "alignElement",
      target: [this.props.layer],
      originalEvent: e,
      payload: alignType
    });
  };

  render() {
    const showFlexEditor =
      this.props.layer.children.length && this.props.layer.type !== "text";
    return (
      <WrapperDiv>
        {showFlexEditor ? (
          <FormRow>
            <FormCol first>
              <Text uiSize="xs" uiColor={300} uppercase bold>
                Stack
              </Text>
            </FormCol>
            <FormCol>
              <Button
                data-cypress-id="horizontal-flex-button"
                className="p-2"
                borderLeft
                borderRight
                borderRadius
                flexible
                uiBackground={700}
                onClick={(e: Event) => this.onEvent("stack-horizontal", e)}
                icon={<Icon uiColor={0} name="stack_horizontal" size={13} />}
                data-tip="Stack Horizontally"
                data-for="tooltip-bottom"
              />
            </FormCol>
            <FormCol>
              <Button
                data-cypress-id="vertical-flex-button"
                className="p-2"
                borderRight
                flexible
                borderRadius
                uiBackground={700}
                onClick={(e: Event) => this.onEvent("stack-vertical", e)}
                data-tip="Stack Vertically"
                data-for="tooltip-left"
                icon={<Icon uiColor={0} name="stack_vertical" size={13} />}
              />
            </FormCol>
          </FormRow>
        ) : null}
        {this.props.layer.isFlexChild ? (
          <ChildrenElement
            onEvent={this.props.onEvent}
            session={this.props.session}
            layer={this.props.layer}
          />
        ) : null}
        {showFlexEditor ? (
          <Parent
            onEvent={this.props.onEvent}
            session={this.props.session}
            layer={this.props.layer}
            rootLayer={this.props.rootLayer}
          />
        ) : null}
      </WrapperDiv>
    );
  }
}
