import * as React from "react";
import { IEvent, StylePropNameType } from "common-interfaces";
import { forEach, isNil, upperFirst, get } from "lodash";
import BorderWidthBox from "./BorderWidthBox";
import { Session } from "session";

type propType = {
  layer: any;
  onEvent: (event: IEvent) => void;
  stylePropName: StylePropNameType;
  session: Session;
  robot: any;
  value: any;
};

type state = {
  showPicker: boolean;
};
const renderProps = [
  "borderWidth",
  "borderColor",
  "borderTopWidth",
  "borderRightWidth",
  "borderBottomWidth",
  "borderLeftWidth",
  "borderStyle"
];
export default class BorderWidthEditor extends React.PureComponent<
  propType,
  state
> {
  constructor(props: propType) {
    super(props);
    this.state = {
      showPicker: false
    };
  }
  onUpdate = () => {
    this.forceUpdate();
  };
  componentDidMount() {
    const stylePropName = this.props.stylePropName;
    this.props.layer.ui.on("borderWidth", this.onUpdate);
    this.props.layer.props[stylePropName].on(renderProps, this.onUpdate);
  }
  componentDidUpdate(prevProps: propType) {
    let stylePropName = prevProps.stylePropName;
    prevProps.layer.ui.off("borderWidth", this.onUpdate);
    prevProps.layer.props[stylePropName].off(renderProps, this.onUpdate);
    stylePropName = this.props.stylePropName;
    this.props.layer.ui.on("borderWidth", this.onUpdate);
    this.props.layer.props[stylePropName].on(renderProps, this.onUpdate);
  }
  componentWillUnmount() {
    const stylePropName = this.props.stylePropName;
    this.props.layer.ui.off("borderWidth", this.onUpdate);
    this.props.layer.props[stylePropName].off(renderProps, this.onUpdate);
  }
  isBorderDisabled = () => {
    const borderWidth = this.getStyleAttribute("borderWidth");
    const borderColor = this.getStyleAttribute("borderColor");
    const borderTopWidth = this.getStyleAttribute("borderTopWidth");
    const borderRightWidth = this.getStyleAttribute("borderRightWidth");
    const borderBottomWidth = this.getStyleAttribute("borderBottomWidth");
    const borderLeftWidth = this.getStyleAttribute("borderLeftWidth");
    if (
      !borderWidth &&
      !borderColor &&
      !borderLeftWidth &&
      !borderRightWidth &&
      !borderTopWidth &&
      !borderBottomWidth
    ) {
      return true;
    } else {
      return false;
    }
  };
  onChangeEnd = (
    e: any,
    eventName: string,
    eventType?: string,
    commandType: string = ""
  ) => {
    const borderWidth = this.getLayerBorderWidthProperties();
    if (!borderWidth) {
      return;
    }
    let borderWidthVal: { [key: string]: number | boolean | string } = {};
    if (eventType === "color") {
      this.props.onEvent({
        type: "setStyleAttribute" + commandType,
        payload: {
          key: "borderColor",
          value: e,
          stylePropName: this.props.stylePropName
        },
        target: this.props.layer,
        originalEvent: e
      });
    } else if (eventType === "borderStyle") {
      if (isNil(e)) {
        return;
      }
      this.props.onEvent({
        type: "setStyleAttribute" + commandType,
        payload: {
          key: "borderStyle",
          value: e,
          stylePropName: this.props.stylePropName
        },
        target: this.props.layer,
        originalEvent: e
      });
    } else {
      if (borderWidth.lock) {
        borderWidthVal = {
          borderWidth: e,
          lock: true
        };
      } else {
        let allTrue = true;
        forEach(borderWidth, (value: boolean, key: string) => {
          if (key === "lock") {
            return;
          }
          if (value) {
            borderWidthVal[`border${upperFirst(key)}Width`] = e;
          }
          allTrue = allTrue && value;
        });
        if (allTrue) {
          borderWidthVal = {
            borderWidth: e,
            lock: true
          };
        }
      }
      let type = "updateLayerBorderWidth";
      if (eventName === "onChange") {
        type = "updateLayerBorderWidthAndSkip";
      } else if (eventName === "onMouseDown") {
        type = "updateLayerBorderWidthAndForget";
      }
      this.props.onEvent({
        type: type,
        payload: {
          properties: borderWidthVal,
          key: "borderWidth",
          stylePropName: this.props.stylePropName
        },
        target: this.props.layer,
        originalEvent: e
      });
      if (isNil(this.getStyleAttribute("borderColor"))) {
        this.props.onEvent({
          type: "setStyleAttributeAndForget",
          payload: {
            key: "borderColor",
            value: "#000000",
            stylePropName: this.props.stylePropName
          },
          target: this.props.layer,
          originalEvent: null
        });
      }
    }
  };
  onClickLockIcon = (e: any) => {
    const borderWidth = this.getLayerBorderWidthProperties();
    if (!borderWidth) {
      return;
    }
    const value = !borderWidth.lock;

    this.props.onEvent({
      type: "updateEditorState",
      payload: {
        key: "borderWidth",
        properties: {
          lock: value,
          left: value,
          right: value,
          bottom: value,
          top: value
        }
      },
      target: this.props.layer,
      originalEvent: e
    });
  };
  getStyleAttribute = (propName: string) => {
    return this.props.layer.props.getResolvedStyleAttribute(
      propName,
      this.props.stylePropName
    );
  };
  getBorderStyle = () => {
    return this.getStyleAttribute("borderStyle");
  };
  getLayerBorderWidthProperties = () => {
    return this.props.layer.ui.borderWidth;
  };

  getCurrentSelectedBorderWidthValue = ():
    | { width: number; color: string }
    | undefined => {
    let borderBorder,
      borderTop,
      borderRight,
      borderBottom,
      borderLeft,
      borderColor;

    borderBorder = this.getStyleAttribute("borderWidth");
    borderColor = this.getStyleAttribute("borderColor");
    borderTop = this.getStyleAttribute("borderTopWidth");
    borderRight = this.getStyleAttribute("borderRightWidth");
    borderBottom = this.getStyleAttribute("borderBottomWidth");
    borderLeft = this.getStyleAttribute("borderLeftWidth");

    const borderWidth = this.getLayerBorderWidthProperties();
    if (!borderWidth) {
      return;
    }
    if (borderWidth.lock) {
      return { width: borderBorder, color: borderColor };
    }
    if (borderWidth.top) {
      return { width: borderTop, color: borderColor };
    }
    if (borderWidth.bottom) {
      return { width: borderBottom, color: borderColor };
    }
    if (borderWidth.left) {
      return { width: borderLeft, color: borderColor };
    }
    if (borderWidth.right) {
      return { width: borderRight, color: borderColor };
    }
    if (
      borderLeft === borderTop &&
      borderLeft === borderRight &&
      borderLeft === borderBottom
    ) {
      return { width: borderLeft, color: borderColor };
    }
    if (
      !borderWidth.top &&
      !borderWidth.right &&
      !borderWidth.bottom &&
      !borderWidth.left
    ) {
      return { width: 0, color: "#000000" };
    }
    return;
  };
  closePicker = (e: any) => {
    if (this.state.showPicker && e.target.className === "") {
      this.setState({ showPicker: false });
    }
    return false;
  };

  removeStyleAttribute(propName: string) {
    this.props.onEvent({
      type: "removeStyleAttribute",
      payload: {
        key: propName,
        stylePropName: this.props.stylePropName
      },
      target: this.props.layer,
      originalEvent: null
    });
  }
  enableBorderWidthEditor = () => {
    this.props.onEvent({
      type: "setStyleAttribute",
      payload: {
        key: "borderWidth",
        value: get(this.props, "value.defaultValue", 1),
        stylePropName: this.props.stylePropName
      },
      target: this.props.layer,
      originalEvent: null
    });
    this.props.onEvent({
      type: "setStyleAttribute",
      payload: {
        key: "borderColor",
        value: "#000000",
        stylePropName: this.props.stylePropName
      },
      target: this.props.layer,
      originalEvent: null
    });
  };
  disableBorderWidthEditor = () => {
    this.removeStyleAttribute("borderColor");
    this.removeStyleAttribute("borderWidth");
    this.removeStyleAttribute("borderLeftWidth");
    this.removeStyleAttribute("borderRightWidth");
    this.removeStyleAttribute("borderTopWidth");
    this.removeStyleAttribute("borderBottomWidth");
    this.removeStyleAttribute("borderStyle");
  };
  handleBorderWidthToggle = () => {
    if (this.isBorderDisabled()) {
      this.enableBorderWidthEditor();
    } else {
      this.disableBorderWidthEditor();
    }
  };

  updateEditorState = (propertyNameValue: string) => {
    const borderWidth = this.getLayerBorderWidthProperties();
    if (!borderWidth) {
      return;
    }
    let editorVal: { [key: string]: boolean } = {};

    if (propertyNameValue === "borderWidth") {
      editorVal = { lock: true };
    } else {
      if (propertyNameValue === "borderLeftWidth") {
        if (
          !borderWidth.left &&
          borderWidth.top &&
          borderWidth.right &&
          borderWidth.bottom
        ) {
          editorVal = { lock: true, left: !borderWidth.left };
        } else if (
          borderWidth.left &&
          borderWidth.top &&
          borderWidth.right &&
          borderWidth.bottom
        ) {
          editorVal = {
            lock: false,
            left: true,
            right: false,
            bottom: false,
            top: false
          };
        } else {
          editorVal = { lock: false, left: !borderWidth.left };
        }
      }
      if (propertyNameValue === "borderRightWidth") {
        if (
          !borderWidth.right &&
          borderWidth.top &&
          borderWidth.left &&
          borderWidth.bottom
        ) {
          editorVal = { lock: true, right: !borderWidth.right };
        } else if (
          borderWidth.left &&
          borderWidth.top &&
          borderWidth.right &&
          borderWidth.bottom
        ) {
          editorVal = {
            lock: false,
            left: false,
            right: true,
            bottom: false,
            top: false
          };
        } else {
          editorVal = { lock: false, right: !borderWidth.right };
        }
      }
      if (propertyNameValue === "borderTopWidth") {
        if (
          !borderWidth.top &&
          borderWidth.left &&
          borderWidth.right &&
          borderWidth.bottom
        ) {
          editorVal = { lock: true, top: !borderWidth.top };
        } else if (
          borderWidth.left &&
          borderWidth.top &&
          borderWidth.right &&
          borderWidth.bottom
        ) {
          editorVal = {
            lock: false,
            left: false,
            right: false,
            bottom: false,
            top: true
          };
        } else {
          editorVal = { lock: false, top: !borderWidth.top };
        }
      }
      if (propertyNameValue === "borderBottomWidth") {
        if (
          !borderWidth.bottom &&
          borderWidth.top &&
          borderWidth.right &&
          borderWidth.left
        ) {
          editorVal = { lock: true, bottom: !borderWidth.bottom };
        } else if (
          borderWidth.left &&
          borderWidth.top &&
          borderWidth.right &&
          borderWidth.bottom
        ) {
          editorVal = {
            lock: false,
            left: false,
            right: false,
            bottom: true,
            top: false
          };
        } else {
          editorVal = { lock: false, bottom: !borderWidth.bottom };
        }
      }
    }
    this.props.onEvent({
      type: "updateEditorState",
      payload: {
        key: "borderWidth",
        properties: editorVal
      },
      target: this.props.layer,
      originalEvent: null
    });
  };
  render() {
    return (
      <BorderWidthBox
        disabled={this.isBorderDisabled()}
        currentValue={this.getCurrentSelectedBorderWidthValue()}
        borderWidth={this.props.layer.ui.borderWidth}
        onClickLockIcon={this.onClickLockIcon}
        onChangeEnd={this.onChangeEnd}
        session={this.props.session}
        updateEditorState={this.updateEditorState}
        enableBorderWidthEditor={this.enableBorderWidthEditor}
        handleBorderWidthToggle={this.handleBorderWidthToggle}
        borderStyle={this.getBorderStyle()}
        robot={this.props.robot}
      />
    );
  }
}
