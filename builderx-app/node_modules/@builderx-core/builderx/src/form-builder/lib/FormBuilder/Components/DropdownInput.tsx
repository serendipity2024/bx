import * as React from "react";
import { ControlsProperty, IEvent } from "common-interfaces";
import { FormCol, FormRow, Text, SelectX } from "components-x";
import { Layer } from "domain-x";
import { isNil, toLower } from "lodash";
import { forceCheck } from "react-lazyload";
import { Session } from "session";
type propType = {
  onEvent: (event: IEvent) => void;
  layer: Layer;
  propertyName: string | undefined;
  propertyTitle: string;
  category: "props" | "style" | undefined;
  session: Session;
  property: ControlsProperty;
  options: any;
  defaultValue: any;
  isOverride?: boolean;
  renderLeft?: (name: string) => any;
  renderTitle?: any;
};
export default class DropdownInput extends React.PureComponent<propType, any> {
  value: string | undefined;
  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  componentDidMount() {
    if (this.props.propertyName && !this.props.isOverride) {
      if (this.props.property.category === "props") {
        this.props.layer.props.on(this.props.propertyName, this.onUpdate);
      } else {
        this.props.layer.props.style.on(this.props.propertyName, this.onUpdate);
      }
      if (this.props.category === "props") {
        this.value =
          this.props.layer.props.getResolvedProp(this.props.propertyName) ||
          this.props.defaultValue;
      } else {
        this.value =
          this.props.layer.props.getResolvedStyleAttribute(
            this.props.propertyName
          ) || this.props.defaultValue;
      }
      this.forceUpdate();
    }
  }
  componentDidUpdate(prevProps: propType) {
    if (prevProps.propertyName && !this.props.isOverride) {
      if (prevProps.category === "props") {
        prevProps.layer.props.off(prevProps.propertyName, this.onUpdate);
      } else {
        prevProps.layer.props.style.off(prevProps.propertyName, this.onUpdate);
      }
    }
    if (this.props.propertyName && !this.props.isOverride) {
      if (this.props.property.category === "props") {
        this.props.layer.props.on(this.props.propertyName, this.onUpdate);
      } else {
        this.props.layer.props.style.on(this.props.propertyName, this.onUpdate);
      }
    }
  }
  componentWillUnmount() {
    if (this.props.propertyName && !this.props.isOverride) {
      if (this.props.category === "props") {
        this.props.layer.props.off(this.props.propertyName, this.onUpdate);
      } else {
        this.props.layer.props.style.off(
          this.props.propertyName,
          this.onUpdate
        );
      }
    }
  }

  onEvent = (value: any) => {
    if (!isNil(value)) {
      this.props.onEvent({
        target: this.props.layer,
        payload: {
          key: this.props.propertyName,
          value
        },
        type: this.props.isOverride
          ? "setOverride"
          : this.props.category === "props"
          ? "setProp"
          : "setStyleAttribute",
        originalEvent: null
      });
    }
  };

  handleScroll() {
    forceCheck();
  }
  renderSelectComponent = () => {
    const { propertyName, options } = this.props;
    if (!propertyName || !options) {
      return null;
    }
    return (
      <>
        <SelectX
          options={options}
          value={this.value || ""}
          renderOption={(option: any) => option}
          renderValue={(option: any) => option}
          extractValue={(option: any) => option}
          onChange={(e: any) => this.onEvent(e)}
          placeholder={propertyName.replace("this.props.", "")}
          tooltip="Border Style"
          filter={(inputValue: string) =>
            options.filter(
              (option: any) =>
                !inputValue || toLower(option).includes(toLower(inputValue))
            )
          }
          renderPrefix={
            this.props.renderLeft ? this.props.renderLeft : undefined
          }
          onTextChange={(input: string) => {
            this.handleScroll();
          }}
        />
      </>
    );
  };
  render() {
    const { propertyName, propertyTitle, renderTitle } = this.props;
    if (!propertyName) {
      return null;
    }
    if (!this.props.isOverride) {
      if (this.props.category === "props") {
        if (!isNil(this.props.layer.props.getResolvedProp(propertyName))) {
          this.value = this.props.layer.props.getResolvedProp(propertyName);
        } else {
          this.value = this.props.defaultValue;
        }
      } else {
        this.value =
          this.props.layer.props.getResolvedStyleAttribute(propertyName) ||
          this.value;
      }
    } else {
      this.value = (this.props.layer as any).scopeVariables[propertyName];
    }
    const renderTitleCondition = renderTitle !== false && propertyTitle !== "";
    return (
      <FormRow
        key={propertyName}
        paddingBottom={propertyName === "overflow" ? 10 : 5}
      >
        {renderTitleCondition && (
          <FormCol first={true} uiSize={3}>
            <Text uiSize="s">{propertyTitle}</Text>
          </FormCol>
        )}
        {renderTitleCondition ? (
          <FormCol uiSize={3}>{this.renderSelectComponent()}</FormCol>
        ) : (
          this.renderSelectComponent()
        )}
      </FormRow>
    );
  }
}
