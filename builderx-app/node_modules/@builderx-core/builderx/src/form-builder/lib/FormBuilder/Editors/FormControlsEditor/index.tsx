import * as React from "react";
import { IEvent } from "common-interfaces";
import {
  Domain,
  DomainLayer,
  ConditionalExpression,
  ExpressionStatement
} from "domain-x";
import { FormGroup, FormRow, FormCol, Text, COLORS } from "components-x";
import { map, get } from "lodash";
import { FormControl } from "domain-x";
import { IconOptions, overideIconOptions } from "bx-constants";
import ColorPickerBare from "./../../Components/Color/ColorPickerBare";
import DependantDropdownInput from "../../Components/DependantDropdownInput";
import NavigationEditor from "../NavigationEditor";
import Icon from "@builderx/icons";
import { ResolveNodeValue } from "utils";
import InputGroupHOC from "./InputGroupHOC";
import { Session } from "session";

type propType = {
  layer: DomainLayer;
  onEvent: (event: IEvent) => void;
  domain: Domain;
  getSelectedArtboardName: () => string;
  getAllArtboardsName: () => { name: string; isDrawer: boolean }[];
  validateCallbackPropValue: (value: string) => string;
  session: Session;
  robot: any;
};
export default class FormControlsEditor extends React.PureComponent<
  propType,
  any
> {
  inputValue: string | number;

  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.layer.on(["props", "scopeVariables"], this.onUpdate);
  }
  componentDidUpdate(prevProps: propType) {
    prevProps.layer.off(["props", "scopeVariables"], this.onUpdate);
    this.props.layer.on(["props", "scopeVariables"], this.onUpdate);
  }
  componentWillUnmount() {
    this.props.layer.off(["props", "scopeVariables"], this.onUpdate);
  }
  dummyFunction = (val?: any) => {
    return {};
  };
  onChangeColor = (color: string, formControl: FormControl) => {
    // if (!(this.props.layer as any).scopeVariables[formControl.title]) {
    //   this.onEvent(
    //     {
    //       payload: formControl,
    //       type: "activateFormControl",
    //       originalEvent: {},
    //       target: this.props.layer
    //     },
    //     formControl
    //   );
    // }
    this.onEvent(
      {
        payload: {
          value: color,
          key: formControl.title
        },
        type: "setOverride",
        originalEvent: null,
        target: this.props.layer
      },
      formControl
    );
  };
  activateFormControl = (payload: any) => {
    // this.props.onEvent({
    //   payload,
    //   type: "activateFormControl",
    //   originalEvent: {},
    //   target: this.props.layer
    // });
  };
  onEvent = (event: IEvent, formControl: FormControl) => {
    if (formControl.type === "icon") {
      if (
        !(this.props.layer as any).scopeVariables[formControl.title + "Family"]
      ) {
        // this.activateFormControl({
        //   ...formControl,
        //   title: formControl.title + "Family"
        // });
      }
      if (
        !(this.props.layer as any).scopeVariables[formControl.title + "Name"]
      ) {
        this.activateFormControl({
          ...formControl,
          title: formControl.title + "Name"
        });
      }
    } else {
      if (!(this.props.layer as any).scopeVariables[formControl.title]) {
        this.activateFormControl(formControl);
      }
    }
    this.props.onEvent(event);
  };
  renderInputComponent = (formControl: FormControl) => {
    const formControlLayer = this.props.session.getLayerFromLayerPath(
      formControl.layerPath
    );
    switch (formControl.type) {
      case "callback":
        return (
          <NavigationEditor
            layer={this.props.layer}
            session={this.props.session}
            onEvent={(event: IEvent) => {
              this.onEvent(
                {
                  ...event,
                  type: "setOverride",
                  payload: {
                    key: formControl.title,
                    propType: "navigation",
                    value: event.payload.isDrawer
                      ? "Drawer"
                      : event.payload.name
                  }
                },
                formControl
              );
            }}
            showTitle={false}
            getSelectedArtboardName={() => {
              return (this.props.layer as any).scopeVariables[
                formControl.title
              ];
            }}
            getAllArtboardsName={this.props.getAllArtboardsName}
          />
        );
      case "icon":
        let type = "MaterialCommunityIcons";

        if (get(formControlLayer, "props.type")) {
          type = ResolveNodeValue(get(formControlLayer, "props.type"), {});
        }

        // console.log(type, "form control here");

        return (
          <DependantDropdownInput
            key={"IconOverrides"}
            session={this.props.session}
            layer={this.props.layer}
            onEvent={(event: IEvent) => this.onEvent(event, formControl)}
            property={{
              type: "NestedEnum",
              title: "",
              propertyName: formControl.title + "Family",
              category: "props",
              value: {
                defaultValue: type,
                options: overideIconOptions,
                nestedEnumProperty: {
                  name: formControl.title,
                  title: "",
                  category: "props"
                }
              }
            }}
            selectedFamily={type}
            isOverride
            direction={"row"}
          />
        );
      case "color":
        return (
          <ColorPickerBare
            layer={formControlLayer}
            property={{
              propertyName: "backgroundColor",
              type: "color",
              title: "Fill",
              value: {
                defaultValue: "#fff"
              },
              category: "style"
            }}
            propertyValue={
              (this.props.layer as any).scopeVariables[formControl.title] ||
              "#fff"
            }
            showGradient={false}
            renderType={"color"}
            removeGradient={this.dummyFunction}
            setGradient={this.dummyFunction}
            onChangeGradient={this.dummyFunction}
            rotateGradient={this.dummyFunction}
            onChangeColor={(color: string) =>
              this.onChangeColor(color, formControl)
            }
            robot={this.props.robot}
          />
        );
      case "string":
      case "number":
      default:
        return (
          <InputGroupHOC
            value={(this.props.layer as any).scopeVariables[formControl.title]}
            session={this.props.session}
            onChange={(event: any, value: string) => {
              this.props.onEvent({
                payload: {
                  value,
                  key: formControl.title
                },
                type: "setOverride",
                originalEvent: event,
                target: this.props.layer
              });
            }}
            // onFocus={(event: any) => {
            //   this.onEvent(
            //     {
            //       payload: {
            //         value: event.target.value,
            //         key: formControl.title
            //       },
            //       type: "setOverrideAndForget",
            //       originalEvent: event,
            //       target: this.props.layer
            //     },
            //     formControl
            //   );
            // }}
            // onBlur={(event: any) => {
            //   this.onEvent(
            //     {
            //       payload: {
            //         value: event.target.value,
            //         key: formControl.title
            //       },
            //       type: "setOverride",
            //       originalEvent: event,
            //       target: this.props.layer
            //     },
            //     formControl
            //   );
            // }}
          />
        );
    }
  };
  getIconName(formControl: FormControl) {
    const symbolInstanceSV = (this.props.layer as any).scopeVariables;
    let iconName = symbolInstanceSV[`${formControl.title}`];
    if (!iconName) {
      const layer = this.props.session.getLayerFromLayerPath(
        formControl.layerPath
      );
      const name = (layer.props as any).name;
      if (typeof name === "string") {
        iconName = name;
      } else if (
        name instanceof ConditionalExpression ||
        name instanceof ExpressionStatement
      ) {
        iconName = ResolveNodeValue(name, {});
      }
    }
    return iconName;
  }
  getIconFamily(formControl: FormControl) {
    const symbolInstanceSV = (this.props.layer as any).scopeVariables;
    let iconFamily = symbolInstanceSV[`${formControl.title}Family`];
    if (!iconFamily) {
      const layer = this.props.session.getLayerFromLayerPath(
        formControl.layerPath
      );
      const type = (layer.props as any).type;
      if (typeof type === "string") {
        iconFamily = type;
      } else if (
        type instanceof ConditionalExpression ||
        type instanceof ExpressionStatement
      ) {
        iconFamily = ResolveNodeValue(type, {});
      } else {
        iconFamily = "Ionicons";
      }
    }
    return iconFamily;
  }
  render() {
    const symbolFile = this.props.domain.getSymbolFileFromSymbolInstance(
      this.props.layer
    );

    if (!symbolFile) {
      return null;
    }
    return (
      <FormGroup noPadding>
        {map(
          symbolFile.formControls,
          (formControl: FormControl, index: any) => {
            let iconName = this.getIconName(formControl);
            let iconFamily = this.getIconFamily(formControl);
            const typeRect =
              formControl.title.indexOf("this.props.rect") !== -1;
            return (
              <FormRow key={index.toString()} noTopPadding>
                {formControl.type === "icon" ? (
                  <div
                    style={{
                      width: "25%",
                      // justifyContent: "center",
                      alignItems: "center",
                      display: "flex"
                    }}
                  >
                    <Icon
                      name={this.getIconName(formControl)}
                      type={this.getIconFamily(formControl)}
                      style={{ fontSize: 24, color: COLORS.primary[50] }}
                    />
                  </div>
                ) : (
                  // <FormCol uiSize={typeRect ? 6 : 1}>
                  <Text uiSize="s" inline style={{ width: "25%" }}>
                    {formControl.title.slice(11)}
                  </Text>
                  // </FormCol>
                )}
                <FormCol
                  uiSize={4}
                  first={!typeRect}
                  flex
                  contentRight={typeRect}
                  style={{ justifyContent: "flex-end" }}
                >
                  {this.renderInputComponent(formControl)}
                </FormCol>
              </FormRow>
            );
          }
        )}
      </FormGroup>
    );
  }
}
