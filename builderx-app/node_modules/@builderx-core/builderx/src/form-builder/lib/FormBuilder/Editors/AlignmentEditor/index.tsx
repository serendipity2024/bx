import * as React from "react";
import {
  Bar,
  Icon,
  Button,
  ButtonGroup,
  ButtonGroupDivider,
  WrapperDiv
} from "components-x";
import { IEvent } from "common-interfaces";
import { Layer } from "domain-x";
import FlexboxEditor from "../Flexbox";
import { Session } from "session";
import ReactTooltip from "react-tooltip";
export default class AlignmentEditor extends React.PureComponent<
  {
    layers: Array<Layer>;
    rootLayer: Layer;
    session: Session;
    onEvent: (event: IEvent) => void;
  },
  any
> {
  componentDidUpdate() {
    ReactTooltip.rebuild();
  }
  onEvent = (alignType: string, e: Event) => {
    this.props.onEvent({
      type: "alignElement",
      target: this.props.layers,
      originalEvent: e,
      payload: alignType
    });
  };

  isDisabled = () => {
    if (this.props.layers.length === 1) {
      const layer = this.props.layers[0];
      if (layer.children.length === 0 || layer.type === "text") {
        return true;
      }
    }
    return false;
  };

  render() {
    const parentLayer = this.props.layers[
      this.props.layers.length - 1
    ].getParentLayer() as Layer;
    let parentElementType: any;
    if (parentLayer && parentLayer.getLayerElementType) {
      parentElementType = parentLayer.getLayerElementType();
    }
    const isRootLayer = this.props.layers[0] === this.props.rootLayer;

    let isRow,
      isColumn: boolean = false;
    if (parentElementType === "flex") {
      const parentElementFlexDirection = parentLayer.props.getResolvedStyleAttribute(
        "flexDirection"
      );

      switch (parentElementFlexDirection) {
        case "row":
          isRow = true;
          break;
        case "column":
          isColumn = true;
          break;
        default:
          isColumn = true;
          break;
      }
    }
    const renderAlignments = !(
      this.props.layers[0] &&
      this.props.layers[0].import.layerName === "ScrollView" &&
      this.props.layers[0] === this.props.rootLayer
    );
    const elementType = this.props.layers[0].getLayerElementType();
    return (
      <>
        {renderAlignments && (
          <Bar uiSize="m" padder>
            <WrapperDiv>
              <ButtonGroup>
                <Button
                  data-cypress-id="distribute-layer-horizontally"
                  noPadding
                  disabled={this.isDisabled()}
                  flexible
                  transparent
                  onClick={(e: Event) =>
                    this.onEvent("distribute-horizontal", e)
                  }
                  icon={<Icon name="distribute-horizontal" size={14} />}
                  data-tip="Distribute layers horizontally"
                  data-for="tooltip-right"
                />
                <Button
                  data-cypress-id="distribute-layer-vertically"
                  noPadding
                  disabled={this.isDisabled()}
                  flexible
                  transparent
                  onClick={(e: Event) => this.onEvent("distribute-vertical", e)}
                  icon={<Icon name="distribute-vertically" size={14} />}
                  data-tip="Distribute layers vertically"
                  data-for="tooltip-right"
                />
                <ButtonGroupDivider />
                <Button
                  disabled={
                    isRootLayer || (isRow && parentElementType === "flex")
                  }
                  noPadding
                  flexible
                  transparent
                  onClick={(e: Event) => this.onEvent("align-left", e)}
                  icon={<Icon name="align-left" size={16} />}
                  data-tip="Align layers to left"
                  data-for="tooltip-right"
                  data-cypress-id="align-left-button"
                />
                <Button
                  disabled={
                    isRootLayer || (isRow && parentElementType === "flex")
                  }
                  noPadding
                  flexible
                  transparent
                  onClick={(e: Event) =>
                    this.onEvent("align-horizontally-center", e)
                  }
                  icon={<Icon name="flexlayout-align-center" size={16} />}
                  data-tip="Align layers to center"
                  data-cypress-id="align-horizontally-center-button"
                />
                <Button
                  noPadding
                  disabled={
                    isRootLayer || (isRow && parentElementType === "flex")
                  }
                  flexible
                  transparent
                  onClick={(e: Event) => this.onEvent("align-right", e)}
                  icon={<Icon name="flexlayout-align-end" size={16} />}
                  data-tip="Align layers to right"
                  data-cypress-id="align-right-button"
                />
                <ButtonGroupDivider />

                <Button
                  noPadding
                  disabled={
                    isRootLayer || (isColumn && parentElementType === "flex")
                  }
                  flexible
                  transparent
                  onClick={(e: Event) => this.onEvent("align-top", e)}
                  icon={<Icon name="align-top" size={16} />}
                  data-tip="Align layers to top"
                  data-cypress-id="align-top-button"
                />
                <Button
                  noPadding
                  disabled={
                    isRootLayer || (isColumn && parentElementType === "flex")
                  }
                  flexible
                  transparent
                  onClick={(e: Event) =>
                    this.onEvent("align-vertically-center", e)
                  }
                  icon={<Icon name="align-vertically-center" size={16} />}
                  data-tip="Align layers to middle"
                  data-for="tooltip-left"
                  data-cypress-id="align-vertically-center-button"
                />
                <Button
                  noPadding
                  disabled={
                    isRootLayer || (isColumn && parentElementType === "flex")
                  }
                  flexible
                  transparent
                  onClick={(e: Event) => this.onEvent("align-bottom", e)}
                  icon={<Icon name="align-bottom" size={16} />}
                  data-tip="Align layers to bottom"
                  data-for="tooltip-left"
                  data-cypress-id="align-bottom-button"
                />
              </ButtonGroup>
            </WrapperDiv>
          </Bar>
        )}
        {this.props.layers.length === 1 ? (
          <WrapperDiv className="mx-2 mt-1">
            <FlexboxEditor
              key="FlexboxEditor"
              session={this.props.session}
              layer={this.props.layers[0]}
              onEvent={this.props.onEvent}
              rootLayer={this.props.rootLayer}
            />
          </WrapperDiv>
        ) : null}
      </>
    );
  }
}
