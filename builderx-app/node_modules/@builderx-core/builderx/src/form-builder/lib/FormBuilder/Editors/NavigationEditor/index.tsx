import * as React from "react";
import {
  FormRow,
  FormCol,
  Text,
  FormGroup,
  PropertyGroup,
  SelectX
} from "components-x";
import { IEvent } from "common-interfaces";
import { Session } from "session";
import { find } from "lodash";

type propType = {
  layer: any;
  showTitle: boolean;
  getSelectedArtboardName: () => string;
  session: Session;
  onEvent: (event: IEvent) => void;
  getAllArtboardsName: () => { name: string; isDrawer: boolean }[];
};
export default class NavigationEditor extends React.Component<propType, any> {
  constructor(props: any) {
    super(props);
    this.state = {
      showEditor: true
    };
  }
  onUpdate = () => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.layer.on(["navigateTo"], this.onUpdate);
    this.props.layer.props.on("onPress", this.onUpdate);
  }
  componentDidUpdate(prevProps: propType) {
    prevProps.layer.off(["navigateTo"], this.onUpdate);
    prevProps.layer.props.off("onPress", this.onUpdate);
    this.props.layer.on(["navigateTo"], this.onUpdate);
    this.props.layer.props.on("onPress", this.onUpdate);
  }
  componentWillUnmount() {
    this.props.layer.off(["navigateTo"], this.onUpdate);
    this.props.layer.props.off("onPress", this.onUpdate);
  }
  disableNavigation(e: any) {
    // console.log("NavigationEditor");
  }
  handleNavigation = (screenName: string) => {
    let screenObj = this.findArtboardObj(screenName);
    if (screenObj === null || screenObj === undefined) {
      return;
    }
    this.props.onEvent({
      type: "setNavigationRoute",
      payload: screenObj,
      target: this.props.layer,
      originalEvent: null
    });
  };
  findArtboardObj = (val: string) =>
    find(
      this.props.getAllArtboardsName(),
      (artboardObj: { name: string; isDrawer: boolean }) => {
        return artboardObj.name === val;
      }
    );
  render() {
    const selectedArtboardName = this.props.getSelectedArtboardName();
    const selectedArtboardObj = this.findArtboardObj(selectedArtboardName);
    const artboardsName = this.props.getAllArtboardsName();
    const showTitle = this.props.showTitle;
    return (
      <PropertyGroup uiBackground={700} style={{ borderRadius: 2 }}>
        <FormGroup
          noPaddingBottom={!showTitle}
          noPadding={!showTitle}
          noPaddingTop={!showTitle}
        >
          <FormRow
            noPadding
            noTopPadding
            onClick={(e: any) => {
              if (selectedArtboardName === "disabled") {
                this.disableNavigation(e);
              }
            }}
            onKeyPress={(e: any) => {
              if (selectedArtboardName === "disabled") {
                this.disableNavigation(e);
              }
            }}
          >
            {showTitle && (
              <FormCol first uiSize={1}>
                <Text>
                  {this.props.layer.styleName ? "onPress" : "Navigation"}
                </Text>
              </FormCol>
            )}
            <FormCol
              uiSize={2}
              first={!showTitle}
              style={{
                pointerEvents:
                  selectedArtboardName === "disabled" ? "none" : "auto"
              }}
            >
              <SelectX
                options={artboardsName}
                value={
                  !selectedArtboardName || selectedArtboardName === "disabled"
                    ? { name: "", isDrawer: false }
                    : selectedArtboardObj
                    ? selectedArtboardObj
                    : { name: "", isDrawer: false }
                }
                renderOption={(option: any) => option}
                extractValue={(option: any) => option.name}
                renderValue={(option: any) => option.name}
                onChange={(val: any) => this.handleNavigation(val)}
                placeholder={"Artboard Name"}
                tooltip="Navigation"
                filter={(inputValue: string) =>
                  artboardsName.filter(
                    (artboards: { name: string; isDrawer: boolean }) =>
                      !inputValue || artboards.name.includes(inputValue)
                  )
                }
              />
            </FormCol>
          </FormRow>
        </FormGroup>
      </PropertyGroup>
    );
  }
}
