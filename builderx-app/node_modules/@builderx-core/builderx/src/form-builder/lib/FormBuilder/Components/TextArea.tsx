import * as React from "react";
import { Text, FormRow, FormCol, TextArea } from "components-x";
import { Layer } from "domain-x";
import { ControlsProperty, IEvent } from "common-interfaces";
import { Session } from "session";

type propType = {
  property: ControlsProperty;
  onEvent: (event: IEvent) => void;
  session: Session;
  layer: Layer;
};
class CustomTextArea extends React.PureComponent<propType, any> {
  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  componentDidMount() {
    const props = this.props.layer.props;
    const { category, propertyName } = this.props.property;
    if (propertyName) {
      if (category === "props") {
        props.on(propertyName, this.onUpdate);
      } else {
        props.style.on(propertyName, this.onUpdate);
      }
    }
  }
  componentDidUpdate(prevProps: propType) {
    const oldProps = prevProps.layer.props;
    if (prevProps.property.propertyName) {
      if (prevProps.property.category === "props") {
        oldProps.off(prevProps.property.propertyName, this.onUpdate);
      } else {
        oldProps.style.off(prevProps.property.propertyName, this.onUpdate);
      }
    }
    const props = this.props.layer.props;
    if (this.props.property.propertyName) {
      if (this.props.property.category === "props") {
        props.on(this.props.property.propertyName, this.onUpdate);
      } else {
        props.style.on(this.props.property.propertyName, this.onUpdate);
      }
    }
  }
  componentWillUnmount() {
    const { category, propertyName } = this.props.property;
    const props = this.props.layer.props;
    if (propertyName) {
      if (category === "props") {
        props.off(propertyName, this.onUpdate);
      } else {
        props.style.off(propertyName, this.onUpdate);
      }
    }
  }

  onEvent = (e: any) => {
    const { category, propertyName } = this.props.property;
    const value =
      typeof e.target.value === "number"
        ? parseFloat(e.target.value)
        : e.target.value;
    this.props.onEvent({
      payload: {
        key: propertyName,
        value
      },
      type: category === "props" ? "setProp" : "setStyleAttribute",
      originalEvent: e,
      target: this.props.layer
    });
  };
  render() {
    const { category, propertyName, title } = this.props.property;
    if (!propertyName) {
      return null;
    }
    let value;
    if (category === "props") {
      value = this.props.layer.props.getProp(propertyName);
    } else {
      value = this.props.layer.props.getResolvedStyleAttribute(propertyName);
    }
    return (
      <FormRow key={title}>
        <FormCol first={true}>
          <Text uiSize="s">{this.props.property.title}</Text>
        </FormCol>
        <FormCol uiSize={5}>
          <TextArea
            uiSize="xl"
            type="text"
            cols={40}
            rows={5}
            scroll={true}
            uiBackground={700}
            value={value}
            onChange={(e: any) => {
              this.onEvent(e);
            }}
          />
        </FormCol>
      </FormRow>
    );
  }
}
export default CustomTextArea;
