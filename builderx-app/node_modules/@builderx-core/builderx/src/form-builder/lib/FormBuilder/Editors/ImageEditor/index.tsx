import * as React from "react";
import { FormRow, Text, Button, ButtonGroup, Icon } from "components-x";
import { IEvent } from "common-interfaces";
import ReactTooltip from "react-tooltip";
import { DomainLayer } from "domain-x";
import { Session } from "session";

type propType = {
  key: string;
  layer: DomainLayer;
  onEvent: (event: IEvent) => void;
  session: Session;
};
export default class ImageEditor extends React.PureComponent<propType, any> {
  inputRef: any;

  constructor(props: any) {
    super(props);
  }
  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.layer.props.on("resizeMode", this.onUpdate);
    ReactTooltip.rebuild();
  }
  componentDidUpdate(prevProps: propType) {
    prevProps.layer.props.off("resizeMode", this.onUpdate);
    this.props.layer.props.on("resizeMode", this.onUpdate);
  }
  componentWillUnmount() {
    this.props.layer.props.off("resizeMode", this.onUpdate);
  }
  setResizeMode(propertyValue: string) {
    this.props.onEvent({
      type: "setProp",
      payload: {
        key: "resizeMode",
        value: propertyValue
      },
      target: this.props.layer,
      originalEvent: null
    });
  }

  blur = () => {
    if (this.inputRef) {
      this.inputRef.blur();
    }
  };

  render() {
    let resizeMode = this.props.layer.props.getProp("resizeMode");
    return (
      <>
        <FormRow>
          <div
            style={{
              position: "relative",
              overflow: "hidden",
              display: "flex",
              width: "100%",
              height: 35
            }}
          >
            <Button flexible borderRadius border actionBtn uiBackground={600}>
              <Text bold uiColor={0} className="p-1">
                CHANGE IMAGE
              </Text>
            </Button>
            <input
              type="file"
              id="input"
              accept="image/*"
              style={{
                position: "absolute",
                opacity: 0,
                height: 35,
                width: "100%"
              }}
              ref={(ref: any) => {
                this.inputRef = ref;
              }}
              onChange={(e: any) => {
                if (e.target.files && e.target.files[0]) {
                  this.props.onEvent({
                    type: "openImageExplorer",
                    payload: { files: e.target.files },
                    target: this.props.layer,
                    originalEvent: e
                  });
                  this.blur();
                }
              }}
            />
          </div>
        </FormRow>
        <FormRow>
          <Text>Resize Mode</Text>
        </FormRow>
        <FormRow>
          <ButtonGroup>
            <Button
              flexible
              borderRadius
              border
              uiBackground={700}
              icon={
                <Icon
                  className={resizeMode === "cover" ? "highlight-filter" : ""}
                  name="cover"
                  size={16}
                />
              }
              onClick={() => this.setResizeMode("cover")}
              data-tip="Cover"
            />
            <Button
              flexible
              borderRadius
              border
              uiBackground={700}
              icon={
                <Icon
                  className={resizeMode === "stretch" ? "highlight-filter" : ""}
                  name="stretch"
                  size={16}
                />
              }
              onClick={() => this.setResizeMode("stretch")}
              data-tip="Stretch"
            />
            <Button
              flexible
              borderRadius
              border
              uiBackground={700}
              icon={
                <Icon
                  className={resizeMode === "contain" ? "highlight-filter" : ""}
                  name="contain"
                  size={16}
                />
              }
              onClick={() => this.setResizeMode("contain")}
              data-tip="Contain"
            />
            <Button
              flexible
              borderRadius
              border
              uiBackground={700}
              icon={
                <Icon
                  className={resizeMode === "repeat" ? "highlight-filter" : ""}
                  name="repeat"
                  size={16}
                />
              }
              onClick={() => this.setResizeMode("repeat")}
              data-tip="Repeat"
            />
            <Button
              flexible
              borderRadius
              border
              uiBackground={700}
              icon={
                <Icon
                  className={resizeMode === "center" ? "highlight-filter" : ""}
                  name="center"
                  size={16}
                />
              }
              onClick={() => this.setResizeMode("center")}
              data-tip="Center"
              data-for="tooltip-left"
            />
          </ButtonGroup>
        </FormRow>
        {(resizeMode === "center" || resizeMode === "repeat") && (
          <FormRow>
            <Text uiSize="xs" uiColor={400}>
              This resize mode is device dependent. It may look different on the
              device.
            </Text>
          </FormRow>
        )}
      </>
    );
  }
}
