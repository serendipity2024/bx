import { IEvent } from "common-interfaces";
import {
  Checkbox,
  CheckboxTick,
  FormCol,
  FormRow,
  InputGroupInput,
  Text
} from "components-x";
import { DomainLayer } from "domain-x";
import * as React from "react";
import { Session } from "session";
import { debounce } from "lodash";

type propType = {
  onEvent: (event: IEvent) => void;
  layer: DomainLayer;
  checked: boolean;
  toggleCheckbox: (e: any) => void;
  title: string;
  propertyName: string | undefined;
  value: any;
  session: Session;
  type: "number" | "string";
  placeholder?: string;
};
class InputFieldWithCheckbox extends React.PureComponent<propType, any> {
  constructor(props: propType) {
    super(props);
    this.state = {};
  }
  componentDidMount() {
    // TODO:
    // if (this.props.property.propertyName) {
    //   this.props.layer.props.style.on(
    //     this.props.property.propertyName,
    //     this.onUpdate
    //   );
    // }
  }
  onUpdate = (key: string) => {
    this.forceUpdate();
  };

  componentWillUnmount() {
    // TODO:
    // if (this.props.property.propertyName) {
    //   this.props.layer.props.style.off(
    //     this.props.property.propertyName,
    //     this.onUpdate
    //   );
    // }
  }
  onEvent(e: any, eventType: string) {
    const value =
      this.props.type === "number"
        ? parseFloat(e.target.value)
        : e.target.value;

    this.props.onEvent({
      payload: {
        value
      },
      originalEvent: e,
      type: eventType,
      target: this.props.layer
    });
  }
  render() {
    const propertyName = this.props.propertyName;
    const title = this.props.title;
    if (!propertyName) {
      return null;
    }
    return (
      <FormRow key={title}>
        <Checkbox style={{ flex: 0, paddingRight: 7 }}>
          <CheckboxTick
            noMargin
            checked={this.props.checked}
            onChange={this.props.toggleCheckbox}
          />
        </Checkbox>
        <FormCol first={true}>
          <Text uiSize="s">{this.props.title}</Text>
        </FormCol>
        <FormCol>
          <InputGroupInput
            undo={this.props.session.commandManager.undo}
            redo={this.props.session.commandManager.redo}
            placeholder={
              this.props.value && this.props.placeholder
                ? this.props.placeholder
                : undefined
            }
            value={this.props.value}
            onChange={debounce((e: any) => {
              this.onEvent(e, "setOverride");
            }, 600)}
            // onFocus={(e: any) => {
            //   this.onEvent(e, "setOverrideAndForget");
            // }}
            // onBlur={(e: any) => {
            //   // console.log("onBlur inputField");
            //   this.onEvent(e, "setOverride");
            // }}
          />
        </FormCol>
      </FormRow>
    );
  }
}
export default InputFieldWithCheckbox;
