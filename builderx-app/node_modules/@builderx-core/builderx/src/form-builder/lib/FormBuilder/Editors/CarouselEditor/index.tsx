import * as React from "react";
import { IEvent } from "common-interfaces";
import { forEach } from "lodash";
import { FormGroup, FormRow, FormCol, Text, Icon, Button } from "components-x";
import DropdownInput from "./../../Components/DropdownInput";
import { DomainLayer } from "domain-x";
import { Session } from "session";
type propType = {
  layer: DomainLayer;
  session: Session;
  onEvent: (event: IEvent) => void;
};
export default class CarouselEditor extends React.PureComponent<propType, any> {
  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.layer.on("children", this.onUpdate);
    this.props.layer.props.on("index", this.onUpdate);
  }
  componentDidUpdate(prevProps: propType) {
    prevProps.layer.off("children", this.onUpdate);
    prevProps.layer.props.off("index", this.onUpdate);
    this.props.layer.on("children", this.onUpdate);
    this.props.layer.props.on("index", this.onUpdate);
  }
  componentWillUnmount() {
    this.props.layer.off("children", this.onUpdate);
    this.props.layer.props.off("index", this.onUpdate);
  }
  addNewSlide = () => {
    this.props.onEvent({
      type: "addCarouselSlide",
      payload: null,
      target: this.props.layer,
      originalEvent: null
    });
  };

  removeSlide = (index: number) => {
    this.props.onEvent({
      type: "removeCarouselSlide",
      payload: index,
      target: this.props.layer,
      originalEvent: null
    });
    this.props.onEvent({
      type: "setProp",
      payload: {
        key: "index",
        value: this.props.layer.children.length ? 0 : undefined
      },
      target: this.props.layer,
      originalEvent: null
    });
  };

  editSlide = (index: number) => {
    console.log(this.props.layer, index, "editSlide");
    this.props.onEvent({
      type: "editCarouselSlide",
      payload: index,
      target: this.props.layer.children[index],
      originalEvent: null
    });
  };

  renderSlideEditor = (children: any) => {
    let slidesRow = new Array();
    forEach(children, (child: any, index: number) => {
      slidesRow.push(
        <FormRow key={index}>
          <FormCol first uiSize={2}>
            <Text>{"Slide " + index}</Text>
          </FormCol>
          <FormCol>
            <Button onClick={() => this.removeSlide(index)}>
              <Icon size={16} name="close" />
            </Button>
          </FormCol>
          <FormCol>
            <Button onClick={() => this.editSlide(index)}>
              <Icon size={16} name="pencil" />
            </Button>
          </FormCol>
        </FormRow>
      );
    });
    return slidesRow;
  };

  renderSlideDropdown = (children: any) => {
    let row = new Array();
    let index = 0;
    forEach(children, (child: any) => {
      row.push(
        <option key={index} value={index}>
          {index}
        </option>
      );
      index++;
    });
    return row;
  };
  render() {
    const layer = this.props.layer;
    let childrenIndices = [];
    for (let i = 0; i < layer.children.length; i++) {
      childrenIndices.push(i);
    }
    return (
      <>
        <FormGroup>
          {this.renderSlideEditor(layer.children)}
          <FormRow>
            <FormCol>
              <Button onClick={this.addNewSlide}>Add new slide</Button>
            </FormCol>
          </FormRow>
          <FormRow>
            <DropdownInput
              key={"active-slide-index"}
              layer={layer}
              onEvent={this.props.onEvent}
              session={this.props.session}
              property={{
                propertyName: "index",
                title: "Default Active Slide",
                type: "enum",
                value: {
                  options: childrenIndices,
                  defaultValue: 0
                },
                category: "props"
              }}
              propertyName={"index"}
              propertyTitle={"Default Active Slide"}
              category={"props"}
              options={childrenIndices}
              defaultValue={0}
            />
          </FormRow>
          {/* <FormRow>
            <FormCol first>
              <Dropdown
                onChange={(e: any) => {
                  this.setState({ stylePropName: e.target.value });
                }}
                value={this.state.stylePropName}
              >
                <option key="style" value="style">
                  style
                </option>
                <option key="dotStyle" value="dotStyle">
                  dot style
                </option>
                <option key="activeDotStyle" value="activeDotStyle">
                  active dot style
                </option>
                <option key="buttonTextStyle" value="buttonTextStyle">
                  button text style
                </option>
              </Dropdown>
            </FormCol>
          </FormRow> */}
        </FormGroup>
      </>
    );
  }
}
