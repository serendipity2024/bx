import * as React from "react";
import { FormGroup, FormCol, FormRow, WrapperDiv, COLORS } from "components-x";
import { Layer } from "domain-x";
import { find, get } from "lodash";
import { ControlsProperty, IEvent } from "common-interfaces";
import DropdownInput from "./DropdownInput";
import Icon from "@builderx/icons";
import conditionalResolver from "src/domain-x/lib/services/conditionalResolver";
import { Session } from "session";
type propType = {
  onEvent: (event: IEvent) => void;
  layer: Layer;
  property: ControlsProperty;
  isOverride?: boolean;
  direction?: string;
  session: Session;
  selectedFamily?: string;
};

export default class DependantDropdownInput extends React.PureComponent<
  propType,
  any
> {
  constructor(props: propType) {
    super(props);
  }
  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.state = {
      selectedFamily:
        this.props.layer.props.getResolvedProp("type") ||
        (this.props.property.value.defaultValue as string) ||
        ""
    };
    if (this.props.property.propertyName && !this.props.isOverride) {
      if (this.props.property.category === "props") {
        this.props.layer.props.on(
          this.props.property.propertyName,
          this.onUpdate
        );
      } else {
        this.props.layer.props.style.on(
          this.props.property.propertyName,
          this.onUpdate
        );
      }
    }
  }
  componentDidUpdate(prevProps: propType) {
    this.state = {
      selectedFamily:
        this.props.layer.props.getResolvedProp("type") ||
        (this.props.property.value.defaultValue as string) ||
        ""
    };
    if (prevProps.property.propertyName && !this.props.isOverride) {
      if (prevProps.property.category === "props") {
        prevProps.layer.props.off(
          prevProps.property.propertyName,
          this.onUpdate
        );
      } else {
        prevProps.layer.props.style.off(
          prevProps.property.propertyName,
          this.onUpdate
        );
      }
    }
    if (this.props.property.propertyName && !this.props.isOverride) {
      if (this.props.property.category === "props") {
        this.props.layer.props.on(
          this.props.property.propertyName,
          this.onUpdate
        );
      } else {
        this.props.layer.props.style.on(
          this.props.property.propertyName,
          this.onUpdate
        );
      }
    }

    if (this.props.selectedFamily !== prevProps.selectedFamily) {
      this.forceUpdate();
    }
  }
  componentWillUnmount() {
    if (this.props.property.propertyName && !this.props.isOverride) {
      if (this.props.property.category === "props") {
        this.props.layer.props.off(
          this.props.property.propertyName,
          this.onUpdate
        );
      } else {
        this.props.layer.props.style.off(
          this.props.property.propertyName,
          this.onUpdate
        );
      }
    }
  }
  onEvent = (eventObject: any) => {
    this.props.onEvent(eventObject);
  };
  renderLeft = (name: string) => {
    return (
      <Icon
        type={this.props.selectedFamily}
        name={name}
        size={14}
        style={{
          marginRight: 5,
          color: COLORS.primary[50]
        }}
      />
    );
  };
  render() {
    if (
      !this.props.property.propertyName ||
      !this.props.property.value.options ||
      !this.props.property.value.nestedEnumProperty
    ) {
      return null;
    }
    let parentOptions = this.props.property.value.options.map((option: any) => {
      return option.key;
    });
    let iconOptions = get(
      find(this.props.property.value.options, [
        "key",
        this.props.selectedFamily
      ]),
      "value",
      []
    );
    return (
      <FormRow noTopPadding noPadding>
        {!this.props.isOverride && (
          <Icon
            name={this.props.layer.props.getResolvedProp(
              this.props.property.value.nestedEnumProperty.name as any
            )}
            type={this.props.layer.props.getResolvedProp(
              this.props.property.propertyName
            )}
            style={{ fontSize: 24, color: COLORS.primary[50] }}
          />
        )}
        <WrapperDiv
          style={{ display: "flex", flexDirection: "column", width: "100%" }}
        >
          {/* <FormCol first uiSize={2}>
            <DropdownInput
              key={this.props.property.propertyName}
              layer={this.props.layer}
              property={this.props.property}
              propertyName={this.props.property.propertyName}
              propertyTitle={this.props.property.title}
              category={this.props.property.category}
              options={parentOptions}
              onEvent={this.onEvent}
              defaultValue={this.props.property.value.defaultValue}
              isOverride={this.props.isOverride}
              renderTitle={false}
            />
          </FormCol> */}
          <FormCol style={{ paddingLeft: 0 }} uiSize={4}>
            <DropdownInput
              renderLeft={this.renderLeft}
              session={this.props.session}
              key={this.props.property.value.nestedEnumProperty.name}
              layer={this.props.layer}
              property={this.props.property}
              propertyName={this.props.property.value.nestedEnumProperty.name}
              propertyTitle={this.props.property.value.nestedEnumProperty.title}
              category={this.props.property.value.nestedEnumProperty.category}
              options={iconOptions}
              onEvent={this.onEvent}
              defaultValue={"home"}
              isOverride={this.props.isOverride}
              renderTitle={false}
            />
          </FormCol>
        </WrapperDiv>
      </FormRow>
    );
  }
}
