import * as React from "react";
import { isNil, toLower } from "lodash";
import { IEvent } from "common-interfaces";
import {
  Checkbox,
  CheckboxLabel,
  CheckboxTick,
  COLORS,
  FormCol,
  FormGroup,
  FormRow,
  spaceMagnitudes,
  PropertyGroup,
  PropertyHeader,
  Text,
  Button,
  SelectX
} from "components-x";
import { Session } from "session";
import { Layer as DomainLayer, Layer } from "domain-x";

type propType = {
  onEvent: (event: IEvent) => void;
  layer: Layer;
  key: string;
  session: Session;
  changeToScrollViewIsDoable: (layer: DomainLayer) => boolean;
  showEditButton: boolean;
};
const directionArray = ["Horizontal", "Vertical"];

export default class ScrollViewEditor extends React.PureComponent<
  propType,
  any
> {
  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.layer.props.on("horizontal", this.onUpdate);
    this.props.layer.props.style.on("gradient", this.onUpdate);
  }
  componentDidUpdate(prevProps: propType) {
    prevProps.layer.props.off("horizontal", this.onUpdate);
    prevProps.layer.props.style.off("gradient", this.onUpdate);
    this.props.layer.props.on("horizontal", this.onUpdate);
    this.props.layer.props.style.on("gradient", this.onUpdate);
  }
  componentWillUnmount() {
    this.props.layer.props.style.off("gradient", this.onUpdate);
    this.props.layer.props.off("horizontal", this.onUpdate);
  }
  handleChange = (value: any) => {
    if (isNil(value)) {
      return;
    }
    let isHorizontal = value === "Horizontal";
    this.props.onEvent({
      type: "setProp",
      target: this.props.layer,
      originalEvent: null,
      payload: { key: "horizontal", value: isHorizontal }
    });
  };

  changeToScrollView = (isScrollView: any) => {
    this.props.onEvent({
      type: "changeToScrollView",
      originalEvent: null,
      target: this.props.layer,
      payload: { isScrollView }
    });
  };

  render() {
    const layerName = this.props.layer.import.layerName;
    let showScroll = layerName === "ScrollView";
    const hasGradient = (this.props.layer as any).gradient ? true : false;
    const horizontalProp = this.props.layer.props.getProp("horizontal");
    const direction = horizontalProp ? "Horizontal" : "Vertical";
    let showEditor = this.props.changeToScrollViewIsDoable(this.props.layer);
    showEditor = showEditor && !hasGradient;
    if (showEditor) {
      return (
        <React.Fragment>
          <FormGroup noPadding>
            <PropertyGroup uiBackground={700} style={{ borderRadius: 2 }}>
              <PropertyHeader
                uiBackground={700}
                style={{
                  paddingTop: spaceMagnitudes[2],
                  paddingBottom: spaceMagnitudes[2],
                  borderTopLeftRadius: 2,
                  borderTopRightRadius: 2,
                  borderBottomLeftRadius: !showScroll ? 2 : 0,
                  borderBottomRightRadius: !showScroll ? 2 : 0,
                  backgroundColor: showScroll
                    ? COLORS.secondary[600]
                    : COLORS[700]
                }}
                onClick={(e: any) => {
                  this.changeToScrollView(layerName !== "ScrollView");
                  e.stopPropagation();
                }}
              >
                <FormRow>
                  <FormCol first>
                    <Checkbox style={{ color: "#FFF" }}>
                      <CheckboxTick
                        noMargin
                        noBorder={showScroll}
                        checked={showScroll}
                        uiColor={50}
                        onChange={() => {
                          //
                        }}
                      />
                      <CheckboxLabel uiColor={0}>Scrollable</CheckboxLabel>
                    </Checkbox>
                  </FormCol>
                </FormRow>
              </PropertyHeader>
              {showScroll && (
                <FormGroup style={{ paddingTop: 0, paddingBottom: 0 }}>
                  <FormRow>
                    <FormCol first uiSize={4}>
                      <FormRow>
                        <Text>Direction</Text>
                      </FormRow>
                    </FormCol>
                    <FormCol uiSize={7}>
                      <SelectX
                        options={directionArray}
                        value={direction}
                        renderOption={(option: any) => option}
                        renderValue={(option: any) => option}
                        extractValue={(option: any) => option}
                        onChange={this.handleChange}
                        placeholder={"Scroll Direction"}
                        tooltip="Scroll Direction"
                        filter={(inputValue: string) =>
                          directionArray.filter(
                            scrollDirection =>
                              !inputValue ||
                              toLower(scrollDirection).includes(
                                toLower(inputValue)
                              )
                          )
                        }
                      />
                    </FormCol>
                  </FormRow>
                  <FormRow className="pt-3">
                    <Button
                      flexible
                      borderRadius
                      border
                      actionBtn
                      uiBackground={600}
                      onClick={() => {
                        this.props.onEvent({
                          type: "editScrollView",
                          target: this.props.layer,
                          originalEvent: null,
                          payload: null
                        });
                      }}
                    >
                      <Text bold uiColor={0} className="p-1">
                        EDIT CONTENT
                      </Text>
                    </Button>
                  </FormRow>
                </FormGroup>
              )}
            </PropertyGroup>
          </FormGroup>
        </React.Fragment>
      );
    } else {
      return null;
    }
  }
}
