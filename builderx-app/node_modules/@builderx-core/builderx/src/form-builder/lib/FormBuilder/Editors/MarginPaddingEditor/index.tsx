import * as React from "react";
import { FormRow, FormGroup, FormCol } from "components-x";
import MarginBoxContainer from "./MarginBoxContainer";
import PaddingBoxContainer from "./PaddingBoxContainer";
import ChildMarginBoxContainer from "./ChildMarginBoxContainer";
import { Layer } from "domain-x";
import { IEvent } from "common-interfaces";
import { Session } from "session";
import { Utils } from "utils";
type propType = {
  key: string;
  session: Session;
  layer: Layer;
  onEvent: (event: IEvent) => void;
  childMarginBoxContainer: boolean;
  marginBoxContainer: boolean;
  paddingBoxContainer: boolean;
};
export default class MarginPaddingEditor extends React.PureComponent<
  propType,
  any
> {
  constructor(props: any) {
    super(props);
    this.state = {
      showEditor: true
    };
  }
  onUpdate = () => {
    this.forceUpdate();
  };
  componentDidMount() {
    if (!Utils.shouldIgnoreLayer(this.props.layer.type)) {
      this.props.layer.props.style.on(["flex", "position"], this.onUpdate);
      this.props.layer.forEachChild(child =>
        child.props.style.on(["position"], this.onUpdate)
      );
    }
  }
  componentDidUpdate(prevProps: propType) {
    if (!Utils.shouldIgnoreLayer(prevProps.layer.type)) {
      prevProps.layer.props.style.off(["flex", "position"], this.onUpdate);
      prevProps.layer.forEachChild(child =>
        child.props.style.off(["position"], this.onUpdate)
      );
    }
    if (!Utils.shouldIgnoreLayer(this.props.layer.type)) {
      this.props.layer.props.style.on(["flex", "position"], this.onUpdate);
      this.props.layer.forEachChild(child =>
        child.props.style.on(["position"], this.onUpdate)
      );
    }
  }
  componentWillUnmount() {
    if (!Utils.shouldIgnoreLayer(this.props.layer.type)) {
      this.props.layer.props.style.off(["flex", "position"], this.onUpdate);
      this.props.layer.forEachChild(child =>
        child.props.style.off(["position"], this.onUpdate)
      );
    }
  }
  renderChildMarginBoxContainer = () => {
    if (this.props.childMarginBoxContainer) {
      return (
        <ChildMarginBoxContainer
          title={"Children Margin"}
          session={this.props.session}
          layer={this.props.layer}
          onEvent={this.props.onEvent}
        />
      );
    } else {
      return null;
    }
  };
  renderMarginBoxContainer = () => {
    if (this.props.marginBoxContainer) {
      return (
        <MarginBoxContainer
          title={"Margin"}
          session={this.props.session}
          layer={this.props.layer}
          onEvent={this.props.onEvent}
        />
      );
    } else {
      return null;
    }
  };
  renderPaddingBoxContainer = () => {
    if (this.props.paddingBoxContainer) {
      return (
        <PaddingBoxContainer
          title={"Padding"}
          session={this.props.session}
          layer={this.props.layer}
          onEvent={this.props.onEvent}
        />
      );
    } else {
      return null;
    }
  };

  render() {
    const marginBoxContainer = this.renderMarginBoxContainer();
    const childMarginBoxContainer = this.renderChildMarginBoxContainer();
    const paddingBoxContainer = this.renderPaddingBoxContainer();

    return (
      <>
        {(paddingBoxContainer ||
          marginBoxContainer ||
          childMarginBoxContainer) && (
          <FormGroup noPadding>
            <FormRow wrapContent>
              {paddingBoxContainer && (
                <FormCol first>{paddingBoxContainer}</FormCol>
              )}
              {marginBoxContainer && (
                <FormCol first={!paddingBoxContainer}>
                  {marginBoxContainer}
                </FormCol>
              )}
              <FormCol first={!paddingBoxContainer && !marginBoxContainer}>
                {childMarginBoxContainer}
              </FormCol>
            </FormRow>
          </FormGroup>
        )}
      </>
    );
  }
}
