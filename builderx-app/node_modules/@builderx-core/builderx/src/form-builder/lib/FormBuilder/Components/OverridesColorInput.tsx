import { IEvent } from "common-interfaces";
import { ColorPicker } from "components-x";
import { DomainLayer } from "domain-x";
import * as React from "react";
import { Session } from "session";
type propType = {
  onEvent: (event: IEvent) => void;
  layer: DomainLayer;
  propertyName: string | undefined;
  category: string;
  value: any;
  session: Session;
  robot: any;
};
class ColorInput extends React.PureComponent<propType, any> {
  constructor(props: propType) {
    super(props);
  }
  onUpdate = (key: string) => {
    this.forceUpdate();
  };

  getLayerColor() {
    const propertyName = this.props.propertyName;
    if (!propertyName) {
      return null;
    }
    let layerColor = this.props.layer.props.getResolvedStyleAttribute(
      propertyName
    );
    layerColor = layerColor !== undefined ? layerColor : this.props.value;
    return layerColor;
  }

  onChangeColor = (color: string) => {
    const propertyName = this.props.propertyName;
    this.props.onEvent({
      payload: { key: propertyName, value: color },
      type: "setOverride",
      target: this.props.layer,
      originalEvent: null
    });
  };

  setGradientEditor = (value: "open" | "close") => {
    this.props.onEvent({
      payload: { key: "gradientEditor", value },
      type: "setGradientEditor",
      target: this.props.layer,
      originalEvent: null
    });
  };

  render() {
    return (
      <ColorPicker
        showGradient={false}
        value={this.props.value}
        renderType="color"
        onChangeColor={this.onChangeColor}
        onEvent={this.props.onEvent}
        setGradientEditor={this.setGradientEditor}
        alignRight
        robot={this.props.robot}
      />
    );
  }
}
export default ColorInput;
