import * as React from "react";
import { Text, FormRow, FormCol } from "components-x";
import { IEvent, ControlsProperty } from "common-interfaces";
import { Layer } from "domain-x";
import CallbackEditorBare from "./CallbackEditorBare";
import { Session } from "session";
type propType = {
  layer: Layer;
  onEvent: (event: IEvent) => void;
  property: ControlsProperty;
  session: Session;
  validateCallbackPropValue: (value: string) => string;
  overrideTitle?: string;
};
export default class CallbackEditorHOC extends React.PureComponent<
  propType,
  any
> {
  inputRef: any;
  selection: any;
  constructor(props: any) {
    super(props);
    this.state = { error: false };
  }
  componentDidMount() {
    const props = this.props.layer.props;
    const { propertyName } = this.props.property;
    if (propertyName && !this.props.overrideTitle) {
      props.on(propertyName, this.onUpdate);
      if (propertyName === "onPress") {
        this.props.layer.on("navigateTo", this.onUpdate);
      }
    }
  }
  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  componentDidUpdate(prevProps: propType) {
    if (prevProps.property.propertyName && !this.props.overrideTitle) {
      prevProps.layer.props.off(prevProps.property.propertyName, this.onUpdate);
      if (
        prevProps.property.propertyName === "onPress" &&
        !this.props.overrideTitle
      ) {
        prevProps.layer.off("navigateTo", this.onUpdate);
      }
    }
    const props = this.props.layer.props;
    const { propertyName } = this.props.property;
    if (propertyName && !this.props.overrideTitle) {
      props.on(propertyName, this.onUpdate);
      if (propertyName === "onPress") {
        this.props.layer.on("navigateTo", this.onUpdate);
      }
    }
  }
  componentWillUnmount() {
    const { propertyName } = this.props.property;
    const props = this.props.layer.props;
    if (propertyName && !this.props.overrideTitle) {
      props.off(propertyName, this.onUpdate);
      if (propertyName === "onPress") {
        this.props.layer.off("navigateTo", this.onUpdate);
      }
    }
  }
  render() {
    const { propertyName, title } = this.props.property;
    if (!propertyName) {
      return null;
    }
    let code = this.props.overrideTitle
      ? (this.props.layer as any).scopeVariables[this.props.overrideTitle]
      : this.props.layer.props.getResolvedProp(propertyName);
    code = code ? code : "";
    return (
      <>
        <FormRow key={title}>
          <FormCol first={true}>
            <Text uiSize="s">{this.props.property.title}</Text>
          </FormCol>
          <FormCol uiSize={5}>
            <CallbackEditorBare
              value={code}
              property={this.props.property}
              layer={this.props.layer}
              onEvent={this.props.onEvent}
              validateCallbackPropValue={this.props.validateCallbackPropValue}
              overrideTitle={this.props.overrideTitle}
            />
          </FormCol>
        </FormRow>
        <FormRow center noTopPadding>
          <Text style={{ color: "#bb1e1ecc" }}>
            {this.state.error ? this.state.error.message : ""}
          </Text>
        </FormRow>
      </>
    );
  }
}
