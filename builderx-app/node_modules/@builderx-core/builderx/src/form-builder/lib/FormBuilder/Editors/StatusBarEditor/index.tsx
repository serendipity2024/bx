import { devices } from "bx-constants";
import {
  Checkbox,
  CheckboxLabel,
  CheckboxTick,
  ColorPicker,
  FormCol,
  FormRow,
  Text,
  SelectX
} from "components-x";
import { toLower } from "lodash";
import * as React from "react";
import { File as DomainFile } from "domain-x";
import { IEvent } from "common-interfaces";
import { Session } from "session";
type propType = {
  key: string;
  onEvent: (event: IEvent) => void;
  session: Session;
  file: DomainFile;
  robot: any;
};
export default class StatusBarEditor extends React.Component<propType, any> {
  contentArray: Array<string> = ["dark-content", "light-content", "default"];
  onUpdate = () => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.file.on("statusBar", this.onUpdate);
  }

  componentDidUpdate(prevProps: propType) {
    prevProps.file.off("statusBar", this.onUpdate);
    this.props.file.on("statusBar", this.onUpdate);

    // this.attachStatusBarListeners();
  }
  componentWillUnmount() {
    this.props.file.off("statusBar", this.onUpdate);
  }
  onChange(propName: string, value: any) {
    if (value === undefined || value === null) {
      return;
    }

    this.props.onEvent({
      type: "setStatusBar",
      payload: {
        ...this.props.file.statusBar,
        [propName]: value
      },
      target: this.props.file,
      originalEvent: null
    });
  }
  fetchOS = () => {
    const deviceName = this.props.file.scopeVariables.deviceName;
    let deviceOS: string = "";
    const deviceObject = devices.find((dev: any) => dev.name === deviceName);
    if (deviceObject) {
      deviceOS = deviceObject.os;
    }
    return deviceOS;
  };

  render() {
    return this.props.file.statusBar.display ? (
      <React.Fragment>
        <FormRow>
          <FormCol first={true} uiSize={1}>
            <Text>Bar Style</Text>
          </FormCol>
          <FormCol uiSize={1} first alignTop contentLeft>
            <SelectX
              options={this.contentArray}
              value={this.props.file.statusBar.barStyle || "dark-content"}
              renderOption={(option: any) => option}
              renderValue={(option: any) => option}
              extractValue={(option: any) => option}
              onChange={(e: any) => this.onChange("barStyle", e)}
              placeholder="Bar Style"
              tooltip="Bar Style"
              filter={(inputValue: string) =>
                this.contentArray.filter(
                  (o: any) =>
                    !inputValue || toLower(o).includes(toLower(inputValue))
                )
              }
            />
          </FormCol>
        </FormRow>
        <FormRow className="pb-3">
          <FormCol first={true}>
            <Checkbox>
              <CheckboxTick
                noMargin
                checked={this.props.file.statusBar.animated}
                onChange={(e: any) => {
                  this.onChange("animated", e.target.checked);
                }}
              />
              <CheckboxLabel>Animated</CheckboxLabel>
            </Checkbox>
          </FormCol>
          {this.props.file.scopeVariables["platform"] === "Android" && (
            <FormCol uiSize={1} first alignTop contentLeft>
              <ColorPicker
                value={this.props.file.statusBar.backgroundColor}
                onChangeColor={(color: string) => {
                  this.onChange("backgroundColor", color);
                }}
                alignRight={true}
                robot={this.props.robot}
              />
            </FormCol>
          )}
          {/* {platform === "iOS" && (
              <FormCol uiSize={1} first alignTop contentLeft>
                <Downshift
                  onChange={(e: any) => this.onChange("showHideTransition", e)}
                  selectedItem={showHideTransitionValue}
                >
                  {({
                    getButtonProps,
                    getItemProps,
                    isOpen,
                    selectedItem,
                    getInputProps,
                    selectItem,
                    openMenu,
                    closeMenu,
                    inputValue,
                    clearSelection,
                    highlightedIndex
                  }: any) => (
                    <div>
                      <InputDropdown
                        onClick={() => {
                          if (isOpen) {
                            selectItem(selectedItem);
                            closeMenu();
                          } else {
                            clearSelection();
                            openMenu();
                            // setHighlightedIndex(selectedItem);
                          }
                        }}
                        inputProps={getInputProps({
                          placeholder: "Show Hide Transition Value"
                        })}
                      />

                      {isOpen ? (
                        <DropdownExpanded isOpen={isOpen}>
                          <Scrollbars autoHeight>
                            {_.filter(
                              ["fade", "slide"],
                              (o: any) =>
                                !inputValue ||
                                _.toLower(o).includes(_.toLower(inputValue))
                            ).map((option: any, index: any) => (
                              <DropdownItem
                                key={option}
                                {...getItemProps({
                                  item: option
                                })}
                                selected={option === selectedItem}
                                highlighted={highlightedIndex === index}
                              >
                                {option}
                              </DropdownItem>
                            ))}
                          </Scrollbars>
                        </DropdownExpanded>
                      ) : null}
                    </div>
                  )}
                </Downshift>
              </FormCol>
            )} */}
        </FormRow>
      </React.Fragment>
    ) : null;
  }
}
