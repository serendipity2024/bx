import * as React from "react";
import { IEvent } from "common-interfaces";
import {
  Checkbox,
  CheckboxLabel,
  CheckboxTick,
  COLORS,
  FormCol,
  FormRow,
  PropertyGroup,
  PropertyHeader,
  spaceMagnitudes
} from "components-x";
import ReactTooltip from "react-tooltip";
import { Domain, Layer } from "domain-x";
import { Session } from "session";
type propType = {
  onEvent: (event: IEvent) => void;
  layer: Layer;
  key: string;
  session: Session;
  domain: Domain;
};

export default class TouchableOpacityEditor extends React.PureComponent<
  propType,
  any
> {
  constructor(props: propType) {
    super(props);
    this.state = {
      showEditor: true,
      show: false
    };
  }
  onUpdate = (key: string) => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.layer.props.style.on("gradient", this.onUpdate);
    ReactTooltip.rebuild();
  }
  componentDidUpdate(prevProps: propType) {
    prevProps.layer.props.style.off("gradient", this.onUpdate);
    this.props.layer.props.style.on("gradient", this.onUpdate);
  }
  componentWillUnmount() {
    this.props.layer.props.style.off("gradient", this.onUpdate);
  }
  changeToTouchableOpacity = (isChecked: any) => {
    this.props.onEvent({
      target: this.props.layer,
      originalEvent: null,
      type: "changeToTouchableOpacity",
      payload: { isTouchableOpacity: isChecked }
    });
  };
  shouldShowEditor() {
    if (
      (this.props.layer && this.props.layer.type === "root") ||
      !this.props.layer.parent ||
      (this.props.layer as any).gradient
    ) {
      return false;
    }
    const layerName = this.props.layer.import.layerName;
    const type = this.props.layer.parent.type;
    if (
      layerName === "View" ||
      layerName === "TouchableOpacity" ||
      this.props.layer.type === "symbol"
    ) {
      if (type !== "thirdParty") {
        return true;
      }
    }
    return false;
  }
  render() {
    const layer = this.props.layer;
    let showTouch: boolean =
      (layer && layer.type === "touchableOpacity") || false;
    const layerName = layer.import.layerName;
    let isClickable = false;
    let showPanel = false;
    switch (layer.type) {
      case "view":
        isClickable = false;
        showPanel = true;
        break;
      case "touchableOpacity":
        isClickable = true;
        showPanel = true;
        break;
      case "root":
        isClickable = layerName === "TouchableOpacity";
        showPanel = true;
        break;
      case "symbol":
        const symbolFile = this.props.domain.getSymbolFileFromSymbolInstance(
          layer
        );
        if (symbolFile) {
          if (symbolFile.layer.import.layerName === "View") {
            isClickable = false;
            showPanel = true;
          } else if (symbolFile.layer.import.layerName === "TouchableOpacity") {
            isClickable = true;
            showPanel = true;
          }
        }
        break;
      default:
        break;
    }
    let propertyHeaderStyle = {
      paddingTop: spaceMagnitudes[2],
      paddingBottom: spaceMagnitudes[2],
      borderTopLeftRadius: 2,
      borderTopRightRadius: 2,
      borderBottomLeftRadius: showTouch ? 0 : 2,
      borderBottomRightRadius: showTouch ? 0 : 2,
      backgroundColor:
        showTouch || isClickable ? COLORS.secondary[600] : COLORS[700]
    };
    let showEditor = this.shouldShowEditor();

    if (showPanel && showEditor) {
      return (
        <PropertyGroup uiBackground={700} style={{ borderRadius: 2 }}>
          <PropertyHeader
            uiBackground={700}
            style={propertyHeaderStyle}
            onClick={(e: any) => {
              this.changeToTouchableOpacity(!isClickable);
              e.stopPropagation();
            }}
          >
            <FormRow>
              <FormCol first>
                <Checkbox style={{ color: "#FFF" }}>
                  <CheckboxTick
                    noMargin
                    uiColor={50}
                    noBorder={isClickable}
                    checked={isClickable}
                    onChange={() => {
                      //
                    }}
                  />
                  <CheckboxLabel uiColor={0}>Clickable</CheckboxLabel>
                </Checkbox>
              </FormCol>
            </FormRow>
          </PropertyHeader>
        </PropertyGroup>
      );
    } else {
      return null;
    }
  }
}
