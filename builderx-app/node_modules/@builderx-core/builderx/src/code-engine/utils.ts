import { ExtraParams } from "./react-native/types";
import { get, isArray, findIndex, keys, isNil } from "lodash";
import { Utils } from "utils";

export function updateWrapperStyleName(json: any, extraParams: ExtraParams) {
  if (json.type === "row" || json.type === "column" || json.type === "stack") {
    const firstChildStyleName = get(
      json,
      "children.0.styleName",
      Utils.randomString(6)
    );
    json.styleName =
      firstChildStyleName +
      json.type.charAt(0).toUpperCase() +
      json.type.slice(1);
  } else if (json.type === "flexFiller") {
    const siblingsLength = get(extraParams, "parent.children.length", 1);
    const previousSiblingStyleName = get(
      extraParams,
      "parent.children.0.styleName"
    );
    if (previousSiblingStyleName && previousSiblingStyleName !== "flexFiller") {
      json.styleName = previousSiblingStyleName + "Filler";
    } else {
      json.styleName =
        get(
          extraParams,
          `parent.children.${siblingsLength - 1}.styleName`,
          Utils.randomString(6)
        ) + "Filler";
    }
    // const previousSiblingStyleName = get(
    //   extraParams,
    //   "parent.children.0.styleName",
    // );
    // json.styleName = previousSiblingStyleName + "Filler";
  }
}

export function isSymbolFile(filePath: string) {
  // this.context.filePath.indexOf("symbols") === -1 &&
  //     this.context.filePath.indexOf("components") === -1
  return filePath.includes("symbols") || filePath.includes("components");
}

export function getRotation(transform: any) {
  let rotation = 0;
  if (transform) {
    const transformValue = isArray(transform) ? transform : transform["value"];

    let index = findIndex(transformValue, (item: any) => {
      let rotate = keys(item).indexOf("rotate");
      return rotate !== -1 && !isNil(item["rotate"]);
    });
    if (index > -1) {
      let value: any =
        transformValue[index]["rotate"] && transformValue[index]["rotate"].type
          ? transformValue[index]["rotate"].value
          : transformValue[index]["rotate"];
      if (value && value.indexOf) {
        if (value.indexOf("rad") > -1) {
          value = parseFloat(value.slice(0, -3));
          rotation = (value * 180) / Math.PI;
        } else {
          value = parseFloat(value.slice(0, -3));
          rotation = value;
        }
      }
    }
  }
  return rotation;
}
