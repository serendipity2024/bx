import { Context, ExtraParams } from "../types";
import { addImportToContext, getFilteredImageStyle } from "../utils";
import LayerCodeGen from "../LayerCodeGen";
import { IStatusBar } from "common-interfaces";

function isStatusBarDefault(statusBar: IStatusBar) {
  return (
    statusBar.display === true &&
    statusBar.barStyle === "default" &&
    statusBar.backgroundColor === undefined &&
    statusBar.animated === false
  );
}

export default class RootCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  generate(json: any, extraParams: ExtraParams): string {
    this.context.styles[json.styleName] = json.props.style;
    addImportToContext(this.context, json);

    let layerStylePropCode = this.generateStyle(json, {
      ...extraParams,
      parent: json
    });

    let statusBarCode = "";

    if (!isStatusBarDefault(extraParams.parent.statusBar)) {
      addImportToContext(this.context, {
        import: {
          isDefaultImport: false,
          layerName: "StatusBar",
          packageName: "react-native"
        }
      });

      const statusBar: IStatusBar = extraParams.parent.statusBar;

      statusBarCode = `<StatusBar 
      ${statusBar.display === false ? "hidden" : ""} 
      ${statusBar.animated === true ? "animated" : ""} 
      ${
        statusBar.barStyle !== "default"
          ? `barStyle="${statusBar.barStyle}"`
          : ""
      } 
      ${
        statusBar.backgroundColor
          ? `backgroundColor="${statusBar.backgroundColor}"`
          : ""
      } />`;
    }

    const gradient = json.props.style.gradient;
    delete json.props.style.gradient;
    if (gradient) {
      // TODO: Currently, we won't get gradient for root layer but this condition is handled incorrectly,
      // should fix for future cases
      json.props.imageStyle = getFilteredImageStyle(json.props.style);
      this.context.styles[`${json.styleName}_imageStyle`] =
        json.props.imageStyle;

      layerStylePropCode += ` ${this.generateStyle(
        json,
        { ...extraParams, parent: json },
        "imageStyle"
      )}`;

      addImportToContext(this.context, {
        import: {
          isDefaultImport: false,
          layerName: "ImageBackground",
          packageName: "react-native"
        }
      });
      delete json.props.style["backgroundImage"];
      const gradientImage = json.props.gradientImage;
      delete json.props.gradientImage;
      return `<ImageBackground ${this.generateProps(json, {
        ...extraParams,
        parent: json
      })} ${layerStylePropCode} ${this.generateSourcePropCode(
        gradientImage
      )}/>`;
    } else {
      return `<${json.import.layerName} ${this.generateProps(json, {
        ...extraParams,
        parent: json
      })} ${this.generateStyle(json, { ...extraParams, parent: json })}>
      ${statusBarCode}
      ${this.generateChildren(json, { ...extraParams, parent: json })}
      </${json.import.layerName}>`;
    }
  }
}
