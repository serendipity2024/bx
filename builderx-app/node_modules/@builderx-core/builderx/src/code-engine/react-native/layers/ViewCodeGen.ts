import { Context, ExtraParams } from "../types";
import { addImportToContext, getFilteredImageStyle } from "../utils";
import LayerCodeGen from "../LayerCodeGen";
import { get } from "lodash";

export default class ViewCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  generate(json: any, extraParams: ExtraParams): string {
    const newParams = { ...extraParams, parent: json };
    this.context.styles[json.styleName] = json.props.style;
    addImportToContext(this.context, json);

    let layerStylePropCode = this.generateStyle(json, newParams);

    if (json.props.style.gradient) {
      const gradient = json.props.style.gradient;
      delete json.props.style.gradient;
      json.props.imageStyle = getFilteredImageStyle(json.props.style);
      this.context.styles[`${json.styleName}_imageStyle`] =
        json.props.imageStyle;

      layerStylePropCode += ` ${this.generateStyle(
        json,
        { ...extraParams, parent: json },
        "imageStyle"
      )}`;

      addImportToContext(this.context, {
        import: {
          isDefaultImport: false,
          layerName: "ImageBackground",
          packageName: "react-native"
        }
      });
      delete json.props.style["backgroundImage"];
      const width = get(json, "props.style.width");
      const height = get(json, "props.style.height");

      const gradientImage = json.props.gradientImage;
      delete json.props.gradientImage;

      if (
        (height && typeof height === "string" && height.includes("%")) ||
        (width && typeof width === "string" && width.includes("%"))
      ) {
        return `<View style={[${this.generateJSLiteralCode(
          json.props.style,
          newParams
        )}, {overflow:"hidden"}]} >
          <ImageBackground ${this.generateProps(
            json,
            newParams
          )} style={{width: "100%", height: "100%"}} ${this.generateStyle(
          json,
          { ...extraParams, parent: json },
          "imageStyle"
        )} ${this.generateSourcePropCode(
          gradientImage
        )}>${this.generateChildren(json, newParams)}</ImageBackground>
        </View>`;
      }
      return `<ImageBackground ${this.generateProps(
        json,
        newParams
      )}  ${layerStylePropCode} ${this.generateSourcePropCode(
        gradientImage
      )}>${this.generateChildren(json, newParams)}</ImageBackground>`;
    } else {
      return `<View ${this.generateProps(
        json,
        newParams
      )} ${layerStylePropCode}>
      ${this.generateChildren(json, newParams)}
      </View>`;
    }
  }
}
