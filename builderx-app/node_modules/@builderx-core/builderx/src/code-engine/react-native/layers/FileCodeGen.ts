import { Context, ExtraParams } from "../types";
import { forEach } from "lodash";
import LayerCodeGen from "../LayerCodeGen";
import { getIconCount, isButtonLayer } from "../utils";
export default class FileCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  generateStyleNames(extraParams: ExtraParams) {
    return this.generateJSLiteralCode(this.context.styles as any, extraParams);
  }
  generateConditionalVariables() {
    let conditionalVariables = "";
    for (let i = 0; i < this.context.conditionals.length; i++) {
      conditionalVariables += `let ${this.context.conditionals[i]}=true;`;
    }
    return conditionalVariables;
  }
  generateImports() {
    let importsCode = "";
    forEach(this.context.imports, (importObj, packageName) => {
      let defaultImportCode = "";
      if (importObj.default) {
        defaultImportCode =
          importObj.named.length > 0
            ? `${importObj.default},`
            : importObj.default;
      }

      let namedImportsCode = "";

      forEach(importObj.named, (layerName: any, index) => {
        if (index === 0) {
          namedImportsCode += "{ ";
        }

        if (typeof layerName === "object") {
          if (
            layerName.hasOwnProperty("name") &&
            layerName.hasOwnProperty("asName")
          ) {
            namedImportsCode += `${layerName.name} as ${layerName.asName},`;
          }
        } else {
          namedImportsCode += `${layerName}, `;
        }
        if (index === importObj.named.length - 1) {
          namedImportsCode += "}";
        }
      });

      if (importObj.named.length > 0 || importObj.default) {
        importsCode += `import ${defaultImportCode} ${namedImportsCode} from "${packageName}";
        `;
      }
    });

    return importsCode;
  }
  isNavigatingButton = (json: any) => {
    let hasButtonLayer = false;
    json.layer.children.forEach(
      (child: any): any => {
        if (isButtonLayer(child)) {
          hasButtonLayer = true;
        }
      }
    );
    return hasButtonLayer;
  };
  isFileComponent = () => {
    if (
      this.context.filePath.indexOf("component") !== -1 ||
      this.context.filePath.indexOf("symbol") !== -1
    ) {
      return true;
    }
    return false;
  };
  includeProps = (json: any) => {
    return this.isFileComponent() || this.isNavigatingButton(json);
  };
  generate(json: any, extraParams: ExtraParams): string {
    let className = json.path;
    className = className.substring(
      className.lastIndexOf("/") + 1,
      className.lastIndexOf(".")
    );
    this.context.filePath = json.path;
    const layersCode = this.context.baseCodeGen.generate(json.layer, {
      ...extraParams,
      parent: json
    });

    return `${this.generateImports()}
      ${this.generateConditionalVariables()}
    function ${className}(props) {
        return ${layersCode};
    }

    const styles = StyleSheet.create(${this.generateStyleNames(extraParams)});

    export default ${className}`;
  }
}
