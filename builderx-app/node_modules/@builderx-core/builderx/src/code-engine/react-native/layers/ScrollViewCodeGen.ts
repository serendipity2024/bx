import { Context, ExtraParams } from "../types";
import { addImportToContext } from "../utils";
import LayerCodeGen from "../LayerCodeGen";
import { forEach } from "lodash";
import { LAYOUT_PROPERTIES_AFFECTING_CHILDREN } from "bx-constants";

function getScrollViewContentContainerStyle(layer: any) {
  const scrollViewContentContainerStyle: any = {};

  if (layer.props.horizontal) {
    const totalWidth = getTotalWidthForScrollView(layer);

    scrollViewContentContainerStyle.width = totalWidth;
    scrollViewContentContainerStyle.height = layer.props.style.height;
  } else {
    const totalHeight = getTotalHeightForScrollView(layer);

    scrollViewContentContainerStyle.height = totalHeight;
    scrollViewContentContainerStyle.width = layer.props.style.width;
  }

  forEach(layer.props.style, (value, key) => {
    if (LAYOUT_PROPERTIES_AFFECTING_CHILDREN.includes(key)) {
      scrollViewContentContainerStyle[key] = value;
      delete layer.props.style[key];
    }
  });

  return scrollViewContentContainerStyle;
}

function getTotalHeightForScrollView(layer: any): number {
  let totalMaxHeight = 0;

  forEach(layer.children, compiledChild => {
    const childBoundingClientRect = compiledChild.rcDims;
    if (
      childBoundingClientRect.height + childBoundingClientRect.y >
      totalMaxHeight
    ) {
      totalMaxHeight =
        childBoundingClientRect.height + childBoundingClientRect.y;
    }
  });

  const layerBoundingClientRect = layer.rcDims;
  if (layerBoundingClientRect.height > totalMaxHeight) {
    totalMaxHeight = layerBoundingClientRect.height;
  } else {
    totalMaxHeight = totalMaxHeight;
  }

  return totalMaxHeight;
}

function getTotalWidthForScrollView(layer: any): number {
  let totalMaxWidth = 0;

  forEach(layer.children, compiledChild => {
    const childBoundingClientRect = compiledChild.rcDims;
    if (
      childBoundingClientRect.width + childBoundingClientRect.x >
      totalMaxWidth
    ) {
      totalMaxWidth = childBoundingClientRect.width + childBoundingClientRect.x;
    }
  });

  const layerBoundingClientRect = layer.rcDims;
  if (layerBoundingClientRect.width > totalMaxWidth) {
    totalMaxWidth = layerBoundingClientRect.width;
  } else {
    totalMaxWidth = totalMaxWidth;
  }

  return totalMaxWidth;
}

export default class ScrollViewCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  generate(json: any, extraParams: ExtraParams): string {
    this.context.styles[json.styleName] = json.props.style;
    addImportToContext(this.context, json);
    addImportToContext(this.context, {
      import: {
        isDefaultImport: false,
        layerName: "View",
        packageName: "react-native"
      }
    });
    let layerSpecificStyles = "";

    const contentContainerStyle = getScrollViewContentContainerStyle(json);

    this.context.styles[
      `${json.styleName}_contentContainerStyle`
    ] = contentContainerStyle;
    layerSpecificStyles += `${this.generateStyle(
      json,
      { ...extraParams, parent: json },
      "contentContainerStyle"
    )}`;

    return `<View ${this.generateStyle(json, {
      ...extraParams,
      parent: json
    })}><ScrollView ${this.generateProps(json, {
      ...extraParams,
      parent: json
    })} ${layerSpecificStyles}>
      ${this.generateChildren(json, { ...extraParams, parent: json })}
    </ScrollView></View>`;
  }
}
