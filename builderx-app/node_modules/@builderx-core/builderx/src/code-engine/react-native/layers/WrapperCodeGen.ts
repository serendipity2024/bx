import { Context, ExtraParams } from "../types";
import { addImportToContext } from "../utils";
import LayerCodeGen from "../LayerCodeGen";
import { Utils } from "utils";
import { get } from "lodash";
import { updateWrapperStyleName } from "../../utils";

export default class WrapperCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  generate(json: any, extraParams: ExtraParams): string {
    addImportToContext(this.context, json);

    const childrenCode = this.generateChildren(json, {
      ...extraParams,
      parent: json
    });
    // let {
    //   flexDirection,
    //   display,
    //   position,
    //   height,
    //   width,
    //   flex,
    //   ...restStyles
    // } = json.props.style;
    // if (json.type === "stack") {
    //   restStyles = { ...restStyles, height, width, flex, position };
    // } else if (json.type === "row" || json.type === "column") {
    //   restStyles = { ...restStyles, height, width, flex };
    // } else if (json.type === "body") {
    //   restStyles = { ...restStyles, flexDirection };
    // }
    // this.context.styles[json.styleName] =
    //   json.type === "stack"
    //     ? { position: "relative" }
    //     : json.type === "body"
    //     ? { flex: 1 }
    //     : { flexDirection: json.type };

    updateWrapperStyleName(json, extraParams);

    this.context.styles[json.styleName] = json.props.style;

    return `<View ${this.generateProps(json, {
      ...extraParams,
      parent: json
    })} style={styles.${json.styleName}}>
      ${childrenCode}
      </View>`;
  }
}
