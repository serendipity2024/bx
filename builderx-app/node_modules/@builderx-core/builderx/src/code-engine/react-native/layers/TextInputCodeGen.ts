import { Context, ExtraParams } from "../types";
import { addImportToContext } from "../utils";
import LayerCodeGen from "../LayerCodeGen";
import { includes, replace } from "lodash";

export default class TextInputCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  generate(json: any, extraParams: ExtraParams): string {
    delete json.props.style.fontWeight;
    delete json.props.style.fontStyle;
    json.props.style.fontFamily = json.props.style.fontPostscriptName;
    delete json.props.style.fontPostscriptName;

    this.context.styles[json.styleName] = json.props.style;
    addImportToContext(this.context, json);

    if (includes(json.props.placeholder, "\n")) {
      json.props.placeholder = replace(
        json.props.placeholder,
        new RegExp("\n", "g"),
        " "
      );
      json.props.placeholder = replace(
        json.props.placeholder,
        new RegExp("\t", "g"),
        " "
      );
    }
    delete json.props.value;

    return `<TextInput ${this.generateProps(json, {
      ...extraParams,
      parent: json
    })} ${this.generateStyle(json, { ...extraParams, parent: json })}>
      ${this.generateChildren(json, { ...extraParams, parent: json })}
    </TextInput>`;
  }
}
