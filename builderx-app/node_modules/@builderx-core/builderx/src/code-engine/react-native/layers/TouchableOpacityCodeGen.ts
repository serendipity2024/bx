import { Context, ExtraParams } from "../types";
import { addImportToContext } from "../utils";
import LayerCodeGen from "../LayerCodeGen";

export default class TouchableOpacityCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  generate(json: any, extraParams: ExtraParams): string {
    this.context.styles[json.styleName] = json.props.style;
    const isInSymbol =
      this.context.filePath.indexOf("symbols") !== -1 ||
      this.context.filePath.indexOf("components") !== -1;
    const navigate = !json.navigateTo
      ? ""
      : isInSymbol
      ? `onPress = {() => console.log("Navigate to ${json.navigateTo}")}`
      : json.navigateTo === "Go Back"
      ? `onPress = {() => props.navigation.goBack()}`
      : `onPress = {() => props.navigation.navigate("${json.navigateTo}")}`;
    addImportToContext(this.context, json);
    return `<TouchableOpacity ${this.generateProps(json, {
      ...extraParams,
      parent: json
    })}
    ${json.navigateTo ? `${navigate}` : ""} ${this.generateStyle(json, {
      ...extraParams,
      parent: json
    })}>
      ${this.generateChildren(json, { ...extraParams, parent: json })}
    </TouchableOpacity>`;
  }
}
