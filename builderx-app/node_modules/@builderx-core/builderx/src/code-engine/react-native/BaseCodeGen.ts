import { entries, get, isNil, isArray, findIndex, keys } from "lodash";
import ViewCodeGen from "./layers/ViewCodeGen";
import FileCodeGen from "./layers/FileCodeGen";
import LiteralCodeGen from "./specialLayers/LiteralCodeGen";
import { Context, ExtraParams } from "./types";
import LayerCodeGen from "./LayerCodeGen";
import TextCodeGen from "./layers/TextCodeGen";
import ImageCodeGen from "./layers/ImageCodeGen";
import EllipseCodeGen from "./layers/EllipseCodeGen";
import ScrollViewCodeGen from "./layers/ScrollViewCodeGen";
import TextInputCodeGen from "./layers/TextInputCodeGen";
import SymbolLayerCodeGen from "./layers/SymbolLayerCodeGen";
import TouchableOpacityCodeGen from "./layers/TouchableOpacityCodeGen";
import CenterCodeGen from "./specialLayers/CenterCodeGen";
import ExpressionStatementCodeGen from "./specialLayers/ExpressionStatementCodeGen";
import BinaryExpressionCodeGen from "./specialLayers/BinaryExpressionCodeGen";
import ExpressionCodeGen from "./specialLayers/ExpressionCodeGen";
import ConditionalExpressionCodeGen from "./specialLayers/ConditionalExpressionCodeGen";
import LogicalExpressionCodeGen from "./specialLayers/LogicalExpressionCodeGen";
import PathCodeGen from "./layers/PathCodeGen";
import LoopCodeGen from "./layers/LoopCodeGen";
import RootCodeGen from "./layers/RootCodeGen";
import WrapperCodeGen from "./layers/WrapperCodeGen";
import InlineViewCodeGen from "./layers/InlineViewCodeGen";
import { getIconCount } from "./utils";
import IPC from "../IPC";
import IconCodeGen from "./layers/IconCodeGen";
import ActivityIndicatorCodeGen from "./layers/ActivityIndicatorCodeGen";
import MapViewCodeGen from "./layers/MapViewCodeGen";
import SwitchCodeGen from "./layers/SwitchCodeGen";
import SliderCodeGen from "./layers/SliderCodeGen";
import { getRotation } from "../utils";

export default class BaseCodeGen extends LayerCodeGen {
  ipc: IPC;
  context: Context = {
    styles: {},
    imports: {
      react: {
        named: ["Component"],
        default: "React"
      },
      "react-native": {
        named: ["StyleSheet"],
        default: false
      }
    },
    conditionals: [],
    filePath: "",
    iconCount: 0,
    baseCodeGen: this
    // this.
  };

  // TODO: any => LayerCodeGen in next line
  componentCodeGenMap = new Map<string, any>(
    entries({
      view: ViewCodeGen,
      root: RootCodeGen,
      file: FileCodeGen,
      text: TextCodeGen,
      image: ImageCodeGen,
      ellipse: EllipseCodeGen,
      scrollView: ScrollViewCodeGen,
      symbol: SymbolLayerCodeGen,
      textInput: TextInputCodeGen,
      touchableOpacity: TouchableOpacityCodeGen,
      path: PathCodeGen,
      literal: LiteralCodeGen,
      icon: IconCodeGen,
      activityIndicator: ActivityIndicatorCodeGen,
      mapView: MapViewCodeGen,
      slider: SliderCodeGen,
      switch: SwitchCodeGen,
      expressionStatement: ExpressionStatementCodeGen,
      binaryExpression: BinaryExpressionCodeGen,
      expression: ExpressionCodeGen,
      conditionalExpression: ConditionalExpressionCodeGen,
      logicalExpression: LogicalExpressionCodeGen,
      loop: LoopCodeGen,
      stack: WrapperCodeGen,
      row: WrapperCodeGen,
      body: WrapperCodeGen,
      column: WrapperCodeGen,
      flexFiller: WrapperCodeGen,
      inlineView: InlineViewCodeGen
    })
  );

  generate = (json: any, extraParams: ExtraParams) => {
    let iconCount = this.context.iconCount;
    if (json.type === "file") {
      iconCount = getIconCount(this.context, json.layer);
    }
    this.context.iconCount = iconCount;
    const LayerCodeGenClass = this.componentCodeGenMap.get(json.type);
    let display = get(json, "props.style.display", undefined);
    if (display === "flex") {
      delete json.props.style.display;
    }

    let flexDirection = get(json, "props.style.flexDirection", undefined);
    if (flexDirection === "column") {
      delete json.props.style.flexDirection;
    }

    let opacity = get(json, "props.style.opacity", undefined);
    if (opacity === 1) {
      delete json.props.style.opacity;
    }

    let borderRadius = get(json, "props.style.borderRadius", undefined);
    if (borderRadius === 0) {
      delete json.props.style.borderRadius;
    }

    let transform = get(json, "props.style.transform", undefined);
    if (transform) {
      const rotation = getRotation(transform);
      if (rotation) {
        json.props.style.transform = [
          {
            rotate: rotation.toFixed(2) + "deg"
          }
        ];
      } else {
        delete json.props.style.transform;
      }
    }

    // Deleting source_local field for image layer
    // source_local to store local image url
    let sourceLocal = get(json, "props.source_local", undefined);
    if (sourceLocal) {
      delete json.props.source_local;
    }
    if (
      get(json, "template.centerVertical") ||
      get(json, "template.centerHorizontal")
    ) {
      const centerCodeGen = new CenterCodeGen(this.context);
      centerCodeGen.config = this.config;
      return centerCodeGen.generate(json, extraParams);
    }
    if (LayerCodeGenClass) {
      const layerCodeGen = new LayerCodeGenClass(this.context);
      layerCodeGen.config = this.config;
      return layerCodeGen.generate(json, extraParams);
    } else {
      console.error(json.type + " layer not handled");
    }

    return "";
  };
}
