import BaseCodeGen from "./BaseCodeGen";
import prettier from "prettier/standalone";
import prettierBabylon from "prettier/parser-babylon";
import Engine from "../types/Engine";
import { Config } from "./types";
import { forEach } from "lodash";
import * as path from "path";
import IPC from "../IPC";
export default class ReactNativeEngine implements Engine {
  static engineName = "react-native";
  ipc: IPC;

  constructor(ipc: IPC) {
    this.ipc = ipc;
  }

  getFileCode(fileJSON: any, config: Config) {
    // console.log(fileJSON, "codeengine*");
    const baseCodeGen = new BaseCodeGen();
    baseCodeGen.config = config;
    baseCodeGen.ipc = this.ipc;
    let code = baseCodeGen.generate(fileJSON, { parent: fileJSON });
    // TODO: Temporary Fix in case if this.props is still present in the code
    code = code.replace(/this.props/g, "props");
    code = prettier.format(code, {
      plugins: [prettierBabylon],
      parser: "babylon"
    });
    return code;
  }
  getAppFiles(files: {
    artboards: string[],
    assets: string[],
    missingAssets: any[]
  }) {
    // console.log(files, "files");
    let stackNavigator = `DrawerNavigation: {
      screen: DrawerNavigation
    },`;
    let navigator = ``;
    let imports = ``;
    forEach(files.artboards, (artboard: any) => {
      navigator += `${artboard}:${artboard},`;

      imports += `import ${artboard} from "./src/screens/${artboard}";`;
    });
    stackNavigator += navigator;

    let fonts = "";
    forEach(files.assets, (font: any) => {
      fonts += `"${path.basename(
        font,
        path.extname(font)
      )}": require(".${font}"),`;
    });

    forEach(files.missingAssets, missingAsset => {
      fonts += `"${path.basename(
        missingAsset.file.path,
        path.extname(missingAsset.file.path)
      )}": require(".${missingAsset.fallbackPath}"),`;
    });

    fonts = `Font.loadAsync({
      ${fonts}
    })`;

    const code = `import React,{useState} from 'react';
    import { createAppContainer } from "react-navigation";
    import { createStackNavigator } from "react-navigation-stack";
    import { createDrawerNavigator } from "react-navigation-drawer";
    import { AppLoading } from "expo";
    ${files.assets.length > 0 ? `import * as Font from "expo-font";` : ""}
    ${imports}

    const DrawerNavigation = createDrawerNavigator({${navigator}});

    const StackNavigation = createStackNavigator({${stackNavigator}},
      {
        headerMode: "none"
      });

      const AppContainer = createAppContainer(StackNavigation);

      function App() {
        const [isLoadingComplete, setLoadingComplete] = useState(false);
        if (!isLoadingComplete) {
        return (
        <AppLoading
        startAsync={loadResourcesAsync}
        onError={handleLoadingError}
        onFinish={() => handleFinishLoading(setLoadingComplete)}
        />
        );
      }
      else {
        return isLoadingComplete ? <AppContainer/> : <AppLoading />;
      }
    }
    async function loadResourcesAsync() {
      await Promise.all([
      
      ${fonts}
      
      ]);
      }  
      function handleLoadingError(error) {

        console.warn(error);
        
        }
        
        function handleFinishLoading(setLoadingComplete) {
        
        setLoadingComplete(true);
        
        }
        
        export default App`;
    return [
      {
        path: "/App.js",
        content: prettier.format(code, {
          plugins: [prettierBabylon],
          parser: "babylon"
        })
      }
    ];
  }

  getIndexWithFont(assets: string[]) {
    let fonts = "";
    forEach(assets, (font: any) => {
      fonts += `"${path.basename(
        font,
        path.extname(font)
      )}": require(".${font.replace("src/assets", "assets")}"),`;
    });

    fonts = `await Font.loadAsync({
      ${fonts}
    });`;
    const code = `import React from 'react';
    import { YellowBox } from 'react-native';
    import { AppLoading } from "expo";
    import Index from "./index";
    ${assets.length > 0 ? `import * as Font from "expo-font";` : ""}

    export default class IndexWithFont extends React.Component {

      constructor() {
        super();
        this.state = {
          fontLoaded: false
        };
        YellowBox.ignoreWarnings([
          'Warning: componentWillMount is deprecated',
          'Warning: componentWillReceiveProps is deprecated',
          'Warning: componentWillUpdate is deprecated',
        ]);
      }

      ${assets.length > 0 ? "async" : ""} componentDidMount() {
        ${assets.length > 0 ? fonts : ""}
        this.setState({ fontLoaded: true });
      }

      render() {
        return this.state.fontLoaded ? <Index /> : <AppLoading />;
      }
    }`;
    return [
      {
        path: "./indexWithFont.js",
        content: prettier.format(code, {
          plugins: [prettierBabylon],
          parser: "babylon"
        })
      }
    ];
  }
}
