import { Context, ExtraParams } from "../types";
import LayerCodeGen from "../LayerCodeGen";
import { get } from "lodash";
export default class ConditionalExpressionCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  getCondtionalASTFromJSON(conditionJSON: any, fileId: string): any {
    //
  }

  generate(json: any, extraParams: ExtraParams): string {
    let expression = get(json, "test.expression", undefined);
    if (expression) {
      expression = expression.replace("this.props", "props");
    }
    return `${this.context.baseCodeGen.generate(json.test, {
      ...extraParams,
      textLiteral: false
    })} ?
    ${this.context.baseCodeGen.generate(json.consequent, {
      ...extraParams,
      textLiteral: true
    })} : ${this.context.baseCodeGen.generate(json.alternate, {
      ...extraParams,
      textLiteral: true
    })}`;
  }
}
