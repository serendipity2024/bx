import { Context, ExtraParams } from "../types";
import { addImportToContext } from "../utils";
import LayerCodeGen from "../LayerCodeGen";

export default class ExpressionCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  getCondtionalASTFromJSON(conditionJSON: any, fileId: string): any {
    //
  }

  generate(json: any, extraParams: ExtraParams): string {
    let expression = json.expression;
    if (expression !== "platform" && expression.indexOf(".") === -1) {
      this.context.conditionals.push(expression);
    }
    if (expression === "platform") {
      addImportToContext(this.context, {
        import: {
          isDefaultImport: false,
          layerName: "Platform",
          packageName: "react-native"
        }
      });
      expression = "Platform.OS";
    }
    return this.generateJSLiteralCode(expression, extraParams, true);
  }
}
