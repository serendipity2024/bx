import { Context, ExtraParams } from "../types";
import LayerCodeGen from "../LayerCodeGen";
import { get, replace } from "lodash";
import { escapeTextForJSX } from "./../utils";
export default class LiteralCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  generate(json: any, extraParams: ExtraParams): string {
    if (get(json, "value.type", "") === "unknown") {
      return "null";
    } else if (json.value && json.value.type) {
      return this.context.baseCodeGen.generate(json.value, extraParams);
    }

    if (typeof json.value === "string") {
      if (extraParams && !extraParams.textLiteral) {
        json.value = escapeTextForJSX(json.value);
      } else {
        const newLine = "\\" + "n";
        json.value = replace(json.value, new RegExp("\n", "g"), newLine);
        const tab = "\\" + "t";
        json.value = replace(json.value, new RegExp("\t", "g"), tab);
      }

      // Only replace opening curly braces `{` with `{"{"} and `
      if (extraParams && !extraParams.textLiteral) {
        json.value = json.value.replace(/(\{+)([^"])/g, `{"$1"}$2`);
      }

      return this.generateJSLiteralCode(
        json.value,
        extraParams,
        extraParams && typeof extraParams.textLiteral === "boolean"
          ? !extraParams.textLiteral
          : false
      );
    } else {
      // const errorMessage = `json.value should be string but received ${JSON.stringify(
      //   json.value
      // )} for ${this.context.filePath}`;
      // console.error(errorMessage);
      // this.context.baseCodeGen.ipc.executeCommand("captureErrorForSentry", [
      //   new Error(errorMessage)
      // ]);
      // if (json.value.toString) {
      //   json.value = json.value.toString();
      // } else {
      //   const errorMessage2 = `json.value should be string but received ${JSON.stringify(
      //     json.value
      //   )} for ${this.context.filePath}`;
      //   console.error(errorMessage2);
      //   this.context.baseCodeGen.ipc.executeCommand("captureErrorForSentry", [
      //     new Error(errorMessage2)
      //   ]);
      //   json.value = "";
      // }

      return this.generateJSLiteralCode(json.value, extraParams, true);
    }

    // return json.value;
  }
}
