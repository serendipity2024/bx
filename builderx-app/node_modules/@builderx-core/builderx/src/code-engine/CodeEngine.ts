import ReactNativeEngine from "./react-native/ReactNativeEngine";
import ReactEngine from "./react/ReactEngine";
import FlutterEngine from "./flutter/FlutterEngine";
import { entries } from "lodash";
import { smartFlex } from "smart-flex";

import { Config } from "./react-native/types";
import Engine from "./types/Engine";
import IPC from "./IPC";
import { Utils } from "utils";

export default class CodeEngine {
  ipc: IPC;
  selectedEngine: Engine;

  engines: Map<string, Engine>;

  constructor(ipc: IPC) {
    this.ipc = ipc;
    this.engines = new Map(
      entries({
        [ReactNativeEngine.engineName]: new ReactNativeEngine(this.ipc),
        [ReactEngine.engineName]: new ReactEngine(this.ipc)
      })
    );
  }

  handshake(data: any) {
    // console.log("CodeEngine handshake", data);
  }
  selectCodeEngine(engineName: string) {
    const engine = this.engines.get(engineName);
    if (engine) {
      this.selectedEngine = engine;
    }
  }
  getFileCode(fileJSON: any, config: Config) {
    // console.log("Config is ->", config);
    // console.log("Received JSON is ", JSON.stringify(fileJSON.layer), config);
    // const json = config.convertToFlex ? smartFlex(fileJSON) : fileJSON;
    // let json = JSON.parse(JSON.stringify(fileJSON));
    // // config.convertToFlex.smartFlex = true;
    // if (config.convertToFlex.smartFlex) {
    //   config.convertToFlex.enclosing = true;
    //   config.convertToFlex.stacking = true;
    //   config.convertToFlex.proximity = true;
    // }
    // if (config.convertToFlex.enclosing) {
    //   json.layer = enclosing(json.layer);
    // }
    // if (config.convertToFlex.stacking) {
    //   json.layer = stackLayers(json.layer);
    // }
    // if (config.convertToFlex.proximity) {
    //   json.layer = proximity(json.layer);
    //   json.layer = reorder(json.layer);
    //   json.layer = absoluteToFlex(json.layer);
    // }
    let json;
    if (config.convertToFlex) {
      json = smartFlex(fileJSON, this.ipc);
    } else {
      json = fileJSON;
    }

    // json = config.convertToFlex.stacking ? stacking(fileJSON) : fileJSON;
    // const json = smartFlex(fileJSON);
    // console.log("CodeEngine json", json);

    // console.time("getFileCode function ***");
    try {
      const code = this.selectedEngine.getFileCode(json, config);
      return code;
    } catch (err) {
      // console.log(self.location, "window.location");
      if (
        process.env.NODE_ENV === "production" &&
        Utils.getEnv("BUILDERX_APP_ENVIRONMENT") !== "pre-cloud"
      ) {
        const code =
          "Code couldn't be generated. Please contact support if this problem persists.";
        let errorMessage = `Error in code generation in file ${fileJSON.path}`;
        err.message === errorMessage;
        if (this.ipc) {
          this.ipc.executeCommand("captureErrorForSentry", [err]);
        }
        console.log(err, errorMessage);

        return code;
      } else {
        throw err;
      }
    }
    // console.timeEnd("getFileCode function ***");

    // return code;
  }
  getAppFiles(files: { artboards: string[]; assets: string[] }) {
    return this.selectedEngine.getAppFiles(files);
  }
  getIndexWithFont(assets: string[]) {
    return this.selectedEngine.getIndexWithFont(assets);
  }
}
