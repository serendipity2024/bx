import { get } from "lodash";
import LayerCodeGen from "../LayerCodeGen";
import { FlutterContext } from "../types";

export const generateChildren = (
  layer: any,
  generateChildCallback: (child: any) => string
) => {
  let childrenCode = "";
  layer.children.forEach((child: any) => {
    if (
      [
        "expressionStatement",
        "binaryExpression",
        "expression",
        "conditionalExpression",
        "logicalExpression"
      ].includes(child.type)
    ) {
      childrenCode += `{${generateChildCallback(child)}
    }`;
    } else {
      childrenCode += `${generateChildCallback(child)}
    `;
    }
  });

  return childrenCode;
};

export const generateAbsoluteChildren = (
  layer: any,
  generateChildCallback: (child: any) => string
) => {
  let childrenCode = "";
  layer.children.forEach((child: any) => {
    if (
      child.props.style.position &&
      child.props.style.position === "absolute"
    ) {
      console.log(generateChildCallback, "generateChildCallback");
      childrenCode += generateChildCallback(child);
    }
  });
  return childrenCode;
};

export const generateNotAbsoluteChildren = (
  layer: any,
  generateChildCallback: (child: any) => string
) => {
  let childrenCode = "";
  layer.children.forEach((child: any) => {
    if (
      !child.props.style.position &&
      child.props.style.position !== "absolute"
    ) {
      childrenCode += generateChildCallback(child);
    }
  });
  console.log("*** childrenCode", childrenCode);
  return childrenCode;
};

// export const wrapIt: (json: any, child: string) => string = (json, child) => {
//   let layerCodeGen: any = new LayerCodeGen();
//   const style = json.props.style;

//   if (json.props.style.position && json.props.style.position === "absolute") {
//     return `Positioned(
//           child: ${
//             json.template.centerHorizontal || json.template.centerVertical
//               ? `Align(
//                 alignment: Alignment.center,
//                 child: ${child})`
//               : child
//           },
//           ${
//             json.template.centerHorizontal
//               ? "left:0,right:0,"
//               : layerCodeGen.generatePropertiesCode(json.props.style, [
//                   "left",
//                   "right"
//                 ])
//           }
//           ${
//             json.template.centerVertical
//               ? "top:0,bottom:0,"
//               : layerCodeGen.generatePropertiesCode(json.props.style, [
//                   "top",
//                   "bottom"
//                 ])
//           }),`;
//   } else {
//     let wrappedChild: string;
//     if (json.props.style.flex) {
//       wrappedChild = `Flexible(
//         flex : ${Math.round(json.props.style.flex * 100)},
//         child: ${child},),`;
//     } else {
//       return "" ;
//     }
//     if (
//       json.props.style.alignSelf &&
//       layerCodeGen
//         .generatePropertiesCode(json.props.style, ["alignSelf"])
//         .trim() !== ""
//     ) {
//       wrappedChild = `Align(
//         ${layerCodeGen.generatePropertiesCode(json.props.style, ["alignSelf"])}
//         child:${wrappedChild}
//       ),`;
//     } else if (json.template.centerHorizontal || json.template.centerVertical) {
//       wrappedChild = `Align(
//                 alignment: Alignment.center,
//                 child: ${child}),`;
//     }
//   }

//   return "";

//   //

//   // if (
//   //   (typeof json.props.style.height === "string" &&
//   //     json.props.style.height.includes("%")) ||
//   //   (typeof json.props.style.width === "string" &&
//   //     json.props.style.width.includes("%"))
//   // ) {
//   //   return `Positioned(
//   //         height: MediaQuery.of(context).size.height,
//   //         width: MediaQuery.of(context).size.width,
//   //         child: Align(
//   //           alignment: Alignment.topLeft,
//   //           child: ${child}
//   //         ),
//   //         ${layerCodeGen.generatePropertiesCode(json.props.style, [
//   //           "top",
//   //           "left",
//   //           "bottom",
//   //           "right"
//   //         ])}
//   //       )`;
//   // }

//   // if (json.props.style.position && json.props.style.position === "absolute") {
//   //   return `Positioned(
//   //         child: ${
//   //           json.template.centerHorizontal || json.template.centerVertical
//   //             ? `Align(
//   //               alignment: Alignment.center,
//   //               child: ${child})`
//   //             : child
//   //         },
//   //         ${
//   //           json.template.centerHorizontal
//   //             ? "left:0,right:0,"
//   //             : layerCodeGen.generatePropertiesCode(json.props.style, [
//   //                 "left",
//   //                 "right"
//   //               ])
//   //         }
//   //         ${
//   //           json.template.centerVertical
//   //             ? "top:0,bottom:0,"
//   //             : layerCodeGen.generatePropertiesCode(json.props.style, [
//   //                 "top",
//   //                 "bottom"
//   //               ])
//   //         }),`;
//   // } else {
//   //   let wrappedChild: string;
//   //   if (json.props.style.flex) {
//   //     wrappedChild = `Flexible(
//   //       flex : ${Math.round(json.props.style.flex * 100)},
//   //       child: ${child},),`;
//   //   } else {
//   //     wrappedChild = `${child},`;
//   //   }
//   //   if (
//   //     json.props.style.alignSelf &&
//   //     layerCodeGen
//   //       .generatePropertiesCode(json.props.style, ["alignSelf"])
//   //       .trim() !== ""
//   //   ) {
//   //     wrappedChild = `Align(

//   //       ${layerCodeGen.generateAlignSelf(json, config.parentJson)}
//   //       child:${wrappedChild}
//   //     ),`;
//   //   } else if (json.template.centerHorizontal || json.template.centerVertical) {
//   //     wrappedChild = `Align(
//   //               alignment: Alignment.center,
//   //               child: ${child}),`;
//   //   }
//   //   return wrappedChild;
//   // }

//   // return "";
// };

export const rotateWrap = (
  json: any,
  childCode: string,
  layerCodeGen: LayerCodeGen
) => {
  let rotationCode = ``;

  rotationCode = `Transform.rotate(
      angle : pi/${layerCodeGen.getAngleValue(
        json.props.style.transform[0].rotate
      )},
      child: ${childCode},
    )`;

  return rotationCode;
};

export const wrapIt = (
  json: any,
  childCode: string,
  layerCodeGen: LayerCodeGen
) => {
  if (json.props.style.position && json.props.style.position === "absolute") {
    return `Positioned(
          child: ${
            json.template.centerHorizontal || json.template.centerVertical
              ? `Align(
                alignment: Alignment.center,
                child: ${childCode})`
              : childCode
          },
          ${
            json.template.centerHorizontal
              ? "left:0,right:0,"
              : layerCodeGen.generatePropertiesCode(json.props.style, [
                  "left",
                  "right"
                ])
          }
          ${
            json.template.centerVertical
              ? "top:0,bottom:0,"
              : layerCodeGen.generatePropertiesCode(json.props.style, [
                  "top",
                  "bottom"
                ])
          }),`;
  } else {
    let wrappedChild: string;
    if (json.props.style.flex) {
      wrappedChild = `Flexible(
        flex : ${Math.round(json.props.style.flex * 100)},
        child: ${childCode},),`;
    } else {
      wrappedChild = `${childCode},`;
    }
    if (
      json.props.style.alignSelf &&
      layerCodeGen
        .generatePropertiesCode(json.props.style, ["alignSelf"])
        .trim() !== ""
    ) {
      wrappedChild = `Align(
        ${layerCodeGen.generatePropertiesCode(json.props.style, ["alignSelf"])}
        child:${wrappedChild}
      ),`;
    } else if (json.template.centerHorizontal || json.template.centerVertical) {
      wrappedChild = `Align(
                alignment: Alignment.center,
                child: ${childCode}),`;
    }
    return wrappedChild;
  }

  return "";
};

export const generateWrappedChildren = (json: any, context: FlutterContext) => {
  let AbsoluteChildrenCode = generateAbsoluteChildren(
    json,
    context.baseCodeGen.generate
  );
  let NotAbsoluteChildrenCode = generateNotAbsoluteChildren(
    json,
    context.baseCodeGen.generate
  );

  if (NotAbsoluteChildrenCode !== "") {
    if (json.props.style.flexDirection === "row") {
      NotAbsoluteChildrenCode = `Row(
          children: <Widget>[${NotAbsoluteChildrenCode}],
          ${context.baseCodeGen.generateFlexAlignment(json.props.style)})`;
    } else {
      NotAbsoluteChildrenCode = `Column(
          children: <Widget>[${NotAbsoluteChildrenCode}],
          ${context.baseCodeGen.generateFlexAlignment(json.props.style)})`;
    }
  }
  if (AbsoluteChildrenCode !== "" && NotAbsoluteChildrenCode === "") {
    AbsoluteChildrenCode = `Stack (
        fit: StackFit.expand,
        children: <Widget>[${AbsoluteChildrenCode}]
      )`;
  }

  let ChildrenCode: string = "";

  if (NotAbsoluteChildrenCode !== "" && AbsoluteChildrenCode !== "") {
    if (get("json", "props.children[0].position")) {
      ChildrenCode = `Stack(
        fit: StackFit.expand,
          children: <Widget>[${AbsoluteChildrenCode},${NotAbsoluteChildrenCode}]
        )`;
    } else {
      ChildrenCode = `Stack(
        fit: StackFit.expand,
          children: <Widget>[${NotAbsoluteChildrenCode},${AbsoluteChildrenCode}]
        )`;
    }
  } else if (NotAbsoluteChildrenCode !== "") {
    ChildrenCode = NotAbsoluteChildrenCode;
  } else if (AbsoluteChildrenCode !== "") {
    ChildrenCode = AbsoluteChildrenCode;
  } else {
    ChildrenCode = `Container()`;
  }

  return ChildrenCode;
};
