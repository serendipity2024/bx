import { FlutterContext } from "../types";
import LayerCodeGen from "../LayerCodeGen";
import { wrapIt, generateWrappedChildren, rotateWrap } from "../utils/index";

export default class ContainerCodeGen extends LayerCodeGen {
  context: FlutterContext;
  constructor(context: FlutterContext) {
    super();
    this.context = context;
  }

  generate(json: any): string {
    const ChildrenCode = generateWrappedChildren(json, this.context);

    let fractionalHeight;
    let fractionalWidth;

    // if (
    //   typeof get(json, "props.style.top") === "string" &&
    //   typeof get(json, "props.style.bottom") === "string"
    // ) {
    //   let topFraction = Number(json.props.style.top.replace("%", ""));
    //   let bottomFraction = Number(json.props.style.bottom.replace("%", ""));
    //   fractionalHeight = 100 - topFraction - bottomFraction;
    // }

    // if (
    //   typeof get(json, "props.style.left") === "string" &&
    //   typeof get(json, "props.style.right") === "string"
    // ) {
    //   let leftFraction = Number(json.props.style.left.replace("%", ""));
    //   let rightFraction = Number(json.props.style.right.replace("%", ""));
    //   fractionalHeight = 100 - leftFraction - rightFraction;
    // }

    // if (typeof json.props.style.height === "string") {
    //   fractionalHeight = json.props.style.height.replace("%", "");
    // }

    // if (typeof json.props.style.width === "string") {
    //   fractionalWidth = json.props.style.width.replace("%", "");
    // }

    // if (fractionalHeight || fractionalWidth) {
    //   const currentLayer = `FractionallySizedBox(
    //     ${
    //       fractionalHeight
    //         ? `heightFactor: ${Number(fractionalHeight) / 100},`
    //         : ""
    //     }
    //     ${
    //       fractionalWidth
    //         ? `widthFactor: ${Number(fractionalWidth) / 100},`
    //         : ""
    //     }
    //     child: Container(
    //       child: ${ChildrenCode},
    //         decoration: BoxDecoration(

    //         ${
    //           json.gradient
    //             ? `gradient : ${this.getGradientCode(
    //                 json.gradient,
    //                 json.gradient.gradientType
    //               )}`
    //             : `color: ${ColorCode}`
    //         }),
    //       ${
    //         fractionalHeight === ""
    //           ? this.generatePropertiesCode(json.props.style, ["height"])
    //           : ""
    //       }

    //       ${
    //         fractionalWidth === ""
    //           ? this.generatePropertiesCode(json.props.style, ["width"])
    //           : ""
    //       }

    //     )
    //   )`;
    //   return wrapIt(json, currentLayer, this);
    // } else {
    let currentLayer = `Container(
            child: ${ChildrenCode},
            ${this.generateContainerElements(json, "container")}

          )`;
    if (json.props.style.transform) {
      if (!this.context.imports.includes("import 'dart:math';")) {
        this.context.imports.push("import 'dart:math';");
      }
      currentLayer = rotateWrap(json, currentLayer, this);
    }
    return wrapIt(json, currentLayer, this);
    // }
  }
}
