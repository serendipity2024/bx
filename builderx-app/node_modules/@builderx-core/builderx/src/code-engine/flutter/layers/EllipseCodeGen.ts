import { FlutterContext } from "../types";
import LayerCodeGen from "../LayerCodeGen";
import { wrapIt, rotateWrap } from "../utils/index";
import { capitalize } from "lodash";

export default class TextCodeGen extends LayerCodeGen {
  context: FlutterContext;
  constructor(context: FlutterContext) {
    super();
    this.context = context;
  }

  generate(json: any): string {
    const fillColor = json.props.fill
      ? this.generateColorRGBO(json.props.fill)
      : `Color.fromRGBO(0, 0, 0, 1)`;
    const strokeColor = json.props.stroke
      ? this.generateColorRGBO(json.props.stroke)
      : `Color.fromRGBO(0, 0, 0, 1)`;

    let CustomPainter = `class ${capitalize(
      json.styleName
    )} extends CustomPainter {
        @override
        void paint(Canvas canvas, Size size) {
        Rect rect = new Rect.fromLTWH(0, 0, ${json.props.style.width}, ${
      json.props.style.height
    });

    Paint paint = new Paint()
      ..color =  ${fillColor}
      ..style = PaintingStyle.fill;
    Paint paint1 = new Paint()
      ..color = ${strokeColor}
      ..style = PaintingStyle.stroke
      ..strokeWidth = ${json.props.strokeWidth};

    canvas.drawOval(rect, paint);
    canvas.drawOval(rect, paint1);

    }
    @override
  bool shouldRepaint(CustomPainter oldDelegate) {
    // TODO: implement shouldRepaint
    return null;
  }
}`;

    this.context.customPaintClasses.push(CustomPainter);

    let currentLayer = `CustomPaint(
            painter:  ${capitalize(json.styleName)}(),
          )`;

    if (json.props.style.transform) {
      if (!this.context.imports.includes("import 'dart:math';")) {
        this.context.imports.push("import 'dart:math';");
      }
      currentLayer = rotateWrap(json, currentLayer, this);
    }
    return wrapIt(json, currentLayer, this);
  }
}
