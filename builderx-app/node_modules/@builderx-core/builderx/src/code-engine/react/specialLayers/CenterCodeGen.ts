import { Context, ExtraParams } from "../types";
import LayerCodeGen from "../LayerCodeGen";
import { hasAbsolutePosition, hasPositionProperty } from "../utils";
import { get } from "lodash";

export default class CenterCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  generateCenterProps(template: any) {
    if (template.centerVertical && !template.centerHorizontal) {
      return "vertical";
    } else if (!template.centerVertical && template.centerHorizontal) {
      return "horizontal";
    }

    return "";
  }

  generate(json: any, extraParams: ExtraParams): string {
    const propsCode = this.generateCenterProps(json.template);
    this.context.styles = {
      ...this.context.styles,
      center: {
        layerName: "div",
        category: "Center"
      }
    };
    let layer = extraParams.parent;
    if (
      (!hasPositionProperty(extraParams.parent) ||
        (hasPositionProperty(layer) &&
          !hasAbsolutePosition(layer.props.style))) &&
      !this.context.smartFlexTransformed
    ) {
      this.context.styles[extraParams.parent.styleName].style.position =
        "relative";
    }
    delete json.template.centerHorizontal;
    delete json.template.centerVertical;

    return `<Center ${propsCode}>
      ${this.context.baseCodeGen.generate(json, extraParams)}
    </Center>`;
    // return this.generateJSLiteralCode({ top: 100 });
  }
}
