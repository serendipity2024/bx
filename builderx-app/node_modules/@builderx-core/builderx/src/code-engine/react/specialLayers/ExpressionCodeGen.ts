import { Context, ExtraParams } from "../types";
import { generateChildren, addImportToContext } from "../utils";
import LayerCodeGen from "../LayerCodeGen";

export default class ExpressionCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  getCondtionalASTFromJSON(conditionJSON: any, fileId: string): any {
    //
  }

  generate(json: any, extraParams: ExtraParams): string {
    // console.log("In expression code gen with json as ", json);
    let expression = json.expression;
    // console.log("Expression in expression statement is ", expression);
    if (expression !== "platform" && expression.indexOf(".") === -1) {
      this.context.conditionals.push(expression);
    }
    if (expression === "platform") {
      this.context.isPlatformConditional = true;

      // addImportToContext(this.context, {
      //   import: {
      //     isDefaultImport: false,
      //     layerName: "Platform",
      //     packageName: "react-native"
      //   }
      // });

      expression = "Platform.OS";
    }
    // console.log("Context in expression", this.context);

    return this.generateJSLiteralCode(expression, extraParams, true);
  }
}
