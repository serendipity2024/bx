import { Context, ExtraParams } from "../types";
import LayerCodeGen from "../LayerCodeGen";

export default class LogicalExpressionCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  getCondtionalASTFromJSON(conditionJSON: any, fileId: string): any {
    //
  }

  generate(json: any, extraParams: ExtraParams): string {
    if (extraParams && extraParams.textLiteral) {
      extraParams.textLiteral = false;
    }
    let leftExp = this.context.baseCodeGen.generate(json.left, extraParams);
    if (leftExp.indexOf("this.props") !== -1) {
      leftExp = leftExp.replace("this.props", "props");
    }
    const rightExp = this.context.baseCodeGen.generate(json.right, {
      ...extraParams,
      textLiteral: true
    });

    return `
      (${leftExp})
      ${json.operator}
        (${rightExp})
      `;
  }
}
