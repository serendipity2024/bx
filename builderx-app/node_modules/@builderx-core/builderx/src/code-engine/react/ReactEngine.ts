import BaseCodeGen from "./BaseCodeGen";
import prettier from "prettier/standalone";
import prettierBabylon from "prettier/parser-babylon";
import Engine from "../types/Engine";
import { Config } from "./types";
import { forEach } from "lodash";
import * as path from "path";
import IPC from "../IPC";

export default class ReactEngine implements Engine {
  static engineName = "react";
  ipc: IPC;
  constructor(ipc: IPC) {
    this.ipc = ipc;
  }
  getFileCode(fileJSON: any, config: Config) {
    // console.log(fileJSON, "codeengine*");
    const baseCodeGen = new BaseCodeGen();
    baseCodeGen.config = config;
    baseCodeGen.ipc = this.ipc;
    let code = baseCodeGen.generate(fileJSON, { parent: fileJSON });
    // TODO: Temporary Fix in case if this.props is still present in the code
    code = code.replace(/this.props/g, "props");
    code = prettier.format(code, {
      plugins: [prettierBabylon],
      parser: "babylon"
    });

    return code;
  }
  getAppFiles(files: { artboards: string[], assets: string[] }) {
    let router = "";
    let imports = "";
    forEach(files.artboards, (artboard: any, index: number) => {
      if (index === 0) {
        router += `<Route path="/" exact component={${artboard}} />`;
      }
      router += `<Route path="/${artboard +
        "/"}" exact component={${artboard}} />`;

      imports += `import ${artboard} from "./screens/${artboard}";`;
    });

    const appJSCode = `import React from "react";
    import { BrowserRouter as Router, Route } from "react-router-dom";
    import "./icons.js";
    ${imports}
    ${files.assets.length > 0 ? `import "./style.css";` : ""}

    function App() {
      return (
        <Router>
         ${router}
        </Router>
      );
    }

    export default App;`;

    let styleCSSCode = ``;
    forEach(files.assets, (asset: any) => {
      const fontName = path.basename(asset, path.extname(asset));
      styleCSSCode += `@font-face {
        font-family: "${fontName}";
        src: url("${asset.replace("/src", ".")}") format("truetype");
      }\n`;
    });

    return [
      {
        path: "/src/App.js",
        content: prettier.format(appJSCode, {
          plugins: [prettierBabylon],
          parser: "babylon"
        })
      },
      {
        path: "/src/style.css",
        content: styleCSSCode
      }
    ];
  }
  getIndexWithFont(assets: string[]) {
    const indexFileCode = `import React from "react";
    import "./style.css";
    import Index from "./index.js";
    function IndexWithFont() {
      return (
        <Index/>
      );
    }
    export default IndexWithFont;`;

    let styleCSSCode = ``;
    forEach(assets, (asset: any) => {
      const fontName = path.basename(asset, path.extname(asset));

      let type = path.extname(asset).substr(1);
      if (type === "ttf") {
        type = "truetype";
      }

      styleCSSCode += `@font-face {
        font-family: "${fontName}";
        src: url(".${asset}") format("${type}");
      }\n`;
    });

    return [
      {
        path: "./indexWithFont.js",
        content: prettier.format(indexFileCode, {
          plugins: [prettierBabylon],
          parser: "babylon"
        })
      },
      {
        path: "./style.css",
        content: styleCSSCode
      }
    ];
  }
}
