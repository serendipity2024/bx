import { Context, ExtraParams } from "../types";
import { generateChildren, addImportToContext } from "../utils";
import LayerCodeGen from "../LayerCodeGen";
import { layerNameMap } from "../utils/constants";
import { generateSVGPath } from "conversions";
import * as path from "path";
import { get } from "lodash";
const pascalCase = require("pascal-case");

export default class ImageCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }
  getRandomString() {
    let text = "";
    let possible =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    text = possible.charAt(Math.floor(Math.random() * 52));
    for (let i = 0; i < 6; i++) {
      text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
  }
  generateDefs(json: any, maskId: string) {
    let defsCode = "";
    let maskCode = "";
    let maskPathCode = `<path fill="white" d={"${generateSVGPath(
      json.props.mask,
      0,
      true,
      json.props.viewBox
    )}"}/>`;
    // const viewBox = json.props.viewBox.split(" ");
    maskCode = `<mask id="${maskId}" x={0} y={0}>
      ${maskPathCode}
      </mask>`;

    if (maskCode) {
      defsCode = `<defs>
    ${maskCode}
    </defs>`;
    }
    return defsCode;
  }
  generate(json: any, extraParams: ExtraParams): string {
    let flexDirection = get(
      extraParams,
      "parent.props.style.flexDirection",
      undefined
    );

    if (flexDirection) {
      switch (flexDirection) {
        case "row":
          Object.assign(json.props.style, { width: "100%" });
          break;
        case "column":
          Object.assign(json.props.style, { height: "100%" });
          break;
      }
    }
    if (json.props.mask) {
      const { viewBox, style } = json.props;
      this.context.styles[json.styleName] = {
        style: json.props.style,
        layerName: layerNameMap[json.import.layerName],
        category: "svgImage"
      };
      const svgJson = { ...json, props: { viewBox, style } };
      const maskId = this.getRandomString();
      return `<svg ${this.generateProps(
        svgJson,
        extraParams
      )} style={${this.generateJSLiteralCode(json.props.style, extraParams)}}>
      ${this.generateDefs(json, maskId)}
      <image href={require("${this.generateSourcePropCode(
        path.basename(json.props.source.uri),
        "svgImage"
      )}")} x={${json.props.svgDims.x}} y={${json.props.svgDims.y}} width={${
        json.props.svgDims.width
      }} height={${json.props.svgDims.height}} mask={"url(#${maskId})"}>
      ${generateChildren(json, this.context.baseCodeGen.generate, {
        parent: json
      })}
      </image>
      </svg>`;
    }
    if (json.props.hasOwnProperty("resizeMode")) {
      json.props.style = {
        ...json.props.style,
        objectFit: json.props["resizeMode"]
      };
      delete json.props.resizeMode;
    }
    if (json.children.length !== 0) {
      json.import.layerName = "View";

      if (!json.props.style.gradient) {
        const assetsRelativePath = this.config.isPreviewFile
          ? "./assets/images/"
          : "../assets/images/";
        const pathName =
          assetsRelativePath + path.basename(json.props.source.uri);
        json.props.style.backgroundImage =
          "url(${require('" + pathName + "')})";
        json.props.style.backgroundSize = "cover";
        if (json.props.style.objectFit) {
          delete json.props.style.objectFit;
        }
      }
      delete json.props.source;
    }
    this.context.styles[json.styleName] = {
      style: json.props.style,
      layerName: layerNameMap[json.import.layerName]
    };
    return `<${pascalCase(json.styleName)} ${this.generateProps(
      json,
      extraParams
    )} >
    ${generateChildren(json, this.context.baseCodeGen.generate, {
      parent: json
    })}
    </${pascalCase(json.styleName)}>`;
  }
}
