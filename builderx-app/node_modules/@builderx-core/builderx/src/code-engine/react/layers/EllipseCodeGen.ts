import { Context, ExtraParams } from "../types";
import { generateChildren } from "../utils";
import LayerCodeGen from "../LayerCodeGen";
import { layerNameMap } from "../utils/constants";

export default class EllipseCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  generate(json: any, extraParams: ExtraParams): string {
    json.props.viewBox = json.props.viewBox
      .split(" ")
      .map((v: string) => Math.round(parseFloat(v) * 100) / 100)
      .join(" ");
    this.context.styles[json.styleName] = {
      style: json.props.style,
      layerName: layerNameMap[json.import.layerName]
    };
    const { viewBox, style, ...ellipseProps } = json.props;
    const ellipseJson = { ...json, props: ellipseProps };
    const svgJson = { ...json, props: { viewBox, style } };

    return `<svg ${this.generateProps(
      svgJson,
      extraParams
    )} style={${this.generateJSLiteralCode(json.props.style, extraParams)}}>
    <ellipse ${this.generateProps(ellipseJson, extraParams)}>
      ${generateChildren(json, this.context.baseCodeGen.generate, {
        parent: json
      })}
    </ellipse>
    </svg>`;
  }
}
