import { Context, ExtraParams } from "../types";
import { generateChildren, addImportToContext } from "../utils";
import LayerCodeGen from "../LayerCodeGen";
const pascalCase = require("pascal-case");

export default class TabViewCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }
  generate(json: any, extraParams: ExtraParams): string {
    // console.log("In tab view code gen styles are", json);
    let conditions = "";
    for (let i = 0; i < json.children.length; i++) {
      for (let j = 0; j < json.children[i].children.length; j++) {
        conditions += `{value===${i} && ${this.context.baseCodeGen.generate(
          json.children[i].children[j],
          extraParams
        )}}\n`;
      }
    }

    addImportToContext(this.context, json);
    this.context.styles[json.styleName] = {
      style: json.props.style,
      layerName: "div",
      category: "tabView"
    };
    this.context.fileHasTabView = true;

    return `
        <${pascalCase(json.styleName)}>
        <AppBar style={${this.generateJSLiteralCode(
          {
            ...json.props.tabBarStyle,
            position: "absolute"
          },
          extraParams
        )}}>
        <Tabs value={${json.props.activeTabIndex}} >
        ${generateChildren(json, this.context.baseCodeGen.generate, {
          parent: json
        })}
        </Tabs>
        </AppBar>
        ${conditions}
        </${pascalCase(json.styleName)}>`;
  }
}
