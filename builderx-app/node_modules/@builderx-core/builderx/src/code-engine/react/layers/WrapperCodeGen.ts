import { Context, ExtraParams } from "../types";
import { generateChildren } from "../utils";
import LayerCodeGen from "../LayerCodeGen";
import pascalCase from "pascal-case";
import { layerNameMap } from "../utils/constants";
import { updateWrapperStyleName } from "../../utils";

export default class WrapperCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  generate(json: any, extraParams: ExtraParams): string {
    const childrenCode = generateChildren(
      json,
      this.context.baseCodeGen.generate,
      {
        parent: json
      }
    );

    if (json.type === "row" || json.type === "column") {
      json.props.style.display = "flex";
    }

    updateWrapperStyleName(json, extraParams);

    this.context.styles[json.styleName] = {
      style: json.props.style,
      layerName: layerNameMap[json.import.layerName]
    };
    return `<${pascalCase(json.styleName)} ${this.generateProps(
      json,
      extraParams
    )}>
      ${childrenCode}
      </${pascalCase(json.styleName)}>`;
  }
}
