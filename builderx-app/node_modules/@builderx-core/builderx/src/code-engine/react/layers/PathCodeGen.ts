import { Context, ExtraParams } from "../types";
import { generateChildren } from "../utils";
import LayerCodeGen from "../LayerCodeGen";
import { generateSVGPath } from "conversions";
import { forEach, get } from "lodash";
import { layerNameMap } from "../utils/constants";
import { Utils } from "utils";

export default class PathCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  generateDefs(json: any) {
    let defsCode = "";
    let gradId, maskId;

    let gradientCode = "";
    const gradient = json.props.style.gradient;
    delete json.props.style.gradient;

    if (gradient && gradient.gradientType === "LinearGradient") {
      let x1 = gradient.from.x;
      x1 = typeof x1 === "number" ? x1 * 100 : parseFloat(x1) * 100;

      let y1 = gradient.from.y;
      y1 = typeof y1 === "number" ? y1 * 100 : parseFloat(y1) * 100;

      let x2 = gradient.to.x;
      x2 = typeof x2 === "number" ? x2 * 100 : parseFloat(x2) * 100;

      let y2 = gradient.to.y;
      y2 = typeof y2 === "number" ? y2 * 100 : parseFloat(y2) * 100;

      gradId = Utils.randomString(6);

      const linearGradProps = `id="${gradId}" x1="${x1}%" x2="${x2}%" y1="${y1}%" y2="${y2}%"`;

      let stopsCode = "";

      forEach(gradient.stops, (stop: any) => {
        if (typeof stop.offset === "string") {
          stop.offset = parseFloat(stop.offset);
        }

        stopsCode += `<stop offset="${stop.offset
          .toFixed(2)
          .toString()}" stopColor="${stop.stopColor}" />`;
      });

      gradientCode = `<linearGradient ${linearGradProps}>
      ${stopsCode}
      </linearGradient>`;
    }

    let maskCode = "";
    if (json.props.mask) {
      let maskPathD = generateSVGPath(
        json.props.mask,
        1,
        true,
        json.props.viewBox
      );

      let maskPathCode = `<path d="${maskPathD}" fill="white" />`;

      let viewBox = ["0", "0", json.rcDims.width + "", json.rcDims.height + ""];

      if (json.props.viewBox) {
        // TODO: We're getting props.viewBox undeifned in some case which should never happen
        viewBox = json.props.viewBox.split(" ");
      }

      maskId = Utils.randomString(6);
      maskCode = `<mask id="${maskId}" x={0} y={0} width={${parseInt(
        viewBox[2],
        10
      )}} height={${parseInt(viewBox[3], 10)}}>
      ${maskPathCode}
      </mask>`;
    }

    if (gradientCode || maskCode) {
      defsCode = `<defs>
    ${gradientCode}
    ${maskCode}
    </defs>`;
    }
    return {
      code: defsCode,
      gradId,
      maskId
    };
  }

  generate(json: any, extraParams: ExtraParams): string {
    json.props.viewBox = json.props.viewBox
      .split(" ")
      .map((v: string) => Math.round(parseFloat(v) * 100) / 100)
      .join(" ");
    delete json.props.gradientImage;
    this.context.styles[json.styleName] = {
      style: json.props.style,
      layerName: layerNameMap[json.import.layerName]
    };
    const { viewBox, style, points, isClosed, ...pathProps } = json.props;
    const svgPath = generateSVGPath(
      points,
      json.props.strokeWidth || 0,
      isClosed,
      viewBox
    );
    const pathJson = { ...json, props: { ...pathProps, d: svgPath } };
    const svgJson = { ...json, props: { viewBox, style } };

    const { gradId, maskId, code: defsCode } = this.generateDefs(json);

    if (gradId) {
      pathJson.props.fill = `url(#${gradId})`;
    }
    if (maskId) {
      pathJson.props.mask = `url(#${maskId})`;
    }

    return `<svg ${this.generateProps(
      svgJson,
      extraParams
    )} style={${this.generateJSLiteralCode(json.props.style, extraParams)}} >
    ${defsCode}
    <path ${this.generateProps(pathJson, extraParams)}>
      ${generateChildren(json, this.context.baseCodeGen.generate, {
        parent: json
      })}
    </path>
    </svg>`;
  }
}
