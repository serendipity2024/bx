import { Context, ExtraParams } from "../types";
import {
  generateChildren,
  addImportToContext,
  getCurrentFamily
} from "../utils";
import LayerCodeGen from "../LayerCodeGen";
// const pascalCase = require("pascal-case");

export default class IconCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }
  generate(json: any, extraParams: ExtraParams): string {
    this.context.styles[json.styleName] = {
      style: json.props.style,
      layerName: "ThirdParty"
    };
    // let layerSpecificStyles = "";
    let styles = {};
    if (json.props.type !== "Zocial") {
      styles = {
        height: json.props.style.fontSize ? json.props.style.fontSize : 40,
        width: json.props.style.fontSize ? json.props.style.fontSize : 40
      };
    }

    let { type, name, ...remainingProps } = json.props;

    // let iconClass = "";
    // let value = undefined;
    addImportToContext(this.context, json, this.generateJSLiteralCode);

    // const propsCode = this.generateProps(json, extraParams);
    // let materialChildCode = "";
    // let tagName = `${json.props.type}${pascalCase(json.styleName)} `;
    let currentFamily = getCurrentFamily(json, this.generateJSLiteralCode);
    if (json.props.type) {
      delete json.props.type;
    }
    return `<${currentFamily}Icon ${this.generateProps(
      json,
      extraParams
    )} style={${this.generateJSLiteralCode(json.props.style, extraParams)}}>
    ${generateChildren(json, this.context.baseCodeGen.generate, {
      parent: json
    })}
    </${currentFamily}Icon>`;
  }
}
