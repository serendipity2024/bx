import { Context, ExtraParams } from "../types";
import { forEach, isEmpty } from "lodash";
import LayerCodeGen from "../LayerCodeGen";
import generate from "@babel/generator";
import { isSymbolFile } from "../../utils";
import { generateChildren, anyChildIsFlex } from "../utils";

export default class FileCodeGen extends LayerCodeGen {
  context: Context;

  constructor(context: Context) {
    super();
    this.context = context;
  }

  generateStyleNames(json: any, extraParams: ExtraParams) {
    return this.generateStyleComponentCode(
      this.context.styles,
      json,
      extraParams
    );
  }
  generateConditionalVariables() {
    let conditionalVariables = "";
    for (let i = 0; i < this.context.conditionals.length; i++) {
      conditionalVariables += `let ${this.context.conditionals[i]}=true;`;
    }
    return conditionalVariables;
  }

  generateImports() {
    let importsCode = "";

    forEach(this.context.imports, (importObj, packageName) => {
      let defaultImportCode = "";

      if (importObj.default) {
        defaultImportCode =
          importObj.named.length > 0
            ? `${importObj.default},`
            : importObj.default;
      }

      let namedImportsCode = " ";

      forEach(importObj.named, (layerName: any, index) => {
        if (index === 0) {
          namedImportsCode += "{ ";
        }
        if (typeof layerName === "object") {
          if (
            layerName.hasOwnProperty("name") &&
            layerName.hasOwnProperty("asName")
          ) {
            namedImportsCode += `${layerName.name} as ${layerName.asName},`;
          }
        } else {
          namedImportsCode += `${layerName}, `;
        }
        if (index === importObj.named.length - 1) {
          namedImportsCode += "}";
        }
      });

      if (importObj.named.length > 0 || importObj.default) {
        importsCode += `import ${defaultImportCode} ${namedImportsCode} from "${packageName}";`;
        if (importObj.cssFile !== undefined) {
          importsCode += `import "${importObj.cssFile}";`;
        }
      }
    });

    return importsCode;
  }
  isFileComponent = (): boolean => {
    if (
      this.context.filePath.indexOf("component") !== -1 ||
      this.context.filePath.indexOf("symbol") !== -1
    ) {
      return true;
    }
    return false;
  };

  generate(json: any, extraParams: ExtraParams): string {
    let {
      flex,
      display,
      flexDirection,
      ...restStyles
    } = json.layer.props.style;

    const containerHasDefaultStyles =
      isEmpty(restStyles) &&
      (!display || display === "flex") &&
      (!flexDirection || flexDirection === "column");
    if (json.smartFlexTransformed) {
      this.context.smartFlexTransformed = true;
    }
    let className = json.path;
    this.context["filePath"] = json.path;
    className = className.substring(
      className.lastIndexOf("/") + 1,
      className.lastIndexOf(".")
    );

    let layersCode;

    if (
      json.layer.children.length === 0 &&
      containerHasDefaultStyles &&
      !isSymbolFile(this.context.filePath)
    ) {
      layersCode = "<></>";
    } else {
      if (!isSymbolFile(json.path) && containerHasDefaultStyles) {
        if (
          json.layer.children.length === 1 &&
          json.layer.children[0].type !== "symbol"
        ) {
          json.layer.children[0].type = "root";
          layersCode = this.context.baseCodeGen.generate(
            json.layer.children[0],
            {
              parent: json
            }
          );
        } else if (!anyChildIsFlex(json.layer)) {
          layersCode = `<>${generateChildren(
            json.layer,
            this.context.baseCodeGen.generate,
            {
              parent: json
            }
          )}</>`;
        } else {
          layersCode = this.context.baseCodeGen.generate(json.layer, {
            parent: json
          });
        }
      } else if (
        this.config.isPreviewFile &&
        json.layer.children.length === 1
      ) {
        layersCode = this.context.baseCodeGen.generate(json.layer.children[0], {
          parent: json
        });
      } else {
        layersCode = this.context.baseCodeGen.generate(json.layer, {
          parent: json
        });
      }
    }
    const stylesCode = this.generateStyleNames(json, {
      parent: json
    });
    this.context.buttonDuplicate.exists = false;
    this.context.buttonDuplicate.codeGenerated = false;
    return `${this.generateImports()}

    ${this.context.isPlatformConditional ? `let Platform={OS:"Web"}` : ""};
   ${this.generateConditionalVariables()}

   function ${className}(props) {
        ${this.context.fileHasTabView ? `let value=0;` : ""}
        return ${layersCode};
    }

    ${stylesCode}

    export default ${className}`;
  }
}
