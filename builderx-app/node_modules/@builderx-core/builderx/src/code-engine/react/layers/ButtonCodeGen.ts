import { Context, ExtraParams } from "../types";
import { generateChildren, addImportToContext } from "../utils";
import LayerCodeGen from "../LayerCodeGen";
import { layerNameMap } from "../utils/constants";

const pascalCase = require("pascal-case");

export default class ButtonCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }
  getButtonTag = (json: any, extraParams: ExtraParams) => {
    let suffix =
      this.context.buttonDuplicate.lastNumber > 1
        ? this.context.buttonDuplicate.lastNumber
        : "";
    return `<${pascalCase(json.styleName)}>
    <ButtonOverlay${suffix} ${this.generateProps(json, extraParams)} ${
      json.navigateTo && json.navigateTo === "Go Back"
        ? `onClick = {() => props.history.goBack()}`
        : ""
    }>
      ${generateChildren(json, this.context.baseCodeGen.generate, {
        parent: json
      })}
    </ButtonOverlay${suffix}>
    </${pascalCase(json.styleName)}>`;
  };

  generate(json: any, extraParams: ExtraParams): string {
    let buttonStyles = { ...json.props.style };
    if (
      !json.props.style.hasOwnProperty("border") &&
      !json.props.style.hasOwnProperty("borderWidth")
    ) {
      buttonStyles = { ...json.props.style, border: "none" };
    }
    this.context.styles[json.styleName] = {
      style: buttonStyles,
      layerName: layerNameMap[json.import.layerName]
    };
    if (json.navigateTo && json.navigateTo !== "Go Back") {
      addImportToContext(this.context, json);
    }
    return `${
      json.navigateTo && json.navigateTo !== "Go Back"
        ? `<Link to="/${json.navigateTo}">
            ${this.getButtonTag(json, extraParams)}
          </Link>`
        : this.getButtonTag(json, extraParams)
    }`;
  }
}
