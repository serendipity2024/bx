import { Context, ExtraParams } from "../types";
import { generateChildren } from "../utils";
import LayerCodeGen from "../LayerCodeGen";
import { includes, replace } from "lodash";
import { layerNameMap } from "../utils/constants";
const pascalCase = require("pascal-case");

export default class TextInputCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  generate(json: any, extraParams: ExtraParams): string {
    delete json.props.style.fontPostscriptName;
    let textInputStyles = { ...json.props.style, background: "transparent" };
    if (
      !json.props.style.hasOwnProperty("border") &&
      !json.props.style.hasOwnProperty("borderWidth")
    ) {
      textInputStyles = {
        ...json.props.style,
        ...{ border: "none", background: "transparent" }
      };
    }
    let {
      textBreakStrategy,
      clearButtonMode,
      dataDetector,
      keyboardAppearance,
      ...restProps
    } = json.props;
    json.props = { ...restProps };
    this.context.styles[json.styleName] = {
      style: textInputStyles,
      layerName: layerNameMap[json.import.layerName],
      category: "TextInput"
    };
    if (includes(json.props.placeholder, "\n")) {
      json.props.placeholder = replace(
        json.props.placeholder,
        new RegExp("\n", "g"),
        " "
      );
      json.props.placeholder = replace(
        json.props.placeholder,
        new RegExp("\t", "g"),
        " "
      );
    }
    delete json.props.value;

    let junk =
      json.props.placeholderTextColor && delete json.props.placeholderTextColor;
    junk = json.props.selectionColor && delete json.props.selectionColor;
    junk =
      json.props.underlineColorAndroid &&
      delete json.props.underlineColorAndroid;
    junk = json.props.blurOnSubmit && delete json.props.blurOnSubmit;
    junk = json.props.caretHidden && delete json.props.caretHidden;
    junk = json.props.editable && delete json.props.editable;
    junk = json.props.multiline && delete json.props.multiline;
    junk = json.props.secureTextEntry && delete json.props.secureTextEntry;
    junk =
      json.props.disableFullscreenUI && delete json.props.disableFullscreenUI;
    junk = json.props.clearTextOnFocus && delete json.props.clearTextOnFocus;
    junk =
      json.props.enablesReturnKeyAutomatically &&
      delete json.props.enablesReturnKeyAutomatically;
    junk = json.props.keyboardType && delete json.props.keyboardType;
    junk = json.props.returnKeyType && delete json.props.returnKeyType;
    junk = json.props.autoCapitalize && delete json.props.autoCapitalize;

    return `<${pascalCase(json.styleName)} ${this.generateProps(
      json,
      extraParams
    )}>
      ${generateChildren(json, this.context.baseCodeGen.generate, {
        parent: json
      })}
    </${pascalCase(json.styleName)}>`;
  }
}
