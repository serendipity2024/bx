import { Context, ExtraParams } from "../types";
import { isTabViewSpecificStyleProp } from "../utils";
import LayerCodeGen from "../LayerCodeGen";
import { forEach } from "lodash";
import SliderCodeGen from "./SliderCodeGen";
import MapCodeGen from "./MapCodeGen";
import IconCodeGen from "./IconCodeGen";
import SwiperCodeGen from "./SwiperCodeGen";
import TabContentCodeGen from "./TabContentCodeGen";
import TabViewCodeGen from "./TabViewCodeGen";
import ListCodeGen from "./ListCodeGen";
import SwitchCodeGen from "./SwitchCodeGen";
import PickerCodeGen from "./PickerCodeGen";
import PickerItem from "./Picker.ItemCodeGen";
import LoaderCodeGen from "./LoaderCodeGen";

export default class ThirdPartyCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }

  generate(json: any, extraParams: ExtraParams): string {
    if (json.import.layerName !== "Picker.Item") {
      this.context.styles[json.styleName] = {
        style: json.props.style,
        layerName: "ThirdParty"
      };
    }

    let layerSpecificStyles = "";

    switch (json.import.layerName) {
      case "Slider":
        let sliderCodeGen = new SliderCodeGen(this.context);
        return sliderCodeGen.generate(json, extraParams);
        break;
      case "MapView":
        let mapCodeGen = new MapCodeGen(this.context);
        return mapCodeGen.generate(json, extraParams);
        break;
      case "Icon":
        let iconCodeGen = new IconCodeGen(this.context);
        delete json.props.style.fontPostscriptName;
        return iconCodeGen.generate(json, extraParams);
        break;
      case "Swiper":
        let swiperCodeGen = new SwiperCodeGen(this.context);
        return swiperCodeGen.generate(json, extraParams);
        break;
      case "TabView":
        let tabViewCodeGen = new TabViewCodeGen(this.context);
        return tabViewCodeGen.generate(json, extraParams);
        break;
      case "TabContent":
        let tabContentCodeGen = new TabContentCodeGen(this.context);
        return tabContentCodeGen.generate(json, extraParams);
        break;
      case "FlatList":
        let listCodeGen = new ListCodeGen(this.context);
        return listCodeGen.generate(json, extraParams);
        break;
      case "Switch":
        let switchCodeGen = new SwitchCodeGen(this.context);
        return switchCodeGen.generate(json, extraParams);
        break;
      case "Picker":
        let pickerCodeGen = new PickerCodeGen(this.context);
        return pickerCodeGen.generate(json, extraParams);
        break;
      case "Picker.Item":
        let pickerItem = new PickerItem(this.context);
        return pickerItem.generate(json, extraParams);
        break;
      case "ActivityIndicator":
        let loaderCodeGen = new LoaderCodeGen(this.context);
        return loaderCodeGen.generate(json, extraParams);
        break;
      default:
        break;
    }
    forEach(json.props, (value: string, propName: string) => {
      if (isTabViewSpecificStyleProp(propName)) {
        this.context.styles[`${json.styleName}_${propName}`] =
          json.props[propName];
        layerSpecificStyles += `${this.generateStyle(
          json,
          extraParams,
          propName
        )}`;
      }
    });

    // return `<${json.import.layerName} ${this.generateProps(
    //   json
    // )} ${this.generateStyle(json)} ${layerSpecificStyles}>
    //   ${generateChildren(json, this.context.baseCodeGen.generate)}
    // </${json.import.layerName}>`;
    return `{/*Insert ${json.import.layerName} here. Support coming soon*/}`;
  }
}
