import { Context, ExtraParams } from "../types";
import {
  generateChildren,
  hasAbsolutePosition,
  hasPositionProperty,
  layerHasAbsoluteChild
} from "../utils";
import LayerCodeGen from "../LayerCodeGen";
import pascalCase from "pascal-case";
import { layerNameMap } from "../utils/constants";
import { isEmpty, get } from "lodash";
import { Utils } from "utils";
export default class DivCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }
  generate(json: any, extraParams: ExtraParams): any {
    let gradient = json.props.style.gradient;
    if (gradient) {
      const gradientString = Utils.getGradientString(gradient);
      json.props.style.backgroundImage = gradientString;
      delete json.props.style.backgroundColor;
      delete json.props.gradientImage;
    }
    delete json.props.style.gradient;
    let propsCode = this.generateProps(json, extraParams);

    // Handling delete opacity in case of gradient(special case for React and not for react native)
    let { opacity, ...stylesWithoutOpacity } = json.props.style;
    let smartFlexTransformed = this.context.smartFlexTransformed;
    let layerStyles = "";

    if (smartFlexTransformed && gradient) {
      if (layerHasAbsoluteChild(json)) {
        layerStyles = { ...stylesWithoutOpacity, display: "flex" };
      }
    }
    if (json.children) {
      if (json.children.length === 0) {
        this.context.styles[json.styleName] = {
          style:
            smartFlexTransformed && gradient
              ? stylesWithoutOpacity
              : json.props.style,
          layerName: layerNameMap[json.import.layerName],
          category: json.type === "root" ? "root" : undefined
        };
      } else {
        if (layerHasAbsoluteChild(json)) {
          json.props.style.position = !(
            hasPositionProperty(json) && hasAbsolutePosition(json.props.style)
          )
            ? "relative"
            : json.props.style.position;
        }
        this.context.styles[json.styleName] = {
          style:
            smartFlexTransformed && gradient
              ? { ...stylesWithoutOpacity, display: "flex" }
              : { ...json.props.style, display: "flex" },
          layerName: layerNameMap[json.import.layerName],
          category: json.type === "root" ? "root" : undefined
        };
      }
    } else {
      this.context.styles[json.styleName] = {
        style: json.props.style,
        layerName: layerNameMap[json.import.layerName],
        category: json.type === "root" ? "root" : undefined
      };
    }

    let { flex, ...restStyles } = json.props.style;
    let tag =
      json.type === "root" && isEmpty(restStyles)
        ? ""
        : pascalCase(json.styleName);
    if (tag === "") {
      this.context.styles[json.styleName].style = {};
    }
    if (
      json.type === "root" &&
      (this.context.filePath.indexOf("symbols") !== -1 ||
        this.context.filePath.indexOf("components") !== -1)
    ) {
      return `<${pascalCase(json.styleName)} {...props} >
      ${generateChildren(json, this.context.baseCodeGen.generate, {
        parent: json
      })}
      </${pascalCase(json.styleName)}>`;
    }
    //  else if (
    //   json.type === "root" &&
    //   json.children.length <= 1 &&
    //   this.context.filePath.indexOf("symbols") === -1 &&
    //   this.context.filePath.indexOf("components") === -1
    // ) {
    //   if (json.children.length === 0) {
    //     if (!isEmpty(json.props.style)) {
    //       return `<Container>
    //     ${generateChildren(json, this.context.baseCodeGen.generate, {
    //       parent: json
    //     })}
    //     </Container>`;
    //     }
    //     return `<>
    //   ${generateChildren(json, this.context.baseCodeGen.generate, {
    //     parent: json
    //   })}
    //   </>`;
    //   } else {
    //     this.context.styles[json.styleName].style = {};
    //     return `${generateChildren(json, this.context.baseCodeGen.generate, {
    //       parent: json
    //     })}`;
    //   }
    // } else if (
    //   (this.context.filePath.indexOf("symbols") !== -1 ||
    //     this.context.filePath.indexOf("components") !== -1) &&
    //   json.type === "root" &&
    //   json.children.length > 1
    // ) {
    //   return `<${tag} style={props.style} ${propsCode} >
    //   ${generateChildren(json, this.context.baseCodeGen.generate, {
    //     parent: json
    //   })}
    //   </${tag}>`;
    // }
    return `<${tag} ${propsCode} >
      ${generateChildren(json, this.context.baseCodeGen.generate, {
        parent: json
      })}
      </${tag}>`;
  }
}
