import { Context, ExtraParams } from "../types";
import { generateChildren, addImportToContext } from "../utils";
import LayerCodeGen from "../LayerCodeGen";
import { layerNameMap } from "../utils/constants";
const pascalCase = require("pascal-case");

export default class SwitchCodeGen extends LayerCodeGen {
  context: Context;
  constructor(context: Context) {
    super();
    this.context = context;
  }
  generate(json: any, extraParams: ExtraParams): string {
    this.context.styles[json.styleName] = {
      style: json.props.style,
      layerName: layerNameMap[json.import.layerName],
      category: "switch"
    };
    let {
      onTintColor,
      tintColor,
      value,
      thumbTintColor,
      ...remainingProps
    } = json.props;
    json.props = {
      ...remainingProps,
      checked: json.props.value
    };
    let tag =
      this.context.switchDuplicate.lastNumber === 1
        ? "MaterialUISwitch"
        : `MaterialUISwitch${this.context.switchDuplicate.lastNumber}`;
    addImportToContext(this.context, json);
    return `<${pascalCase(json.styleName)}>
  <${tag}  color="primary" ${this.generateProps(json, extraParams)} ${
      thumbTintColor ? `style={{color:"${thumbTintColor}"}}` : ""
    } >
  ${generateChildren(json, this.context.baseCodeGen.generate, { parent: json })}
   </${tag}>
   </${pascalCase(json.styleName)}>`;
  }
}
