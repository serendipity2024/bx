import React from "react";
import _ from "lodash";
// import "./App.css";
var ID = function() {
  // Math.random should be unique because of its seeding algorithm.
  // Convert it to base 36 (numbers + letters), and grab the first 9 characters
  // after the decimal.
  return (
    "_" +
    Math.random()
      .toString(36)
      .substr(2, 9)
  );
};

class App extends React.Component<any, any> {
  render() {
    let columns = "3fr 1fr 3fr 1fr 3fr 1fr 3fr 1fr";
    // this.props.layerCompiled.forEach(() => {
    //     columns += " 1fr 3fr";
    // })
    // "3fr 1fr 3fr 1fr 3fr"
    return (
      <div
        style={{
          overflow: "scroll",
          background: "#FFF",
          transform: "scale(1)",
          height: "100%"
        }}
      >
        <div style={{ display: "grid", gridTemplateColumns: columns }}>
          <div style={{ height: "100vh", border: "1px solid #000" }}>
            <DisplayObject
              obj={this.props.layer}
              properties={["type"]}
              relationshipProperties={["domainCompiledRef"]}
              childrenProperty="children"
            />
          </div>
          <div />

          {this.props.layerCompiled.map((compiled: any) => {
            return (
              <>
                <div style={{ height: "100vh", border: "1px solid #000" }}>
                  <DisplayObject
                    obj={compiled}
                    properties={["domainType", "width", "height"]}
                    relationshipProperties={[
                      "ref",
                      "yogaNode",
                      "yogaNode.children"
                    ]}
                    childrenProperty="children"
                  />
                </div>
                <div style={{ height: "100vh", border: "1px solid #000" }} />
              </>
            );
          })}
        </div>
        <Relationships />
      </div>
    );
  }
}
class DisplayObject extends React.Component<any, any> {
  dom: any;
  loadRelationship = (relObj: any) => {
    window["relationshipDB"].set(relObj.uniqueId, relObj);
  }
  load = ({ dom, obj }: any) => {
    window["objectsDB"].set(obj, {
      dom: this.dom
    });
    // const relationships:any = [];
    // if (this.props.relationshipProperties) {
    //   this.props.relationshipProperties.forEach((relationshipProperty:any) => {

    //     const obj = _.get(this.props.obj, relationshipProperty);
    //     if (typeof obj == "undefined") return;

    //     if(_.isArray(obj)) {
    //         obj.forEach((relationshipPropertyArrItem:any, index:any) => {
    //             const relObj = {
    //                 uniqueId: "DOM" + ID(),
    //                 name: relationshipProperty+"_"+index,
    //                 parentObj: this.props.obj,
    //                 pointsTo: relationshipPropertyArrItem
    //               };
    //               relationships.push(relObj);
    //               this.loadRelationship(relObj);
    //         });

    //     } else {
    //         const relObj = {
    //             uniqueId: "DOM" + ID(),
    //             name: relationshipProperty,
    //             parentObj: this.props.obj,
    //             pointsTo: obj
    //           };
    //           relationships.push(relObj);
    //           this.loadRelationship(relObj);
    //     }

    //   });
    // }

    // window["objectsDB"].set(obj, {
    //     dom: this.dom
    //   });

    window["recalculateLines"]();
  };
  unload({ obj }: any) {
    window["objectsDB"].delete(obj);
    window["recalculateLines"]();
  }
  componentDidMount() {
    this.load({ dom: this.dom, obj: this.props.obj });
  }
  componentDidUpdate(prevProps: any) {
    if (prevProps.obj !== this.props.obj) {
      this.unload({ obj: prevProps.obj });
      this.load({ obj: this.props.obj, dom: this.dom });
    }
  }
  componentWillUnmount() {
    this.unload({ obj: this.props.obj });
  }
  render() {
    const children = this.props.obj[this.props.childrenProperty];
    const relationships: any = [];
    if (this.props.relationshipProperties) {
      this.props.relationshipProperties.forEach((relationshipProperty: any) => {
        const obj = _.get(this.props.obj, relationshipProperty);
        if (typeof obj === "undefined") { return; }

        // TODO: fix here isObservableArray
        if (_.isArray(obj)) {
          obj.forEach((relationshipPropertyArrItem: any, index: any) => {
            const relObj = {
              uniqueId: "DOM" + ID(),
              name: relationshipProperty + "_" + index,
              parentObj: this.props.obj,
              pointsTo: relationshipPropertyArrItem
            };
            relationships.push(relObj);
            this.loadRelationship(relObj);
          });
        } else {
          const relObj = {
            uniqueId: "DOM" + ID(),
            name: relationshipProperty,
            parentObj: this.props.obj,
            pointsTo: obj
          };
          relationships.push(relObj);
          this.loadRelationship(relObj);
        }
      });
    }
    return (
      <div
        style={{ border: "2px solid #555", margin: 5, padding: 5 }}
        ref={e => (this.dom = e)}
      >
        <ul>
          {this.props.properties &&
            this.props.properties.map((property: any) => {
              if (!this.props.obj[property]) { return; }
              return (
                <li key={this.props.obj[property]}>
                  {property}: {this.props.obj[property]}
                </li>
              );
            })}
          {children && children.length > 0 ? (
            <li>
              {" "}
              children:
              <ul>
                {children.map &&
                  children.map((child: any) => (
                    <DisplayObject
                      obj={child}
                      properties={this.props.properties}
                      childrenProperty={this.props.childrenProperty}
                      relationshipProperties={this.props.relationshipProperties}
                    />
                  ))}
              </ul>
            </li>
          ) : null}
          {relationships &&
            relationships.length > 0 &&
            relationships.map((relationship: any) => (
              <li id={relationship.uniqueId}>
                {relationship.name}: {"{}"}
              </li>
            ))}
        </ul>
      </div>
    );
  }
}
class Line extends React.Component<any, any> {
  render() {
    return (
      <div
        id={this.props.id}
        style={{
          position: "absolute",
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          opacity: 0.1,
          pointerEvents: "none"
        }}
      >
        <svg height="100%" width="100%" style={{ overflow: "visible" }}>
          <line
            x1={this.props.x1}
            y1={this.props.y1}
            x2={this.props.x2}
            y2={this.props.y2}
            style={{ stroke: "rgb(255,0,0)", strokeWidth: 2 }}
          />
        </svg>
      </div>
    );
  }
}
class Relationships extends React.Component {
  componentDidMount() {
    window["reloadLines"] = () => this.forceUpdate();
  }
  render() {
    return window["lines"]
      ? window["lines"].map((line: any) => <Line  key={line} {...line} />)
      : null;
  }
}
window["objectsDB"] = new Map();
window["relationshipDB"] = new Map();
window["recalculateLines"] = () => {
  window["lines"] = [];
  // console.log(window.relationshipDB);
  window["relationshipDB"].forEach((val: any, key: any) => {
    // dom = window.objectsDB;
    // const clientRect = dom.getBoundingClientRect();
    if (!document.getElementById(val.uniqueId)) { return; }
    var fromDOM = document.getElementById(val.uniqueId);
    var toObj = window["objectsDB"].get(val.pointsTo);

    // if (!toObj) {
    //     toObj = window["relationshipDB"].get(val.pointsTo);
    // }
    var toDOM = toObj && toObj.dom;
    if (!fromDOM || !toDOM) { return; }
    /*  fromDOM.style.backgroundColor = "#FFDDAA";
    toDOM.style.backgroundColor = "#FFDDAA";
*/

    fromDOM.onmouseenter = function() {
      // @ts-ignore
      document.getElementById("line-" + val.uniqueId).style.opacity = 1;
      toDOM.style.background = "#FFDD99";
      // @ts-ignore
      fromDOM.style.background = "#FFDD99";
    };

    fromDOM.onmouseleave = function() {
      // @ts-ignore
      document.getElementById("line-" + val.uniqueId).style.opacity = 0.1;
      toDOM.style.background = "";
      // @ts-ignore
      fromDOM.style.background = "";
    };

    var leftRect: any = fromDOM.getBoundingClientRect();
    var rightRect: any = toDOM.getBoundingClientRect();
    if (leftRect.left > rightRect.left) {
      [leftRect, rightRect] = [rightRect, leftRect];
    }
    window["lines"].push({
      id: "line-" + val.uniqueId,
      x1: leftRect.right,
      y1: leftRect.y + leftRect.height / 2,
      x2: rightRect.x,
      y2: rightRect.y + rightRect.height / 2
    });
  });
  setTimeout(() => window["reloadLines"](), 0);
};

export default App;
