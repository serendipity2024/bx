const ctx: Worker = self as any;

import getRenderedHTMLFromElement from "./getRenderedHTMLFromElement";
import * as React from "react";
(global as any).React = React;
import { transform } from "@babel/core";
import {
  View,
  Text,
  FlatList,
  ScrollView,
  ListView,
  TouchableOpacity
} from "react-native-web";
(global as any).View = View;
(global as any).Text = Text;
(global as any).FlatList = FlatList;
(global as any).ScrollView = ScrollView;
(global as any).ListView = ListView;
(global as any).TouchableOpacity = TouchableOpacity;
import reactJsxPlugin from "@babel/plugin-transform-react-jsx";
import presetReact from "@babel/preset-react";
// Post data to parent thread
// ctx.postMessage({ foo: "foo" });

// Respond to message from parent thread
// @ts-ignore
global.XMLHttpRequest = null;

ctx.addEventListener("message", event => {
  // console.log(event.data, "hello event getRenderedHTML 22");

  if (event.data.type === "getRenderedHTML") {
    transform(
      event.data.element,
      { presets: [presetReact] },
      (err: any, result: any) => {
        // console.log(err, "hello event error getRenderedHTML 22");

        // console.log(result.code, "code getRenderedHTML");
        // tslint:disable-next-line
        eval(
          `global.BUILDERX_THIRD_PARTY_RENDERED_COMPONENT = ${result.code};`
        );

        var ThirdPartyComponent =
          global["BUILDERX_THIRD_PARTY_RENDERED_COMPONENT"];

        // console.log({ ...event.data.props }, "getRenderedHTML 22222");
        var html = getRenderedHTMLFromElement(
          <ThirdPartyComponent {...event.data.props} />
        );
        ctx.postMessage({ type: "getRenderedHTML", html: html });
      }
    );

    // ctx.postMessage({ type: "getRenderedHTML", html: html });
  }
  // console.log(event.data, "Respond to message");
});
