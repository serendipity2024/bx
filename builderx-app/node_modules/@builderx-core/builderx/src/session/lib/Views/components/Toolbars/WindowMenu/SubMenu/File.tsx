import * as React from "react";
import {
  Option,
  OptionMenu,
  MenuDropdown,
  OptionMenuTitle,
  OptionMenuRight,
  Icon
} from "components-x";
import { Session } from "../../../../../models/Session";
import Stage from "../../../../../models/Stage";
import { IEvent } from "common-interfaces";
type propType = {
  session: Session;
  currentStage: Stage;
  onEvent: (event: IEvent) => void;
  uiSize: number;
};
export default class File extends React.Component<propType, any> {
  onUpdate = () => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.session.on(["projectLock", "displayMode"], this.onUpdate);
  }
  componentWillUnmount() {
    this.props.session.off(["projectLock", "displayMode"], this.onUpdate);
  }

  // <MenuItem label="Open Recent" enabled={fileOpsEnabled}>
  //   {recentProjectList.map((project: any, index: number) => {
  //     return (
  //       <MenuItem
  //         label={"~" + project.basePath}
  //         key={index}
  //         onClick={() => {
  //           this.props.onEvent({
  //             target: null,
  //             type: "openRecentProject",
  //             payload: { project, wrkspcOpsEnabled },
  //             originalEvent: null
  //           });
  //         }}
  //       />
  //     );
  //   })}
  render() {
    const { session } = this.props;
    let currentRoute = session.pageRouter.currentRoute;
    let wrkspcOpsDisabled = currentRoute !== "workspace";
    let fileOpsDisabled =
      currentRoute !== "workspace" && currentRoute !== "startScreen";
    return (
      <Option>
        {!this.props.session.readonly && (
          <OptionMenu data-cypress-id="window-menu-file">
            <OptionMenuTitle>File</OptionMenuTitle>
            <OptionMenuRight>
              <Icon name="right-arrow" size={12} />
            </OptionMenuRight>
          </OptionMenu>
        )}
        <MenuDropdown child uiSize={this.props.uiSize}>
          <Option
            id="addArtboard"
            disabled={
              wrkspcOpsDisabled ||
              (session.currentStage &&
                session.currentStage.id !== "artboard") ||
              session.displayMode !== "stage"
            }
            onClick={() => {
              if (
                session.currentStage &&
                session.currentStage.id === "artboard" &&
                session.displayMode === "stage"
              ) {
                let position = session.getNewArtboardPosition();
                this.props.onEvent({
                  type: "addArtboard",
                  target: null,
                  originalEvent: {},
                  payload: { x: position.fileLeft, y: position.fileTop }
                });
              }
            }}
          >
            <OptionMenu data-cypress-id="window-menu-file-add-artboard">
              <OptionMenuTitle>New Artboard</OptionMenuTitle>
              <OptionMenuRight>A</OptionMenuRight>
            </OptionMenu>
          </Option>
          <Option
            id="openNewProject"
            disabled={fileOpsDisabled}
            onClick={() => {
              this.props.session.drivers.analyticsService.addActivity(
                {
                  name: "menu.openNewProject.click",
                  category: "app/User Action"
                },
                true
              );
              this.props.onEvent({
                target: null,
                type: "openNewProject",
                payload: { wrkspcOpsEnabled: !wrkspcOpsDisabled },
                originalEvent: null
              });
            }}
          >
            <OptionMenu data-cypress-id="window-menu-file-open-new-project">
              <OptionMenuTitle>New Project</OptionMenuTitle>
              <OptionMenuRight>⌘ P</OptionMenuRight>
            </OptionMenu>
          </Option>
          <Option
            id="save"
            disabled={wrkspcOpsDisabled}
            onClick={() => {
              this.props.session.drivers.analyticsService.addActivity(
                {
                  name: "menu.save.click",
                  category: "app/User Action"
                },
                true
              );
              this.props.onEvent({
                target: null,
                type: "save",
                payload: null,
                originalEvent: null
              });
            }}
          >
            <OptionMenu data-cypress-id="window-menu-file-save">
              <OptionMenuTitle>Save</OptionMenuTitle>
              <OptionMenuRight>⌘ S</OptionMenuRight>
            </OptionMenu>
          </Option>

          <Option
            id="import-sketch"
            disabled={fileOpsDisabled || session.displayMode !== "stage"}
            onClick={(e: any) => {
              this.props.onEvent({
                target: null,
                type: "importSketchFile",
                payload: null,
                originalEvent: null
              });
            }}
          >
            <OptionMenu data-cypress-id="window-menu-file-import-sketch">
              <OptionMenuTitle>Import Sketch File</OptionMenuTitle>
              <OptionMenuRight>⌘ ⇧ I</OptionMenuRight>
            </OptionMenu>
          </Option>
        </MenuDropdown>
      </Option>
    );
  }
}
