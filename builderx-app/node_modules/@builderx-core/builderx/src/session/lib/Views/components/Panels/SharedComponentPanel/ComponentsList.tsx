import * as React from "react";
import {
  WrapperDiv,
  PropertyHeader,
  Button,
  Text,
  Icon,
  FormCol,
  SearchBar
} from "components-x";
import { map } from "lodash";
import { IEvent } from "common-interfaces";
import Components from "./Components";
import { Session } from "session";

interface PropType {
  library: string;
  list: any;
  currentDesign: string;
  currentSubDesign: string;
  onEvent: (e: IEvent) => void;
  sharedComponentsSession: Session;
  searchValue: string;
  session: Session;
}

export default class ComponentsList extends React.PureComponent<PropType, {}> {
  render() {
    return (
      <WrapperDiv
        style={{ height: "100%" }}
        key={`components-list-${this.props.library}`}
      >
        {this.props.currentDesign === "" && (
          <PropertyHeader
            uiBackground={800}
            bordered
            style={{
              paddingLeft: 11,
              paddingTop: 3,
              paddingBottom: 3
            }}
            uiSize="m"
            onClick={() => {
              this.props.onEvent({
                type: "setCurrentDesign",
                payload: {
                  currentDesign: this.props.library
                },
                originalEvent: null,
                target: null
              });
            }}
          >
            <Text uiSize="s">{this.props.library} Design</Text>
            <Button
              transparent
              icon={<Icon name="icon-right" size={10} />}
              uiSize="xs"
            />
          </PropertyHeader>
        )}
        {this.props.currentDesign === this.props.library && (
          <WrapperDiv
            style={{
              height: "100%"
            }}
          >
            {this.props.currentSubDesign === "" && (
              <WrapperDiv
                style={{
                  marginLeft: 12
                }}
              >
                <PropertyHeader
                  uiBackground={800}
                  paddingLeft={0}
                  style={{
                    paddingTop: 3,
                    paddingBottom: 3
                  }}
                  uiSize="m"
                  onClick={() => {
                    this.props.onEvent({
                      type: "setCurrentDesign",
                      payload: {
                        currentDesign: ""
                      },
                      originalEvent: null,
                      target: null
                    });
                    this.props.onEvent({
                      type: "setSearchValue",
                      payload: {
                        searchValue: ""
                      },
                      originalEvent: null,
                      target: null
                    });
                  }}
                >
                  <Icon name="icon-left" size={14} />
                  <FormCol>
                    <Text uiSize="s">{this.props.library} Design</Text>
                  </FormCol>
                </PropertyHeader>
                <SearchBar
                  placeholder="Search"
                  onChange={(change: any) => {
                    this.props.onEvent({
                      type: "onChangeSearchBar",
                      payload: {
                        change: change
                      },
                      originalEvent: null,
                      target: null
                    });
                  }}
                  wrapperStyle={{
                    width: "100%",
                    paddingRight: 8,
                    borderBottomColor: "#252931"
                  }}
                  uiSize="l"
                />
              </WrapperDiv>
            )}

            {map(this.props.list, (subHeader: any, category: any) =>
              this.props.currentDesign !== "Recent" ? (
                <Components
                  key={`component-${subHeader}=${category}`}
                  external={true}
                  session={this.props.session}
                  category={category}
                  recent={this.props.currentDesign === "Recent" ? true : false}
                  searchValue={this.props.searchValue}
                  onEvent={this.props.onEvent}
                  library={this.props.library}
                  currentSubDesign={this.props.currentSubDesign}
                  subHeader={subHeader}
                  sharedComponentsSession={this.props.sharedComponentsSession}
                />
              ) : (
                <Components
                  onEvent={this.props.onEvent}
                  session={this.props.session}
                  external={false}
                />
              )
            )}
          </WrapperDiv>
        )}
      </WrapperDiv>
    );
  }
}
