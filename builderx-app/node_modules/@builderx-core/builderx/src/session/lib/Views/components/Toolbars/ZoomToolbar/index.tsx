import * as React from "react";
import { ButtonGroup, SelectX } from "components-x";
import { isNumber } from "lodash";
import { Session } from "../../../../models/Session";
import SetZoom from "../../../../Commands/Session/SetZoom";
import Stage from "../../../../models/Stage";
import { action } from "model";
const zoomValues = [50, 100, 150, 200, 250, 300, 400];

interface PropType {
  session: Session;
}

export default class ZoomToolbar extends React.PureComponent<PropType, any> {
  prevStage: Stage;
  componentDidMount() {
    this.prevStage = this.props.session.currentStage;
    this.props.session.on("currentStage", this.onUpdate);
    this.props.session.currentStage.tools.on("zoom", this.onUpdate);
  }

  componentDidUpdate() {
    if (this.prevStage !== this.props.session.currentStage) {
      this.prevStage.tools.off("zoom", this.onUpdate);
      this.props.session.currentStage.tools.on("zoom", this.onUpdate);
      this.prevStage = this.props.session.currentStage;
    }
  }

  onUpdate = () => {
    this.forceUpdate();
  };
  componentWillUnmount() {
    this.props.session.off("currentStage", this.onUpdate);
    this.props.session.currentStage.tools.off("zoom", this.onUpdate);
  }
  setZoom = (e: any) => {
    action(() => {
      if (isNumber(e)) {
        const command = new SetZoom(this.props.session, e / 100);
        this.props.session.commandManager.execute(command);
      }
    });
  };
  render() {
    const session = this.props.session;
    let zoom: number = Math.floor(session.currentStage.tools.zoom * 100);
    if (zoom === 0) {
      zoom = 100;
    }

    return (
      <ButtonGroup style={{ paddingLeft: 4, alignItems: "center" }}>
        <SelectX
          data-cypress-id="zoom-drop"
          options={zoomValues}
          value={zoom}
          renderOption={(option: any) => option}
          size={"m"}
          readOnly
          renderValue={(option: any) => {
            return option ? option + "%" : "";
          }}
          extractValue={(option: any) => option}
          onChange={this.setZoom}
          placeholder=""
          tooltip=""
          filter={(inputValue: string) =>
            zoomValues.filter((option: any) => {
              return true;
            })
          }
        />
      </ButtonGroup>
    );
  }
}
