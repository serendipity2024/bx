import * as React from "react";
import { Icon, ButtonGroup, Button } from "components-x";
import { Session } from "../../../../models/Session";
import CreateGroup from "../../../../Commands/Layer/CreateGroup";
import Ungroup from "../../../../Commands/Layer/Ungroup";
import ReactTooltip from "react-tooltip";
import { action } from "model";

type propType = {
  session: Session;
};
export default class GroupToolbar extends React.PureComponent<propType, any> {
  componentDidMount() {
    this.props.session.on("selectedLayers", this.onUpdate);
    this.props.session.on("projectLock", this.onUpdate);
  }
  onUpdate = () => {
    this.forceUpdate();
  };
  componentWillUnmount() {
    this.props.session.off("selectedLayers", this.onUpdate);
    this.props.session.off("projectLock", this.onUpdate);
  }
  render() {
    const selectedLayers = this.props.session.getLayersFromSelectedLayerCollection();
    if (selectedLayers.length === 0) {
      return null;
    }
    const layer = selectedLayers[0];
    if (layer.type === "root") {
      ReactTooltip.hide();
      return null;
    }
    const childrenLen = selectedLayers[0].getChildren().length;
    const isSvg =
      layer &&
      (layer.type === "svg" ||
        layer.type === "flatList" ||
        layer.type === "text" ||
        layer.type === "thirdParty" ||
        layer.type === "scrollView");

    const isGroupDoable =
      this.props.session.createGroupFromSelectedLayersIsDoable() &&
      !this.props.session.disableForScrollViewRoot();
    if (selectedLayers.length > 1 && !this.props.session.readonly) {
      return (
        <Button
          disabled={!isGroupDoable}
          onClick={() => {
            action(() => {
              const createGroup = new CreateGroup(
                this.props.session,
                selectedLayers
              );
              this.props.session.commandManager.execute(createGroup);
            });
          }}
          paddingLeft={3}
          transparent
          data-tip="Group the selected layers"
          icon={<Icon name="group" size={16} marginRight={true} />}
          caption="Group"
        />
      );
    } else if (childrenLen > 0 && !isSvg && !this.props.session.readonly) {
      const isUngroupDoable = this.props.session.unGroupFromSelectedLayersIsDoable();
      return (
        <ButtonGroup>
          <Button
            data-cypress-id="toolbar-group"
            paddingLeft={3}
            transparent={true}
            disabled={!isGroupDoable}
            icon={
              <Icon
                key="group-icon"
                name="group"
                size={16}
                marginRight={true}
              />
            }
            caption="Group"
            onClick={() => {
              action(() => {
                const createGroup = new CreateGroup(
                  this.props.session,
                  selectedLayers
                );
                this.props.session.commandManager.execute(createGroup);
              });
            }}
          />
          <Button
            data-cypress-id="toolbar-ungroup"
            paddingLeft={3}
            transparent
            disabled={!isUngroupDoable}
            icon={
              <Icon key="ungroup-icon" name="ungroup" size={16} marginRight />
            }
            data-tip="Ungroup the selected layer"
            caption="Ungroup"
            onClick={() => {
              action(() => {
                const selectedLayer = selectedLayers[0];
                const ungroup = new Ungroup(this.props.session, selectedLayer);
                this.props.session.commandManager.execute(ungroup);
              });
            }}
          />
        </ButtonGroup>
      );
    } else {
      return !this.props.session.readonly ? (
        <Button
          data-cypress-id="toolbar-group"
          disabled={!isGroupDoable}
          onClick={() => {
            action(() => {
              const createGroup = new CreateGroup(
                this.props.session,
                selectedLayers
              );
              this.props.session.commandManager.execute(createGroup);
            });
          }}
          paddingLeft={3}
          transparent={true}
          icon={<Icon name="group" size={16} marginRight={true} />}
          caption="Group"
          data-tip="Group the selected layers"
          // tooltip={<TooltipText>Group the selected layers</TooltipText>}
        />
      ) : null;
    }
  }
}
