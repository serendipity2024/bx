import * as React from "react";
import {
  Window,
  WindowFooter,
  WindowBody,
  Title,
  Text,
  Paragraph,
  Pane,
  FormCol,
  FormRow,
  FormGroup,
  Button,
  ButtonGroup,
  InputGroupInput,
  ModalContainer,
  ModalBackdrop,
  ModalContent,
  Spinner
} from "components-x";
import { Session } from "../../../models/Session";
import SetModalRoute from "../../../Commands/Router/SetModalRoute";
import SetPageRoute from "../../../../lib/Commands/Router/SetPageRoute";
import { action } from "model";

type propType = {
  session: Session;
};
type stateType = {
  licenceKey: string;
  isSubmitting: boolean;
  isLoading: boolean;
};
export default class LicenceKeyForm extends React.PureComponent<
  propType,
  stateType
> {
  constructor(props: propType) {
    super(props);
    this.state = {
      licenceKey: "",
      isSubmitting: false,
      isLoading: false
    };
  }
  componentDidMount() {
    document.addEventListener("keyup", this._handleKeyDown);
  }
  componentWillUnmount() {
    document.removeEventListener("keyup", this._handleKeyDown);
  }
  _handleKeyDown = (event: any) => {
    const ESCAPE_KEY = 27;
    const ENTER_KEY = 13;
    switch (event.keyCode) {
      case ESCAPE_KEY:
        this.exitModal();
        break;
      case ENTER_KEY:
        this.onSubmit(event);
        break;
      default:
        break;
    }
  };
  activate = (key: string) => {
    action(() => {
      const router = this.props.session.pageRouter;
      this.props.session.drivers.userService.registerAndVerifyLicense(key).then(
        (isExpired: any) => {
          if (isExpired) {
            this.exitModal();
            this.props.session.commandManager.executeAndSkip(
              new SetPageRoute(this.props.session, "error/expired")
            );
          } else {
            this.setState({ isLoading: false });
            // //console.log("router.currentRoute", router.previousRoute);
            this.props.session.notificationManager.notifySuccess(
              "Let's build some awesome Apps.",
              "Activation Complete!"
            );
            this.exitModal();
            if (router.previousRoute) {
              if (router.currentRoute === "error/expired") {
                this.props.session.commandManager.executeAndSkip(
                  new SetPageRoute(this.props.session, router.previousRoute)
                );
              } else {
                this.props.session.commandManager.executeAndSkip(
                  new SetPageRoute(this.props.session, "startScreen")
                );
              }
            } else {
              this.props.session.commandManager.executeAndSkip(
                new SetPageRoute(this.props.session, "startScreen")
              );
            }
            this.props.session.drivers.userService.setUpdateDownloaded(false);
            this.props.session.drivers.appUpdaterService.checkAndMatchVersions();
            this.props.session.drivers.appUpdaterService.checkForUpdates();
          }
        },
        (error: any) => {
          console.log("error=====", error.response);
          this.exitModal();
        }
      );
    });
  };
  buyLicence = () => {
    this.props.session.drivers.appLifeCycleService.openWeb(
      "https://builderx.io/pricing"
    );
  };
  onSubmit = (e: any) => {
    this.setState({ isSubmitting: true });
    if (this.state.isSubmitting && this.state.licenceKey) {
      this.setState({ isLoading: true });
      this.activate(this.state.licenceKey);
    }
  };
  exitModal = () => {
    action(() => {
      this.props.session.commandManager.executeAndSkip(
        new SetModalRoute(this.props.session, "")
      );
    });
  };
  render() {
    return (
      <ModalContainer>
        <ModalBackdrop onClick={this.exitModal} />
        <ModalContent uiSize="m">
          <Window uiSize="m">
            <WindowBody>
              <Pane uiBackground={800} padder="xs">
                <FormGroup style={{ paddingTop: 0, paddingBottom: 0 }}>
                  <FormRow>
                    <Title uiSize="s" uiColor={200}>
                      Activate BuilderX
                    </Title>
                  </FormRow>
                  <FormRow>
                    <FormCol first>
                      <Text uiSize="s" uiColor={400}>
                        Please Enter your Activation key here:
                      </Text>
                    </FormCol>
                  </FormRow>
                  <FormRow noPadding>
                    <InputGroupInput
                      type="text"
                      uiSize="l"
                      autoFocus={true}
                      onChange={(e: any) => {
                        this.setState({
                          licenceKey: e.target.value
                        });
                      }}
                      value={this.state.licenceKey}
                      placeholder="B362-1011-1212-9879-B734-NI34-3149"
                    />
                  </FormRow>
                  <FormRow noPadding>
                    <Text uiSize={"m"}>
                      {this.state.isSubmitting && !this.state.licenceKey
                        ? "This field is required"
                        : ""}
                    </Text>
                  </FormRow>

                  <FormRow>
                    <FormCol first={true}>
                      <Paragraph uiSize="s" textAlign={"left"} uiColor={400}>
                        You should find your Activation key in the confirmation
                        email you received after you purchased BuilderX.
                      </Paragraph>
                    </FormCol>
                  </FormRow>
                </FormGroup>
              </Pane>
            </WindowBody>
            <WindowFooter>
              <Pane padder="xs" uiBackground={800}>
                <ButtonGroup>
                  <ButtonGroup paddingRight={12} contentRight={false}>
                    <Button
                      uiBackground={600}
                      style={{ width: 90, padding: 0, height: 28 }}
                      border={true}
                      caption="Buy License"
                      uiSize="m"
                      onClick={this.buyLicence}
                      marginLeft={true}
                      paddingLeft={15}
                      paddingRight={15}
                    />
                  </ButtonGroup>

                  <ButtonGroup paddingRight={12} contentRight={true}>
                    <Button
                      style={{
                        width: 70,
                        padding: 0,
                        height: 28,
                        marginRight: 8
                      }}
                      uiBackground={600}
                      border={true}
                      caption="Cancel"
                      uiSize="m"
                      onClick={this.exitModal}
                    />
                    <Button
                      style={{ width: 70, padding: 0, height: 28 }}
                      actionBtn={true}
                      uiBackground={500}
                      border={true}
                      caption={!this.state.isLoading ? "Activate" : ""}
                      uiSize="m"
                      active
                      onClick={(e: any) => this.onSubmit(e)}
                      disabled={this.state.isLoading}
                    >
                      {this.state.isLoading && <Spinner />}
                    </Button>
                  </ButtonGroup>
                </ButtonGroup>
              </Pane>
            </WindowFooter>
          </Window>
        </ModalContent>
      </ModalContainer>
    );
  }
}
