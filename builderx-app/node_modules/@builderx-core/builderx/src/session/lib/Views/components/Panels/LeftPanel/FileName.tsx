import * as React from "react";
import { action } from "model";
import { Utils } from "utils";
import {
  Bar,
  BarAction,
  BarHeading,
  Icon,
  MenuDropdown,
  Option,
  OptionMenu,
  OptionMenuTitle,
  Text,
  WrapperDiv
} from "components-x";
import { File as DomainFile, File, Layer as DomainLayer } from "domain-x";
import DuplicateArtboard from "../../../../Commands/File/DuplicateArtboard";
import RemoveArtboard from "../../../../Commands/File/RemoveArtboard";
import RenameFileName from "../../../../Commands/File/RenameFileName";
import { Session } from "../../../../models/Session";
import { Prompt } from "dialog-x";

type propType = {
  open?: boolean;
  session: Session;
};
class FileName extends React.PureComponent<propType, any> {
  componentDidMount() {
    const { selectedFile } = this.props.session;
    if (!selectedFile || !(selectedFile.layer instanceof DomainLayer)) {
      return;
    }
    selectedFile.on("path", this.onUpdate);

    this.props.session.on("selectedFile", this.onUpdate);
  }
  componentDidUpdate(prevProps: propType) {
    const prevSelectedFile = prevProps.session.selectedFile;
    if (!prevSelectedFile || !(prevSelectedFile.layer instanceof DomainLayer)) {
      return;
    }
    prevSelectedFile.off("path", this.onUpdate);

    prevProps.session.off("selectedFile", this.onUpdate);

    const { selectedFile } = this.props.session;
    if (!selectedFile || !(selectedFile.layer instanceof DomainLayer)) {
      return;
    }
    selectedFile.on("path", this.onUpdate);

    this.props.session.on("selectedFile", this.onUpdate);
  }
  componentWillUnmount() {
    const { selectedFile } = this.props.session;
    if (!selectedFile || !(selectedFile.layer instanceof DomainLayer)) {
      return;
    }
    selectedFile.off("path", this.onUpdate);

    this.props.session.off("selectedFile", this.onUpdate);
  }
  onUpdate = () => {
    this.forceUpdate();
  };

  renameFileName = async (fileName: string, promptMessage?: string) => {
    try {
      const newFileName = await Utils.getFileNameUserInput(
        this.props.session,
        Prompt,
        fileName,
        promptMessage
      );
      if (
        newFileName &&
        typeof newFileName === "string" &&
        this.props.session.selectedFile
      ) {
        action(() => {
          this.props.session.commandManager.execute(
            new RenameFileName(
              this.props.session,
              this.props.session.selectedFile as DomainFile,
              newFileName
            )
          );
        });
      }
    } catch (e) {
      //
    }
  };
  render() {
    const { selectedFile } = this.props.session;
    if (!selectedFile) {
      return null;
    }
    let fileName = selectedFile.path;

    if (!fileName) {
      return null;
    }
    if (fileName !== undefined && fileName !== "") {
      fileName = fileName.substr(
        fileName.lastIndexOf("/") + 1,
        fileName.length
      );
    }
    let artboardLength: number = 0;
    this.props.session.domain.files.forEach((file: File) => {
      if (file && !file.isSymbol()) {
        artboardLength++;
      }
    });
    return (
      <Bar uiSize="m" uiBackground={800} style={{ width: "100%" }}>
        <BarHeading uiSize="s">
          <WrapperDiv
            style={{
              display: "flex",
              alignItems: "center",
              overflow: "hidden"
            }}
          >
            <Icon name={"icon_layer"} size={14} />
            <Text
              uiSize="xs"
              bold
              uppercase
              letterSpacing
              style={{
                paddingLeft: 8,
                whiteSpace: "nowrap",
                overflow: "hidden",
                textOverflow: "ellipsis"
              }}
            >
              {fileName}
            </Text>
          </WrapperDiv>
          <BarAction uiSize="m">
            <MenuDropdown>
              <Option>
                <OptionMenu
                  transparent
                  onClick={(e: any) => {
                    e.stopPropagation();
                  }}
                >
                  <Icon name="cog" size={16} />
                </OptionMenu>
                <MenuDropdown child>
                  <Option
                    onClick={() => this.renameFileName(fileName)}
                    key="rename-file"
                  >
                    <OptionMenu>
                      <OptionMenuTitle>Rename</OptionMenuTitle>
                    </OptionMenu>
                  </Option>
                  <Option
                    onClick={() => {
                      action(() => {
                        if (this.props.session.displayMode === "stage") {
                          this.props.session.commandManager.execute(
                            new DuplicateArtboard(
                              this.props.session,
                              selectedFile
                            )
                          );
                        }
                      });
                    }}
                    key="duplicate-artboard"
                  >
                    <OptionMenu>
                      <OptionMenuTitle>Duplicate Artboard</OptionMenuTitle>
                    </OptionMenu>
                  </Option>
                  {artboardLength > 1 && (
                    <Option
                      onClick={() => {
                        action(() => {
                          this.props.session.commandManager.execute(
                            new RemoveArtboard(this.props.session, selectedFile)
                          );
                        });
                      }}
                      key="remove-artboard"
                    >
                      <OptionMenu>
                        <OptionMenuTitle>Remove Artboard</OptionMenuTitle>
                      </OptionMenu>
                    </Option>
                  )}
                </MenuDropdown>
              </Option>
            </MenuDropdown>
            {/* <Button
              transparent
              icon={
                <Icon
                  name={this.props.open ? "uparrow" : "downarrow"}
                  size={10}
                />
              }
              uiSize="xs"
              key="arrow"
              tooltip={
                <TooltipText>
                  {this.props.open
                    ? "Collapse layer panel"
                    : "Expand layer panel"}
                </TooltipText>
              }
            /> */}
          </BarAction>
        </BarHeading>
      </Bar>
    );
  }
}

export default FileName;
