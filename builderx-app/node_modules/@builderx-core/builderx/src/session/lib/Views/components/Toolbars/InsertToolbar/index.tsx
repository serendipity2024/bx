import * as React from "react";
import {
  Option,
  OptionMenu,
  MenuDropdown,
  Icon,
  OptionMenuLeft,
  OptionMenuTitle,
  OptionMenuRight,
  Scrollbars,
  Pane,
  Text
} from "components-x";
import { Session } from "../../../../models/Session";
import SelectTool from "../../../../Commands/Session/SelectTool";
import SetDrawType from "../../../../Commands/Session/SetDrawType";
import Stage from "../../../../models/Stage";
import InsertSymbolInstance from "../../../../Commands/Symbols/InsertSymbolInstance";
import AddImage from "../../../../Commands/Image/AddImage";
import { AddNewArtboard } from "../../../../Commands";
import { action } from "model";
import Tools from "../Tools";
// import WindowMenu from "../WindowMenu";
import { Utils } from "utils";

type propType = { session: Session; currentStage: Stage };
export default class InsertToolbar extends React.PureComponent<propType, any> {
  constructor(props: any) {
    super(props);
  }
  onUpdate = () => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.session.domain.on("files", this.onUpdate);
    this.props.currentStage.tools.on("selectedTool", this.onUpdate);
    this.props.session.on(["projectLock", "displayMode"], this.onUpdate);
  }
  componentDidUpdate(prevProps: propType) {
    if (prevProps.currentStage !== this.props.currentStage) {
      prevProps.currentStage.tools.off("selectedTool", this.onUpdate);
      this.props.currentStage.tools.on("selectedTool", this.onUpdate);
    }
  }
  componentWillUnmount() {
    this.props.session.domain.off("files", this.onUpdate);
    this.props.currentStage.tools.off("selectedTool", this.onUpdate);
    this.props.session.off(["projectLock", "displayMode"], this.onUpdate);
  }
  renderMenuItems(): any {
    let session = this.props.session;
    let currentStageId = this.props.session.currentStage.id;
    let symbols: any = session.domain.getSymbols();
    const menuItems = symbols.map((symbol: any, index: any) => {
      if (
        session.currentRootLayer &&
        Utils.checkIfCircularSymbol(session, symbol, session.currentRootLayer)
      ) {
        return null;
      }
      if (symbol.path === currentStageId) {
        return null;
      }
      return (
        <Option
          key={index}
          onClick={() => {
            action(() => {
              session.commandManager.execute(
                new InsertSymbolInstance(session, symbol)
              );
            });
          }}
        >
          <OptionMenu style={{ width: "100%", fontSize: 14 }}>
            <Text inline>{symbol.path.split("/").pop()}</Text>
          </OptionMenu>
        </Option>
      );
    });
    return menuItems;
  }
  render() {
    const { session, currentStage } = this.props;
    let symbols: any = session.domain.getSymbols();
    const executeAndSkip = session.commandManager.executeAndSkip;
    const execute = session.commandManager.execute;
    return (
      <>
        {/* <WindowMenu session={session} currentStage={currentStage} /> */}
        {!session.readonly && (
          <>
            <MenuDropdown
              uiSize={190}
              style={{
                paddingRight: 12,
                paddingLeft: 6,
                zIndex: 10,
                opacity: this.props.session.readonly ? 0.5 : 1
              }}
            >
              <Option>
                <OptionMenu
                  data-cypress-id="toolbar-insert"
                  transparent
                  style={{ paddingTop: 5, overflow: "visible" }}
                >
                  <Icon
                    className="p-1"
                    actionBtn
                    uiBackground={700}
                    name="insert-background"
                    size={30}
                    style={{ borderRadius: "2px" }}
                    data-tip="Add a new layer to the canvas"
                  />
                </OptionMenu>
                {!this.props.session.readonly && (
                  <MenuDropdown
                    child
                    uiSize={190}
                    style={{ marginTop: 12, marginLeft: 0 }}
                  >
                    <Option
                      id="artboard"
                      disabled={
                        this.props.session &&
                        ((this.props.session.currentStage &&
                          this.props.session.currentStage.id !== "artboard") ||
                          this.props.session.displayMode !== "stage")
                      }
                      onClick={() => {
                        if (
                          this.props.session &&
                          this.props.session.currentStage &&
                          this.props.session.currentStage.id === "artboard"
                        ) {
                          action(() => {
                            if (session.displayMode === "stage") {
                              session.commandManager.execute(
                                new AddNewArtboard(
                                  session,
                                  undefined,
                                  "artboard",
                                  true,
                                  true
                                )
                              );
                            }
                          });
                        }
                      }}
                    >
                      <OptionMenu data-cypress-id="toolbar-insert-artboard">
                        <OptionMenuLeft>
                          <Icon name="artboard" size={12} />
                        </OptionMenuLeft>
                        <OptionMenuTitle>Artboard</OptionMenuTitle>
                        <OptionMenuRight />
                      </OptionMenu>
                    </Option>
                    <Option>
                      <OptionMenu data-cypress-id="toolbar-insert-shape">
                        <OptionMenuLeft>
                          <Icon name="rectangle-shape" size={12} />
                        </OptionMenuLeft>
                        <OptionMenuTitle>Shape</OptionMenuTitle>
                        <OptionMenuRight>
                          <Icon name="right-arrow" size={12} />
                        </OptionMenuRight>
                      </OptionMenu>
                      <MenuDropdown>
                        <Option
                          id="view"
                          last
                          onClick={() => {
                            action(() => {
                              executeAndSkip(new SelectTool(session, "view"));
                            });
                          }}
                        >
                          <OptionMenu data-cypress-id="toolbar-insert-shape-rectangle">
                            <OptionMenuLeft>
                              <Icon name="rectangle-shape" size={12} />
                            </OptionMenuLeft>
                            <OptionMenuTitle>Rectangle</OptionMenuTitle>
                            <OptionMenuRight>R</OptionMenuRight>
                          </OptionMenu>
                        </Option>
                        <Option
                          id="ellipse"
                          last
                          onClick={() => {
                            action(() => {
                              executeAndSkip(
                                new SelectTool(session, "ellipse")
                              );
                            });
                          }}
                        >
                          <OptionMenu data-cypress-id="toolbar-insert-shape-ellipse">
                            <OptionMenuLeft>
                              <Icon name="ellipse-shape" size={12} />
                            </OptionMenuLeft>
                            <OptionMenuTitle>Ellipse</OptionMenuTitle>
                            <OptionMenuRight>E</OptionMenuRight>
                          </OptionMenu>
                        </Option>
                      </MenuDropdown>
                    </Option>
                    <Option
                      id="text"
                      onClick={() => {
                        action(() => {
                          executeAndSkip(new SelectTool(session, "text"));
                        });
                      }}
                    >
                      <OptionMenu data-cypress-id="toolbar-insert-text">
                        <OptionMenuLeft>
                          <Icon name="text" size={12} />
                        </OptionMenuLeft>
                        <OptionMenuTitle>Text</OptionMenuTitle>
                        <OptionMenuRight />
                      </OptionMenu>
                    </Option>
                    <Option
                      id="icon"
                      onClick={() => {
                        action(() => {
                          executeAndSkip(new SelectTool(session, "icon"));
                        });
                      }}
                    >
                      <OptionMenu data-cypress-id="toolbar-insert-icon">
                        <OptionMenuLeft>
                          <Icon name="icon" size={12} />
                        </OptionMenuLeft>
                        <OptionMenuTitle>Icon</OptionMenuTitle>
                        <OptionMenuRight />
                      </OptionMenu>
                    </Option>
                    <Option id="image">
                      <OptionMenu
                        data-cypress-id="toolbar-insert-image"
                        style={{ width: "inherit" }}
                      >
                        <OptionMenuLeft>
                          <Icon name="image" size={12} />
                        </OptionMenuLeft>
                        <OptionMenuTitle>Image</OptionMenuTitle>
                        <OptionMenuRight />
                        <input
                          type="file"
                          id="input"
                          data-cypress-id="image-input"
                          accept="image/*"
                          style={{
                            position: "absolute",
                            left: 5,
                            top: 0,
                            opacity: 0,
                            height: 30,
                            width: "96%"
                          }}
                          onChange={(e: any) => {
                            if (e.target.files && e.target.files[0]) {
                              session
                                .checkImageType(e.target.files[0])
                                .then(result => {
                                  //
                                  session.commandManager.execute(
                                    new AddImage(session, [result])
                                  );
                                })
                                .catch(err => {
                                  //
                                  session.notificationManager.notifyError(
                                    "Invalid file format. Use .png, .jpg, .gif or .sketch",
                                    "File format"
                                  );
                                });
                            }
                          }}
                        />
                      </OptionMenu>
                    </Option>
                    <Option
                      id="textInput"
                      onClick={() => {
                        action(() => {
                          executeAndSkip(new SetDrawType(session, "textInput"));
                        });
                      }}
                    >
                      <OptionMenu data-cypress-id="toolbar-insert-text-input">
                        <OptionMenuLeft>
                          <Icon name="text" size={12} />
                        </OptionMenuLeft>
                        <OptionMenuTitle>TextInput</OptionMenuTitle>
                        <OptionMenuRight />
                      </OptionMenu>
                    </Option>
                    <Option
                      id="touchableOpacity"
                      onClick={() => {
                        action(() => {
                          executeAndSkip(
                            new SetDrawType(session, "touchableOpacity")
                          );
                        });
                      }}
                    >
                      <OptionMenu data-cypress-id="toolbar-insert-touchable-opacity">
                        <OptionMenuLeft>
                          <Icon name="rectangle-shape" size={12} />
                        </OptionMenuLeft>
                        <OptionMenuTitle>TouchableOpacity</OptionMenuTitle>
                        <OptionMenuRight />
                      </OptionMenu>
                    </Option>
                    <Option
                      id="scrollView"
                      onClick={() => {
                        action(() => {
                          executeAndSkip(
                            new SetDrawType(session, "scrollView")
                          );
                        });
                      }}
                    >
                      <OptionMenu data-cypress-id="toolbar-insert-scroll-view">
                        <OptionMenuLeft>
                          <Icon name="scrollview" size={12} />
                        </OptionMenuLeft>
                        <OptionMenuTitle>ScrollView</OptionMenuTitle>
                        <OptionMenuRight />
                      </OptionMenu>
                    </Option>
                    <Option
                      id="switch"
                      onClick={() => {
                        action(() => {
                          executeAndSkip(new SetDrawType(session, "switch"));
                        });
                      }}
                    >
                      <OptionMenu data-cypress-id="toolbar-insert-switch">
                        <OptionMenuLeft>
                          <Icon name="icon-switch" size={12} />
                        </OptionMenuLeft>
                        <OptionMenuTitle>Switch</OptionMenuTitle>
                        <OptionMenuRight />
                      </OptionMenu>
                    </Option>
                    {/* <Option
                      id="picker"
                      onClick={() => {
                        action(() => {
                          executeAndSkip(new SelectTool(session, "draw"));
                          executeAndSkip(new SetDrawType(session, "picker"));
                        });
                      }}
                    >
                      <OptionMenu>
                        <OptionMenuLeft>
                          <Icon name="icon-picker" size={12} />
                        </OptionMenuLeft>
                        <OptionMenuTitle>Picker</OptionMenuTitle>
                        <OptionMenuRight />
                      </OptionMenu>
                    </Option> */}
                    <Option
                      id="activityIndicator"
                      onClick={() => {
                        action(() => {
                          executeAndSkip(
                            new SetDrawType(session, "activityIndicator")
                          );
                        });
                      }}
                    >
                      <OptionMenu data-cypress-id="toolbar-insert-activity-indicator">
                        <OptionMenuLeft>
                          <Icon name="icon-activityindicator" size={12} />
                        </OptionMenuLeft>
                        <OptionMenuTitle>ActivityIndicator</OptionMenuTitle>
                        <OptionMenuRight />
                      </OptionMenu>
                    </Option>
                    <Option
                      id="slider"
                      onClick={() => {
                        action(() => {
                          executeAndSkip(new SetDrawType(session, "slider"));
                        });
                      }}
                    >
                      <OptionMenu data-cypress-id="toolbar-insert-slider">
                        <OptionMenuLeft>
                          <Icon name="icon-slider" size={12} />
                        </OptionMenuLeft>
                        <OptionMenuTitle>Slider</OptionMenuTitle>
                        <OptionMenuRight />
                      </OptionMenu>
                    </Option>
                    <Option
                      id="mapView"
                      onClick={() => {
                        action(() => {
                          executeAndSkip(new SetDrawType(session, "mapView"));
                        });
                      }}
                    >
                      <OptionMenu data-cypress-id="toolbar-insert-map">
                        <OptionMenuLeft>
                          <Icon name="icon-map" size={12} />
                        </OptionMenuLeft>
                        <OptionMenuTitle>Map</OptionMenuTitle>
                        <OptionMenuRight />
                      </OptionMenu>
                    </Option>
                    {/* <Option
                      id="tabView"
                      onClick={() => {
                        action(() => {
                          executeAndSkip(new SelectTool(session, "draw"));
                          executeAndSkip(new SetDrawType(session, "tabView"));
                        });
                      }}
                    >
                      <OptionMenu>
                        <OptionMenuLeft>
                          <Icon name="icon-tab" size={12} />
                        </OptionMenuLeft>
                        <OptionMenuTitle>Tab View</OptionMenuTitle>
                        <OptionMenuRight />
                      </OptionMenu>
                    </Option> */}
                    {/* <Option
                      id="swiper"
                      onClick={() => {
                        action(() => {
                          executeAndSkip(new SelectTool(session, "draw"));
                          executeAndSkip(new SetDrawType(session, "swiper"));
                        });
                      }}
                    >
                      <OptionMenu>
                        <OptionMenuLeft>
                          <Icon name="icon_carousel" size={12} />
                        </OptionMenuLeft>
                        <OptionMenuTitle>Carousel</OptionMenuTitle>
                        <OptionMenuRight />
                      </OptionMenu>
                    </Option>
                    <Option
                      id="flatList"
                      onClick={() => {
                        action(() => {
                          executeAndSkip(new SelectTool(session, "draw"));
                          executeAndSkip(new SetDrawType(session, "flatList"));
                        });
                      }}
                    >
                      <OptionMenu>
                        <OptionMenuLeft>
                          <Icon name="icon_list" size={12} />
                        </OptionMenuLeft>
                        <OptionMenuTitle>List</OptionMenuTitle>
                        <OptionMenuRight />
                      </OptionMenu>
                    </Option> */}
                    <Option last>
                      <OptionMenu
                        data-cypress-id="toolbar-insert-reusable-components"
                        disabled={symbols.length === 0}
                      >
                        <OptionMenuLeft>
                          <Icon name="symbol" size={12} />
                        </OptionMenuLeft>
                        <OptionMenuTitle>Reusable Components</OptionMenuTitle>
                        <OptionMenuRight>
                          <Icon name="right-arrow" size={12} />
                        </OptionMenuRight>
                      </OptionMenu>
                      <MenuDropdown
                        disabled={symbols.length === 0}
                        style={{ maxHeight: 250 }}
                      >
                        <Scrollbars autoHide autoHeight>
                          <Pane
                            data-cypress-id="toolbar-insert-reusable-components-items"
                            uiBackground={600}
                          >
                            {this.renderMenuItems()}
                          </Pane>
                        </Scrollbars>
                      </MenuDropdown>
                    </Option>
                  </MenuDropdown>
                )}
              </Option>
            </MenuDropdown>
            <Tools session={session} currentStage={currentStage} />
          </>
        )}
      </>
    );
  }
}
// import * as React from "react";
// import {
//   Icon,
//   OptionNew as Option,
//   OptionMenuNew as OptionMenu,
//   MenuDropdownNew as MenuDropdown,
//   OptionMenuLeftNew as OptionMenuLeft,
//   OptionMenuTitleNew as OptionMenuTitle,
//   OptionMenuRightNew as OptionMenuRight,
//   Text,
//   MenuRenderer
// } from "components-x";
// import { Session } from "../../../../models/Session";
// import SelectTool from "../../../../Commands/Session/SelectTool";
// import SetDrawType from "../../../../Commands/Session/SetDrawType";
// import Stage from "../../../../models/Stage";
// import InsertSymbolInstance from "../../../../Commands/Symbols/InsertSymbolInstance";
// import AddImage from "../../../../Commands/Image/AddImage";
// import { AddNewArtboard } from "../../../../Commands";
// import { action } from "model";
// import Tools from "../Tools";
// import { Utils } from "utils";
// import ExternalComponentsRenderer from "../../ExternalComponentsRenderer";

// type propType = { session: Session; currentStage: Stage };
// export default class InsertToolbar extends React.PureComponent<propType, any> {
//   constructor(props: any) {
//     super(props);
//   }
//   onUpdate = () => {
//     this.forceUpdate();
//   };
//   componentDidMount() {
//     this.props.session.domain.on("files", this.onUpdate);
//     this.props.currentStage.tools.on("selectedTool", this.onUpdate);
//     this.props.session.on(
//       ["projectLock", "displayMode", "MenuProvider"],
//       this.onUpdate
//     );
//   }
//   componentDidUpdate(prevProps: propType) {
//     if (prevProps.currentStage !== this.props.currentStage) {
//       prevProps.currentStage.tools.off("selectedTool", this.onUpdate);
//       this.props.currentStage.tools.on("selectedTool", this.onUpdate);
//     }
//   }
//   componentWillUnmount() {
//     this.props.session.domain.off("files", this.onUpdate);
//     this.props.currentStage.tools.off("selectedTool", this.onUpdate);
//     this.props.session.off(
//       ["projectLock", "displayMode", "MenuProvider"],
//       this.onUpdate
//     );
//   }
//   renderMenuItems(): any {
//     let session = this.props.session;
//     let currentStageId = this.props.session.currentStage.id;
//     let symbols: any = session.domain.getSymbols();
//     const menuItems = symbols.map((symbol: any, index: any) => {
//       if (
//         symbol.path === currentStageId ||
//         (session.currentRootLayer &&
//           Utils.checkIfCircularSymbol(
//             session,
//             symbol,
//             session.currentRootLayer
//           ))
//       ) {
//         return null;
//       }
//       return (
//         <Option
//           key={index}
//           onClick={() => {
//             action(() => {
//               session.commandManager.execute(
//                 new InsertSymbolInstance(session, symbol)
//               );
//             });
//           }}
//         >
//           <OptionMenu style={{ width: "100%", fontSize: 14 }}>
//             <Text inline>{symbol.path.split("/").pop()}</Text>
//           </OptionMenu>
//         </Option>
//       );
//     });
//     return menuItems;
//   }
//   render() {
//     const { session, currentStage } = this.props;
//     let symbols: any = session.domain.getSymbols();
//     const executeAndSkip = session.commandManager.executeAndSkip;
//     return (
//       <>
//         <ExternalComponentsRenderer
//           session={this.props.session}
//           placement="insert-toolbar:before"
//         />
//         {!session.readonly && (
//           <>
//             <MenuRenderer
//               trigger={(triggerProps: any) => (
//                 <Icon
//                   {...triggerProps}
//                   data-cypress-id="toolbar-insert"
//                   className="p-1"
//                   actionBtn
//                   uiBackground={700}
//                   name="insert-background"
//                   size={30}
//                   style={{
//                     borderRadius: "2px",
//                     cursor: "pointer",
//                     marginLeft: 10,
//                     marginRight: 16,
//                     marginTop: 4
//                   }}
//                   data-tip="Add a new layer to the canvas"
//                 />
//               )}
//             >
//               <MenuDropdown uiSize={190}>
//                 {this.props.session.isPluginLoaded("MenuProvider")
//                   ? this.props.session.executeFunction(
//                       "MenuProvider.renderExternalMenu",
//                       "insert-toolbar-menu:before"
//                     )
//                   : null}
//                 <Option
//                   id="artboard"
//                   disabled={
//                     this.props.session &&
//                     ((this.props.session.currentStage &&
//                       this.props.session.currentStage.id !== "artboard") ||
//                       this.props.session.displayMode !== "stage")
//                   }
//                   onClick={() => {
//                     if (
//                       this.props.session &&
//                       this.props.session.currentStage &&
//                       this.props.session.currentStage.id === "artboard"
//                     ) {
//                       action(() => {
//                         if (session.displayMode === "stage") {
//                           session.commandManager.execute(
//                             new AddNewArtboard(
//                               session,
//                               undefined,
//                               "artboard",
//                               true,
//                               true
//                             )
//                           );
//                         }
//                       });
//                     }
//                   }}
//                 >
//                   <OptionMenu data-cypress-id="toolbar-insert-artboard">
//                     <OptionMenuLeft>
//                       <Icon name="artboard" size={12} />
//                     </OptionMenuLeft>
//                     <OptionMenuTitle>Artboard</OptionMenuTitle>
//                     <OptionMenuRight />
//                   </OptionMenu>
//                 </Option>
//                 <Option>
//                   <OptionMenu data-cypress-id="toolbar-insert-shape">
//                     <OptionMenuLeft>
//                       <Icon name="rectangle-shape" size={12} />
//                     </OptionMenuLeft>
//                     <OptionMenuTitle>Shape</OptionMenuTitle>
//                     <OptionMenuRight>
//                       <Icon name="right-arrow" size={12} />
//                     </OptionMenuRight>
//                   </OptionMenu>
//                   <MenuDropdown child uiSize={190}>
//                     <Option
//                       id="view"
//                       onClick={() => {
//                         action(() => {
//                           executeAndSkip(new SelectTool(session, "view"));
//                         });
//                       }}
//                     >
//                       <OptionMenu data-cypress-id="toolbar-insert-shape-rectangle">
//                         <OptionMenuLeft>
//                           <Icon name="rectangle-shape" size={12} />
//                         </OptionMenuLeft>
//                         <OptionMenuTitle>Rectangle</OptionMenuTitle>
//                         <OptionMenuRight>R</OptionMenuRight>
//                       </OptionMenu>
//                     </Option>
//                     <Option
//                       id="ellipse"
//                       onClick={() => {
//                         action(() => {
//                           executeAndSkip(new SelectTool(session, "ellipse"));
//                         });
//                       }}
//                     >
//                       <OptionMenu data-cypress-id="toolbar-insert-shape-ellipse">
//                         <OptionMenuLeft>
//                           <Icon name="ellipse-shape" size={12} />
//                         </OptionMenuLeft>
//                         <OptionMenuTitle>Ellipse</OptionMenuTitle>
//                         <OptionMenuRight>E</OptionMenuRight>
//                       </OptionMenu>
//                     </Option>
//                   </MenuDropdown>
//                 </Option>
//                 <Option
//                   id="text"
//                   onClick={() => {
//                     action(() => {
//                       executeAndSkip(new SelectTool(session, "text"));
//                     });
//                   }}
//                 >
//                   <OptionMenu data-cypress-id="toolbar-insert-text">
//                     <OptionMenuLeft>
//                       <Icon name="text" size={12} />
//                     </OptionMenuLeft>
//                     <OptionMenuTitle>Text</OptionMenuTitle>
//                     <OptionMenuRight />
//                   </OptionMenu>
//                 </Option>
//                 <Option
//                   id="icon"
//                   onClick={() => {
//                     action(() => {
//                       executeAndSkip(new SelectTool(session, "icon"));
//                     });
//                   }}
//                 >
//                   <OptionMenu data-cypress-id="toolbar-insert-icon">
//                     <OptionMenuLeft>
//                       <Icon name="icon" size={12} />
//                     </OptionMenuLeft>
//                     <OptionMenuTitle>Icon</OptionMenuTitle>
//                     <OptionMenuRight />
//                   </OptionMenu>
//                 </Option>
//                 <Option id="image">
//                   <OptionMenu
//                     data-cypress-id="toolbar-insert-image"
//                     style={{ width: "inherit" }}
//                   >
//                     <OptionMenuLeft>
//                       <Icon name="image" size={12} />
//                     </OptionMenuLeft>
//                     <OptionMenuTitle>Image</OptionMenuTitle>
//                     <OptionMenuRight />
//                     <input
//                       type="file"
//                       id="input"
//                       data-cypress-id="image-input"
//                       accept="image/*"
//                       style={{
//                         position: "absolute",
//                         left: 5,
//                         top: 0,
//                         opacity: 0,
//                         height: 30,
//                         width: "96%"
//                       }}
//                       onChange={(e: any) => {
//                         if (e.target.files && e.target.files[0]) {
//                           session
//                             .checkImageType(e.target.files[0])
//                             .then(result => {
//                               //
//                               session.commandManager.execute(
//                                 new AddImage(session, [result])
//                               );
//                             })
//                             .catch(err => {
//                               //
//                               session.notificationManager.notifyError(
//                                 "Invalid file format. Use .png, .jpg, .gif or .sketch",
//                                 "File format"
//                               );
//                             });
//                         }
//                       }}
//                     />
//                   </OptionMenu>
//                 </Option>
//                 <Option
//                   id="textInput"
//                   onClick={() => {
//                     action(() => {
//                       executeAndSkip(new SetDrawType(session, "textInput"));
//                     });
//                   }}
//                 >
//                   <OptionMenu data-cypress-id="toolbar-insert-text-input">
//                     <OptionMenuLeft>
//                       <Icon name="text" size={12} />
//                     </OptionMenuLeft>
//                     <OptionMenuTitle>TextInput</OptionMenuTitle>
//                     <OptionMenuRight />
//                   </OptionMenu>
//                 </Option>
//                 <Option
//                   id="touchableOpacity"
//                   onClick={() => {
//                     action(() => {
//                       executeAndSkip(
//                         new SetDrawType(session, "touchableOpacity")
//                       );
//                     });
//                   }}
//                 >
//                   <OptionMenu data-cypress-id="toolbar-insert-touchable-opacity">
//                     <OptionMenuLeft>
//                       <Icon name="rectangle-shape" size={12} />
//                     </OptionMenuLeft>
//                     <OptionMenuTitle>TouchableOpacity</OptionMenuTitle>
//                     <OptionMenuRight />
//                   </OptionMenu>
//                 </Option>
//                 <Option
//                   id="scrollView"
//                   onClick={() => {
//                     action(() => {
//                       executeAndSkip(new SetDrawType(session, "scrollView"));
//                     });
//                   }}
//                 >
//                   <OptionMenu data-cypress-id="toolbar-insert-scroll-view">
//                     <OptionMenuLeft>
//                       <Icon name="scrollview" size={12} />
//                     </OptionMenuLeft>
//                     <OptionMenuTitle>ScrollView</OptionMenuTitle>
//                     <OptionMenuRight />
//                   </OptionMenu>
//                 </Option>
//                 <Option
//                   id="switch"
//                   onClick={() => {
//                     action(() => {
//                       executeAndSkip(new SetDrawType(session, "switch"));
//                     });
//                   }}
//                 >
//                   <OptionMenu data-cypress-id="toolbar-insert-switch">
//                     <OptionMenuLeft>
//                       <Icon name="icon-switch" size={12} />
//                     </OptionMenuLeft>
//                     <OptionMenuTitle>Switch</OptionMenuTitle>
//                     <OptionMenuRight />
//                   </OptionMenu>
//                 </Option>
//                 <Option
//                   id="activityIndicator"
//                   onClick={() => {
//                     action(() => {
//                       executeAndSkip(
//                         new SetDrawType(session, "activityIndicator")
//                       );
//                     });
//                   }}
//                 >
//                   <OptionMenu data-cypress-id="toolbar-insert-activity-indicator">
//                     <OptionMenuLeft>
//                       <Icon name="icon-activityindicator" size={12} />
//                     </OptionMenuLeft>
//                     <OptionMenuTitle>ActivityIndicator</OptionMenuTitle>
//                     <OptionMenuRight />
//                   </OptionMenu>
//                 </Option>
//                 <Option
//                   id="slider"
//                   onClick={() => {
//                     action(() => {
//                       executeAndSkip(new SetDrawType(session, "slider"));
//                     });
//                   }}
//                 >
//                   <OptionMenu data-cypress-id="toolbar-insert-slider">
//                     <OptionMenuLeft>
//                       <Icon name="icon-slider" size={12} />
//                     </OptionMenuLeft>
//                     <OptionMenuTitle>Slider</OptionMenuTitle>
//                     <OptionMenuRight />
//                   </OptionMenu>
//                 </Option>
//                 <Option
//                   id="mapView"
//                   onClick={() => {
//                     action(() => {
//                       executeAndSkip(new SetDrawType(session, "mapView"));
//                     });
//                   }}
//                 >
//                   <OptionMenu data-cypress-id="toolbar-insert-map">
//                     <OptionMenuLeft>
//                       <Icon name="icon-map" size={12} />
//                     </OptionMenuLeft>
//                     <OptionMenuTitle>Map</OptionMenuTitle>
//                     <OptionMenuRight />
//                   </OptionMenu>
//                 </Option>
//                 {/* <Option
//                       id="tabView"
//                       onClick={() => {
//                         action(() => {
//                           executeAndSkip(new SelectTool(session, "draw"));
//                           executeAndSkip(new SetDrawType(session, "tabView"));
//                         });
//                       }}
//                     >
//                       <OptionMenu>
//                         <OptionMenuLeft>
//                           <Icon name="icon-tab" size={12} />
//                         </OptionMenuLeft>
//                         <OptionMenuTitle>Tab View</OptionMenuTitle>
//                         <OptionMenuRight />
//                       </OptionMenu>
//                     </Option> */}
//                 {/* <Option
//                       id="swiper"
//                       onClick={() => {
//                         action(() => {
//                           executeAndSkip(new SelectTool(session, "draw"));
//                           executeAndSkip(new SetDrawType(session, "swiper"));
//                         });
//                       }}
//                     >
//                       <OptionMenu>
//                         <OptionMenuLeft>
//                           <Icon name="icon_carousel" size={12} />
//                         </OptionMenuLeft>
//                         <OptionMenuTitle>Carousel</OptionMenuTitle>
//                         <OptionMenuRight />
//                       </OptionMenu>
//                     </Option>
//                     <Option
//                       id="flatList"
//                       onClick={() => {
//                         action(() => {
//                           executeAndSkip(new SelectTool(session, "draw"));
//                           executeAndSkip(new SetDrawType(session, "flatList"));
//                         });
//                       }}
//                     >
//                       <OptionMenu>
//                         <OptionMenuLeft>
//                           <Icon name="icon_list" size={12} />
//                         </OptionMenuLeft>
//                         <OptionMenuTitle>List</OptionMenuTitle>
//                         <OptionMenuRight />
//                       </OptionMenu>
//                     </Option> */}
//                 <Option>
//                   <OptionMenu
//                     data-cypress-id="toolbar-insert-reusable-components"
//                     disabled={symbols.length === 0}
//                   >
//                     <OptionMenuLeft>
//                       <Icon name="symbol" size={12} />
//                     </OptionMenuLeft>
//                     <OptionMenuTitle>Reusable Components</OptionMenuTitle>
//                     <OptionMenuRight>
//                       <Icon name="right-arrow" size={12} />
//                     </OptionMenuRight>
//                   </OptionMenu>
//                   {symbols.length ? (
//                     <MenuDropdown child autoWrap uiSize={190}>
//                       {this.renderMenuItems()}
//                     </MenuDropdown>
//                   ) : null}
//                 </Option>
//                 {this.props.session.isPluginLoaded("MenuProvider")
//                   ? this.props.session.executeFunction(
//                       "MenuProvider.renderExternalMenu",
//                       "insert-toolbar-menu:after"
//                     )
//                   : null}
//               </MenuDropdown>
//             </MenuRenderer>
//             <Tools session={session} currentStage={currentStage} />
//           </>
//         )}
//         <ExternalComponentsRenderer
//           session={this.props.session}
//           placement="insert-toolbar:after"
//         />
//       </>
//     );
//   }
// }
