import * as React from "react";
import {
  WrapperDiv,
  FormGroup,
  PropertyHeader,
  Icon,
  FormCol,
  Text
} from "components-x";
import {
  materialComponentLibrary,
  cupertinoComponentLibrary
} from "shared-components";
import { IEvent } from "common-interfaces";
import { Session } from "session";
import { map, get, isNil } from "lodash";
import { InsertSharedComponent } from "../../../../Commands";

const path = require("path");
import { Utils } from "utils";
import { action } from "model";
import { BX_PREVIEW_FILE_PATH } from "bx-constants";
import { ComponentBlock } from "./ComponentBlock";
interface PropType {
  category?: string;
  library?: string;
  currentSubDesign?: string;
  onEvent: (e: IEvent) => void;
  subHeader: any;
  sharedComponentsSession?: Session;
  session: Session;
  external?: boolean;
}
export default class ComponentContent extends React.PureComponent<
  PropType,
  { loading: boolean }
> {
  state = {
    loading: true
  };
  stageContainer: HTMLElement | null;

  onUpdate = (keys: any) => {
    if (!this.props.external) {
      this.forceUpdate();
    }
  };

  componentWillUnmount() {
    this.props.session.domain.off("files", this.onUpdate);
    this.props.session.off("currentStage", this.onUpdate);
  }
  async componentDidMount() {
    this.props.session.domain.on("files", this.onUpdate);
    this.props.session.on("currentStage", this.onUpdate);
    if (this.props.external) {
      if (!this.props.sharedComponentsSession) {
        return;
      }
      await Utils.asyncForEach(
        this.props.subHeader,

        async (componentDefinition: any) => {
          action(async () => {
            const stage = this.props.sharedComponentsSession!.stages.get(
              get(componentDefinition, "template.import.packageName")
            );
            if (!isNil(stage)) {
              return;
            }
            this.props.sharedComponentsSession!.commandManager.execute(
              new InsertSharedComponent(
                this.props.sharedComponentsSession!,
                this.props.library === "Material"
                  ? materialComponentLibrary
                  : cupertinoComponentLibrary,
                this.props.category!,
                componentDefinition.name,
                {},
                false
              )
            );
          });
        }
      );

      this.setState({ loading: false });
    }
  }

  render() {
    return (
      <WrapperDiv
        style={{
          display:
            this.props.currentSubDesign === this.props.category
              ? "block"
              : "none"
        }}
      >
        {this.props.external && (
          <PropertyHeader
            uiBackground={800}
            bordered
            style={{
              paddingLeft: 0,
              paddingTop: 3,
              paddingBottom: 3,
              marginLeft: 12
            }}
            uiSize="m"
            onClick={() => {
              this.props.onEvent({
                type: "setCurrentSubDesign",
                payload: {
                  currentSubDesign: ""
                },
                originalEvent: null,
                target: null
              });
            }}
          >
            <Icon name="icon-left" size={14} />
            <FormCol>
              <Text uiSize="s">{this.props.category}</Text>
            </FormCol>
          </PropertyHeader>
        )}
        <FormGroup
          noPadding
          paddingTop
          paddingBottom
          flexDirection="row"
          flexWrap="wrap"
          style={{
            justifyContent: "space-between",
            padding: 12
            // backgroundColor: "white"
          }}
        >
          {this.props.external ? (
            !this.state.loading ? (
              map(this.props.subHeader, (file: any, key2: number) => {
                let sharedComponentStage;
                if (
                  this.props.sharedComponentsSession &&
                  file &&
                  file.template
                ) {
                  sharedComponentStage = this.props.sharedComponentsSession.thumbnailStages.get(
                    file.template.import.packageName
                  );
                }
                return (
                  <ComponentBlock
                    fileName={file.name}
                    key={`component-block-${key2}`}
                    library={this.props.library}
                    category={this.props.category}
                    session={this.props.session}
                    onEvent={this.props.onEvent}
                    external={this.props.external ? this.props.external : false}
                    stage={sharedComponentStage}
                  />
                );
              })
            ) : (
              <Text>Loading...</Text>
            )
          ) : (
            Array.from(this.props.session.thumbnailStages, ([id, stage]) => {
              if (
                id.includes("layer:") === false &&
                id !== "artboard" &&
                id !== "symbol" &&
                id !== BX_PREVIEW_FILE_PATH
              ) {
                return (
                  <ComponentBlock
                    fileName={path.basename(id, ".js")}
                    key={`component-block-${id}`}
                    library={this.props.library}
                    category={this.props.category}
                    session={this.props.session}
                    onEvent={this.props.onEvent}
                    external={this.props.external ? this.props.external : false}
                    stage={stage}
                  />
                );
              } else {
                return null;
              }
            })
          )}
        </FormGroup>
      </WrapperDiv>
    );
  }
}
