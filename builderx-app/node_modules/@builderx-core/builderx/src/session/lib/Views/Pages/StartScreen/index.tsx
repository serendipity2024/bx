import * as React from "react";
import { cloneDeep, isEmpty } from "lodash";
import { NewProject } from "../../../Commands";
import { Session } from "../../../models/Session";
import { Spinner, WrapperDiv } from "components-x";
import FileDefinition from "../../../componentJSON/File";
import { action } from "model";
import { CreateNewProject } from "src/session/lib/Commands/CommandServices/CreateNewProject";

type propType = {
  session: Session;
};
export default class StartScreenContainer extends React.Component<
  propType,
  any
> {
  async componentDidMount() {
    // const urlPath = window.location.pathname.split("/");
    // const projectId = urlPath[urlPath.length - 1];

    // if (isEmpty(projectId) || projectId === "app") {
    //   const isNewProjectCreated = await CreateNewProject(this.props.session);
    //   if (!isNewProjectCreated) {
    //     return;
    //   }
    // }
    // setTimeout(() => {
    // await this.newProject();
    // }, 0);
    // } else {
    // Open project
    this.openProject();
    // }
    // this.props.session.commandManager.executeAndSkip(
    //   new SetPageRoute(this.props.session, "workspace")
    // );
  }
  openWeb(urlString: string) {
    this.props.session.drivers.appLifeCycleService.openWeb(urlString);
  }
  openWebsiteClick = () => {
    this.openWeb(this.props.session.envConstants.BUILDERX_API);
  };

  openSampleApp = async (sampleApp: any) => {
    // this.setState({
    //   recentProjectButtonsEnabled: false
    // });
    // const success: boolean = (await this.props.builderX.openSampleApp(
    //   sampleApp,
    //   false,
    //   true
    // )) as any;
    // if (success === false) {
    //   this.setState({
    //     recentProjectButtonsEnabled: true
    //   });
    // }
  };
  openIssueTab = () => {
    // this.props.builderX.workspace.modalRouter.changeRoute("issue");
  };

  openFeedbackTab = () => {
    // this.props.builderX.workspace.modalRouter.changeRoute("feedback");
  };
  newProject = async () => {
    // action(() => {
    const fileLayerJSON = cloneDeep(FileDefinition.template);
    // this.props.session.commandManager.executeAndSkip(
    await new NewProject(this.props.session, fileLayerJSON).execute();
    // );
    // });
  };
  openProject = async () => {
    // console.log("hello here @@@");
    // action(async () => {
    //   await this.props.session.commandManager.executeAndSkip(
    //     new OpenExistingProject(this.props.session)
    //   );
    // });
  };
  render() {
    return (
      <WrapperDiv
        uiBackground={900}
        style={{
          position: "absolute",
          top: 0,
          bottom: 0,
          left: 0,
          right: 0,
          margin: "auto",
          textAlign: "center",
          justifyContent: "center",
          alignItems: "center",
          display: "flex"
        }}
      >
        <Spinner uiSize={"l"} color="white" />
      </WrapperDiv>
    );

    // return (
    //   <StartScreen
    //     newProject={this.newProject}
    //     openExistingProject={this.openExistingProject} // setNewProject={builderX.workspace.setNewProject}
    //     // openWebsiteClick={this.openWebsiteClick}
    //     // expired={""} // this.state.expired
    //     appVersion={this.props.session.drivers.appLifeCycleService.getAppVersion()}
    //     recentProjectsList={this.props.session.drivers.recentProjects}
    //     recentProjectButtonsEnabled={true}
    //     openRecentProject={this.openRecentProject}
    //     // sampleApps={builderX.getSampleApps()}
    //     // openSampleApp={this.openSampleApp}
    //   />
    // );
  }
}
