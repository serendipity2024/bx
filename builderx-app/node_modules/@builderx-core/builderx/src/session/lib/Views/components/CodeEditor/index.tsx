import { IEvent } from "common-interfaces";
import { FormGroup, Pane, Text, WrapperDiv, IOSSpinner } from "components-x";
import { File } from "domain-x";
import * as React from "react";
import { BX_PREVIEW_FILE_PATH } from "bx-constants";
import MonacoEditor from "react-monaco-editor";
import { Session } from "../../../models/Session";
import { debounce, get, throttle } from "lodash";
import { action } from "model";
import { SaveProject } from "../../../Commands";

const path = require("path");
type propType = {
  width: number;
  session: Session;
  onEvent: (event: IEvent) => void;
};
class CodeEditor extends React.PureComponent<propType, any> {
  monacoRef: any;
  syncCode: boolean = true;
  oldContent: any;
  oldScrollInfo: any;
  error: any = null;
  editorPrevState: {
    cursorPos: { lineNumber: number; column: number };
    scrollTop: number;
    scrollLeft: number;
  };
  previousSelectedFile: File;
  previousSelectedEngine: string;
  codeInEditor: string;
  updateDesignWithCode = debounce(
    () => {
      try {
        if (!(this.props.session.envConfig.env === "development")) {
          return;
        }
        if (this.getFile()) {
          this.getFile().content = this.codeInEditor;
        }
      } catch (Error) {
        console.log("Invalid JSON");
      }
    },
    1000,
    {
      trailing: true
    }
  );

  state = {
    showOldCode: false
  };

  resizeEditor = throttle(() => {
    if (this.monacoRef) {
      this.monacoRef.editor.layout();
    }
  }, 150);

  onCodeChange = (newValue: string, event: any) => {
    if (this.props.session.readonly) {
      return;
    }
    try {
      if (!(this.props.session.envConfig.env === "development")) {
        return;
      }
      if (this.getFile()) {
        this.editorPrevState = {
          cursorPos: this.monacoRef.editor.getPosition(),
          scrollTop: this.monacoRef.editor.getScrollTop(),
          scrollLeft: this.monacoRef.editor.getScrollLeft()
        };
        this.codeInEditor = newValue;
        this.updateDesignWithCode();
      }
    } catch (Error) {
      console.log("Invalid JSON");
    }
  };
  componentDidMount() {
    this.props.session.on(
      ["selectedFile", "codeEngine", "currentFileCode", "shouldUpdateCode"],
      this.onUpdate
    );
    this.props.session.on("projectLock", this.onUpdate);
    const file = this.getFile();
    if (file) {
      file.on("content", this.onUpdate);
      file.on("isProcessing", this.onUpdate);
      this.previousSelectedFile = file;
      this.codeInEditor = file.content;
      this.previousSelectedEngine = this.props.session.codeEngineName;
    }
  }
  componentDidUpdate(prevProps: any) {
    this.monacoRef.editor.getModel().updateOptions({ tabSize: 2 });
    const file = this.getFile();
    if (this.previousSelectedEngine !== this.props.session.codeEngineName) {
      this.monacoRef.editor.setScrollTop(0);
      this.monacoRef.editor.setScrollLeft(0);
      this.previousSelectedEngine = this.props.session.codeEngineName;
    }
    if (file !== this.previousSelectedFile) {
      this.monacoRef.editor.setScrollTop(0);
      this.monacoRef.editor.setScrollLeft(0);
      if (this.previousSelectedFile) {
        this.previousSelectedFile.off("content", this.onUpdate);
        this.previousSelectedFile.off("isProcessing", this.onUpdate);
      }
      if (file) {
        file.on("content", this.onUpdate);
        file.on("isProcessing", this.onUpdate);
        this.previousSelectedFile = file;
        this.codeInEditor = file.content;
      }
    }
  }

  componentWillUnmount() {
    const file = this.getFile();
    if (file) {
      this.props.session.off(
        ["selectedFile", "codeEngine", "currentFileCode", "shouldUpdateCode"],
        this.onUpdate
      );
      file.off("content", this.onUpdate);
      file.off("isProcessing", this.onUpdate);
    }

    this.props.session.off("projectLock", this.onUpdate);
  }

  onUpdate = (key: string) => {
    if (this.syncCode) {
      this.forceUpdate();
    }
  };
  handleNativeEvents(editor: any) {
    let keyCodeToHandle: number[] = [49]; // Z Y C
    editor.onDidCreateEditor((event: any) => {
      event.onKeyDown((keyEvent: any) => {
        // Ctrl Z || Ctrl Y || Cmd Ctrl Z
        if (
          (keyEvent.metaKey || keyEvent.ctrlKey) &&
          keyCodeToHandle.indexOf(keyEvent.keyCode) !== -1
        ) {
          if (keyEvent.keyCode === 49) {
            keyEvent.preventDefault();
            action(async () => {
              await this.props.session.commandManager.executeAndSkip(
                new SaveProject(this.props.session)
              );
            });
          }
        }
      });
    });
  }

  shouldComponentUpdate() {
    return this.syncCode;
  }
  editorWillMount = (monaco: any) => {
    this.handleNativeEvents(monaco.editor);
  };
  editorDidMount = (monaco: any) => {
    monaco.onDidBlurEditorText(() => {
      this.syncCode = true;
      this.props.session.shouldDisableAutoSave(false);
      this.forceUpdate();
    });
    monaco.onDidFocusEditorText(() => {
      this.syncCode = false;
      this.props.session.shouldDisableAutoSave(true);
    });

    window.document.addEventListener("mousemove", (e: any) => {
      const className = get(e, "target.className", "");
      if (
        className &&
        className.indexOf &&
        (className.indexOf("layer-preview-resizer-pane") !== -1 ||
          className.indexOf("right-panel-splitpane-resizer") !== -1)
      ) {
        this.resizeEditor();
      }
    });
    setTimeout(() => {
      this.resizeEditor();
    }, 0);
  };

  getFile() {
    const { session } = this.props;
    const showPreviewLayerCode =
      session.getLayersFromSelectedLayerCollection().length > 0 &&
      session.getLayersFromSelectedLayerCollection()[0].type !== "root";

    if (showPreviewLayerCode) {
      const file = session.domain.files.get(BX_PREVIEW_FILE_PATH);
      if (file) {
        return file;
      }
    }
    return session.selectedFile;
  }

  getFileName(): string {
    const file = this.getFile();
    if (file) {
      return path.basename(file.path);
    }
    return "index.js";
  }

  render() {
    return (
      <Pane uiBackground={800} id="app-tutorial-code-editor" className="pt-2">
        {/* <Bar
          name="bx-codeEditor-btn"
          onClick={() => this.onClick()}
          uiBackground={700}
          uiSize={"xs"}
          padder
        >
          <WrapperDiv style={{ paddingTop: 5, paddingBottom: 5 }}>
            <Text uiSize="xs" bold uppercase letterSpacing>
              CODE
            </Text>
            {this.error && <Text>{this.error}</Text>}
          </WrapperDiv>
        </Bar> */}
        <React.Fragment>
          <MonacoEditor
            language="javascript"
            theme="vs-dark"
            value={this.props.session.currentFileCode}
            ref={(ref: any) => {
              if (ref) {
                this.monacoRef = ref;
              }
            }}
            options={{
              fontSize: 14,
              readOnly: !(this.props.session.envConfig.env === "development"),
              minimap: {
                enabled: false
              }
            }}
            onChange={this.onCodeChange}
            editorWillMount={this.editorWillMount}
            editorDidMount={this.editorDidMount}
          />
          {!this.props.session.shouldUpdateCode ? (
            <WrapperDiv
              style={{
                width: "100%",
                height: "50%",
                background: "transparent",
                position: "absolute",
                top: 140,
                zIndex: 2
              }}
              onClick={(e: any) => {
                e.preventDefault();
                e.stopPropagation();
              }}
            >
              <FormGroup
                style={{
                  justifyContent: "center",
                  alignItems: "center",
                  display: "flex",
                  height: "100%"
                }}
              >
                <IOSSpinner style={{ height: 60, width: 40 }} color={"white"} />
                <Text style={{ zIndex: 2, padding: 10 }}>
                  Generating Code. Please wait...
                </Text>
              </FormGroup>
            </WrapperDiv>
          ) : null}
        </React.Fragment>
      </Pane>
    );
  }
}

export default CodeEditor;
