import * as React from "react";
import { IEvent } from "common-interfaces";
import {
  Bar,
  Col,
  Grid,
  Pane,
  SplitPane,
  Tab,
  TabHeader,
  TabMenu,
  Tabs,
  Text,
  WrapperDiv,
  Button
} from "components-x";
import { MinFileSize, Prompt } from "dialog-x";
import { File as DomainFile } from "domain-x";
import { find, get } from "lodash";
import { action } from "model";
import { Utils } from "utils";
import { RenameFileName, ChangeDisplayMode } from "../../../Commands";
import AddNewArtboard from "../../../Commands/File/AddNewArtboard";
import CloseCodeEditor from "../../../Commands/Session/CloseCodeEditor";
import SetViewportSize from "../../../Commands/Session/SetViewportSize";
import SetZoom from "../../../Commands/Session/SetZoom";
import ShowCodeEditor from "../../../Commands/Session/ShowCodeEditor";
import ToggleCodeEditor from "../../../Commands/Session/ToggleCodeEditor";
import LockProject from "../../../Commands/Session/LockProject";
import InsertSharedComponent from "../../../Commands/SharedComponents/InsertSharedComponent";
import SetDraggedSharedComponent from "../../../Commands/SharedComponents/SetDraggedSharedComponent";
import InsertSymbolInstance from "../../../Commands/Symbols/InsertSymbolInstance";
import RegistryComponent from "../../../models/Common/RegistryComponent";
import { Session } from "../../../models/Session";
import Stage from "../../../models/Stage";
import HeaderPanel from "../Panels/HeaderPanel";
import HeaderRightPanel from "../Panels/HeaderRightPanel";
import RightPanelWithCodeEditor from "../Panels/RightPanelWithCodeEditor";
import StageToolbarPanel from "../Panels/StageToolbarPanel";
import UserAccountPanel from "../Panels/UserAccountPanel";
import NextArtboardPreview from "../../../Commands/Session/NextArtboardPreview";
import PreviousArtboardPreview from "../../../Commands/Session/PreviousArtboardPreview";
import LeftExpandablePane from "./LeftExpandablePanel";
import AppTutorial from "./AppTutorial";
import ContextMenuContainer from "./../ContextMenuContainer";
import urljoin from "url-join";
import ExternalComponentsRenderer from "./../ExternalComponentsRenderer";

export default class SessionComponent extends React.Component<
  {
    session: Session;
    sharedComponentSession: Session;
  },
  any
> {
  prevStage: Stage;
  workSpaceContainer: any;
  stageDesignerRef: HTMLDivElement | null;
  viewPortSplitPane: any;
  workSpaceViewportContainer: any;

  constructor(props: any) {
    super(props);

    this.state = {
      leftPanelOpen: true
    };

    window.addEventListener(
      "mousewheel",
      (e: any) => {
        if (e.ctrlKey) {
          e.preventDefault();
        }
        action(() => {
          if (e.ctrlKey) {
            let currentZoom = e.deltaY;
            let zoom = this.props.session.currentStage.tools.zoom;

            const zoomTo =
              zoom - currentZoom / 100 > 0 ? zoom - currentZoom / 100 : zoom;

            this.props.session.commandManager.executeAndSkip(
              new SetZoom(this.props.session, zoomTo)
            );
          }
        });
      },
      { passive: false }
    );
  }

  onContainerResize = () => {
    action(() => {
      let dom: any = document.querySelector(".viewport-split-pane");

      if (dom) {
        let dims = dom.getBoundingClientRect();
        this.props.session.commandManager.executeAndSkip(
          new SetViewportSize(this.props.session, {
            width: dims.width,
            height: dims.height
          })
        );
      }
    });
  };

  onDelayContentResize = () => {
    setTimeout(() => {
      this.onContainerResize();
    });
  };

  componentDidMount() {
    window.addEventListener("resize", this.onContainerResize);
    this.onDelayContentResize();

    setTimeout(() => {
      action(() => {
        let zoom = this.props.session.calculateZoom();
        this.props.session.commandManager.executeAndSkip(
          new SetZoom(this.props.session, zoom)
        );
        if (
          this.props.session.readonly &&
          this.props.session.editorMode === "code"
        ) {
          this.props.session.commandManager.executeAndSkip(
            new ShowCodeEditor(this.props.session)
          );
        }
      });
      if (this.props.session.readonly) {
        this.props.session.commandManager.executeAndSkip(
          new LockProject(this.props.session)
        );
      }
    });

    this.prevStage = this.props.session.currentStage;
    this.props.session.on("currentStage", this.onUpdate);
    this.props.session.on("showCodeEditor", this.onUpdate);
    this.props.session.on("projectLock", this.onUpdate);
    this.props.session.on("editorLayout", this.onUpdate);
    this.props.session.on("refDebugger", this.onUpdate);

    if (this.stageDesignerRef) {
      this.props.session.stages.forEach(stage => {
        // @ts-ignore

        this.stageDesignerRef.appendChild(stage.canvasContainerDom);

        if (stage.canvasContainerDom.parentNode === document.body) {
          document.body.removeChild(stage.canvasContainerDom);
        }
      });

      setTimeout(() => {
        this.props.session.currentStage.canvas.executeFunction("setScroll", {
          x: 0.5,
          y: 0.5
        });
      });
    }
    document.addEventListener("contextmenu", (mouseEvent: any) => {
      if (!Utils.isEditableInput()) {
        mouseEvent.preventDefault();
      }
    });
  }

  onUpdate = (keys: any) => {
    this.forceUpdate();
  };

  componentWillUpdate() {
    this.onDelayContentResize();
  }

  componentDidUpdate() {
    if (this.prevStage !== this.props.session.currentStage) {
      this.prevStage.tools.off("showCodeEditor", this.onUpdate);
      this.props.session.on("showCodeEditor", this.onUpdate);
      this.prevStage = this.props.session.currentStage;
    }
  }

  componentWillUnmount() {
    this.props.session.off("currentStage", this.onUpdate);
    this.props.session.off("showCodeEditor", this.onUpdate);
    this.props.session.off("projectLock", this.onUpdate);

    this.props.session.off("editorLayout", this.onUpdate);
    this.props.session.off("refDebugger", this.onUpdate);
  }

  changeCodeEditorSize = (e: any): void => {
    this.onDelayContentResize();
  };

  onClickCodeEditorSize = (): void => {
    action(() => {
      this.props.session.commandManager.executeAndSkip(
        new ToggleCodeEditor(this.props.session)
      );
      this.onDelayContentResize();
    });
  };

  getDimension = async () => {
    let dimension: { width?: number; height?: number } = {
      width: undefined,
      height: undefined
    };
    await MinFileSize(100).then(async (result: any) => {
      if (!result || !result.height || !result.width) {
        dimension = await this.getDimension();
      } else {
        dimension = result;
      }
    });
    return dimension;
  };

  renameFileName = async (file: DomainFile) => {
    try {
      let fileName = file.path;
      if (fileName !== undefined && fileName !== "") {
        fileName = fileName.substr(
          fileName.lastIndexOf("/") + 1,
          fileName.length
        );
      }
      const newFileName = await Utils.getFileNameUserInput(
        this.props.session,
        Prompt,
        fileName
      );
      if (newFileName && typeof newFileName === "string") {
        action(() => {
          this.props.session.commandManager.execute(
            new RenameFileName(this.props.session, file, newFileName)
          );
        });
      }
    } catch (e) {
      //
    }
  };

  setLayerHover = () => {
    //
  };
  performOnClick = async (event: any, session: any) => {
    //
  };
  performMouseDown = (event: any, session: any) => {
    //
  };
  performDoubleClick = async (event: any, session: any) => {
    //
  };
  selectCurrentHoveredArtboard(event: any, session: Session) {
    //
  }

  performInsertSymbolInstance = (event: any, session: any) => {
    const file = session.domain.files.get(event.payload.symbolPath);
    if (!file) {
      return;
    }
    this.selectCurrentHoveredArtboard(event, session);

    let rootLayer = session.currentRootLayer;
    if (!rootLayer || !session.selectedSharedComponent) {
      return;
    }

    const rootRenderLayer = rootLayer.getBoundingClientRect();
    const y =
      event.payload.y / session.currentStage.tools.zoom - rootRenderLayer.rootY;
    const x =
      event.payload.x / session.currentStage.tools.zoom - rootRenderLayer.rootX;
    session.commandManager.execute(
      new InsertSymbolInstance(session, file, {
        x: x,
        y: y
      })
    );
  };
  performInsertSharedComponent = async (event: any, session: any) => {
    this.selectCurrentHoveredArtboard(event, session);
    let parentLayer = session.currentRootLayer;
    if (!parentLayer || !session.selectedSharedComponent) {
      return;
    }
    let parentRenderCompiledLayer = parentLayer.getBoundingClientRect();
    let top =
      event.payload.y / session.currentStage.tools.zoom -
      parentRenderCompiledLayer.rootY;
    let left =
      event.payload.x / session.currentStage.tools.zoom -
      parentRenderCompiledLayer.rootX;
    await session.commandManager.execute(
      new InsertSharedComponent(
        session,
        session.selectedSharedComponent.library,
        session.selectedSharedComponent.class,
        session.selectedSharedComponent.name,
        { left, top }
      )
    );
    action(() => {
      session.commandManager.executeAndSkip(
        new SetDraggedSharedComponent(session, undefined)
      );
    });
  };
  onEvent = async (event: IEvent) => {
    const session = this.props.session;
    // DOC: actions common for all modes
    action(async () => {
      switch (event.type) {
        case "onClick":
          // await this.performOnClick(event, session);
          break;
        case "onContextMenu":
          // Sanket added this
          // Do nothing when right click
          break;
        case "onMouseDown":
          // if (event.originalEvent.nativeEvent.which === 1) {
          //   this.performMouseDown(event, session);
          // }
          break;
        case "onDoubleClick":
          // this.performDoubleClick(event, session);
          break;
        case "backToArtboardStage":
          // session.commandManager.execute(
          //   new ChangeScene(
          //     session,
          //     session.previousStageData.currentLayer,
          //     "artboard"
          //   )
          // );
          break;
        case "backToStageMode":
          session.commandManager.execute(
            new ChangeDisplayMode(session, "stage")
          );
          break;
        case "nextArtboard":
          session.commandManager.execute(new NextArtboardPreview(session));
          break;
        case "previousArtboard":
          session.commandManager.execute(new PreviousArtboardPreview(session));
          break;
        default:
          break;
      }
    });
    // DOC: exclusive actions where changes are made
    if (!this.props.session.readonly) {
      action(async () => {
        switch (event.type) {
          case "addLayer":
            // session.commandManager.executeAndSkip(
            //   new AddLayerByType(session, payload)
            // );
            console.error("************ CHeck the code here");
            break;
          case "addFile":
            if (session.displayMode === "stage") {
              session.commandManager.execute(
                new AddNewArtboard(session, undefined, "artboard")
              );
            }
            break;
          case "insertSymbolInstance":
            this.performInsertSymbolInstance(event, session);
            break;
          case "insertSharedComponent":
            this.performInsertSharedComponent(event, session);
            break;
          case "codeEditorUndo":
            session.commandManager.undo();
            break;
          case "codeEditorRedo":
            session.commandManager.redo();
            break;
          default:
            break;
        }
      });
    }
  };

  showCodeEditorPanel = () => {
    action(() => {
      if (!this.props.session.showCodeEditor) {
        this.props.session.commandManager.executeAndSkip(
          new ShowCodeEditor(this.props.session)
        );
        this.onDelayContentResize();
      }
    });
  };
  showPropertiesPanel = () => {
    action(() => {
      this.props.session.commandManager.executeAndSkip(
        new CloseCodeEditor(this.props.session)
      );
      this.onDelayContentResize();
    });
  };

  maximize() {
    window.resizeTo(screen.width, screen.height);
    window.moveTo(0, 0);
  }

  public render() {
    let { session } = this.props;
    let { commandManager } = this.props.session;
    const showCodeEditor = session.showCodeEditor || session.readonly;
    const currentStageId = session.currentStage.id;
    const defaultSymbolDir = session.project.defaultSymbolDirectory;
    const hideCodeEditorPaneCondition =
      (this.props.session.readonly &&
        this.props.session.editorMode !== "code") ||
      (session.readonly &&
        session.editorMode === "code" &&
        currentStageId !== "artboard" &&
        currentStageId.includes("layer:") === false &&
        currentStageId.indexOf(defaultSymbolDir) === -1);
    const codeEditorSize = showCodeEditor ? 600 : 260;
    const daysLeft = this.props.session.project.daysRemaining;
    const isProjectPublic = find(
      this.props.session.project.shareabilityData,
      (shareableData: any) => shareableData.type === "public"
    );
    const showDaysLeft =
      !this.props.session.project.isSubscribed &&
      (!this.props.session.readonly ||
        (this.props.session.readonly && !isProjectPublic));

    const currentTeamName = this.props.session.drivers.userService
      .currentTeamName;
    let trialExpired = false;
    if (!this.props.session.project.isSubscribed && daysLeft < 1) {
      trialExpired = true;
    }

    return (
      <WrapperDiv>
        {showDaysLeft && (
          <div className="days-left">
            <Button
              transparent
              textRight
              paddingRight={10}
              onClick={() =>
                window.open(
                  urljoin(
                    this.props.session.envConstants.WEBSITE_URL,
                    "pricing"
                  )
                )
              }
            >
              {trialExpired ? (
                <Text uiSize="s" uiColor={0}>
                  Trial Expired
                </Text>
              ) : (
                <Text uiSize="s" uiColor={0}>
                  {daysLeft} {daysLeft > 1 ? "days" : "day"} left{" "}
                  {currentTeamName ? "(" + currentTeamName + ")" : ""}
                </Text>
              )}
            </Button>
          </div>
        )}
        <RegistryComponent session={session} commandManager={commandManager} />
        {!session.readonly && <AppTutorial session={session} />}
        <WrapperDiv data-cypress-id="session-wrapper">
          <SplitPane split="horizontal" defaultSize={60} allowResize={false}>
            <Pane
              className="app-tutorial-toolbar"
              uiBackground={850}
              draggable
              overflowNone
              onDoubleClick={() => this.maximize()}
              style={{ borderBottom: "1px solid black" }}
            >
              <Grid>
                <Col uiSize={6}>
                  <Bar padder>
                    <HeaderPanel session={session} />
                  </Bar>
                </Col>
                <Col contentCenter>
                  <Bar>
                    <StageToolbarPanel session={session} />
                  </Bar>
                </Col>

                <Col contentRight>
                  <Bar padder={true}>
                    <HeaderRightPanel session={session} />
                  </Bar>
                  {!this.props.session.readonly && (
                    <Tabs style={{ width: 180 }} id="design-code-switch">
                      <TabHeader
                        height={27}
                        style={{ marginLeft: 5, borderRadius: 2 }}
                      >
                        <Tab
                          data-tip="Show the code"
                          style={{
                            flex: 1,
                            display: "grid",
                            textAlign: "center",
                            height: 27,
                            borderTopLeftRadius: 2,
                            borderBottomLeftRadius: 2
                          }}
                          first
                          selected={session.showCodeEditor || session.readonly}
                          onClick={this.showCodeEditorPanel}
                          secondaryBackground
                          data-cypress-id="get-code-tab"
                        >
                          <Text
                            uiSize="xs"
                            uiColor={100}
                            uppercase
                            letterSpacing
                            bold
                          >
                            Code
                          </Text>
                        </Tab>
                        <Tab
                          data-tip="Show the design editing panel"
                          style={{
                            flex: 1,
                            display: "grid",
                            textAlign: "center",
                            height: 27,
                            borderTopRightRadius: 2,
                            borderBottomRightRadius: 2
                          }}
                          selected={
                            !session.showCodeEditor && !session.readonly
                          }
                          onClick={this.showPropertiesPanel}
                          secondaryBackground
                          disabled={session.readonly}
                          data-cypress-id="get-design-tab"
                        >
                          <Text
                            uiSize="xs"
                            uiColor={100}
                            uppercase
                            letterSpacing
                            bold
                          >
                            Design
                          </Text>
                        </Tab>
                        <TabMenu />
                      </TabHeader>
                    </Tabs>
                  )}
                  <ExternalComponentsRenderer
                    session={this.props.session}
                    placement="header-panel-report-bug:before"
                  />
                  <Button
                    marginTop={0}
                    marginBottom={0}
                    marginLeftCustom={4}
                    uiSize={"ms"}
                    borderRadius
                    onClick={() => {
                      window.open(
                        "https://geekyants-products.typeform.com/to/eS7Aiy"
                      );
                    }}
                    style={{ border: "1px solid rgba(255, 0,0, 0.5)" }}
                  >
                    <Text
                      uiSize="xs"
                      uiColor={100}
                      style={{ paddingLeft: 4, paddingRight: 4 }}
                      uppercase
                      letterSpacing
                      bold
                    >
                      Report a bug
                    </Text>
                  </Button>
                  <ExternalComponentsRenderer
                    session={this.props.session}
                    placement="header-panel-user-acount:before"
                  />
                  <UserAccountPanel session={session} />
                  <ExternalComponentsRenderer
                    session={this.props.session}
                    placement="header-panel-user-acount:after"
                  />
                </Col>
              </Grid>
            </Pane>
            <SplitPane
              split="vertical"
              allowResize={
                this.props.session.editorLayout.current ? true : false
              }
              size={(() => {
                if (this.props.session.readonly) {
                  return 0;
                }
                if (this.props.session.editorLayout.current) {
                  return 260;
                }
                return 50;
              })()}
              maxSize={600}
              minSize={260}
              onChange={this.onDelayContentResize}
              ref={(c: any) => {
                this.workSpaceContainer = c;
              }}
            >
              <LeftExpandablePane
                session={session}
                sharedComponentSession={this.props.sharedComponentSession}
                onExpand={() =>
                  this.setState({
                    leftPanelOpen: !this.state.leftPanelOpen
                  })
                }
                hotspot-area-id="left-panel-area"
              />
              <Pane style={{ position: "relative" }} uiBackground={900}>
                <SplitPane
                  split="vertical"
                  primary="second"
                  resizerClassName="right-panel-splitpane-resizer"
                  size={hideCodeEditorPaneCondition ? 0 : codeEditorSize}
                  maxSize={get(window, "innerWidth", 500) * 0.5}
                  defaultSize={hideCodeEditorPaneCondition ? 0 : 260}
                  minSize={260}
                  onChange={this.onDelayContentResize}
                  allowResize={!hideCodeEditorPaneCondition}
                >
                  <Pane
                    style={{ position: "relative" }}
                    uiBackground={900}
                    className="viewport-split-pane"
                    hotspot-area-id="canvas-area"
                  >
                    <div className="stage-container">
                      <div
                        ref={ref => (this.stageDesignerRef = ref)}
                        style={{ height: "100%" }}
                      />
                    </div>
                  </Pane>
                  <Pane
                    id="app-tutorial-right-panel"
                    uiBackground={800}
                    hotspot-area-id="right-panel-area"
                  >
                    <RightPanelWithCodeEditor
                      session={this.props.session}
                      onEvent={this.onEvent}
                      onClickCodeEditorSize={this.onClickCodeEditorSize}
                    />
                  </Pane>
                </SplitPane>
              </Pane>
            </SplitPane>
          </SplitPane>
          {!session.readonly && <ContextMenuContainer session={session} />}
        </WrapperDiv>
      </WrapperDiv>
    );
  }
}
