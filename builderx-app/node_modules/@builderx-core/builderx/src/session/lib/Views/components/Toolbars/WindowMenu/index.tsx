import * as React from "react";
import { Option, OptionMenu, MenuDropdown, Icon } from "components-x";
import { Session } from "../../../../models/Session";
import Stage from "../../../../models/Stage";
import File from "./SubMenu/File";
import {
  ReopenWindow,
  SketchImport,
  // OpenExistingProject,
  Cut,
  Copy,
  Paste,
  SelectLayers,
  DuplicateLayers,
  SetLayerLock,
  SetLayerHide,
  RemoveLayer,
  RemoveArtboard,
  ZoomOut,
  ZoomIn,
  ResetZoom,
  ToggleSnap,
  ToggleSnapConfig,
  AddNewArtboard,
  SetRulerVisibility,
  SelectTool,
  SetDrawType,
  InsertSymbolInstance,
  SetModalRoute,
  SetAppTutorialStep,
  ResumeAppTutorial,
  ExportArtboardsAsPNG,
  ChangeDisplayMode,
  FocusArtboard,
  SetGridVisibility,
  SaveProject
} from "../../../../Commands";
import { action } from "model";
import { IEvent } from "common-interfaces";
import { forEach, size } from "lodash";
import ClearRecordingConditions from "../../../../Commands/Conditionals/ClearRecordingConditions";
import Main from "./SubMenu/Main";
import Edit from "./SubMenu/Edit";
import Help from "./SubMenu/Help";
import View from "./SubMenu/View";
type propType = { session: Session; currentStage: Stage };
export default class WindowMenu extends React.PureComponent<propType, any> {
  constructor(props: any) {
    super(props);
  }
  onUpdate = () => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.session.domain.on("files", this.onUpdate);
    this.props.currentStage.tools.on("selectedTool", this.onUpdate);
  }
  componentDidUpdate(prevProps: propType) {
    if (prevProps.currentStage !== this.props.currentStage) {
      prevProps.currentStage.tools.off("selectedTool", this.onUpdate);
      this.props.currentStage.tools.on("selectedTool", this.onUpdate);
    }
  }
  componentWillUnmount() {
    this.props.session.domain.off("files", this.onUpdate);
    this.props.currentStage.tools.off("selectedTool", this.onUpdate);
  }
  openExistingProject = async (
    wrkspcOpsEnabled: boolean = false,
    projectPath?: string
  ) => {
    let path: any = projectPath
      ? [projectPath]
      : await this.props.session.drivers.dialog.chooseFolderOrFile();
    if (!path) {
      console.warn(
        path,
        this.props.session.envConfig.runningContext,
        "openExistingProject path"
      );
      if (this.props.session.envConfig.runningContext !== "session") {
        return;
      }
      path = ["/Users/suraj/Desktop/Untitled2"];
    }
    if (wrkspcOpsEnabled) {
      // store.set("newProjectReopenPath", path[0]);
      // store.set("newProjectReOpen", true);
      await this.props.session.commandManager.executeAndSkip(
        new ReopenWindow(this.props.session)
      );
    } else {
      if (path[0].indexOf(".sketch") !== -1) {
        await this.props.session.commandManager.executeAndSkip(
          new SketchImport(this.props.session)
        );
      } else {
        // await this.props.session.commandManager.executeAndSkip(
        //   new OpenExistingProject(this.props.session, path[0])
        // );
      }
    }
  };
  onEvent = (e: IEvent) => {
    // if (this.props.session.readonly) {
    //   return;
    // }
    action(async () => {
      let { type, payload } = e;
      let session = this.props.session;
      let { commandManager } = session;
      switch (type) {
        case "openNewProject":
          let win = window.open(session.envConstants.APP_URL, "_blank");
          if (win) {
            win.focus();
          }
          break;
        case "openExistingProject":
          this.openExistingProject(payload.wrkspcOpsEnabled);
          break;
        case "openRecentProject":
          // this.openExistingProject(
          //   payload.wrkspcOpsEnabled,
          //   payload.project.basePath
          // );
          break;
        case "save":
          await commandManager.executeAndSkip(new SaveProject(session));
          break;
        case "importSketchFile":
          await commandManager.executeAndSkip(new SketchImport(session));
          break;
        case "undo":
          if (size(session.getRecordingConditions()) !== 0) {
            this.props.session.commandManager.executeAndSkip(
              new ClearRecordingConditions(this.props.session)
            );
          }
          commandManager.undo();
          break;
        case "redo":
          if (size(session.getRecordingConditions()) !== 0) {
            this.props.session.commandManager.executeAndSkip(
              new ClearRecordingConditions(this.props.session)
            );
          }
          commandManager.redo();
          break;
        case "cut":
          commandManager.executeAndSkip(new Cut(session));
          break;
        case "copy":
          commandManager.executeAndSkip(new Copy(session));
          break;
        case "paste":
          const clipboardData: any = session.drivers.clipboardService.get();

          await commandManager.executeAndSkip(new Paste(session));
          break;
        case "selectAll":
          // @ts-ignore
          if (session.currentStage.tools.selectedTool !== "textEditor") {
            const file = session.selectedFile;
            if (!file) {
              return;
            }
            commandManager.executeAndSkip(
              new SelectLayers(session, [...file.layer.children])
            );
          }
          break;
        case "duplicateLayer":
          commandManager.execute(
            new DuplicateLayers(
              session,
              session.getLayersFromSelectedLayerCollection()
            )
          );
          break;
        case "toggleLock":
          {
            const selectedLayer = session.getLayersFromSelectedLayerCollection()[0];
            const layerLocked = selectedLayer.locked;
            commandManager.execute(
              new SetLayerLock(session, selectedLayer, !layerLocked)
            );
          }
          break;
        case "toggleHide":
          {
            const selectedLayer = session.getLayersFromSelectedLayerCollection()[0];
            const layerHidden = selectedLayer.hidden;
            commandManager.execute(
              new SetLayerHide(session, selectedLayer, !layerHidden)
            );
          }
          break;
        case "removeLayers":
          forEach(
            session.getLayersFromSelectedLayerCollection(),
            (layer: any) => {
              commandManager.execute(new RemoveLayer(session, layer as any));
            }
          );
          break;
        case "removeArtboard":
          if (session.selectedFile) {
            commandManager.execute(
              new RemoveArtboard(session, session.selectedFile)
            );
          }
          break;
        case "zoomIn":
          // console.log("I am here==>");
          commandManager.executeAndSkip(new ZoomIn(session));
          break;
        case "zoomOut":
          commandManager.executeAndSkip(new ZoomOut(session));
          break;
        case "resetZoom":
          commandManager.executeAndSkip(new ResetZoom(session));
          break;
        case "toggleSnap":
          commandManager.executeAndSkip(new ToggleSnap(session));
          break;
        case "toggleSnapToGrid":
          commandManager.executeAndSkip(new ToggleSnapConfig(session, "grid"));
          break;
        case "toggleSnapToLayers":
          commandManager.executeAndSkip(
            new ToggleSnapConfig(session, "sibling")
          );
          break;
        case "toggleSnapToDocuments":
          commandManager.executeAndSkip(
            new ToggleSnapConfig(session, "parent")
          );
          break;
        case "toggleSnapToGutter":
          commandManager.executeAndSkip(
            new ToggleSnapConfig(session, "gutter")
          );
          break;
        case "toggleSnapToRuler":
          commandManager.executeAndSkip(new ToggleSnapConfig(session, "ruler"));
          break;
        case "toggleShowGrid":
          const oldGridVisibility = session.drivers.configuration.get(
            "editor.show.grid"
          );
          commandManager.executeAndSkip(
            new SetGridVisibility(session, !oldGridVisibility)
          );
          break;
        case "toggleShowRuler":
          const oldRulerVisibility = session.drivers.configuration.get(
            "editor.show.ruler"
          );
          commandManager.executeAndSkip(
            new SetRulerVisibility(session, !oldRulerVisibility)
          );
          break;
        // case "previewMode":
        //   commandManager.executeAndSkip(
        //     new ChangeDisplayMode(session, "preview")
        //   );
        //   break;
        // case "stageMode":
        //   commandManager.executeAndSkip(
        //     new ChangeDisplayMode(session, "stage")
        //   );
        //   break;
        case "restoreAppState":
          break;
        case "reload":
          // this.props.builderX.operations.app.killAllExtentions();
          break;
        case "addArtboard":
          session.commandManager.execute(
            new AddNewArtboard(session, undefined, "artboard", true, true)
          );
          break;
        case "addImage":
          // await session.commandManager.executeAndSkip(new AddImage(session));
          break;
        case "addRect":
        case "addEllipse":
        case "addText":
        case "addTextInput":
        case "addIcon":
        case "addSwitch":
        case "addPicker":
        case "addActivityIndicator":
        case "addSlider":
        case "addMap":
        case "addTabView":
        case "addSwiper":
        case "addList":
          session.commandManager.executeAndSkip(
            new SelectTool(session, "view")
          );
          session.commandManager.executeAndSkip(
            new SetDrawType(session, payload)
          );
          break;
        case "insertSymbolInstance":
          session.commandManager.execute(
            new InsertSymbolInstance(session, payload)
          );
          break;
        case "settings":
        case "activation/licencekeyform":
        case "activation/changeEmailAddress":
          this.props.session.commandManager.executeAndSkip(
            new SetModalRoute(this.props.session, type)
          );
          break;
        case "runTutorial":
          this.props.session.commandManager.executeAndSkip(
            new SetAppTutorialStep(this.props.session, 0)
          );
          this.props.session.commandManager.executeAndSkip(
            new ResumeAppTutorial(this.props.session, true)
          );
          this.props.session.commandManager.executeAndSkip(
            new ResetZoom(this.props.session)
          );
          this.props.session.commandManager.executeAndSkip(
            new FocusArtboard(
              this.props.session,
              this.props.session.selectedFile
            )
          );
          break;
        case "resumeTutorial":
          this.props.session.commandManager.executeAndSkip(
            new ResumeAppTutorial(this.props.session, true)
          );
          break;
        case "exportArtboards":
          await this.props.session.commandManager.executeAndSkip(
            new ExportArtboardsAsPNG(this.props.session)
          );
          break;
        case "openShortcuts":
          this.props.session.commandManager.executeAndSkip(
            new SetModalRoute(session, "shortcuts")
          );
          break;
        default:
          break;
      }
    });
  };
  render() {
    const { session, currentStage } = this.props;
    const uiSize = 190;
    return (
      <MenuDropdown
        uiSize={uiSize}
        style={{
          paddingRight: 10,
          paddingLeft: 4,
          zIndex: 10,
          opacity: 1
        }}
      >
        <Option>
          <OptionMenu
            data-cypress-id="window-menu"
            transparent
            style={{ paddingTop: 5 }}
          >
            <Icon name="menu" size={18} />
          </OptionMenu>
          <MenuDropdown
            child
            uiSize={uiSize}
            style={{ marginTop: 6, marginLeft: 3 }}
          >
            <Main
              uiSize={uiSize}
              session={session}
              currentStage={currentStage}
              onEvent={this.onEvent}
            />
            <File
              uiSize={uiSize}
              session={session}
              currentStage={currentStage}
              onEvent={this.onEvent}
            />
            <Edit session={session} onEvent={this.onEvent} uiSize={uiSize} />
            <View session={session} onEvent={this.onEvent} uiSize={uiSize} />
            {/* <Insert session={session} onEvent={this.onEvent} /> */}
            <Help onEvent={this.onEvent} session={session} uiSize={uiSize} />
          </MenuDropdown>
        </Option>
      </MenuDropdown>
    );
  }
}
// import * as React from "react";
// import {
//   OptionNew as Option,
//   OptionMenuNew as OptionMenu,
//   MenuDropdownNew as MenuDropdown,
//   OptionMenuTitleNew as OptionMenuTitle,
//   OptionMenuLeftNew as OptionMenuLeft,
//   OptionMenuRightNew as OptionMenuRight,
//   MenuRenderer,
//   Icon,
//   Checkbox,
//   CheckboxTick
// } from "components-x";
// import { Session } from "../../../../models/Session";
// import Stage from "../../../../models/Stage";
// import urljoin from "url-join";
// import {
//   SketchImport,
//   Cut,
//   Copy,
//   Paste,
//   SelectLayers,
//   DuplicateLayers,
//   SetLayerLock,
//   SetLayerHide,
//   RemoveLayer,
//   RemoveArtboard,
//   ZoomOut,
//   ZoomIn,
//   ResetZoom,
//   ToggleSnap,
//   ToggleSnapConfig,
//   AddNewArtboard,
//   SetRulerVisibility,
//   SelectTool,
//   SetDrawType,
//   InsertSymbolInstance,
//   SetModalRoute,
//   SetAppTutorialStep,
//   ResumeAppTutorial,
//   ExportArtboardsAsPNG,
//   ChangeDisplayMode,
//   FocusArtboard,
//   SetGridVisibility,
//   SaveProject
// } from "../../../../Commands";
// import { action } from "model";
// import { IEvent } from "common-interfaces";
// import { forEach, size } from "lodash";
// import { File } from "domain-x";
// import ClearRecordingConditions from "../../../../Commands/Conditionals/ClearRecordingConditions";
// import ExternalComponentsRenderer from "../../ExternalComponentsRenderer";
// type propType = { session: Session; currentStage: Stage };
// export default class WindowMenu extends React.PureComponent<propType, any> {
//   oldSelectedLayers: Array<any>;
//   onUpdate = () => {
//     this.forceUpdate();
//   };
//   componentDidMount() {
//     this.props.session.domain.on("files", this.onUpdate);
//     this.props.currentStage.tools.on("selectedTool", this.onUpdate);
//     this.props.session.on(
//       [
//         "selectedLayers",
//         "currentRootLayer",
//         "projectLock",
//         "displayMode",
//         "currentStage",
//         "MenuProvider"
//       ],
//       this.onUpdate
//     );
//     this.props.session.pageRouter.on("currentRoute", this.onUpdate);
//     this.props.session.selectedLayers.forEach((layer: any) => {
//       if (layer.type === "unknown") {
//         return;
//       }
//       layer.on("locked", this.onUpdate);
//       layer.props.style.on("display", this.onUpdate);
//     });
//     this.oldSelectedLayers = this.props.session.selectedLayers;
//     this.props.session.drivers.configuration.on(
//       [
//         "editor.snap",
//         "editor.show.grid",
//         "editor.show.ruler",
//         "editor.snap.grid",
//         "editor.snap.sibling",
//         "editor.snap.parent",
//         "editor.snap.gutter",
//         "editor.snap.ruler"
//       ],
//       this.onUpdate
//     );
//   }
//   componentDidUpdate(prevProps: propType) {
//     if (prevProps.currentStage !== this.props.currentStage) {
//       prevProps.currentStage.tools.off("selectedTool", this.onUpdate);
//       this.props.currentStage.tools.on("selectedTool", this.onUpdate);
//     }
//     this.oldSelectedLayers.forEach((layer: any) => {
//       if (layer.type === "unknown") {
//         return;
//       }
//       layer.off("locked", this.onUpdate);
//       layer.props.style.off("display", this.onUpdate);
//     });
//     this.props.session.selectedLayers.forEach((layer: any) => {
//       if (layer.type === "unknown") {
//         return;
//       }
//       layer.on("locked", this.onUpdate);
//       layer.props.style.on("display", this.onUpdate);
//     });
//     this.oldSelectedLayers = this.props.session.selectedLayers;
//   }
//   componentWillUnmount() {
//     this.props.session.domain.off("files", this.onUpdate);
//     this.props.currentStage.tools.off("selectedTool", this.onUpdate);
//     this.props.session.off(
//       [
//         "projectLock",
//         "displayMode",
//         "selectedLayers",
//         "currentRootLayer",
//         "currentStage",
//         "MenuProvider"
//       ],
//       this.onUpdate
//     );
//     this.props.session.pageRouter.off("currentRoute", this.onUpdate);
//     this.props.session.drivers.configuration.off(
//       [
//         "editor.snap",
//         "editor.show.grid",
//         "editor.show.ruler",
//         "editor.snap.grid",
//         "editor.snap.sibling",
//         "editor.snap.parent",
//         "editor.snap.gutter",
//         "editor.snap.ruler"
//       ],
//       this.onUpdate
//     );
//     this.props.session.selectedLayers.forEach((layer: any) => {
//       if (layer.type === "unknown") {
//         return;
//       }
//       layer.off("locked", this.onUpdate);
//       layer.props.style.off("display", this.onUpdate);
//       this.props.session.off("projectLock", this.onUpdate);
//     });
//   }
//   onEvent = (e: IEvent) => {
//     // if (this.props.session.readonly) {
//     //   return;
//     // }
//     action(async () => {
//       let { type, payload } = e;
//       let session = this.props.session;
//       let { commandManager } = session;
//       switch (type) {
//         case "openNewProject":
//           let win = window.open(session.envConstants.APP_URL, "_blank");
//           if (win) {
//             win.focus();
//           }
//           break;
//         // case "openExistingProject":
//         //   this.openExistingProject(payload.wrkspcOpsEnabled);
//         //   break;
//         case "openRecentProject":
//           // this.openExistingProject(
//           //   payload.wrkspcOpsEnabled,
//           //   payload.project.basePath
//           // );
//           break;
//         case "save":
//           await commandManager.executeAndSkip(new SaveProject(session));
//           break;
//         case "importSketchFile":
//           await commandManager.executeAndSkip(new SketchImport(session));
//           break;
//         case "undo":
//           if (size(session.getRecordingConditions()) !== 0) {
//             this.props.session.commandManager.executeAndSkip(
//               new ClearRecordingConditions(this.props.session)
//             );
//           }
//           commandManager.undo();
//           break;
//         case "redo":
//           if (size(session.getRecordingConditions()) !== 0) {
//             this.props.session.commandManager.executeAndSkip(
//               new ClearRecordingConditions(this.props.session)
//             );
//           }
//           commandManager.redo();
//           break;
//         case "cut":
//           commandManager.executeAndSkip(new Cut(session));
//           break;
//         case "copy":
//           commandManager.executeAndSkip(new Copy(session));
//           break;
//         case "paste":
//           const clipboardData: any = session.drivers.clipboardService.get();

//           await commandManager.executeAndSkip(new Paste(session));
//           break;
//         case "selectAll":
//           // @ts-ignore
//           if (session.currentStage.tools.selectedTool !== "textEditor") {
//             const file = session.selectedFile;
//             if (!file) {
//               return;
//             }
//             commandManager.executeAndSkip(
//               new SelectLayers(session, [...file.layer.children])
//             );
//           }
//           break;
//         case "duplicateLayer":
//           commandManager.execute(
//             new DuplicateLayers(session, session.selectedLayers)
//           );
//           break;
//         case "toggleLock":
//           {
//             const selectedLayer = session.selectedLayers[0];
//             const layerLocked = selectedLayer.locked;
//             commandManager.execute(
//               new SetLayerLock(session, selectedLayer, !layerLocked)
//             );
//           }
//           break;
//         case "toggleHide":
//           {
//             const selectedLayer = session.selectedLayers[0];
//             const layerHidden = selectedLayer.hidden;
//             commandManager.execute(
//               new SetLayerHide(session, selectedLayer, !layerHidden)
//             );
//           }
//           break;
//         case "removeLayers":
//           forEach(session.getSelectedLayers(), (layer: any) => {
//             commandManager.execute(new RemoveLayer(session, layer as any));
//           });
//           break;
//         case "removeArtboard":
//           if (session.selectedFile) {
//             commandManager.execute(
//               new RemoveArtboard(session, session.selectedFile)
//             );
//           }
//           break;
//         case "zoomIn":
//           // console.log("I am here==>");
//           commandManager.executeAndSkip(new ZoomIn(session));
//           break;
//         case "zoomOut":
//           commandManager.executeAndSkip(new ZoomOut(session));
//           break;
//         case "resetZoom":
//           commandManager.executeAndSkip(new ResetZoom(session));
//           break;
//         case "toggleSnap":
//           commandManager.executeAndSkip(new ToggleSnap(session));
//           break;
//         case "toggleSnapToGrid":
//           commandManager.executeAndSkip(new ToggleSnapConfig(session, "grid"));
//           break;
//         case "toggleSnapToLayers":
//           commandManager.executeAndSkip(
//             new ToggleSnapConfig(session, "sibling")
//           );
//           break;
//         case "toggleSnapToDocuments":
//           commandManager.executeAndSkip(
//             new ToggleSnapConfig(session, "parent")
//           );
//           break;
//         case "toggleSnapToGutter":
//           commandManager.executeAndSkip(
//             new ToggleSnapConfig(session, "gutter")
//           );
//           break;
//         case "toggleSnapToRuler":
//           commandManager.executeAndSkip(new ToggleSnapConfig(session, "ruler"));
//           break;
//         case "toggleShowGrid":
//           const oldGridVisibility = session.drivers.configuration.get(
//             "editor.show.grid"
//           );
//           commandManager.executeAndSkip(
//             new SetGridVisibility(session, !oldGridVisibility)
//           );
//           break;
//         case "toggleShowRuler":
//           const oldRulerVisibility = session.drivers.configuration.get(
//             "editor.show.ruler"
//           );
//           commandManager.executeAndSkip(
//             new SetRulerVisibility(session, !oldRulerVisibility)
//           );
//           break;
//         // case "previewMode":
//         //   commandManager.executeAndSkip(
//         //     new ChangeDisplayMode(session, "preview")
//         //   );
//         //   break;
//         // case "stageMode":
//         //   commandManager.executeAndSkip(
//         //     new ChangeDisplayMode(session, "stage")
//         //   );
//         //   break;
//         case "restoreAppState":
//           break;
//         case "reload":
//           // this.props.builderX.operations.app.killAllExtentions();
//           break;
//         case "addArtboard":
//           session.commandManager.execute(
//             new AddNewArtboard(session, undefined, "artboard", true, true)
//           );
//           break;
//         case "addImage":
//           // await session.commandManager.executeAndSkip(new AddImage(session));
//           break;
//         case "addRect":
//         case "addEllipse":
//         case "addText":
//         case "addTextInput":
//         case "addIcon":
//         case "addSwitch":
//         case "addPicker":
//         case "addActivityIndicator":
//         case "addSlider":
//         case "addMap":
//         case "addTabView":
//         case "addSwiper":
//         case "addList":
//           session.commandManager.executeAndSkip(
//             new SelectTool(session, "view")
//           );
//           session.commandManager.executeAndSkip(
//             new SetDrawType(session, payload)
//           );
//           break;
//         case "insertSymbolInstance":
//           session.commandManager.execute(
//             new InsertSymbolInstance(session, payload)
//           );
//           break;
//         case "settings":
//         case "activation/licencekeyform":
//         case "activation/changeEmailAddress":
//           this.props.session.commandManager.executeAndSkip(
//             new SetModalRoute(this.props.session, type)
//           );
//           break;
//         case "runTutorial":
//           this.props.session.commandManager.executeAndSkip(
//             new SetAppTutorialStep(this.props.session, 0)
//           );
//           this.props.session.commandManager.executeAndSkip(
//             new ResumeAppTutorial(this.props.session, true)
//           );
//           this.props.session.commandManager.executeAndSkip(
//             new ResetZoom(this.props.session)
//           );
//           this.props.session.commandManager.executeAndSkip(
//             new FocusArtboard(
//               this.props.session,
//               this.props.session.selectedFile
//             )
//           );
//           break;
//         case "resumeTutorial":
//           this.props.session.commandManager.executeAndSkip(
//             new ResumeAppTutorial(this.props.session, true)
//           );
//           break;
//         case "exportArtboards":
//           await this.props.session.commandManager.executeAndSkip(
//             new ExportArtboardsAsPNG(this.props.session)
//           );
//           break;
//         case "openShortcuts":
//           this.props.session.commandManager.executeAndSkip(
//             new SetModalRoute(session, "shortcuts")
//           );
//           break;
//         default:
//           break;
//       }
//     });
//   };
//   render() {
//     const { session } = this.props;
//     let currentRoute = session.pageRouter.currentRoute;
//     let wrkspcOpsDisabled = currentRoute !== "workspace";
//     let fileOpsDisabled =
//       currentRoute !== "workspace" && currentRoute !== "startScreen";
//     const uiSize = 190;
//     let artboardLength: number = 0;
//     let selectedLayers = session.selectedLayers;
//     let snapEnabled = this.props.session.drivers.configuration.get(
//       "editor.snap"
//     );
//     session.domain.files.forEach((file: File) => {
//       if (file && !file.isSymbol()) {
//         artboardLength++;
//       }
//     });
//     let isCurrentRootLayer = false;
//     if (
//       session.selectedLayers &&
//       session.getSelectedLayers()[0] === session.currentRootLayer
//     ) {
//       isCurrentRootLayer = true;
//     }
//     return (
//       <MenuRenderer
//         trigger={(triggerProps: any) => (
//           <Icon
//             {...triggerProps}
//             name="menu"
//             data-cypress-id="window-menu"
//             size={18}
//             style={{
//               marginRight: 14,
//               marginLeft: 8,
//               marginTop: 4,
//               zIndex: 10,
//               opacity: 1
//             }}
//           />
//         )}
//       >
//         <MenuDropdown uiSize={uiSize} style={{ marginTop: 6, marginLeft: 3 }}>
//           {this.props.session.isPluginLoaded("MenuProvider")
//             ? this.props.session.executeFunction(
//                 "MenuProvider.renderExternalMenu",
//                 "window-menu:before"
//               )
//             : null}
//           <Option>
//             {!this.props.session.readonly && (
//               <OptionMenu data-cypress-id="window-menu-main">
//                 <OptionMenuTitle>Main</OptionMenuTitle>
//                 <OptionMenuRight>
//                   <Icon name="right-arrow" size={12} />
//                 </OptionMenuRight>
//               </OptionMenu>
//             )}
//             <MenuDropdown child uiSize={uiSize}>
//               <Option id="preferences">
//                 <OptionMenu data-cypress-id="window-menu-main-preferences">
//                   <OptionMenuTitle>Preferences</OptionMenuTitle>
//                   <OptionMenuRight>
//                     <Icon name="right-arrow" size={12} />
//                   </OptionMenuRight>
//                 </OptionMenu>
//                 <MenuDropdown child uiSize={uiSize}>
//                   <Option
//                     id="settings"
//                     disabled={wrkspcOpsDisabled}
//                     onClick={() => {
//                       this.onEvent({
//                         type: "settings",
//                         target: null,
//                         originalEvent: null,
//                         payload: null
//                       });
//                     }}
//                   >
//                     <OptionMenu data-cypress-id="window-menu-main-preferences-settings">
//                       <OptionMenuTitle>Settings</OptionMenuTitle>
//                       <OptionMenuRight>⌘ ,</OptionMenuRight>
//                     </OptionMenu>
//                   </Option>
//                 </MenuDropdown>
//               </Option>
//             </MenuDropdown>
//           </Option>
//           <Option>
//             <OptionMenu data-cypress-id="window-menu-file">
//               <OptionMenuTitle>File</OptionMenuTitle>
//               <OptionMenuRight>
//                 <Icon name="right-arrow" size={12} />
//               </OptionMenuRight>
//             </OptionMenu>
//             <MenuDropdown child uiSize={uiSize}>
//               <Option
//                 id="addArtboard"
//                 disabled={
//                   wrkspcOpsDisabled ||
//                   (session.currentStage &&
//                     session.currentStage.id !== "artboard") ||
//                   session.displayMode !== "stage"
//                 }
//                 onClick={() => {
//                   if (
//                     session.currentStage &&
//                     session.currentStage.id === "artboard" &&
//                     session.displayMode === "stage"
//                   ) {
//                     let position = session.getNewArtboardPosition();
//                     this.onEvent({
//                       type: "addArtboard",
//                       target: null,
//                       originalEvent: {},
//                       payload: { x: position.fileLeft, y: position.fileTop }
//                     });
//                   }
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-file-add-artboard">
//                   <OptionMenuTitle>New Artboard</OptionMenuTitle>
//                   <OptionMenuRight>A</OptionMenuRight>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 id="openNewProject"
//                 disabled={fileOpsDisabled}
//                 onClick={() => {
//                   this.props.session.drivers.analyticsService.addActivity(
//                     {
//                       name: "menu.openNewProject.click",
//                       category: "app/User Action"
//                     },
//                     true
//                   );
//                   this.onEvent({
//                     target: null,
//                     type: "openNewProject",
//                     payload: { wrkspcOpsEnabled: !wrkspcOpsDisabled },
//                     originalEvent: null
//                   });
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-file-open-new-project">
//                   <OptionMenuTitle>New Project</OptionMenuTitle>
//                   <OptionMenuRight>⌘ P</OptionMenuRight>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 id="save"
//                 disabled={wrkspcOpsDisabled}
//                 onClick={() => {
//                   this.props.session.drivers.analyticsService.addActivity(
//                     {
//                       name: "menu.save.click",
//                       category: "app/User Action"
//                     },
//                     true
//                   );
//                   this.onEvent({
//                     target: null,
//                     type: "save",
//                     payload: null,
//                     originalEvent: null
//                   });
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-file-save">
//                   <OptionMenuTitle>Save</OptionMenuTitle>
//                   <OptionMenuRight>⌘ S</OptionMenuRight>
//                 </OptionMenu>
//               </Option>

//               <Option
//                 id="import-sketch"
//                 disabled={fileOpsDisabled || session.displayMode !== "stage"}
//                 onClick={(e: any) => {
//                   this.onEvent({
//                     target: null,
//                     type: "importSketchFile",
//                     payload: null,
//                     originalEvent: null
//                   });
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-file-import-sketch">
//                   <OptionMenuTitle>Import Sketch File</OptionMenuTitle>
//                   <OptionMenuRight>⌘ ⇧ I</OptionMenuRight>
//                 </OptionMenu>
//               </Option>
//             </MenuDropdown>
//           </Option>
//           <Option>
//             {!this.props.session.readonly && (
//               <OptionMenu data-cypress-id="window-menu-edit">
//                 <OptionMenuTitle>Edit</OptionMenuTitle>
//                 <OptionMenuRight>
//                   <Icon name="right-arrow" size={12} />
//                 </OptionMenuRight>
//               </OptionMenu>
//             )}
//             <MenuDropdown child uiSize={uiSize}>
//               <Option
//                 label="Undo"
//                 onClick={() => {
//                   this.onEvent({
//                     target: null,
//                     type: "undo",
//                     payload: null,
//                     originalEvent: null
//                   });
//                 }}
//                 id="undo"
//                 disabled={wrkspcOpsDisabled}
//               >
//                 <OptionMenu data-cypress-id="window-menu-edit-undo">
//                   <OptionMenuTitle>Undo</OptionMenuTitle>
//                   <OptionMenuRight>⌘ Z</OptionMenuRight>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 label="Redo"
//                 onClick={() => {
//                   this.onEvent({
//                     target: null,
//                     type: "redo",
//                     payload: null,
//                     originalEvent: null
//                   });
//                 }}
//                 id="redo"
//                 disabled={wrkspcOpsDisabled}
//               >
//                 <OptionMenu data-cypress-id="window-menu-edit-redo">
//                   <OptionMenuTitle>Redo</OptionMenuTitle>
//                   <OptionMenuRight>⌘ Y</OptionMenuRight>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 onClick={() => {
//                   this.onEvent({
//                     target: null,
//                     type: "cut",
//                     payload: null,
//                     originalEvent: null
//                   });
//                 }}
//                 id="cut"
//                 disabled={wrkspcOpsDisabled || isCurrentRootLayer}
//               >
//                 <OptionMenu data-cypress-id="window-menu-edit-cut">
//                   <OptionMenuTitle>Cut</OptionMenuTitle>
//                   <OptionMenuRight>⌘ X</OptionMenuRight>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 id="copy"
//                 disabled={wrkspcOpsDisabled || isCurrentRootLayer}
//                 onClick={() => {
//                   this.onEvent({
//                     target: null,
//                     type: "copy",
//                     payload: null,
//                     originalEvent: null
//                   });
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-edit-copy">
//                   <OptionMenuTitle>Copy</OptionMenuTitle>
//                   <OptionMenuRight>⌘ C</OptionMenuRight>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 id="paste"
//                 disabled={wrkspcOpsDisabled}
//                 onClick={() => {
//                   this.onEvent({
//                     target: null,
//                     type: "paste",
//                     payload: null,
//                     originalEvent: null
//                   });
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-edit-paste">
//                   <OptionMenuTitle>Paste</OptionMenuTitle>
//                   <OptionMenuRight>⌘ V</OptionMenuRight>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 id="selectAll"
//                 disabled={wrkspcOpsDisabled}
//                 onClick={() => {
//                   this.onEvent({
//                     target: null,
//                     type: "selectAll",
//                     payload: null,
//                     originalEvent: null
//                   });
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-edit-select-all">
//                   <OptionMenuTitle>Select All</OptionMenuTitle>
//                   <OptionMenuRight>⌘ A</OptionMenuRight>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 id="duplicateLayer"
//                 disabled={wrkspcOpsDisabled || isCurrentRootLayer}
//                 onClick={() => {
//                   this.onEvent({
//                     target: null,
//                     type: "duplicateLayer",
//                     payload: null,
//                     originalEvent: null
//                   });
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-edit-duplicate-layer">
//                   <OptionMenuTitle>Duplicate Layer</OptionMenuTitle>
//                   <OptionMenuRight>⌘ D</OptionMenuRight>
//                 </OptionMenu>
//               </Option>
//               {selectedLayers.length > 0 && (
//                 <Option
//                   id="toggleLock"
//                   disabled={wrkspcOpsDisabled || isCurrentRootLayer}
//                   onClick={() => {
//                     this.onEvent({
//                       target: null,
//                       type: "toggleLock",
//                       payload: null,
//                       originalEvent: null
//                     });
//                   }}
//                 >
//                   <OptionMenu data-cypress-id="window-menu-edit-lock-unlock">
//                     <OptionMenuTitle>
//                       {selectedLayers[0].locked ? "Unlock Layer" : "Lock Layer"}
//                     </OptionMenuTitle>
//                     <OptionMenuRight>⌘ L</OptionMenuRight>
//                   </OptionMenu>
//                 </Option>
//               )}
//               {selectedLayers.length > 0 && (
//                 <Option
//                   id="toggleHide"
//                   disabled={wrkspcOpsDisabled || isCurrentRootLayer}
//                   onClick={() => {
//                     this.onEvent({
//                       target: null,
//                       type: "toggleHide",
//                       payload: null,
//                       originalEvent: null
//                     });
//                   }}
//                 >
//                   <OptionMenu data-cypress-id="window-menu-edit-hide-show">
//                     <OptionMenuTitle>
//                       {selectedLayers[0].props.getResolvedStyleAttribute(
//                         "display"
//                       ) === "none"
//                         ? "Show Layer"
//                         : "Hide Layer"}
//                     </OptionMenuTitle>
//                     <OptionMenuRight>⌘ H</OptionMenuRight>
//                   </OptionMenu>
//                 </Option>
//               )}
//               <Option
//                 id="toggleHide"
//                 disabled={wrkspcOpsDisabled || isCurrentRootLayer}
//                 onClick={() => {
//                   this.onEvent({
//                     target: null,
//                     type: "removeLayers",
//                     payload: null,
//                     originalEvent: null
//                   });
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-edit-remove-layer">
//                   <OptionMenuTitle>Remove Layer</OptionMenuTitle>
//                   <OptionMenuRight>⌫</OptionMenuRight>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 id="removeArtboard"
//                 disabled={wrkspcOpsDisabled || artboardLength < 2}
//                 onClick={() => {
//                   this.onEvent({
//                     target: null,
//                     type: "removeArtboard",
//                     payload: null,
//                     originalEvent: null
//                   });
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-edit-remove-artboard">
//                   <OptionMenuTitle>Remove Artboard</OptionMenuTitle>
//                 </OptionMenu>
//               </Option>
//             </MenuDropdown>
//           </Option>
//           <Option>
//             <OptionMenu data-cypress-id="window-menu-view">
//               <OptionMenuTitle>View</OptionMenuTitle>
//               <OptionMenuRight>
//                 <Icon name="right-arrow" size={12} />
//               </OptionMenuRight>
//             </OptionMenu>
//             <MenuDropdown child uiSize={210}>
//               <Option
//                 onClick={() => {
//                   this.onEvent({
//                     target: null,
//                     type: "zoomIn",
//                     payload: null,
//                     originalEvent: null
//                   });
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-view-zoom-in">
//                   <OptionMenuTitle>Zoom In</OptionMenuTitle>
//                   <OptionMenuRight>⌘ =</OptionMenuRight>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 onClick={() => {
//                   this.onEvent({
//                     target: null,
//                     type: "zoomOut",
//                     payload: null,
//                     originalEvent: null
//                   });
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-view-zoom-out">
//                   <OptionMenuTitle>Zoom Out</OptionMenuTitle>
//                   <OptionMenuRight>⌘ -</OptionMenuRight>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 onClick={() => {
//                   this.onEvent({
//                     target: null,
//                     type: "resetZoom",
//                     payload: null,
//                     originalEvent: null
//                   });
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-view-reset-zoom">
//                   <OptionMenuTitle>Reset Zoom</OptionMenuTitle>
//                   <OptionMenuRight>⌘ 0</OptionMenuRight>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 disabled={wrkspcOpsDisabled}
//                 onClick={() => {
//                   this.onEvent({
//                     target: null,
//                     type: "toggleSnap",
//                     payload: null,
//                     originalEvent: null
//                   });
//                 }}
//               >
//                 {!this.props.session.readonly && (
//                   <OptionMenu data-cypress-id="window-menu-view-toggle-snap">
//                     <OptionMenuLeft>
//                       <Checkbox>
//                         <CheckboxTick
//                           checked={snapEnabled}
//                           onChange={() => {
//                             //
//                           }}
//                         />
//                       </Checkbox>
//                     </OptionMenuLeft>
//                     <OptionMenuTitle>Snap</OptionMenuTitle>
//                     <OptionMenuRight>⌘ ⌥ S</OptionMenuRight>
//                   </OptionMenu>
//                 )}
//               </Option>
//               <Option>
//                 {!this.props.session.readonly && (
//                   <OptionMenu data-cypress-id="window-menu-view-snap-to">
//                     <OptionMenuTitle>Snap To</OptionMenuTitle>
//                     <OptionMenuRight>
//                       <Icon name="right-arrow" size={12} />
//                     </OptionMenuRight>
//                   </OptionMenu>
//                 )}
//                 <MenuDropdown child uiSize={210}>
//                   <Option
//                     disabled={wrkspcOpsDisabled || !snapEnabled}
//                     onClick={() => {
//                       this.onEvent({
//                         target: null,
//                         type: "toggleSnapToGrid",
//                         payload: null,
//                         originalEvent: null
//                       });
//                     }}
//                   >
//                     <OptionMenu data-cypress-id="window-menu-view-snap-to-grid">
//                       <OptionMenuLeft>
//                         <Checkbox>
//                           <CheckboxTick
//                             checked={this.props.session.drivers.configuration.get(
//                               "editor.snap.grid"
//                             )}
//                             onChange={() => {
//                               //
//                             }}
//                           />
//                         </Checkbox>
//                       </OptionMenuLeft>
//                       <OptionMenuTitle>Grid</OptionMenuTitle>
//                       <OptionMenuRight>⌘ ⇧ S G</OptionMenuRight>
//                     </OptionMenu>
//                   </Option>
//                   <Option
//                     disabled={wrkspcOpsDisabled || !snapEnabled}
//                     onClick={() => {
//                       this.onEvent({
//                         target: null,
//                         type: "toggleSnapToLayers",
//                         payload: null,
//                         originalEvent: null
//                       });
//                     }}
//                   >
//                     <OptionMenu data-cypress-id="window-menu-view-snap-to-layers">
//                       <OptionMenuLeft>
//                         <Checkbox>
//                           <CheckboxTick
//                             checked={this.props.session.drivers.configuration.get(
//                               "editor.snap.sibling"
//                             )}
//                             onChange={() => {
//                               //
//                             }}
//                           />
//                         </Checkbox>
//                       </OptionMenuLeft>
//                       <OptionMenuTitle>Layers</OptionMenuTitle>
//                       <OptionMenuRight>⌘ ⇧ S L</OptionMenuRight>
//                     </OptionMenu>
//                   </Option>

//                   <Option
//                     disabled={wrkspcOpsDisabled || !snapEnabled}
//                     onClick={() => {
//                       this.onEvent({
//                         target: null,
//                         type: "toggleSnapToDocuments",
//                         payload: null,
//                         originalEvent: null
//                       });
//                     }}
//                   >
//                     <OptionMenu data-cypress-id="window-menu-view-snap-to-doc">
//                       <OptionMenuLeft>
//                         <Checkbox>
//                           <CheckboxTick
//                             checked={this.props.session.drivers.configuration.get(
//                               "editor.snap.parent"
//                             )}
//                             onChange={() => {
//                               //
//                             }}
//                           />
//                         </Checkbox>
//                       </OptionMenuLeft>
//                       <OptionMenuTitle>Parent Bounds</OptionMenuTitle>
//                       <OptionMenuRight>⌘ ⇧ S D</OptionMenuRight>
//                     </OptionMenu>
//                   </Option>
//                   <Option
//                     disabled={wrkspcOpsDisabled || !snapEnabled}
//                     onClick={() => {
//                       this.onEvent({
//                         target: null,
//                         type: "toggleSnapToGutter",
//                         payload: null,
//                         originalEvent: null
//                       });
//                     }}
//                   >
//                     <OptionMenu data-cypress-id="window-menu-view-snap-to-gutter">
//                       <OptionMenuLeft>
//                         <Checkbox>
//                           <CheckboxTick
//                             checked={this.props.session.drivers.configuration.get(
//                               "editor.snap.gutter"
//                             )}
//                             onChange={() => {
//                               //
//                             }}
//                           />
//                         </Checkbox>
//                       </OptionMenuLeft>
//                       <OptionMenuTitle>Gutter</OptionMenuTitle>
//                       <OptionMenuRight>⌘ ⇧ S U</OptionMenuRight>
//                     </OptionMenu>
//                   </Option>
//                   <Option
//                     disabled={wrkspcOpsDisabled || !snapEnabled}
//                     onClick={() => {
//                       this.onEvent({
//                         target: null,
//                         type: "toggleSnapToRuler",
//                         payload: null,
//                         originalEvent: null
//                       });
//                     }}
//                   >
//                     <OptionMenu data-cypress-id="window-menu-view-snap-to-ruler">
//                       <OptionMenuLeft>
//                         <Checkbox>
//                           <CheckboxTick
//                             checked={this.props.session.drivers.configuration.get(
//                               "editor.snap.ruler"
//                             )}
//                             onChange={() => {
//                               //
//                             }}
//                           />
//                         </Checkbox>
//                       </OptionMenuLeft>
//                       <OptionMenuTitle>Ruler</OptionMenuTitle>
//                       <OptionMenuRight>⌘ ⇧ S R</OptionMenuRight>
//                     </OptionMenu>
//                   </Option>
//                 </MenuDropdown>
//               </Option>
//               <Option>
//                 <OptionMenu data-cypress-id="window-menu-view-show">
//                   <OptionMenuTitle>Show</OptionMenuTitle>
//                   <OptionMenuRight>
//                     <Icon name="right-arrow" size={12} />
//                   </OptionMenuRight>
//                 </OptionMenu>
//                 <MenuDropdown child uiSize={210}>
//                   <Option
//                     disabled={wrkspcOpsDisabled}
//                     onClick={() => {
//                       this.onEvent({
//                         target: null,
//                         type: "toggleShowGrid",
//                         payload: null,
//                         originalEvent: null
//                       });
//                     }}
//                   >
//                     <OptionMenu data-cypress-id="window-menu-view-show-grid">
//                       <OptionMenuLeft>
//                         <Checkbox>
//                           <CheckboxTick
//                             checked={this.props.session.drivers.configuration.get(
//                               "editor.show.grid"
//                             )}
//                             onChange={() => {
//                               //
//                             }}
//                           />
//                         </Checkbox>
//                       </OptionMenuLeft>
//                       <OptionMenuTitle>Grid</OptionMenuTitle>
//                       <OptionMenuRight>⌘ '</OptionMenuRight>
//                     </OptionMenu>
//                   </Option>
//                   <Option
//                     disabled={wrkspcOpsDisabled}
//                     onClick={() => {
//                       this.onEvent({
//                         target: null,
//                         type: "toggleShowRuler",
//                         payload: null,
//                         originalEvent: null
//                       });
//                     }}
//                   >
//                     <OptionMenu data-cypress-id="window-menu-view-show-ruler">
//                       <OptionMenuLeft>
//                         <Checkbox>
//                           <CheckboxTick
//                             checked={this.props.session.drivers.configuration.get(
//                               "editor.show.ruler"
//                             )}
//                             onChange={() => {
//                               //
//                             }}
//                           />
//                         </Checkbox>
//                       </OptionMenuLeft>
//                       <OptionMenuTitle>Ruler</OptionMenuTitle>
//                       <OptionMenuRight>⌘ ⇧ '</OptionMenuRight>
//                     </OptionMenu>
//                   </Option>
//                 </MenuDropdown>
//               </Option>
//             </MenuDropdown>
//           </Option>
//           <Option>
//             <OptionMenu data-cypress-id="window-menu-help">
//               <OptionMenuTitle>Help</OptionMenuTitle>
//               <OptionMenuRight>
//                 <Icon name="right-arrow" size={12} />
//               </OptionMenuRight>
//             </OptionMenu>
//             <MenuDropdown child uiSize={uiSize}>
//               <Option
//                 id="feedback"
//                 onClick={() => {
//                   this.props.session.drivers.analyticsService.addActivity(
//                     {
//                       name: "menu.sendFeedback.click",
//                       category: "app/User Action"
//                     },
//                     true
//                   );
//                   window.open(this.props.session.envConstants.SUPPORT_URL);
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-help-send-feedback">
//                   <OptionMenuTitle>Send Feedback</OptionMenuTitle>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 id="issue"
//                 onClick={() => {
//                   this.props.session.drivers.analyticsService.addActivity(
//                     {
//                       name: "menu.reportAnIssue.click",
//                       category: "app/User Action"
//                     },
//                     true
//                   );
//                   window.open(this.props.session.envConstants.SUPPORT_URL);
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-help-report-issue">
//                   <OptionMenuTitle>Report an Issue</OptionMenuTitle>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 id="documentation"
//                 onClick={() => {
//                   this.props.session.drivers.analyticsService.addActivity(
//                     {
//                       name: "menu.documentation.click",
//                       category: "app/User Action"
//                     },
//                     true
//                   );
//                   window.open(
//                     urljoin(
//                       this.props.session.envConstants.WEBSITE_URL,
//                       "learn"
//                     )
//                   );
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-help-doc">
//                   <OptionMenuTitle>Documentation</OptionMenuTitle>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 id="runTutorial"
//                 onClick={() => {
//                   this.props.session.drivers.analyticsService.addActivity(
//                     {
//                       name: "menu.runTutorial.click",
//                       category: "app/User Action"
//                     },
//                     true
//                   );
//                   this.onEvent({
//                     type: "runTutorial",
//                     target: null,
//                     originalEvent: null,
//                     payload: null
//                   });
//                 }}
//               >
//                 {!this.props.session.readonly && (
//                   <OptionMenu data-cypress-id="window-menu-help-run-tutorial">
//                     <OptionMenuTitle>Run Tutorial</OptionMenuTitle>
//                   </OptionMenu>
//                 )}
//               </Option>
//               <Option
//                 id="resumeTutorial"
//                 label="Resume Tutorial"
//                 onClick={() => {
//                   this.props.session.drivers.analyticsService.addActivity(
//                     {
//                       name: "menu.resumeTutorial.click",
//                       category: "app/User Action"
//                     },
//                     true
//                   );
//                   this.onEvent({
//                     type: "resumeTutorial",
//                     target: null,
//                     originalEvent: null,
//                     payload: null
//                   });
//                 }}
//               >
//                 {!this.props.session.readonly && (
//                   <OptionMenu data-cypress-id="window-menu-help-resume-tutorial">
//                     <OptionMenuTitle>Resume Tutorial</OptionMenuTitle>
//                   </OptionMenu>
//                 )}
//               </Option>
//               <Option
//                 id="keyboard-shortcuts"
//                 onClick={() => {
//                   this.props.session.drivers.analyticsService.addActivity(
//                     {
//                       name: "menu.keyboardShortcuts.click",
//                       category: "app/User Action"
//                     },
//                     true
//                   );
//                   this.onEvent({
//                     type: "openShortcuts",
//                     target: null,
//                     originalEvent: null,
//                     payload: null
//                   });
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-help-shortcuts">
//                   <OptionMenuTitle>Keyboard Shortcuts</OptionMenuTitle>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 id="changelog"
//                 onClick={() => {
//                   this.props.session.drivers.analyticsService.addActivity(
//                     {
//                       name: "menu.changeLog.click",
//                       category: "app/User Action"
//                     },
//                     true
//                   );
//                   window.open(
//                     urljoin(
//                       this.props.session.envConstants.WEBSITE_URL,
//                       "changelog"
//                     )
//                   );
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-help-changelog">
//                   <OptionMenuTitle>Changelog</OptionMenuTitle>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 id="pricing"
//                 onClick={() => {
//                   this.props.session.drivers.analyticsService.addActivity(
//                     {
//                       name: "menu.pricing.click",
//                       category: "app/User Action"
//                     },
//                     true
//                   );
//                   window.open(
//                     urljoin(
//                       this.props.session.envConstants.WEBSITE_URL,
//                       "pricing"
//                     )
//                   );
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-help-pricing">
//                   <OptionMenuTitle>Pricing</OptionMenuTitle>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 id="download-manager"
//                 onClick={() => {
//                   this.props.session.drivers.analyticsService.addActivity(
//                     {
//                       name: "downloadDesktopManager.click",
//                       category: "app/User Action"
//                     },
//                     true
//                   );
//                   window.open(
//                     urljoin(
//                       this.props.session.envConstants.WEBSITE_URL,
//                       "desktop-app-server",
//                       "download"
//                     )
//                   );
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-help-download-manager">
//                   <OptionMenuTitle>Download Desktop Manager</OptionMenuTitle>
//                 </OptionMenu>
//               </Option>
//               <Option
//                 id="learnMore"
//                 onClick={() => {
//                   this.props.session.drivers.analyticsService.addActivity(
//                     {
//                       name: "documentation.click",
//                       category: "app/User Action"
//                     },
//                     true
//                   );
//                   window.open("http://builderx.io");
//                 }}
//               >
//                 <OptionMenu data-cypress-id="window-menu-help-learn-more">
//                   <OptionMenuTitle>Learn More</OptionMenuTitle>
//                 </OptionMenu>
//               </Option>
//             </MenuDropdown>
//           </Option>
//           {this.props.session.isPluginLoaded("MenuProvider")
//             ? this.props.session.executeFunction(
//                 "MenuProvider.renderExternalMenu",
//                 "window-menu:after"
//               )
//             : null}
//           {/*
//           <Edit session={session} onEvent={this.onEvent} uiSize={uiSize} />
//           <View session={session} onEvent={this.onEvent} uiSize={uiSize} />
//           {/* <Insert session={session} onEvent={this.onEvent} /> */}
//           {/* <Help onEvent={this.onEvent} session={session} uiSize={uiSize} /> */}
//         </MenuDropdown>
//       </MenuRenderer>
//     );
//   }
// }
