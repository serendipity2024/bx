import * as React from "react";
import {
  Spinner,
  Icon,
  Button,
  TextArea,
  ButtonGroup,
  Text,
  Container,
  FormGroup,
  FormCol,
  FormRow,
  Form,
  InputGroupInput,
  InputGroup,
  Checkbox,
  CheckboxTick,
  CheckboxLabel,
  FileUpload
} from "components-x";
import { Session } from "../../../models/Session";
import SetModalRoute from "../../../Commands/Router/SetModalRoute";
import { action } from "model";
type propType = { session: Session };
export default class Issue extends React.PureComponent<propType, any> {
  textAreaRef: any;
  textInputRef: any;
  constructor(props: propType) {
    super(props);
    this.state = {
      isLoading: false,
      submitting: false,
      subject: "",
      isChecked: false,
      file: null,
      message: ""
    };
  }
  componentDidMount() {
    document.addEventListener("keyup", this._handleKeyDown);
  }
  componentWillUnmount() {
    document.removeEventListener("keyup", this._handleKeyDown);
  }
  _handleKeyDown = (event: any) => {
    const ESCAPE_KEY = 27;
    const ENTER_KEY = 13;
    switch (event.keyCode) {
      case ESCAPE_KEY:
        this.exitModal();
        break;
      case ENTER_KEY:
        this.onSubmit(event);
        break;
      default:
        break;
    }
  };
  exitModal = () => {
    action(() => {
      this.props.session.commandManager.executeAndSkip(
        new SetModalRoute(this.props.session, "")
      );
    });
  };
  handleChange = (e: any, property: any) => {
    switch (property) {
      case "subject":
        this.setState({ subject: e.target.value });
        break;
      case "message":
        this.setState({ message: e.target.value });
        break;
      case "file":
        let file = e.target.files[0];
        if (file && file.type.substr(0, 5) === "image") {
          this.setState({ file });
        }
        break;
      case "checkbox":
        this.setState({ isChecked: !this.state.isChecked });
        break;
      default:
        break;
    }
  };
  removeImage = () => {
    this.setState({ file: null });
  };
  onSubmit = (e: any) => {
    e.preventDefault();
    if (
      document.activeElement &&
      document.activeElement.className === this.textAreaRef.className
    ) {
      return;
    }
    if (
      document.activeElement &&
      document.activeElement.className === this.textInputRef.className
    ) {
      return;
    }
    let issueForm = this.props.session.feedback.issueForm;
    this.setState({ submitting: true });
    issueForm.setSubject(this.state.subject);
    issueForm.setMessage(this.state.message);
    if (this.state.file) {
      issueForm.setImageObject(this.state.file);
      issueForm.isImageValid(true);
    } else {
      issueForm.isImageValid(false);
    }
    issueForm.setIsChecked(this.state.isChecked);
    if (issueForm.subject !== "") {
      // this.props.sendUserIssue();
    }
    this.exitModal();
  };
  keyPress = (e: any) => {
    if (
      e.keyCode === 13 &&
      document.activeElement &&
      document.activeElement.className !== this.textAreaRef.className &&
      document.activeElement.className !== this.textInputRef.className
    ) {
      this.onSubmit(e);
    } else if (e.keyCode === 27) {
      this.exitModal();
    }
  };
  render() {
    return (
      <Form
        onKeyUp={(e: any) => this.keyPress(e)}
        onSubmit={(e: any) => {
          e.preventDefault();
        }}
      >
        <FormGroup noPadding>
          <FormRow>
            <FormCol uiSize={1}>
              <Text>Subject</Text>
            </FormCol>
            <FormCol uiSize={5}>
              <InputGroup>
                <InputGroupInput
                  type="text"
                  uiSize="l"
                  autoFocus={true}
                  ref={(comp: any) => {
                    this.textInputRef = comp;
                  }}
                  value={this.state.subject}
                  placeholder="Your Subject "
                  onChange={(e: any) => this.handleChange(e, "subject")}
                />
              </InputGroup>
            </FormCol>
          </FormRow>
          <FormRow>
            <FormCol uiSize={1} />
            <FormCol uiSize={5}>
              <Text>
                {this.state.submitting && this.state.subject === ""
                  ? "This Field Is Required"
                  : ""}
              </Text>
            </FormCol>
          </FormRow>
          <FormRow>
            <FormCol uiSize={1}>
              <Text>Message</Text>
            </FormCol>
            <FormCol uiSize={5}>
              <TextArea
                uiBackground={700}
                type="text"
                cols={40}
                rows={5}
                ref={(comp: any) => {
                  this.textAreaRef = comp;
                }}
                placeholder="Type here..."
                onChange={(e: any) => this.handleChange(e, "message")}
                value={this.state.message}
              />
            </FormCol>
          </FormRow>

          {this.state.file && this.state.file.name ? (
            <FormRow noPadding>
              <FormCol uiSize={1}>
                <Text>Image</Text>
              </FormCol>
              <FormCol uiSize={0}>
                <FileUpload
                  uiSize="l"
                  icon={<Icon name="uploadimg" size={12} marginRight />}
                  caption={"Upload File"}
                  onChange={(e: any) => this.handleChange(e, "file")}
                />
              </FormCol>
              <FormCol uiSize={2}>
                <Container width={120}>
                  <Text inline>{this.state.file.name}</Text>
                </Container>
              </FormCol>
              <FormCol uiSize={1}>
                <Icon name="close" size={12} onClick={this.removeImage} />
              </FormCol>
            </FormRow>
          ) : (
            <FormRow noPadding>
              <FormCol uiSize={1}>
                <Text>Image</Text>
              </FormCol>
              <FormCol uiSize={5}>
                <FileUpload
                  uiSize="l"
                  icon={<Icon name="uploadimg" size={12} marginRight />}
                  caption={"Upload File"}
                  onChange={(e: any) => this.handleChange(e, "file")}
                />
              </FormCol>
            </FormRow>
          )}
          <FormRow>
            <FormCol uiSize={1} />
            <FormCol uiSize={5}>
              <Text>
                {this.state.validImage === false ? "Invalid file type" : ""}
              </Text>
            </FormCol>
          </FormRow>
          <FormRow>
            <FormCol first uiSize={1} />
            <FormCol uiSize={5}>
              <Checkbox>
                <CheckboxTick
                  checked={this.state.isChecked}
                  onClick={(e: any) => this.handleChange(e, "checkbox")}
                />
                <CheckboxLabel>Send Current App</CheckboxLabel>
              </Checkbox>
            </FormCol>
          </FormRow>
          <FormRow noPadding>
            <ButtonGroup uiSize="xl" contentRight={true}>
              <Button
                actionBtn={true}
                uiBackground={500}
                border
                minWidth
                caption="Submit"
                uiSize="s"
                active
                onClick={(e: any) => this.onSubmit(e)}
                disabled={this.state.isLoading}
              >
                {this.state.isLoading ? <Spinner /> : null}
              </Button>
            </ButtonGroup>
          </FormRow>
        </FormGroup>
      </Form>
    );
  }
}
