import { IEvent, ICodeEngine } from "common-interfaces";
import {
  Bar,
  Pane,
  Text,
  WrapperDiv,
  Button,
  Icon,
  Option,
  OptionMenu,
  OptionMenuLeft,
  OptionMenuTitle,
  OptionMenuRight,
  COLORS,
  Checkbox,
  CheckboxLabel,
  CheckboxTick,
  MenuDropdown
} from "components-x";
import { File } from "domain-x";
import * as React from "react";
import { PureComponent } from "react";
import { get, capitalize } from "lodash";
import { Session } from "../../../models/Session";
import ExportLayers from "../../../Commands/Layer/ExportLayers";
import { BX_PREVIEW_FILE_PATH } from "bx-constants";
import SaveProject from "../../../Commands/Workspace/SaveProject";
import { action } from "model";
import DownloadProject from "../../../Commands/Layer/DownloadProject";
import SetSmartFlex from "../../../Commands/Layer/SetSmartFlex";
import { Alert } from "dialog-x";
import UpdatePreviewStage from "../../../Commands/CommandServices/UpdatePreviewStage";
import ExternalComponentsRenderer from "../ExternalComponentsRenderer";

const path = require("path");
type propType = {
  selectedFile: File | undefined;
  session: Session;
  changeSize: () => void;
  onEvent: (event: IEvent) => void;
};
class LayerPreview extends PureComponent<propType, {}> {
  syncCode: boolean = true;
  paneRef: any;
  previousSelectedFile: File;
  async componentDidMount() {
    this.props.session.on(
      ["selectedFile", "selectedLayers", "codeEngine", "smartFlex"],
      this.onUpdate
    );
    const file = this.getFile();
    if (file) {
      this.previousSelectedFile = file;
      this.forceUpdate();
    }
    this.props.session.on("projectLock", this.onUpdate);

    window.document.addEventListener("mousemove", this.updatePreview);

    UpdatePreviewStage(this.props.session);
  }
  componentWillUnmount() {
    if (this.getFile()) {
      this.props.session.off("selectedFile", this.onUpdate);
    }
    this.props.session.off(
      ["selectedLayers", "codeEngine", "smartFlex"],
      this.onUpdate
    );
    this.props.session.off("projectLock", this.onUpdate);

    window.document.removeEventListener("mousemove", this.updatePreview);
  }
  downloadProject = async () => {
    if (this.props.session.codeEngineName === "flutter") {
      Alert(
        "Coming soon",
        "Project download is not available for Flutter at the moment"
      );
      return;
    }

    if (!this.props.session.readonly) {
      action(async () => {
        await this.props.session.commandManager.executeAndSkip(
          new SaveProject(this.props.session)
        );
      });
    }

    action(async () => {
      await this.props.session.commandManager.executeAndSkip(
        new DownloadProject(this.props.session)
      );
    });
  };
  updatePreview = (e: any) => {
    const className = get(e, "target.className", undefined);
    if (
      className &&
      className.indexOf &&
      className.indexOf("layer-preview-resizer-pane") !== -1
    ) {
      this.forceUpdate();
    }
  };
  downloadComponent = async () => {
    const file = this.getFile();
    if (file) {
      this.props.session.commandManager.executeAndSkip(
        new ExportLayers(this.props.session, file)
      );
    }
  };

  showPreview() {
    const { session } = this.props;
    return (
      session.getLayersFromSelectedLayerCollection().length > 0 &&
      session.getLayersFromSelectedLayerCollection()[0] !==
        session.currentRootLayer
    );
  }
  getFile() {
    const { session } = this.props;
    const showPreviewLayerCode = this.showPreview();
    if (showPreviewLayerCode) {
      return session.domain.files.get(BX_PREVIEW_FILE_PATH);
    } else {
      return session.selectedFile;
    }
  }
  onUpdate = (key: string) => {
    this.forceUpdate();
  };

  onClick() {
    this.props.changeSize();
  }
  getFileName(): string {
    const file = this.getFile();
    if (file) {
      return path.basename(file.path);
    }
    return "index.js";
  }

  changeCodeEngine = (codeEngineName: string) => (event: any) => {
    // if (codeEngineName === "react" || codeEngineName === "react-native") {
    this.props.session.selectCodeEngine(codeEngineName);
    // } else {
    // if (
    //   window.location.href.includes("pre-cloud.") ||
    //   window.location.href.includes("localhost")
    // ) {
    //   this.props.session.selectCodeEngine(codeEngineName);
    // } else {
    //   Alert(
    //     "Coming soon",
    //     "We're trying our best to bring you Flutter code soon"
    //   );
    // }
    // }
  };

  calculateZoom() {
    const file = this.getFile();

    let zoom = 0.35;
    // TODO: uncomment this
    // if (file) {
    //   const renderCompiledFile = file.getBoundingClientRect();
    //   if (this.paneRef && renderCompiledFile) {
    //     const viewport: any = {};
    //     viewport.height = this.paneRef.clientHeight - 120;
    //     viewport.width = this.paneRef.clientWidth;
    //     let newSize = Math.max(
    //       renderCompiledFile.width as any,
    //       renderCompiledFile.height as any
    //     );
    //     const viewportAR = viewport.width / viewport.height;
    //     // console.log(viewportAR, "hello here");
    //     if (viewportAR > 1) {
    //       zoom = viewport.height / newSize;
    //     } else {
    //       zoom = viewport.width / newSize;
    //     }
    //   }
    // }
    return zoom;
  }
  render() {
    const zoom = this.calculateZoom();
    const file = this.getFile();
    let previewStage = this.props.session.stages.get(BX_PREVIEW_FILE_PATH);

    return (
      <div style={{ background: "#FFF", width: "100%" }}>
        <Pane
          noBackground
          className="export-layer-preview"
          ref={(ref: any) => (this.paneRef = ref)}
        >
          <Bar
            uiBackground={700}
            uiSize={76}
            style={
              { display: "flex", alignItems: "center" } // padder
            }
            className="px-0"
          >
            <WrapperDiv
              style={{
                flexGrow: 1,
                display: "flex",
                flexDirection: "row",
                justifyContent: "space-between"
              }}
            >
              <WrapperDiv
                style={{
                  display: "flex",
                  flexDirection: "row",
                  alignItems: "baseline"
                }}
                className="p-2"
              >
                <ExternalComponentsRenderer
                  session={this.props.session}
                  placement="code-panel-header-code-engines:before"
                />
                {/* <Button
                  className={
                    "py-2 px-3" +
                    (this.props.session.codeEngineName === "react-native"
                      ? " highlight-filter"
                      : "")
                  }
                  style={{ flexDirection: "column", padding: 10 }}
                  transparent
                  icon={
                    <img
                      src={
                        this.props.session.envConstants.BUILDERX_ASSETS_URL +
                        "/icons/RN.svg"
                      }
                      style={{ width: 20 }}
                    />
                  }
                  data-cypress-id="react-native-code-button"
                  onClick={this.changeCodeEngine("react-native")}
                >
                  <Text uiSize="xs" style={{ paddingTop: 5 }}>
                    React Native
                  </Text>
                </Button> */}
                {/* <Button
                  className={
                    "py-2 px-3" +
                    (this.props.session.codeEngineName === "react"
                      ? " highlight-filter"
                      : "")
                  }
                  style={{ flexDirection: "column", padding: 10 }}
                  transparent
                  icon={
                    <img
                      src={
                        this.props.session.envConstants.BUILDERX_ASSETS_URL +
                        "/icons/React.svg"
                      }
                      style={{ width: 20 }}
                    />
                  }
                  data-cypress-id="react-code-button"
                  onClick={this.changeCodeEngine("react")}
                >
                  <Text uiSize="xs" style={{ paddingTop: 5 }}>
                    React
                  </Text>
                </Button> */}
                {this.props.session.codeEngines.map((engine: ICodeEngine) => {
                  return (
                    <Button
                      key={`code-engine-button-${engine.meta.name}`}
                      className={
                        "py-2 px-3" +
                        (this.props.session.codeEngineName === engine.meta.name
                          ? " highlight-filter"
                          : "")
                      }
                      style={{ flexDirection: "column" }}
                      transparent
                      icon={
                        <img src={engine.meta.icon} style={{ width: 20 }} />
                      }
                      data-cypress-id="flutter-code-button"
                      onClick={this.changeCodeEngine(engine.meta.name)}
                    >
                      <Text uiSize="xs" style={{ paddingTop: 5 }}>
                        {engine.meta.displayName
                          ? engine.meta.displayName
                          : capitalize(engine.meta.name)}
                      </Text>
                    </Button>
                  );
                })}
                <ExternalComponentsRenderer
                  session={this.props.session}
                  placement="code-panel-header-code-engines:after"
                />
              </WrapperDiv>
              <WrapperDiv
                style={{
                  display: "flex",
                  flexDirection: "row",
                  alignItems: "center"
                }}
              >
                <ExternalComponentsRenderer
                  session={this.props.session}
                  placement="code-panel-header-center"
                />
              </WrapperDiv>
              <WrapperDiv
                style={{
                  display: "flex",
                  flexDirection: "row",
                  alignItems: "center"
                }}
                className="p-3 mr-2"
              >
                <ExternalComponentsRenderer
                  session={this.props.session}
                  placement="code-panel-header-cog:before"
                />
                <MenuDropdown className="mr-2" alignRight>
                  <Option style={{ background: "transparent" }}>
                    <OptionMenu
                      transparent
                      onClick={(e: any) => {
                        e.stopPropagation();
                      }}
                    >
                      <Icon name="cog" size={16} />
                    </OptionMenu>
                    <MenuDropdown child style={{ width: 200 }}>
                      <Option key="smart-flex">
                        <OptionMenu>
                          <Checkbox
                            style={{ color: "#FFF" }}
                            onClick={(e: any) => {
                              this.props.session.commandManager.executeAndSkip(
                                new SetSmartFlex(
                                  this.props.session,
                                  !this.props.session.smartFlex
                                )
                              );
                              e.stopPropagation();
                            }}
                          >
                            <CheckboxTick
                              checked={this.props.session.smartFlex}
                              onChange={() => {
                                //
                              }}
                            />
                            <CheckboxLabel
                              uiSize={"m"}
                              className="px-2"
                              lineHeight="1.5"
                              style={{ fontWeight: 500 }}
                            >
                              Automatically convert Absolute to Flex
                            </CheckboxLabel>
                          </Checkbox>
                        </OptionMenu>
                      </Option>
                      <ExternalComponentsRenderer
                        session={this.props.session}
                        placement="code-panel-header-cog-options"
                      />
                    </MenuDropdown>
                  </Option>
                </MenuDropdown>
                <ExternalComponentsRenderer
                  session={this.props.session}
                  placement="code-panel-header-cog:after"
                />
                <WrapperDiv
                  style={{ display: "flex", flexDirection: "column" }}
                >
                  <WrapperDiv style={{ display: "flex" }}>
                    <ExternalComponentsRenderer
                      session={this.props.session}
                      placement="code-panel-header-donwload:before"
                    />
                    <Button
                      captionBold
                      uiBackground={600}
                      uiSize="m"
                      actionBtn
                      active
                      onClick={this.downloadComponent}
                      className="pl-2 pr-0"
                      style={{ borderRadius: "2px 0px 0px 2px" }}
                    >
                      <Text
                        uiSize="s"
                        bold
                        letterSpacing
                        style={{ width: 169, color: "white" }}
                      >
                        Download Component
                      </Text>
                    </Button>
                    <MenuDropdown
                      alignRight
                      style={{
                        backgroundColor: COLORS.secondary["600"],
                        height: 35,
                        justifyContent: "center",
                        alignItems: "center",
                        display: "flex",
                        borderRadius: "0px 2px 2px 0px"
                      }}
                      className="pr-2"
                    >
                      <Option>
                        <OptionMenu
                          transparent
                          style={{
                            paddingTop: 5,
                            overflow: "visible",
                            backgroundColor: COLORS.secondary["600"]
                          }}
                        >
                          <Icon
                            data-cypress-id="download-dropdown"
                            name="white-downarrow"
                            size={10}
                            marginLeft
                            style={{ color: "black" }}
                            onPress={(e: any) => {
                              //
                            }}
                          />
                        </OptionMenu>
                        <MenuDropdown
                          child
                          style={{
                            width: 212.63,
                            marginTop: 5,
                            marginRight: -9
                          }}
                        >
                          <Option onClick={this.downloadProject}>
                            <OptionMenu>
                              <OptionMenuLeft />
                              <OptionMenuTitle style={{ color: "white" }}>
                                Download Project
                              </OptionMenuTitle>
                              <OptionMenuRight />
                            </OptionMenu>
                          </Option>
                          {/* {process.env.NODE_ENV !== "production" ? (
                            // <Option
                            //   onClick={this.runProject}
                            //   data-cypress-id="sync-option"
                            // >
                            //   <OptionMenu>
                            //     <OptionMenuLeft />
                            //     <OptionMenuTitle style={{ color: "white" }}>
                            //       Sync To React App
                            //     </OptionMenuTitle>
                            //     <OptionMenuRight />
                            //   </OptionMenu>
                            // </Option>
                          ) : (
                            ""
                          )} */}
                        </MenuDropdown>
                      </Option>
                    </MenuDropdown>
                    <ExternalComponentsRenderer
                      session={this.props.session}
                      placement="code-panel-header-donwload:after"
                    />
                  </WrapperDiv>
                </WrapperDiv>
              </WrapperDiv>
            </WrapperDiv>
          </Bar>

          {previewStage ? (
            <div
              style={{
                height: `calc(100% - ${76}px)`,
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                overflow: "hidden",
                pointerEvents: "none",
                padding: 25
              }}
            >
              {/* <div
                style={{
                  transform: `scale(${zoom})`,
                  transformOrigin: "50% 50%",
                  height: `calc(100% - ${88 / zoom}px)`,
                  pointerEvents: "none"
                }}
              > */}
              <div
                style={{
                  justifyContent: "center",
                  alignItems: "center",
                  display: "flex",
                  flex: 1,
                  height: "100%"
                }}
              >
                <div
                  className="layer-preview-stage"
                  style={{
                    position: "relative",
                    width: previewStage.canvas.layout.get("width"),
                    height: previewStage.canvas.layout.get("height")
                  }}
                />
              </div>
              {/* </div> */}
            </div>
          ) : (
            <div
              style={{
                flex: 1,
                justifyContent: "center",
                alignItems: "center",
                height: "calc(100% - 90px)",
                display: "flex"
              }}
            >
              <Text>Select layer(s) to see preview</Text>
            </div>
          )}
        </Pane>
      </div>
    );
  }
}

export default LayerPreview;
