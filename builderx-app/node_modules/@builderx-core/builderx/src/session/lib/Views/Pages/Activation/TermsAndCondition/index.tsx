import * as React from "react";

import { Session } from "../../../../models/Session";
import { IAppUpdater, IUserService } from "common-interfaces";

import SetPageRoute from "../../../../Commands/Router/SetPageRoute";
import TermsAndConditions from "./TermsAndConditions";
import { action } from "model";

class TermsAndConditionsContainer extends React.Component<
  { session: Session },
  any
> {
  appUpdaterService: IAppUpdater;
  userService: IUserService;
  constructor(props: any) {
    super(props);
    this.appUpdaterService = this.props.session.drivers.appUpdaterService;
    this.userService = this.props.session.drivers.userService;
  }

  registerUser() {
    this.props.session.drivers.userService.registerAndVerifyLicense(null).then(
      (isExpired: any) => {
        action(() => {
          this.props.session.drivers.userService.setNewTAndCAccepted(true);
          if (isExpired) {
            this.props.session.commandManager.executeAndSkip(
              new SetPageRoute(this.props.session, "error/expired")
            );
          } else {
            this.props.session.notificationManager.notifySuccess(
              "You have successfully registered",
              "Register"
            );
            this.props.session.commandManager.executeAndSkip(
              new SetPageRoute(this.props.session, "startScreen")
            );
            this.userService.setUpdateDownloaded(false);
            this.appUpdaterService.checkAndMatchVersions();
            this.appUpdaterService.checkForUpdates();
            setInterval(() => {
              if (navigator.onLine) {
                this.appUpdaterService.checkForUpdates();
              }
            }, 120000);
          }
        });
      },
      (error: any) => {
        action(() => {
          console.log(error, "error");
          this.props.session.commandManager.executeAndSkip(
            new SetPageRoute(this.props.session, "activation/failed")
          );
        });
      }
    );
  }

  closeTermsAndConditions = () => {
    this.props.session.drivers.appLifeCycleService.quitApp();
  };
  render() {
    return (
      <TermsAndConditions
        appVersion={"0.0.1"}
        closeTermsAndConditions={this.closeTermsAndConditions}
        registerUser={() => {
          this.registerUser();
        }}
        builderxUrl={this.props.session.envConstants.WEBSITE_URL}
        builderxAssetsUrl={this.props.session.envConstants.BUILDERX_ASSETS_URL}
      />
    );
  }
}

export { TermsAndConditionsContainer as TermsAndConditions };
