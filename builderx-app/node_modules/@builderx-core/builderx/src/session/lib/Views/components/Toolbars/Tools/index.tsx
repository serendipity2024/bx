import * as React from "react";
import { Icon, ButtonGroup, Button, WrapperDiv } from "components-x";
import { Session } from "../../../../models/Session";
import SelectTool from "../../../../Commands/Session/SelectTool";
import Stage from "../../../../models/Stage";
import { action } from "model";
import OpenDialogAndAddImage from "./../../../../services/OpenDialogAndAddImage";
import ExternalComponentsRenderer from "../../ExternalComponentsRenderer";

type propType = { session: Session; currentStage: Stage };
export default class Tools extends React.PureComponent<propType, any> {
  constructor(props: any) {
    super(props);
  }
  onUpdate = () => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.session.domain.on("files", this.onUpdate);
    this.props.session.on("projectLock", this.onUpdate);
    this.props.currentStage.tools.on("selectedTool", this.onUpdate);
  }
  componentDidUpdate(prevProps: propType) {
    if (prevProps.currentStage !== this.props.currentStage) {
      prevProps.currentStage.tools.off("selectedTool", this.onUpdate);
      this.props.currentStage.tools.on("selectedTool", this.onUpdate);
    }
  }
  componentWillUnmount() {
    this.props.session.domain.off("files", this.onUpdate);
    this.props.session.off("projectLock", this.onUpdate);

    this.props.currentStage.tools.off("selectedTool", this.onUpdate);
  }

  handleClick = (tool: string) => {
    if (this.props.session.readonly) {
      return;
    }
    const session = this.props.session;
    const executeAndSkip = session.commandManager.executeAndSkip;

    switch (tool) {
      case "default":
      case "view":
      case "ellipse":
      case "text":
      case "icon":
      case "path":
        action(() => {
          action(() => {
            executeAndSkip(new SelectTool(session, tool));
          });
        });
        break;
      case "image":
        action(() => {
          executeAndSkip(new SelectTool(session, "default"));
        });
        OpenDialogAndAddImage(session);
        break;
      default:
        break;
    }
  };
  addWrapper = (component: any) => {
    return (
      <WrapperDiv
        style={{
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          padding: "10px"
        }}
      >
        {component}
      </WrapperDiv>
    );
  };
  render() {
    const { session, currentStage } = this.props;
    const selectedTool = currentStage.tools.getSelectedTool();
    return (
      <ButtonGroup
        style={{ opacity: session.readonly ? 0.5 : 1, flexDirection: "column" }}
        uiSize="xl"
      >
        <ExternalComponentsRenderer
          session={this.props.session}
          placement="insert-toolbar:before"
        />
        <ExternalComponentsRenderer
          session={this.props.session}
          placement="insert-tool-default:before"
        />
        {this.addWrapper(
          <Button
            data-cypress-id="tool-selector"
            name="bx-tool-default"
            barButton
            style={{ width: 35 }}
            transparent
            icon={
              <Icon
                className={selectedTool === "default" ? "highlight-filter" : ""}
                name="icon-cursor"
                size={16}
              />
            }
            headerMenu
            disabled={session.readonly}
            onClick={() => this.handleClick("default")}
            data-tip="Select Default tool"
          />
        )}
        <ExternalComponentsRenderer
          session={this.props.session}
          placement="insert-tool-default:after"
        />
        <ExternalComponentsRenderer
          session={this.props.session}
          placement="insert-toolbar-rectangle:before"
        />
        {this.addWrapper(
          <Button
            data-cypress-id="tool-rectangle"
            id="app-tutorial-rect-tool"
            name="bx-tool-rectangle"
            barButton
            style={{ width: 35 }}
            transparent
            headerMenu
            icon={
              <Icon
                className={selectedTool === "view" ? "highlight-filter" : ""}
                key="rectangle-shape-icon"
                name="rectangle-shape"
                size={16}
              />
            }
            disabled={session.readonly}
            onClick={() => this.handleClick("view")}
            data-tip="Insert Rectangle"
          />
        )}
        <ExternalComponentsRenderer
          session={this.props.session}
          placement="insert-toolbar-rectangle:after"
        />
        <ExternalComponentsRenderer
          session={this.props.session}
          placement="insert-toolbar-ellipse:before"
        />
        {this.addWrapper(
          <Button
            data-cypress-id="tool-ellipse"
            name="bx-tool-ellipse"
            barButton
            style={{ width: 35 }}
            transparent
            headerMenu
            icon={
              <Icon
                className={selectedTool === "ellipse" ? "highlight-filter" : ""}
                key="ellipse-shape-icon"
                name="ellipse-shape"
                size={16}
              />
            }
            disabled={session.readonly}
            onClick={() => this.handleClick("ellipse")}
            data-tip="Insert Ellipse"
          />
        )}
        <ExternalComponentsRenderer
          session={this.props.session}
          placement="insert-toolbar-rectangle:after"
        />
        <ExternalComponentsRenderer
          session={this.props.session}
          placement="insert-toolbar-image:before"
        />
        {this.addWrapper(
          <Button
            data-cypress-id="tool-image"
            name="bx-tool-image"
            barButton
            transparent
            style={{ width: 35 }}
            icon={
              <Icon
                className={selectedTool === "image" ? "highlight-filter" : ""}
                key="image-shape-icon"
                name="image"
                size={16}
              />
            }
            headerMenu
            disabled={session.readonly}
            onClick={() => this.handleClick("image")}
            data-tip="Insert Image"
          />
        )}
        <ExternalComponentsRenderer
          session={this.props.session}
          placement="insert-toolbar-image:after"
        />
        <ExternalComponentsRenderer
          session={this.props.session}
          placement="insert-toolbar-text:before"
        />
        {this.addWrapper(
          <Button
            data-cypress-id="tool-text"
            name="bx-tool-text"
            barButton
            transparent
            icon={
              <Icon
                className={selectedTool === "text" ? "highlight-filter" : ""}
                key="text-icon"
                name="text"
                size={16}
              />
            }
            headerMenu
            disabled={session.readonly}
            onClick={() => this.handleClick("text")}
            data-tip="Insert Text"
          />
        )}
        <ExternalComponentsRenderer
          session={this.props.session}
          placement="insert-toolbar-text:after"
        />
        <ExternalComponentsRenderer
          session={this.props.session}
          placement="insert-toolbar-icon:before"
        />
        {this.addWrapper(
          <Button
            data-cypress-id="tool-icon"
            name="bx-tool-icon"
            barButton
            transparent
            headerMenu
            icon={
              <Icon
                className={selectedTool === "icon" ? "highlight-filter" : ""}
                name="icon"
                key="icon"
                size={16}
              />
            }
            disabled={session.readonly}
            onClick={() => this.handleClick("icon")}
            data-tip="Insert Icon"
          />
        )}
        <ExternalComponentsRenderer
          session={this.props.session}
          placement="insert-toolbar-icon:after"
        />
        {/* <Button
          data-cypress-id="tool-pen"
          name="bx-tool-pen"
          barButton
          transparent
          headerMenu
          icon={
            <Icon
              className={selectedTool === "path" ? "highlight-filter" : ""}
              name="pencil"
              key="pencil"
              size={16}
            />
          }
          disabled={session.readonly}
          onClick={() => this.handleClick("path")}
          data-tip="Insert Path"
        /> */}
      </ButtonGroup>
    );
  }
}
