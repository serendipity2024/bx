import * as React from "react";
import { Stage, Session } from "session";
import { FormRow, Text } from "components-x";
import { get, isEmpty } from "lodash";
import { IEvent } from "common-interfaces";
import {
  materialComponentLibrary,
  cupertinoComponentLibrary
} from "shared-components";

export class ComponentBlock extends React.Component<
  {
    fileName: string;
    session: Session;
    category?: string;
    library?: string;
    stage?: Stage;
    external: boolean;
    onEvent: (e: IEvent) => void;
  },
  any
> {
  stageContainer: HTMLDivElement | null;

  onUpdate = () => {
    if (!this.props.external) {
      this.forceUpdate();
    }
  };

  componentDidMount() {
    if (this.props.stage) {
      const symbolFile = this.props.stage.canvas.children[0].executeFunction(
        "getData",
        "domainRef"
      );
      symbolFile.props.style.on(
        ["top", "left", "position", "width", "height"],
        this.onUpdate
      );
    }

    let dims: any;
    if (this.props.stage) {
      dims = this.props.stage.canvas.children[0].getBoundingClientRect();
    }
    // @ts-ignore
    const leftPanelStageContainer: HTMLElement = this.stageContainer;

    if (leftPanelStageContainer && this.props.stage) {
      leftPanelStageContainer.innerHTML = "";

      this.props.stage.canvasContainerDom.style.visibility = "visible";
      leftPanelStageContainer.appendChild(this.props.stage.canvasContainerDom);
      this.props.stage.canvasContainerDom.style.display = "block";
    }
  }

  render() {
    let height = 35,
      width = 100,
      zoom = 1;
    if (this.props.stage && !isEmpty(this.props.stage.canvas.children)) {
      const artDims = this.props.stage.canvas.children[0].getBoundingClientRect();
      width = artDims.width;
      height = artDims.height;
      zoom = Math.min(1, 80 / width);
    }

    let dims: any;

    if (this.props.stage) {
      dims = this.props.stage.canvas.children[0].getBoundingClientRect();
    }

    if (this.props.stage) {
      this.props.stage.canvas.setLayout({
        width: dims.width,
        height: dims.height
      });
      this.props.stage.canvas.setViewport({
        width: dims.width,
        height: dims.height
      });
      this.props.stage.canvas.children[0].setLayout({
        width: dims.width,
        height: dims.height,
        bottom: undefined,
        right: undefined,
        top: 0,
        left: 0,
        position: "absolute"
      });
      this.props.stage.canvas.executeFunction("setZoom", 1);
      this.props.stage.canvas.setZoom(1);
      this.props.stage.canvas.executeFunction("setScroll", {
        x: 0.5,
        y: 0.5
      });
      const scrollComponent = get(
        // @ts-ignore
        this.props.stage.canvas.dom.getElementsByClassName("scrollcontainer"),
        "0.children.0"
      );
      if (scrollComponent) {
        scrollComponent.style.overflow = "hidden";
      }
      // const scrollContainer = get(
      //   // @ts-ignore
      //   this.props.stage.canvas.dom.getElementsByClassName("scrollcontainer"),
      //   "0"
      // );
      // if (scrollContainer) {
      //   scrollContainer.style.overflow = "hidden";
      // }
    }

    const aspectRatio = width / height;

    const wrapperWidth = aspectRatio > 3 ? "100%" : "48%";
    zoom = aspectRatio > 3 ? (zoom * 2 > 1 ? 1 : zoom * 2) : zoom;

    if (this.props.stage) {
      this.props.stage.canvas.children[0].setLayout({
        width: dims.width,
        height: dims.height,
        bottom: undefined,
        right: undefined,
        top: 0,
        left: 0,
        position: "absolute"
      });
      this.props.stage.canvas.children[0].setStyle(
        "backgroundColor",
        "transparent"
      );
    }
    return (
      <div
        style={{
          width: wrapperWidth,
          alignItems: "center",
          justifyContent: "center",
          // backgroundColor: COLORS[600],
          // backgroundColor: "red",
          // display: "flex",
          // flexDirection: "column",
          marginBottom: 30
          // borderRadius: 5
          // b

          // padding: 5,
        }}
      >
        <FormRow
          key={`shared-component-element-${this.props.fileName}`}
          alignTop
          onHover
          uiBackground={"600"}
          paddingBottom={5}
          style={{
            // opacity: 0.6,
            // marginBottom: 5,
            // marginTop: 10,
            // paddingTop: 10,
            height: "100%",
            borderRadius: 5,
            paddingBottom: 10,
            marginBottom: 5,
            alignItems: "center",
            justifyContent: "center",
            cursor: "-webkit-grab"
          }}
          draggable
          onDrag={(e: any) => {
            // console.log({ ...e }, "e drag");
          }}
          onContextMenu={(e: any) => {
            if (!this.props.external && this.props.stage) {
              this.props.onEvent({
                type: "onContextMenu",
                payload: { file: this.props.stage.id, tab: "components" },
                originalEvent: e
              });
            }
          }}
          onDoubleClick={(e: any) => {
            if (!this.props.external && this.props.stage) {
              this.props.onEvent({
                type: "changeSceneToSymbol",
                payload: this.props.stage.id,
                target: null,
                originalEvent: null
              });
            }
          }}
          onDragStart={(e: any) => {
            if (!this.stageContainer || this.props.session.readonly) {
              return;
            }

            const dom = e.target.firstChild;

            if (!dom) {
              return;
            }
            const ghostImage = dom.cloneNode(true);

            (ghostImage as HTMLDivElement).style.height = `${height}`;
            (ghostImage as HTMLDivElement).style.position = `absolute`;
            (ghostImage as HTMLDivElement).style.width = `${width}`;
            (ghostImage as HTMLDivElement).style.zIndex = `-999`;
            (ghostImage as HTMLDivElement).style.pointerEvents = `none`;
            (ghostImage as HTMLDivElement).className = `ghostImage-sharedComponent`;
            (ghostImage as HTMLDivElement).style.zoom = `${this.props.session.currentStage.tools.zoom}`;
            (ghostImage as HTMLDivElement).style.overflow = `hidden`;

            // ghostImage.style.cursor = "-webkit-grabbing";
            // e.target.style.cursor = "-webkit-grabbing";

            e.dataTransfer.effectAllowed = "copyMove";

            document.body.appendChild(ghostImage);
            e.dataTransfer.setDragImage(ghostImage, 0, 0);
            e.dataTransfer.dropEffect = "move";
            this.props.onEvent({
              type: "onDragStartComponent",
              payload: {
                external: this.props.external,
                class: this.props.category,
                height: height,
                width: width,
                symbolPath: this.props.stage!.id,
                name: this.props.fileName,
                library:
                  this.props.library === "Material"
                    ? materialComponentLibrary
                    : cupertinoComponentLibrary
              },
              target: null,
              originalEvent: e
            });
          }}
          onDragEnd={() => {
            const ghostImage = document.querySelector(
              ".ghostImage-sharedComponent"
            );
            if (ghostImage) {
              ghostImage.remove();
            }
          }}
        >
          {/* <Button
              style={{ position: "absolute", zIndex: 1 }}
              marginTop={5}
              marginRight
              onClick={() => {
                if (this.props.stage) {
                  this.props.onEvent({
                    type: "deleteSymbol",
                    payload: this.props.stage.id,
                    target: null,
                    originalEvent: null
                  });
                }
              }}
            >
              <Icon name="delete-record" size={12} />
            </Button> */}
          <div
            ref={r => (this.stageContainer = r)}
            style={{
              width: width,
              height: height,
              zoom: zoom,
              pointerEvents: "none"
            }}
          />
        </FormRow>
        <Text
          uiColor={"400"}
          uiSize={"xs"}
          style={{
            textAlign: "center",
            textOverflow: "ellipsis",
            overflow: "hidden"
          }}
          data-tip={this.props.fileName}
        >
          {this.props.fileName}
        </Text>
      </div>
    );
  }
}
