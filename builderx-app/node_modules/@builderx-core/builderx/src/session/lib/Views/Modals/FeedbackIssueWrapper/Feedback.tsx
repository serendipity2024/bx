import * as React from "react";
import {
  Button,
  ButtonGroup,
  Text,
  FormGroup,
  FormCol,
  FormRow,
  Form,
  TextArea,
  Checkbox,
  CheckboxTick,
  CheckboxLabel,
  Spinner
} from "components-x";
import ReactStars from "react-stars";
import { Session } from "../../../models/Session";
import SetModalRoute from "../../../Commands/Router/SetModalRoute";
import { action } from "model";

type propType = { session: Session };
export default class extends React.PureComponent<propType, any> {
  textAreaRef: any;
  constructor(props: propType) {
    super(props);
    this.state = {
      message: "",
      rating: 0,
      isDesigner: false,
      isDeveloper: false,
      submitting: false
    };
  }
  componentDidMount() {
    document.addEventListener("keyup", this._handleKeyDown);
  }
  componentWillUnmount() {
    document.removeEventListener("keyup", this._handleKeyDown);
  }
  _handleKeyDown = (event: any) => {
    const ESCAPE_KEY = 27;
    const ENTER_KEY = 13;
    switch (event.keyCode) {
      case ESCAPE_KEY:
        this.exitModal();
        break;
      case ENTER_KEY:
        this.onSubmit(event);
        break;
      default:
        break;
    }
  };
  exitModal = () => {
    action(() => {
      this.props.session.commandManager.executeAndSkip(
        new SetModalRoute(this.props.session, "")
      );
    });
  };
  handleChange = (e: any, property: string) => {
    switch (property) {
      case "message":
        this.setState({ message: e.target.value });
        break;
      case "rating":
        this.setState({ rating: e });
        break;
      case "designer":
        this.setState({
          isDesigner: e.target.checked
        });
        break;
      case "developer":
        this.setState({
          isDeveloper: e.target.checked
        });
        break;
      default:
        break;
    }
  };
  onSubmit = (e: any) => {
    e.preventDefault();
    this.setState({ submitting: true });
    this.props.session.feedback.feedbackForm.setMessage(this.state.message);
    this.props.session.feedback.feedbackForm.setRating(this.state.rating);
    this.props.session.feedback.feedbackForm.setIsDesigner(
      this.state.isDesigner
    );
    this.props.session.feedback.feedbackForm.setIsDeveloper(
      this.state.isDeveloper
    );
    if (this.props.session.feedback.feedbackForm.rating !== 0) {
      // TODO: uncomment next line once api call is added
      //   this.props.sendUserFeedback();
    }
    this.exitModal();
  };
  keyPress = (e: any) => {
    if (
      e.keyCode === 13 &&
      document.activeElement &&
      document.activeElement.className !== this.textAreaRef.className
    ) {
      this.onSubmit(e);
    } else if (e.keyCode === 27) {
      this.exitModal();
    }
  };

  render() {
    return (
      <Form
        onKeyUp={(e: any) => this.keyPress(e)}
        onSubmit={(e: any) => this.onSubmit(e)}
      >
        <FormGroup noPadding>
          <FormRow>
            <FormCol first>
              <Text>Rating</Text>
            </FormCol>
            <FormCol uiSize={2}>
              <ReactStars
                char="âœ©"
                id="rating"
                count={5}
                value={this.state.rating}
                onChange={(e: any) => this.handleChange(e, "rating")}
                size={20}
                color2={"#FFF"}
              />
            </FormCol>
          </FormRow>
          <FormRow>
            <FormCol uiSize={1} />
            <FormCol first uiSize={2}>
              <Text>
                {this.state.submitting && this.state.rating === 0
                  ? "This Field Is Required"
                  : ""}
              </Text>
            </FormCol>
          </FormRow>
          <FormRow>
            <FormCol first>
              <Text>Message</Text>
            </FormCol>
            <FormCol uiSize={2}>
              <TextArea
                uiBackground={700}
                type="text"
                cols={40}
                rows={5}
                placeholder="Type here..."
                onChange={(e: any) => this.handleChange(e, "message")}
                autoFocus
                ref={(comp: any) => {
                  this.textAreaRef = comp;
                }}
                value={this.state.message}
              />
            </FormCol>
          </FormRow>
          <FormRow>
            <FormCol first />
            <FormCol uiSize={2}>
              <FormRow>
                <Text>I am </Text>
                <Checkbox center>
                  <CheckboxTick
                    checked={this.state.isDeveloper}
                    onClick={(e: any) => this.handleChange(e, "developer")}
                  />
                  <CheckboxLabel uiSize={"m"}>Developer</CheckboxLabel>
                </Checkbox>
                <Text>and/or</Text>
                <Checkbox center>
                  <CheckboxTick
                    checked={this.state.isDesigner}
                    onClick={(e: any) => this.handleChange(e, "designer")}
                  />
                  <CheckboxLabel uiSize={"m"}>Designer</CheckboxLabel>
                </Checkbox>
              </FormRow>
            </FormCol>
          </FormRow>
          <FormRow noPadding>
            <ButtonGroup uiSize="xl" contentRight={true}>
              <Button
                actionBtn={true}
                uiBackground={500}
                border
                minWidth
                caption="Submit"
                uiSize="s"
                type="submit"
                disabled={this.state.isLoading}
                active
              >
                {this.state.isLoading ? <Spinner /> : null}
              </Button>
            </ButtonGroup>
          </FormRow>
        </FormGroup>
      </Form>
    );
  }
}
