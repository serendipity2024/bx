import * as React from "react";
import {
  WrapperDiv,
  PropertyHeader,
  Text,
  Icon,
  Button,
  Scrollbars
} from "components-x";
import { Session } from "session";
import { IEvent } from "common-interfaces";
import ComponentContent from "./ComponentContent";
import ReactTooltip from "react-tooltip";

interface PropType {
  category?: string;
  searchValue?: string;
  library?: string;
  currentSubDesign?: string;
  onEvent: (e: IEvent) => void;
  subHeader?: any;
  sharedComponentsSession?: Session;
  session: Session;
  external?: boolean;
  recent?: boolean;
}

export default class Components extends React.PureComponent<PropType, {}> {
  fuzzy = (source: string, target: string) => {
    var hay = source.toLowerCase(),
      i = 0,
      n = -1,
      l;
    if (!target) {
      return;
    }
    target = target.toLowerCase();
    for (; (l = target[i++]); ) {
      // tslint:disable-next-line:no-bitwise
      if (!~(n = hay.indexOf(l, n + 1))) {
        return false;
      }
    }
    return true;
  };
  componentDidMount() {
    ReactTooltip.rebuild();
  }
  render() {
    return (
      <WrapperDiv
        style={{ overflow: "hidden" }}
        key={`shared-component-parent-${this.props.category}`}
      >
        {(this.props.searchValue && this.props.category
          ? this.fuzzy(this.props.category, this.props.searchValue)
          : true) &&
          this.props.currentSubDesign === "" &&
          !this.props.recent && (
            <PropertyHeader
              uiBackground={800}
              bordered
              paddingLeft={0}
              style={{
                paddingTop: 3,
                paddingBottom: 3,
                marginLeft: 12
              }}
              data-tip={"Explore " + this.props.category}
              uiSize="m"
              onClick={() => {
                this.props.onEvent({
                  type: "setCurrentSubDesign",
                  payload: {
                    currentSubDesign: this.props.category
                  },
                  originalEvent: null,
                  target: null
                });
              }}
            >
              <Text uiSize="s">{this.props.category}</Text>
              <Button
                transparent
                icon={<Icon name="icon-right" size={10} />}
                uiSize="xs"
              />
            </PropertyHeader>
          )}
        {(this.props.searchValue && this.props.category
          ? this.fuzzy(this.props.category, this.props.searchValue)
          : true) &&
          this.props.currentSubDesign === "" &&
          this.props.recent &&
          (console.log(
            `%c
             In recents and props are  `,
            `color:white;background-color:#2274A5;width:50%`,
            this.props
          ),
          (
            <Scrollbars
              autoHide
              style={{
                display: "flex"
              }}
            >
              <Components
                onEvent={this.props.onEvent}
                session={this.props.session}
                external={false}
              />
            </Scrollbars>
          ))}

        {this.props.currentSubDesign === this.props.category && (
          <ComponentContent
            external={this.props.external}
            session={this.props.session}
            onEvent={this.props.onEvent}
            currentSubDesign={this.props.currentSubDesign}
            category={this.props.category}
            sharedComponentsSession={this.props.sharedComponentsSession}
            library={this.props.library}
            subHeader={this.props.subHeader}
          />
        )}
      </WrapperDiv>
    );
  }
}
