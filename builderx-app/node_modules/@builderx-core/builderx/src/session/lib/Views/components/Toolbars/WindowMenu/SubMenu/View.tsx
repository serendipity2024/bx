import * as React from "react";
import { Session } from "session";
import { IEvent } from "common-interfaces";
import {
  Option,
  OptionMenu,
  MenuDropdown,
  OptionMenuTitle,
  OptionMenuRight,
  OptionMenuLeft,
  Icon,
  Checkbox,
  CheckboxTick
} from "components-x";
type propType = {
  onEvent: (event: IEvent) => void;
  session: Session;
  uiSize: number;
};

export default class View extends React.PureComponent<propType, any> {
  componentDidMount() {
    this.props.session.pageRouter.on("currentRoute", this.onUpdate);
    this.props.session.drivers.configuration.on(
      [
        "editor.snap",
        "editor.show.grid",
        "editor.show.ruler",
        "editor.snap.grid",
        "editor.snap.sibling",
        "editor.snap.parent",
        "editor.snap.gutter",
        "editor.snap.ruler"
      ],
      this.onUpdate
    );
    this.props.session.on("projectLock", this.onUpdate);
    this.props.session.on(["displayMode", "currentStage"], this.onUpdate);
  }
  componentWillUnmount() {
    this.props.session.pageRouter.off("currentRoute", this.onUpdate);
    this.props.session.drivers.configuration.off(
      [
        "editor.snap",
        "editor.show.grid",
        "editor.show.ruler",
        "editor.snap.grid",
        "editor.snap.sibling",
        "editor.snap.parent",
        "editor.snap.gutter",
        "editor.snap.ruler"
      ],
      this.onUpdate
    );
    this.props.session.off("projectLock", this.onUpdate);

    this.props.session.off(["displayMode", "currentStage"], this.onUpdate);
  }
  onUpdate = () => {
    this.forceUpdate();
  };
  render() {
    let wrkspcOpsDisabled =
      this.props.session.pageRouter.currentRoute !== "workspace";
    let snapEnabled = this.props.session.drivers.configuration.get(
      "editor.snap"
    );
    return (
      <Option>
        <OptionMenu data-cypress-id="window-menu-view">
          <OptionMenuTitle>View</OptionMenuTitle>
          <OptionMenuRight>
            <Icon name="right-arrow" size={12} />
          </OptionMenuRight>
        </OptionMenu>
        <MenuDropdown child uiSize={210}>
          <Option
            onClick={() => {
              this.props.onEvent({
                target: null,
                type: "zoomIn",
                payload: null,
                originalEvent: null
              });
            }}
          >
            <OptionMenu data-cypress-id="window-menu-view-zoom-in">
              <OptionMenuTitle>Zoom In</OptionMenuTitle>
              <OptionMenuRight>⌘ =</OptionMenuRight>
            </OptionMenu>
          </Option>
          <Option
            onClick={() => {
              this.props.onEvent({
                target: null,
                type: "zoomOut",
                payload: null,
                originalEvent: null
              });
            }}
          >
            <OptionMenu data-cypress-id="window-menu-view-zoom-out">
              <OptionMenuTitle>Zoom Out</OptionMenuTitle>
              <OptionMenuRight>⌘ -</OptionMenuRight>
            </OptionMenu>
          </Option>
          <Option
            onClick={() => {
              this.props.onEvent({
                target: null,
                type: "resetZoom",
                payload: null,
                originalEvent: null
              });
            }}
          >
            <OptionMenu data-cypress-id="window-menu-view-reset-zoom">
              <OptionMenuTitle>Reset Zoom</OptionMenuTitle>
              <OptionMenuRight>⌘ 0</OptionMenuRight>
            </OptionMenu>
          </Option>
          <Option
            disabled={wrkspcOpsDisabled}
            onClick={() => {
              this.props.onEvent({
                target: null,
                type: "toggleSnap",
                payload: null,
                originalEvent: null
              });
            }}
          >
            {!this.props.session.readonly && (
              <OptionMenu data-cypress-id="window-menu-view-toggle-snap">
                <OptionMenuLeft>
                  <Checkbox>
                    <CheckboxTick
                      checked={snapEnabled}
                      onChange={() => {
                        //
                      }}
                    />
                  </Checkbox>
                </OptionMenuLeft>
                <OptionMenuTitle>Snap</OptionMenuTitle>
                <OptionMenuRight>⌘ ⌥ S</OptionMenuRight>
              </OptionMenu>
            )}
          </Option>
          <Option>
            {!this.props.session.readonly && (
              <OptionMenu data-cypress-id="window-menu-view-snap-to">
                <OptionMenuTitle>Snap To</OptionMenuTitle>
                <OptionMenuRight>
                  <Icon name="right-arrow" size={12} />
                </OptionMenuRight>
              </OptionMenu>
            )}
            <MenuDropdown child uiSize={210}>
              <Option
                disabled={wrkspcOpsDisabled || !snapEnabled}
                onClick={() => {
                  this.props.onEvent({
                    target: null,
                    type: "toggleSnapToGrid",
                    payload: null,
                    originalEvent: null
                  });
                }}
              >
                <OptionMenu data-cypress-id="window-menu-view-snap-to-grid">
                  <OptionMenuLeft>
                    <Checkbox>
                      <CheckboxTick
                        checked={this.props.session.drivers.configuration.get(
                          "editor.snap.grid"
                        )}
                        onChange={() => {
                          //
                        }}
                      />
                    </Checkbox>
                  </OptionMenuLeft>
                  <OptionMenuTitle>Grid</OptionMenuTitle>
                  <OptionMenuRight>⌘ ⇧ S G</OptionMenuRight>
                </OptionMenu>
              </Option>
              <Option
                disabled={wrkspcOpsDisabled || !snapEnabled}
                onClick={() => {
                  this.props.onEvent({
                    target: null,
                    type: "toggleSnapToLayers",
                    payload: null,
                    originalEvent: null
                  });
                }}
              >
                <OptionMenu data-cypress-id="window-menu-view-snap-to-layers">
                  <OptionMenuLeft>
                    <Checkbox>
                      <CheckboxTick
                        checked={this.props.session.drivers.configuration.get(
                          "editor.snap.sibling"
                        )}
                        onChange={() => {
                          //
                        }}
                      />
                    </Checkbox>
                  </OptionMenuLeft>
                  <OptionMenuTitle>Layers</OptionMenuTitle>
                  <OptionMenuRight>⌘ ⇧ S L</OptionMenuRight>
                </OptionMenu>
              </Option>

              <Option
                disabled={wrkspcOpsDisabled || !snapEnabled}
                onClick={() => {
                  this.props.onEvent({
                    target: null,
                    type: "toggleSnapToDocuments",
                    payload: null,
                    originalEvent: null
                  });
                }}
              >
                <OptionMenu data-cypress-id="window-menu-view-snap-to-doc">
                  <OptionMenuLeft>
                    <Checkbox>
                      <CheckboxTick
                        checked={this.props.session.drivers.configuration.get(
                          "editor.snap.parent"
                        )}
                        onChange={() => {
                          //
                        }}
                      />
                    </Checkbox>
                  </OptionMenuLeft>
                  <OptionMenuTitle>Parent Bounds</OptionMenuTitle>
                  <OptionMenuRight>⌘ ⇧ S D</OptionMenuRight>
                </OptionMenu>
              </Option>
              <Option
                disabled={wrkspcOpsDisabled || !snapEnabled}
                onClick={() => {
                  this.props.onEvent({
                    target: null,
                    type: "toggleSnapToGutter",
                    payload: null,
                    originalEvent: null
                  });
                }}
              >
                <OptionMenu data-cypress-id="window-menu-view-snap-to-gutter">
                  <OptionMenuLeft>
                    <Checkbox>
                      <CheckboxTick
                        checked={this.props.session.drivers.configuration.get(
                          "editor.snap.gutter"
                        )}
                        onChange={() => {
                          //
                        }}
                      />
                    </Checkbox>
                  </OptionMenuLeft>
                  <OptionMenuTitle>Gutter</OptionMenuTitle>
                  <OptionMenuRight>⌘ ⇧ S U</OptionMenuRight>
                </OptionMenu>
              </Option>
              <Option
                disabled={wrkspcOpsDisabled || !snapEnabled}
                onClick={() => {
                  this.props.onEvent({
                    target: null,
                    type: "toggleSnapToRuler",
                    payload: null,
                    originalEvent: null
                  });
                }}
              >
                <OptionMenu data-cypress-id="window-menu-view-snap-to-ruler">
                  <OptionMenuLeft>
                    <Checkbox>
                      <CheckboxTick
                        checked={this.props.session.drivers.configuration.get(
                          "editor.snap.ruler"
                        )}
                        onChange={() => {
                          //
                        }}
                      />
                    </Checkbox>
                  </OptionMenuLeft>
                  <OptionMenuTitle>Ruler</OptionMenuTitle>
                  <OptionMenuRight>⌘ ⇧ S R</OptionMenuRight>
                </OptionMenu>
              </Option>
            </MenuDropdown>
          </Option>
          <Option>
            <OptionMenu data-cypress-id="window-menu-view-show">
              <OptionMenuTitle>Show</OptionMenuTitle>
              <OptionMenuRight>
                <Icon name="right-arrow" size={12} />
              </OptionMenuRight>
            </OptionMenu>
            <MenuDropdown child uiSize={210}>
              <Option
                disabled={wrkspcOpsDisabled}
                onClick={() => {
                  this.props.onEvent({
                    target: null,
                    type: "toggleShowGrid",
                    payload: null,
                    originalEvent: null
                  });
                }}
              >
                <OptionMenu data-cypress-id="window-menu-view-show-grid">
                  <OptionMenuLeft>
                    <Checkbox>
                      <CheckboxTick
                        checked={this.props.session.drivers.configuration.get(
                          "editor.show.grid"
                        )}
                        onChange={() => {
                          //
                        }}
                      />
                    </Checkbox>
                  </OptionMenuLeft>
                  <OptionMenuTitle>Grid</OptionMenuTitle>
                  <OptionMenuRight>⌘ '</OptionMenuRight>
                </OptionMenu>
              </Option>
              <Option
                disabled={wrkspcOpsDisabled}
                onClick={() => {
                  this.props.onEvent({
                    target: null,
                    type: "toggleShowRuler",
                    payload: null,
                    originalEvent: null
                  });
                }}
              >
                <OptionMenu data-cypress-id="window-menu-view-show-ruler">
                  <OptionMenuLeft>
                    <Checkbox>
                      <CheckboxTick
                        checked={this.props.session.drivers.configuration.get(
                          "editor.show.ruler"
                        )}
                        onChange={() => {
                          //
                        }}
                      />
                    </Checkbox>
                  </OptionMenuLeft>
                  <OptionMenuTitle>Ruler</OptionMenuTitle>
                  <OptionMenuRight>⌘ ⇧ '</OptionMenuRight>
                </OptionMenu>
              </Option>
            </MenuDropdown>
          </Option>
        </MenuDropdown>
      </Option>
    );
  }
}
