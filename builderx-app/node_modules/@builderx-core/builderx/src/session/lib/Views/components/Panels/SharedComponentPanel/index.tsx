import * as React from "react";
import { Session } from "../../../../models/Session";
import {
  Text,
  Pane,
  PropertyGroup,
  WrapperDiv,
  Tabs,
  TabHeader,
  Tab,
  TabMenu,
  TabBody,
  Scrollbars
} from "components-x";
import { DraggedSharedComponent, IEvent } from "common-interfaces";
import { map } from "lodash";
import {
  materialComponentLibrary,
  cupertinoComponentLibrary
} from "shared-components";
import { SetDraggedSharedComponent } from "./../../../../Commands";
import ComponentsList from "./ComponentsList";
import Components from "./Components";
import { action } from "model";

type propType = {
  sharedComponentsSession: Session;
  session: Session;
  editor: boolean;
  togglePanel: (val: "file" | "shared" | "code" | "") => void;
  open: boolean;
  onEvent: (e: IEvent) => void;
};

export default class SharedComponentPanel extends React.PureComponent<
  propType,
  any
> {
  constructor(props: propType) {
    super(props);
    this.state = {
      currentTab: "libraries",
      currentDesign: "",
      currentSubDesign: ""
    };
  }

  onEvent = (e: IEvent) => {
    if (this.props.session.readonly) {
      return;
    }
    const { payload, type, originalEvent } = e;
    switch (type) {
      case "onChangeSearchBar":
        this.onChangeSearchBar(payload.change);
        break;
      case "setCurrentDesign":
        this.setState({ currentDesign: payload.currentDesign });
        break;
      case "setCurrentSubDesign":
        this.setState({ currentSubDesign: payload.currentSubDesign });
        break;
      case "setSearchValue":
        this.setState({ searchValue: payload.searchValue });
        break;
      case "onDragStartComponent":
        this.onDragStart(originalEvent, payload);
        break;
      default:
        break;
    }
    this.props.onEvent(e);
  };
  onChangeSearchBar = (e: any) => {
    this.setState({ searchValue: e.target.value });
  };

  get designType() {
    let newObj: any = {
      // Recent: {},
      Cupertino: cupertinoComponentLibrary.templates,
      Material: materialComponentLibrary.templates
    };
    // Components.map((component: any, index: any) => {
    //   let library =
    //     component.library == "Material"
    //       ? materialComponentLibrary
    //       : cupertinoComponentLibrary;

    //   let allCategoryComps = get(library, `templates.${component.category}`);
    //   allCategoryComps.filter((categoryComp: any) => {
    //     if (categoryComp.name == component.name) {
    //       newObj.Recent.push({
    //         category: component.category,
    //         name: component.name,
    //         library: component.library,
    //         template: categoryComp
    //       });
    //     }
    //   });
    // });

    return newObj;
  }
  onDragStart = (e: any, componentData: DraggedSharedComponent) => {
    action(() => {
      this.props.session.commandManager.executeAndSkip(
        new SetDraggedSharedComponent(this.props.session, componentData)
      );
    });
  };
  render() {
    const open = this.props.open;

    return (
      <Pane
        uiBackground={800}
        height={open ? "100%" : "auto"}
        id="app-tutorial-symbol-panel"
        overflowNone
      >
        <PropertyGroup
          style={{ height: "100%" }}
          noBorder={open}
          id="show-components"
        >
          {open && (
            <WrapperDiv
              style={{
                paddingTop: 12,
                paddingBottom: 12,
                height: "100%"
              }}
            >
              <Tabs style={{ height: "100%" }}>
                <TabHeader style={{ marginLeft: 12, marginRight: 12 }}>
                  <Tab
                    data-tip="Reusable components in Project"
                    style={{
                      flex: 1,
                      display: "grid",
                      textAlign: "center"
                    }}
                    first
                    selected={this.state.currentTab === "symbols"}
                    onClick={() => {
                      this.setState({ currentTab: "symbols" });
                    }}
                  >
                    <Text uiSize="s" uiColor={100}>
                      Project
                    </Text>
                  </Tab>
                  <Tab
                    data-tip="Reusable components Library"
                    style={{
                      flex: 1,
                      display: "grid",
                      textAlign: "center"
                    }}
                    selected={this.state.currentTab === "libraries"}
                    onClick={() => {
                      this.setState({ currentTab: "libraries" });
                    }}
                  >
                    <Text uiSize="s" uiColor={100}>
                      Library
                    </Text>
                  </Tab>
                  <TabMenu />
                </TabHeader>
                <TabBody
                  style={{
                    paddingTop: 10,
                    paddingBottom: 10,
                    height: "100%"
                  }}
                >
                  {this.state.currentTab === "libraries" && (
                    <Scrollbars
                      autoHide
                      style={{
                        height: "100%"
                      }}
                    >
                      <PropertyGroup noBorder uiBackground={800}>
                        {map(this.designType, (list: any, key: any) => (
                          <ComponentsList
                            key={`components-list-${key}`}
                            session={this.props.session}
                            library={key}
                            list={list}
                            currentDesign={this.state.currentDesign}
                            currentSubDesign={this.state.currentSubDesign}
                            onEvent={this.onEvent}
                            searchValue={this.state.searchValue}
                            sharedComponentsSession={
                              this.props.sharedComponentsSession
                            }
                          />
                        ))}
                      </PropertyGroup>
                    </Scrollbars>
                  )}
                  {this.state.currentTab !== "libraries" && (
                    <Scrollbars
                      autoHide
                      style={{
                        height: "100%"
                        // display: "flex"
                      }}
                    >
                      <Components
                        onEvent={this.onEvent}
                        session={this.props.session}
                        external={false}
                      />
                    </Scrollbars>
                  )}
                </TabBody>
              </Tabs>
            </WrapperDiv>
          )}
          <div
            style={{
              position: "absolute",
              top: 0,
              left: 0,
              height: 100,
              width: 100,
              backgroundColor: "transparent",
              pointerEvents: "none",
              zIndex: -99999
            }}
            id="componentload"
          />
        </PropertyGroup>
      </Pane>
    );
  }
}
