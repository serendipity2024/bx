import * as React from "react";
import { ButtonGroup, Button, Text, Icon, Spinner } from "components-x";
import { File as DomainFile } from "domain-x";
import { Session } from "../../../../models/Session";
import { action } from "model";
import { Utils } from "utils";
import RenameProjectName from "./../../../../Commands/Session/RenameProjectName";
import SetModalRoute from "./../../../../Commands/Router/SetModalRoute";
import SetWarning from "./../../../../Commands/Workspace/SetWarning";
import { BX_PREVIEW_FILE_PATH } from "bx-constants";
import { get } from "lodash";
import { Prompt } from "dialog-x";
import ExternalComponentsRenderer from "../../ExternalComponentsRenderer";

export default class StageToolbar extends React.PureComponent<
  { session: Session },
  { loading: boolean }
> {
  state = {
    loading: false
  };
  domainFiles: Map<string, DomainFile>;
  onUpdate = (keys: any) => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.props.session.on(
      [
        "isNewProject",
        "isSaving",
        "hasWarning",
        "astNetworkRequestCounter",
        "networkRequestCounter",
        "importingSketchFile"
      ],
      this.onUpdate
    );
    this.props.session.on(["projectLock", "fileIdsToBeDeleted"], this.onUpdate);
    this.props.session.project.on(
      ["projectLock", "projectName"],
      this.onUpdate
    );
    this.props.session.domain.on("files", this.onUpdate);
    this.props.session.domain.files.forEach((file: DomainFile) => {
      file.on("isDirty", this.onUpdate);
    });
    this.domainFiles = this.props.session.domain.files;
  }
  componentDidUpdate() {
    this.domainFiles.forEach((file: DomainFile) => {
      file.off("isDirty", this.onUpdate);
    });
    this.props.session.domain.files.forEach((file: DomainFile) => {
      file.on("isDirty", this.onUpdate);
    });
    this.props.session.project.on("projectName", this.onUpdate);
    this.props.session.on("lastEditedBy", this.onUpdate);
  }
  componentWillUnmount() {
    this.props.session.project.off(
      ["projectLock", "projectName"],
      this.onUpdate
    );
    this.props.session.off(
      ["fileIdsToBeDeleted", "projectLock"],
      this.onUpdate
    );

    this.props.session.off(
      [
        "isNewProject",
        "isSaving",
        "hasWarning",
        "astNetworkRequestCounter",
        "networkRequestCounter",
        "importingSketchFile",
        "lastEditedBy"
      ],
      this.onUpdate
    );
    this.props.session.domain.off("files", this.onUpdate);
    this.props.session.domain.files.forEach((file: DomainFile) => {
      file.off("isDirty", this.onUpdate);
    });
  }
  renameProjectName = async (projectName: string) => {
    if (this.props.session.readonly) {
      return;
    }
    const newProjectName = await Utils.getProjectUserInput(
      this.props.session,
      Prompt
    );
    if (newProjectName) {
      action(() => {
        this.props.session.commandManager.execute(
          new RenameProjectName(this.props.session, newProjectName)
        );
      });
    }
  };
  render() {
    let isDirty: boolean = false;
    this.props.session.domain.files.forEach((file: DomainFile) => {
      if (file.path === BX_PREVIEW_FILE_PATH) {
        return;
      }
      if (file.isDirty) {
        isDirty = true;
      }
    });
    isDirty = isDirty || this.props.session.fileIdsToBeDeleted.length > 0;
    let projectName = this.props.session.project.projectName;
    let isSaving =
      this.props.session.isSaving ||
      this.props.session.astNetworkRequestCounter > 0 ||
      this.props.session.networkRequestCounter > 0;
    let importingSketchFile = this.props.session.importingSketchFile;
    let hasWarning =
      (this.props.session.hasWarning &&
        this.props.session.project.missingFonts.length > 0) ||
      (!this.props.session.fontUrl &&
        (this.props.session.platform === "Mac" ||
          this.props.session.platform === "Windows"));
    const oldFontsTrayVersion = this.props.session.oldFontsTrayVersion;
    const showEditingStatus =
      this.props.session.project.isLocked &&
      this.props.session.project.lastEditedBy &&
      this.props.session.project.access.access !== "read";
    return (
      <ButtonGroup>
        <ExternalComponentsRenderer
          session={this.props.session}
          placement="header-panel-center:before"
        />
        {(hasWarning || oldFontsTrayVersion) && (
          <Button
            key="missing-fonts-button"
            data-cypress-id="stage-toolbar-warning"
            id="warning-modal"
            transparent
            data-tip={
              oldFontsTrayVersion
                ? "Please download the latest version of the font manager app. This version is outdated"
                : "Missing fonts in the projects"
            }
            onClick={() => {
              action(() => {
                this.props.session.commandManager.executeAndSkip(
                  new SetModalRoute(this.props.session, "warningModal")
                );
                this.props.session.commandManager.executeAndSkip(
                  new SetWarning(
                    this.props.session,
                    this.props.session.project.missingFonts.length > 0 ||
                      (!this.props.session.fontUrl &&
                        (this.props.session.platform === "Mac" ||
                          this.props.session.platform === "Windows"))
                  )
                );
              });
            }}
          >
            <Icon name={"warning"} size={18} />
          </Button>
        )}
        <Button
          key="project-name-btn"
          data-cypress-id="stage-toolbar-rename"
          transparent
          data-tip="Project Name"
          onDoubleClick={() => this.renameProjectName(projectName)}
        >
          <img
            key="image"
            src={
              this.props.session.envConstants.BUILDERX_ASSETS_URL +
              "/images/logo.png"
            }
            alt="Logo"
            style={{ width: 24, height: 24 }}
          />
          <Text
            inline
            uiColor={300}
            uiSize="m"
            bold
            style={{
              paddingLeft: 6,
              maxWidth: 250
            }}
          >
            {projectName}
          </Text>
        </Button>
        {importingSketchFile && (
          <Button key="importingSketchFile" transparent style={{ width: 40 }}>
            <Text key="edited" uiColor={400}>
              generating code...
            </Text>
          </Button>
        )}
        {isSaving && !importingSketchFile && (
          <Button key="isSaving" transparent style={{ width: 40 }}>
            <Text key="edited" uiColor={400}>
              saving...
            </Text>
          </Button>
        )}
        {isDirty && !isSaving && !importingSketchFile && (
          <Button key="edited-isDirty" transparent style={{ width: 40 }}>
            <Text
              key="edited-status"
              uiColor={400}
              data-tip="Your project has some unsaved changes"
            >
              edited
            </Text>
          </Button>
        )}

        {showEditingStatus && (
          <Button key="lastEditedBy-isDirty" transparent style={{ width: 40 }}>
            <Text key="lastEditedBy" uiColor={400}>
              {(get(
                this.props.session.project,
                "lastEditedBy.user.name",
                undefined
              ) ||
                get(
                  this.props.session.project,
                  "lastEditedBy.user.email",
                  "Someone"
                )) + " "}
              is editing ...
            </Text>
          </Button>
        )}
        <ExternalComponentsRenderer
          session={this.props.session}
          placement="header-panel-center:after"
        />
      </ButtonGroup>
    );
  }
}
