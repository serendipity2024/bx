import * as React from "react";
import { Session } from "../../../../models/Session";
import {
  Text,
  Title,
  FormGroup,
  FormCol,
  FormRow,
  InputGroupInput,
  ButtonGroup,
  Button,
  Section,
  SectionFooter,
  SectionBody,
  Form
} from "components-x";
import SetConfig from "./../../../../Commands/Workspace/SetConfig";
import SetModalRoute from "./../../../../Commands/Router/SetModalRoute";
import { action } from "model";
import SetGridSize from "src/session/lib/Commands/Session/SetGridSize";

type propType = {
  session: Session;
};

export default class GuidesAndGrid extends React.PureComponent<propType, any> {
  constructor(props: propType) {
    super(props);
    const configuration = this.props.session.drivers.configuration;
    this.state = {
      row: configuration.get("editor.grid.row") || 0,
      col: configuration.get("editor.grid.column") || 0,
      snapBound: configuration.get("editor.snap.snapMagnet") || 0,
      rulerBound: configuration.get("editor.rulerBounds.value") || 0,
      documentBound: configuration.get("editor.parent.value") || 0,
      lastCrashedProjectPath: configuration.get("crash.path.for.project") || 0
    };
  }
  componentDidMount() {
    document.addEventListener("keyup", this._handleKeyDown);
  }
  componentWillUnmount() {
    document.removeEventListener("keyup", this._handleKeyDown);
  }
  _handleKeyDown = (event: any) => {
    const ESCAPE_KEY = 27;
    const ENTER_KEY = 13;
    switch (event.keyCode) {
      case ESCAPE_KEY:
        this.exitModal();
        break;
      case ENTER_KEY:
        this.onSubmit(event);
        break;
      default:
        break;
    }
  };
  exitModal = () => {
    action(() => {
      this.props.session.commandManager.executeAndSkip(
        new SetModalRoute(this.props.session, "")
      );
    });
  };
  handleChange = (e: any, property: string) => {
    if (e.target) {
      this.setState({ [property]: e.target.value });
    }
  };
  onSubmit = (e: any) => {
    action(() => {
      e.preventDefault();
      if (this.isInvalid()) {
        return;
      }
      let session = this.props.session;

      session.commandManager.executeAndSkip(
        new SetGridSize(session, {
          x: parseInt(this.state.row, 10),
          y: parseInt(this.state.col, 10)
        })
      );
      session.commandManager.executeAndSkip(
        new SetConfig(session, "editor.snap.snapMagnet", this.state.snapBound)
      );
      session.commandManager.executeAndSkip(
        new SetConfig(session, "editor.parent.value", this.state.documentBound)
      );
      session.commandManager.executeAndSkip(
        new SetConfig(
          session,
          "editor.rulerBounds.value",
          this.state.rulerBound
        )
      );
      session.commandManager.executeAndSkip(
        new SetConfig(
          session,
          "crash.path.for.project",
          this.state.lastCrashedProjectPath
        )
      );
      session.commandManager.executeAndSkip(new SetModalRoute(session, ""));
    });
  };
  isInvalid() {
    if (
      !this.state.row ||
      !this.state.col ||
      !this.state.documentBound ||
      !this.state.snapBound
    ) {
      return true;
    }
    return false;
  }
  keyPress = (e: any) => {
    if (e.charCode === 13) {
      this.onSubmit(e);
    }
  };
  render() {
    return (
      <Section>
        <Form onKeyPress={(e: any) => this.keyPress(e)}>
          <SectionBody marginBottom={70}>
            <FormGroup className="p-0">
              <FormRow className="p-4 bb">
                <FormCol uiSize="m" contentLeft className="px-0">
                  <Title uiSize={"m"} uiColor={300}>
                    Grid
                  </Title>
                </FormCol>
              </FormRow>
              <FormGroup className="px-4 px-2 bb">
                <FormRow className="py-2">
                  <FormCol first uiSize={6}>
                    <Text uiSize={"m"}>Row</Text>
                  </FormCol>
                  <FormCol>
                    <InputGroupInput
                      uiSize="l"
                      autoFocus={true}
                      type="number"
                      value={this.state.row}
                      onChange={(e: any) => this.handleChange(e, "row")}
                    />
                  </FormCol>
                  <FormCol>
                    <Text uiSize={"m"}>pt</Text>
                  </FormCol>
                </FormRow>
                <FormRow className="py-2">
                  <FormCol first uiSize={6}>
                    <Text uiSize={"m"}>Column</Text>
                  </FormCol>
                  <FormCol>
                    <InputGroupInput
                      uiSize="l"
                      type="number"
                      value={this.state.col}
                      onChange={(e: any) => this.handleChange(e, "col")}
                    />
                  </FormCol>
                  <FormCol>
                    <Text uiSize={"m"}>pt</Text>
                  </FormCol>
                </FormRow>
                {/* <FormRow className="py-2">
                  <FormCol first uiSize={6}>
                    <Text uiSize={"m"}>Parent Bounds</Text>
                  </FormCol>
                  <FormCol>
                    <InputGroupInput undo={this.props.session.commandManager.undo} redo={this.props.session.commandManager.redo}
                      uiSize="l"
                      type="number"
                      value={this.state.documentBound}
                      onChange={(e: any) =>
                        this.handleChange(e, "documentBound")
                      }
                    />
                  </FormCol>
                  <FormCol>
                    <Text uiSize={"m"}>pt</Text>
                  </FormCol>
                </FormRow> */}
                <FormRow className="py-2">
                  <FormCol first uiSize={6}>
                    <Text uiSize={"m"}>Snap Bounds</Text>
                  </FormCol>
                  <FormCol>
                    <InputGroupInput
                      uiSize="l"
                      type="number"
                      value={this.state.snapBound}
                      onChange={(e: any) => this.handleChange(e, "snapBound")}
                    />
                  </FormCol>
                  <FormCol>
                    <Text uiSize={"m"}>pt</Text>
                  </FormCol>
                </FormRow>

                {/* <FormRow className="py-2">
                  <FormCol first uiSize={6}>
                    <Text uiSize={"m"}>Ruler Bounds</Text>
                  </FormCol>
                  <FormCol>
                    <InputGroupInput undo={this.props.session.commandManager.undo} redo={this.props.session.commandManager.redo}
                      uiSize="l"
                      type="number"
                      value={this.state.rulerBound}
                      onChange={(e: any) => this.handleChange(e, "rulerBound")}
                    />
                  </FormCol>
                  <FormCol>
                    <Text uiSize={"m"}>pt</Text>
                  </FormCol>
                </FormRow> */}

                {this.isInvalid() && (
                  // TODO: visit this
                  <FormRow>
                    <FormCol first>
                      <Text>Fields cannot be empty</Text>
                    </FormCol>
                  </FormRow>
                )}
              </FormGroup>
            </FormGroup>
          </SectionBody>
          <SectionFooter padder="s">
            <ButtonGroup uiSize="xl" contentRight={true}>
              <Button
                actionBtn={true}
                uiBackground={500}
                border
                minWidth
                caption="OK"
                uiSize="s"
                onClick={(e: any) => this.onSubmit(e)}
                active
              />
            </ButtonGroup>
          </SectionFooter>
        </Form>
      </Section>
    );
  }
}
