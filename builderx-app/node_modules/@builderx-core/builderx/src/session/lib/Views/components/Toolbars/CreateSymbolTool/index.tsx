import * as React from "react";
import { Button, Icon } from "components-x";
import { Session } from "../../../../models/Session";
import CreateSymbol from "../../../../Commands/Symbols/CreateSymbol";
import { action } from "model";

export default class CreateSymbolTool extends React.PureComponent<
  { session: Session },
  any
> {
  componentDidMount() {
    this.props.session.on("selectedLayers", this.onUpdate);
    this.props.session.on("projectLock", this.onUpdate);
  }
  onUpdate = () => {
    this.forceUpdate();
  };
  componentWillUnmount() {
    this.props.session.off("selectedLayers", this.onUpdate);
    this.props.session.off("projectLock", this.onUpdate);
  }
  render() {
    const selectedLayers = this.props.session.getLayersFromSelectedLayerCollection();
    if (selectedLayers.length === 0) {
      return null;
    }
    const layer = selectedLayers[0];
    if (layer.type === "root") {
      return null;
    }

    return !this.props.session.readonly ? (
      <React.Fragment>
        <Button
          data-cypress-id="toolbar-create-component"
          disabled={
            !this.props.session.createSymbolFromSelectedLayersIsDoable() ||
            this.props.session.disableForScrollViewRoot()
          }
          onClick={() => {
            action(async () => {
              await this.props.session.commandManager.executeAndSkip(
                new CreateSymbol(this.props.session, selectedLayers)
              );
            });
          }}
          paddingLeft={3}
          transparent={true}
          icon={
            <Icon
              key="create-symbol-icon"
              name="symbol"
              size={16}
              marginRight
            />
          }
          caption="Create Component"
          data-tip="Create separate Reusable Component"
        />
      </React.Fragment>
    ) : null;
  }
}
