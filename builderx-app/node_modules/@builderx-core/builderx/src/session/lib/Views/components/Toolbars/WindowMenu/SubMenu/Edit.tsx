import * as React from "react";
import { Session } from "session";
import { IEvent } from "common-interfaces";
import { File } from "domain-x";
import {
  Option,
  OptionMenu,
  MenuDropdown,
  OptionMenuTitle,
  OptionMenuRight,
  Icon
} from "components-x";
type propType = {
  session: Session;
  onEvent: (event: IEvent) => void;
  uiSize: number;
};

export default class Edit extends React.PureComponent<propType, any> {
  oldSelectedLayers: Array<any>;
  componentDidMount() {
    this.props.session.on(
      ["selectedLayers", "currentRootLayer"],
      this.onUpdate
    );
    this.props.session.domain.on("files", this.onUpdate);
    this.props.session.pageRouter.on("currentRoute", this.onUpdate);
    this.props.session
      .getLayersFromSelectedLayerCollection()
      .forEach((layer: any) => {
        if (layer.type === "unknown") {
          return;
        }
        layer.on("locked", this.onUpdate);
        layer.props.style.on("display", this.onUpdate);
      });
    this.oldSelectedLayers = this.props.session.getLayersFromSelectedLayerCollection();
    this.props.session.on("projectLock", this.onUpdate);
  }
  componentDidUpdate(prevProps: propType) {
    this.oldSelectedLayers.forEach((layer: any) => {
      if (layer.type === "unknown") {
        return;
      }
      layer.off("locked", this.onUpdate);
      layer.props.style.off("display", this.onUpdate);
    });
    this.props.session
      .getLayersFromSelectedLayerCollection()
      .forEach((layer: any) => {
        if (layer.type === "unknown") {
          return;
        }
        layer.on("locked", this.onUpdate);
        layer.props.style.on("display", this.onUpdate);
      });
    this.oldSelectedLayers = this.props.session.getLayersFromSelectedLayerCollection();
  }
  componentWillUnmount() {
    this.props.session.off(
      ["selectedLayers", "currentRootLayer"],
      this.onUpdate
    );
    this.props.session.pageRouter.off("currentRoute", this.onUpdate);
    this.props.session.domain.off("files", this.onUpdate);
    this.props.session
      .getLayersFromSelectedLayerCollection()
      .forEach((layer: any) => {
        if (layer.type === "unknown") {
          return;
        }
        layer.off("locked", this.onUpdate);
        layer.props.style.off("display", this.onUpdate);
        this.props.session.off("projectLock", this.onUpdate);
      });
  }
  onUpdate = () => {
    this.forceUpdate();
  };
  render() {
    let session = this.props.session;
    let currentRoute = session.pageRouter.currentRoute;
    let wrkspcOpsDisabled = currentRoute !== "workspace";
    let selectedLayers = session.getLayersFromSelectedLayerCollection();
    let artboardLength: number = 0;
    session.domain.files.forEach((file: File) => {
      if (file && !file.isSymbol()) {
        artboardLength++;
      }
    });
    let isCurrentRootLayer = false;
    if (
      session.getLayersFromSelectedLayerCollection().length &&
      session.getLayersFromSelectedLayerCollection()[0] ===
        session.currentRootLayer
    ) {
      isCurrentRootLayer = true;
    }

    return (
      <Option>
        {!this.props.session.readonly && (
          <OptionMenu data-cypress-id="window-menu-edit">
            <OptionMenuTitle>Edit</OptionMenuTitle>
            <OptionMenuRight>
              <Icon name="right-arrow" size={12} />
            </OptionMenuRight>
          </OptionMenu>
        )}
        <MenuDropdown child uiSize={this.props.uiSize}>
          <Option
            label="Undo"
            onClick={() => {
              this.props.onEvent({
                target: null,
                type: "undo",
                payload: null,
                originalEvent: null
              });
            }}
            id="undo"
            disabled={wrkspcOpsDisabled}
          >
            <OptionMenu data-cypress-id="window-menu-edit-undo">
              <OptionMenuTitle>Undo</OptionMenuTitle>
              <OptionMenuRight>⌘ Z</OptionMenuRight>
            </OptionMenu>
          </Option>
          <Option
            label="Redo"
            onClick={() => {
              this.props.onEvent({
                target: null,
                type: "redo",
                payload: null,
                originalEvent: null
              });
            }}
            id="redo"
            disabled={wrkspcOpsDisabled}
          >
            <OptionMenu data-cypress-id="window-menu-edit-redo">
              <OptionMenuTitle>Redo</OptionMenuTitle>
              <OptionMenuRight>⌘ Y</OptionMenuRight>
            </OptionMenu>
          </Option>
          <Option
            onClick={() => {
              this.props.onEvent({
                target: null,
                type: "cut",
                payload: null,
                originalEvent: null
              });
            }}
            id="cut"
            disabled={wrkspcOpsDisabled || isCurrentRootLayer}
          >
            <OptionMenu data-cypress-id="window-menu-edit-cut">
              <OptionMenuTitle>Cut</OptionMenuTitle>
              <OptionMenuRight>⌘ X</OptionMenuRight>
            </OptionMenu>
          </Option>
          <Option
            id="copy"
            disabled={wrkspcOpsDisabled || isCurrentRootLayer}
            onClick={() => {
              this.props.onEvent({
                target: null,
                type: "copy",
                payload: null,
                originalEvent: null
              });
            }}
          >
            <OptionMenu data-cypress-id="window-menu-edit-copy">
              <OptionMenuTitle>Copy</OptionMenuTitle>
              <OptionMenuRight>⌘ C</OptionMenuRight>
            </OptionMenu>
          </Option>
          <Option
            id="paste"
            disabled={wrkspcOpsDisabled}
            onClick={() => {
              this.props.onEvent({
                target: null,
                type: "paste",
                payload: null,
                originalEvent: null
              });
            }}
          >
            <OptionMenu data-cypress-id="window-menu-edit-paste">
              <OptionMenuTitle>Paste</OptionMenuTitle>
              <OptionMenuRight>⌘ V</OptionMenuRight>
            </OptionMenu>
          </Option>
          <Option
            id="selectAll"
            disabled={wrkspcOpsDisabled}
            onClick={() => {
              this.props.onEvent({
                target: null,
                type: "selectAll",
                payload: null,
                originalEvent: null
              });
            }}
          >
            <OptionMenu data-cypress-id="window-menu-edit-select-all">
              <OptionMenuTitle>Select All</OptionMenuTitle>
              <OptionMenuRight>⌘ A</OptionMenuRight>
            </OptionMenu>
          </Option>
          <Option
            id="duplicateLayer"
            disabled={wrkspcOpsDisabled || isCurrentRootLayer}
            onClick={() => {
              this.props.onEvent({
                target: null,
                type: "duplicateLayer",
                payload: null,
                originalEvent: null
              });
            }}
          >
            <OptionMenu data-cypress-id="window-menu-edit-duplicate-layer">
              <OptionMenuTitle>Duplicate Layer</OptionMenuTitle>
              <OptionMenuRight>⌘ D</OptionMenuRight>
            </OptionMenu>
          </Option>
          {selectedLayers.length > 0 && (
            <Option
              id="toggleLock"
              disabled={wrkspcOpsDisabled || isCurrentRootLayer}
              onClick={() => {
                this.props.onEvent({
                  target: null,
                  type: "toggleLock",
                  payload: null,
                  originalEvent: null
                });
              }}
            >
              <OptionMenu data-cypress-id="window-menu-edit-lock-unlock">
                <OptionMenuTitle>
                  {selectedLayers[0].locked ? "Unlock Layer" : "Lock Layer"}
                </OptionMenuTitle>
                <OptionMenuRight>⌘ L</OptionMenuRight>
              </OptionMenu>
            </Option>
          )}
          {selectedLayers.length > 0 && (
            <Option
              id="toggleHide"
              disabled={wrkspcOpsDisabled || isCurrentRootLayer}
              onClick={() => {
                this.props.onEvent({
                  target: null,
                  type: "toggleHide",
                  payload: null,
                  originalEvent: null
                });
              }}
            >
              <OptionMenu data-cypress-id="window-menu-edit-hide-show">
                <OptionMenuTitle>
                  {selectedLayers[0].props.getResolvedStyleAttribute(
                    "display"
                  ) === "none"
                    ? "Show Layer"
                    : "Hide Layer"}
                </OptionMenuTitle>
                <OptionMenuRight>⌘ H</OptionMenuRight>
              </OptionMenu>
            </Option>
          )}
          <Option
            id="toggleHide"
            disabled={wrkspcOpsDisabled || isCurrentRootLayer}
            onClick={() => {
              this.props.onEvent({
                target: null,
                type: "removeLayers",
                payload: null,
                originalEvent: null
              });
            }}
          >
            <OptionMenu data-cypress-id="window-menu-edit-remove-layer">
              <OptionMenuTitle>Remove Layer</OptionMenuTitle>
              <OptionMenuRight>⌫</OptionMenuRight>
            </OptionMenu>
          </Option>
          <Option
            id="removeArtboard"
            disabled={wrkspcOpsDisabled || artboardLength < 2}
            onClick={() => {
              this.props.onEvent({
                target: null,
                type: "removeArtboard",
                payload: null,
                originalEvent: null
              });
            }}
          >
            <OptionMenu data-cypress-id="window-menu-edit-remove-artboard">
              <OptionMenuTitle>Remove Artboard</OptionMenuTitle>
            </OptionMenu>
          </Option>
        </MenuDropdown>
      </Option>
    );
  }
}
