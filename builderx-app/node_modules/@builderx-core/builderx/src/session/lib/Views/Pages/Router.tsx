import * as React from "react";

import { SessionComponent } from "./Session";
import { ActivationForm } from "./Activation/Form";
import { TermsAndConditions } from "./Activation/TermsAndCondition";
import { Font } from "common-interfaces";
import { Session } from "../../models/Session";

import Init from "./Init";
import ActivationFailed from "./Activation/Failed";
import ApplicationExpired from "./Activation/Expired";
import NoInternet from "./NoInternet";
import StartScreenContainer from "./StartScreen";
import LicenceKeyForm from "../Modals/Licence";
import ChangeEmailAddress from "../Modals/ChangeEmailAddress";
import { Utils } from "utils";
import MobileView from "./MobileView";
export default class SessionRouter extends React.PureComponent<
  {
    session: Session;
    sharedComponentSession: Session;
  },
  any
> {
  componentDidMount() {
    this.props.session.pageRouter.on("currentRoute", this.onUpdate);
  }
  componentWillUnmount() {
    this.props.session.pageRouter.off("currentRoute", this.onUpdate);
  }
  onUpdate = () => {
    this.forceUpdate();
  };
  render() {
    // console.log(Utils.isChrome(), "isChrome");
    if (Utils.isMobileOrTablet() || !Utils.isChrome()) {
      return <MobileView />;
    }
    switch (this.props.session.pageRouter.getCurrentRoute()) {
      case "init":
        return <Init />;
      case "blank":
        return <Init blank="true" />;
      case "activation/form":
        return <ActivationForm session={this.props.session} />;
      case "activation/failed":
        return <ActivationFailed session={this.props.session} />;
      case "activation/termsAndConditions":
        return <TermsAndConditions session={this.props.session} />;
      case "error/expired":
        return <ApplicationExpired session={this.props.session} />;
      case "error/noInternetConnection":
        return <NoInternet />;
      case "activation/licencekeyform":
        return <LicenceKeyForm session={this.props.session} />;
      case "activation/changeEmailAddress":
        return <ChangeEmailAddress session={this.props.session} />;
      case "startScreen":
        // return (
        //   <SessionComponent
        //     session={this.props.session}
        //     contextMenuAdapter={this.props.contextMenuAdapter}
        //   />
        // );
        return <StartScreenContainer session={this.props.session} />;
      case "workspace":
        // return null;
        return (
          <SessionComponent
            session={this.props.session}
            sharedComponentSession={this.props.sharedComponentSession}
          />
        );
      default:
        return (
          <SessionComponent
            session={this.props.session}
            sharedComponentSession={this.props.sharedComponentSession}
          />
        );
    }
  }
}
