import * as React from "react";
import {
  Icon,
  MenuDropdown,
  Option,
  OptionMenu,
  OptionMenuTitle
} from "components-x";
import { Session } from "../../../../models/Session";
import urljoin from "url-join";
import { Utils } from "utils";
type propType = {
  session: Session;
};
var dropdownMenu: any = null;
export default class UserAccountPanel extends React.PureComponent<
  propType,
  any
> {
  constructor(props: any) {
    super(props);

    this.state = {
      loggedIn: false,

      dropdownMenu: null
    };
  }

  handleOnClick = async (type: string) => {
    this.setState({
      showChildren: this.state.showChildren
    });
    switch (type) {
      case "logout":
        // window.parent.location.href = urljoin(
        //   Utils.getEnv("BUILDERX_WEBSITE_URL"),
        //   "logout"
        // );
        Utils.redirectParentWindow(
          urljoin(Utils.getEnv("BUILDERX_WEBSITE_URL"), "logout")
        );
        // axios
        //   .get(`${BACKEND_API_URL}/logout`, {
        //     headers: {
        //       Accept: "application/json",
        //       Authorization: `Bearer ${accessToken}`
        //     }
        //   })
        //   .then((response: any) => {
        //     console.log("Response is ", response);
        //     if (response.status === 200) {
        //       try {
        //         this.props.session.commandManager.executeAndSkip(
        //           new SaveProject(this.props.session)
        //         );

        //         this.eraseCookieFromAllPaths("access-token");
        //         // this.eraseCookieFromAllPaths("builderx_session");
        //         window.location.replace(urljoin(WEBSITE_URL, "login"));
        //       } catch (error) {
        //         console.log("Error while erasing cookies", error);
        //       }
        //     }
        //   })
        //   .catch((error: any) => {
        //     console.error("Error while logging Out", error);
        //   });
        break;
      case "login":
        Utils.redirectParentWindow(
          urljoin(Utils.getEnv("BUILDERX_WEBSITE_URL"), "login")
        );
        // window.parent.location.href = urljoin(
        //   Utils.getEnv("BUILDERX_WEBSITE_URL"),
        //   "login"
        // );
        break;
      case "projects":
        window.open(
          urljoin(this.props.session.envConstants.WEBSITE_URL, "dashboard")
        );
        break;
      case "team":
        window.open(
          urljoin(
            this.props.session.envConstants.WEBSITE_URL,
            "dashboard",
            "members"
          )
        );
        break;
      case "account":
        window.open(
          urljoin(
            this.props.session.envConstants.WEBSITE_URL,
            "dashboard",
            "account-settings"
          )
        );
        break;
      default:
        break;
    }
  };
  componentDidMount() {
    this.props.session.drivers.userService.isUserLoggedIn().then(response => {
      this.setState({
        loggedIn: response
      });
    });
  }
  render() {
    return (
      <MenuDropdown
        data-cypress-id="profileMenu"
        style={{ zIndex: 10, marginLeft: 5, marginRight: 16 }}
        child
        alignRight
      >
        <Option>
          <OptionMenu
            style={{
              borderRadius: 2,
              padding: 6,
              background: "#252931"
            }}
            showChildren={this.state.showChildren}
          >
            <Icon name="icon_user" size={16} />
          </OptionMenu>
          {this.state.loggedIn ? (
            <MenuDropdown
              child
              showChildren={this.state.showChildren}
              ref={element => {
                dropdownMenu = element;
              }}
            >
              <Option onClick={() => this.handleOnClick("account")}>
                <OptionMenu>
                  <OptionMenuTitle>Account</OptionMenuTitle>
                </OptionMenu>
              </Option>
              <Option onClick={() => this.handleOnClick("team")}>
                <OptionMenu>
                  <OptionMenuTitle>Team</OptionMenuTitle>
                </OptionMenu>
              </Option>
              <Option onClick={() => this.handleOnClick("projects")}>
                <OptionMenu>
                  <OptionMenuTitle>Projects</OptionMenuTitle>
                </OptionMenu>
              </Option>
              <Option onClick={() => this.handleOnClick("logout")}>
                <OptionMenu>
                  <OptionMenuTitle>Logout</OptionMenuTitle>
                </OptionMenu>
              </Option>
            </MenuDropdown>
          ) : (
            <MenuDropdown child>
              <Option onClick={() => this.handleOnClick("login")}>
                <OptionMenu>
                  <OptionMenuTitle>Login</OptionMenuTitle>
                </OptionMenu>
              </Option>
            </MenuDropdown>
          )}
        </Option>
      </MenuDropdown>
    );
  }
}
