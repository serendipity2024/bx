import * as React from "react";
import { ButtonGroup, Button, Text, Col } from "components-x";
import { ShareAccessDialog } from "dialog-x";
import { Session } from "../../../../models/Session";
import { Utils } from "utils";
interface PropType {
  session: Session;
}

export default class DownloadShareToolbar extends React.PureComponent<
  PropType,
  any
> {
  onUpdate = () => {
    this.forceUpdate();
  };
  componentDidMount = () => {
    this.props.session.on("displayEditButton", this.onUpdate);
  };
  componentWillUnmount = () => {
    this.props.session.off("displayEditButton", this.onUpdate);
  };
  showDialog = async () => {
    if (this.props.session.readonly) {
      return;
    }
    await ShareAccessDialog(
      this.copyURL,
      {
        data: this.props.session.project.shareabilityData,
        getTeamDataCallback: this.getTeamData
      },
      this.shareabilityCallback
    );
  };

  getTeamData = async () => {
    return new Promise((resolve, reject) => {
      this.props.session.apiSdk.teams
        .get(this.props.session.project.teamId)
        .then((response: any) => {
          resolve(response.data);
        })
        .catch((error: any) => {
          resolve({});
          console.log("error in fetching team data", error);
        });
    });
  };

  copyURL = (shareableURL: string) => {
    this.props.session.drivers.clipboardService.nativeCopy(shareableURL);
  };

  shareabilityCallback = async (
    callbackType: string,
    data: { type: string; access: string; email?: string; mode?: string }
  ) => {
    if (callbackType === "setShareabilityAccess") {
      return new Promise((resolveAccess, reject) => {
        this.props.session.apiSdk.project
          .shareability(
            this.props.session.project.projectId,
            data.type,
            data.access,
            undefined,
            data.mode || "design_only"
          )
          .then(res => {
            this.props.session.drivers.analyticsService.addActivity(
              {
                name: `project.share.${data.access}`,
                path: "",
                category: "app/command"
              },
              true
            );
            resolveAccess({
              status: true,
              message: "Project access updated"
            });
            this.props.session.project.setShareabilityData(res.data);
          })
          .catch(error => {
            reject({
              status: false,
              message: error.response.data.message
            });
          });
      });
    } else if (callbackType === "addUser") {
      return new Promise((resolveAddUser, reject) => {
        this.props.session.apiSdk.project
          .shareability(
            this.props.session.project.projectId,
            data.type,
            data.access,
            data.email,
            data.mode || "design_only"
          )
          .then(res => {
            resolveAddUser({
              status: true,
              message: res.message || "User added succesfully"
            });
            this.props.session.project.setShareabilityData(res.data);
          })
          .catch(error => {
            reject({
              status: false,
              message: error.response.message
            });
          });
      });
    } else if (callbackType === "changeUserShareabilityAccess") {
      return new Promise((resolveShareabilityAccess, reject) => {
        this.props.session.apiSdk.project
          .shareability(
            this.props.session.project.projectId,
            data.type,
            data.access,
            data.email,
            data.mode || "design_only"
          )
          .then(res => {
            resolveShareabilityAccess({
              status: true,
              message: res.message || "Project access updated"
            });
            this.props.session.project.setShareabilityData(res.data);
          })
          .catch(error => {
            reject({
              status: false,
              message: error.response.message
            });
          });
      });
    }
    return new Promise((resolveNull, reject) => {
      resolveNull();
    });
  };

  getProjectShareableData = async () => {
    let shareableData;
    let response = await this.props.session.apiSdk.project.get(
      this.props.session.project.projectId
    );
    shareableData = response.data.project_shareability;
    shareableData.teamData = await this.getTeamData();
    return shareableData;
  };
  startEditing = () => {
    // window.parent.location.reload();
    Utils.reloadParentWindow();
  };
  syncWithSmartFlex = () => {
    // const file = this.props.session.selectedFile;
    // if (file) {
    //   const newFileJSON = smartFlex(file.toJS() as any);
    //   traverseLayersDFS(newFileJSON.layer, json => {
    //     if (
    //       json.type === "stack" ||
    //       json.type === "row" ||
    //       json.type === "column"
    //     ) {
    //       json.type = "view";
    //     }
    //   });
    //   action(() => {
    //     this.props.session.commandManager.executeAndForget(
    //       new SetAllProps(this.props.session, file, (newFileJSON as any).props)
    //     );
    //     const fakeChildren = [...reverse(file.layer.children)];
    //     forEach(fakeChildren, child => {
    //       if (child) {
    //         this.props.session.commandManager.executeAndForget(
    //           new RemoveLayer(this.props.session, child)
    //         );
    //       }
    //     });
    //     forEach(newFileJSON.layer.children, child => {
    //       this.props.session.commandManager.executeAndForget(
    //         new AddLayer(this.props.session, file.layer, child, true)
    //       );
    //     });
    //     this.props.session.commandManager.executeAndForget(
    //       new SelectFile(this.props.session, file)
    //     );
    //   });
    // }
  };

  render() {
    return (
      <Col uiSize={1}>
        <ButtonGroup contentRight>
          {!this.props.session.readonly && (
            <Button
              data-cypress-id="toolbar-share-button"
              marginTop={0}
              marginBottom={0}
              uiSize={"ms"}
              borderRadius
              onClick={this.showDialog}
              disabled={this.props.session.readonly}
              data-tip="Make the project shareable and get its link"
            >
              <Text
                uiSize="xs"
                uiColor={100}
                style={{ paddingLeft: 4, paddingRight: 4 }}
                uppercase
                letterSpacing
                bold
              >
                Share
              </Text>
            </Button>
          )}
          {/* {process.env.NODE_ENV !== "production" && (
            <Button
              marginTop={0}
              marginBottom={0}
              uiSize={"s"}
              borderRadius
              onClick={this.syncWithSmartFlex}
              data-tip="Sync Bx layers with smart flex json"
            >
              <Text
                uiSize="xs"
                uiColor={100}
                style={{ paddingLeft: 4, paddingRight: 4 }}
                uppercase
                letterSpacing
                bold
              >
                Smart sync
              </Text>
            </Button>
          )} */}
          {this.props.session.editButton && (
            <Button
              marginTop={0}
              marginBottom={0}
              uiSize={"s"}
              borderRadius
              onClick={this.startEditing}
              data-tip="Start Editing"
            >
              <Text
                uiSize="xs"
                uiColor={100}
                style={{ paddingLeft: 4, paddingRight: 4 }}
                uppercase
                letterSpacing
                bold
              >
                Edit
              </Text>
            </Button>
          )}
        </ButtonGroup>
      </Col>
    );
  }
}
