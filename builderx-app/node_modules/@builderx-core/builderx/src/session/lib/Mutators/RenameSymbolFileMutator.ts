import { Session } from "../models/Session";
import { SetFileDirtyMutator } from ".";

import SetDbFileIdMutator from "./SetDbFileIdMutator";

import { Utils } from "utils";
import { forEach } from "lodash";
import { DomainLayer } from "domain-x";

export default function RenameSymbolFileMutator(
  session: Session,
  filePath: string,
  newName: string
) {
  let fileId = filePath;
  const file = session.domain.files.get(fileId);
  if (!file) {
    return;
  }

  // session.domain.renameFile(file, newName);
  const newFile = file;
  // session.applyPatch({
  //   op: "remove",
  //   path: `/domain/files:::${filePath}`
  // });

  const newFileJSON = file.toJS();
  newFileJSON.path = `${file.path.substring(
    0,
    file.path.lastIndexOf("/")
  )}/${newName}.js`;

  // const newFile: DomainFile = session.applyPatch({
  //   op: "add",
  //   path: `/domain/files:::${filePath}`,
  //   value: {
  //     type: "class",
  //     className: "DomainFile",
  //     value: file.toJS()
  //   }
  // });
  // const thumbnailStage = session.stages.get(oldPath);
  // session.currentStage.domainCompiled.renameFile(
  //   compiledSelectedFile,
  //   newName
  // );
  // newPath = file.path;

  const symbolStage = session.stages.get(filePath);
  const thumbnailStage = session.thumbnailStages.get(filePath);
  if (symbolStage) {
    // session.stages.delete(filePath);

    // session.applyPatch({
    //   op: "remove",
    //   path: `/stages:::${filePath}`
    // });

    // RemoveStageMutator(session, filePath);
    // session.stages.set(file.path, symbolStage);
    symbolStage.id = newFileJSON.path;
    symbolStage.stageArtboards[0].path = newFileJSON.path;
    symbolStage.stageArtboards[0].rootLayerId = newFileJSON.path + ":0";
    // session.stages.delete(filePath);
    // session.stages.set(newFileJSON.path, symbolStage);

    // session.applyPatch({
    //   op: "add",
    //   path: `/stages:::${newFileJSON.path}`,
    //   value: symbolStage
    // });

    session.emitPatch({
      op: "replace",
      path: `/stages:::${filePath}:::/id`,
      value: newFileJSON.path
    });
    session.emitPatch({
      op: "replace",
      path: `/stages:::${filePath}:::/stageArtboards/0/path`,
      value: newFileJSON.path
    });
    session.emitPatch({
      op: "replace",
      path: `/stages:::${filePath}:::/stageArtboards/0/rootLayerId`,
      value: newFileJSON.path + ":0"
    });

    session.emitPatch({
      op: "move",
      from: `/stages:::${filePath}`,
      path: `/stages:::${newFileJSON.path}`
    });

    if (thumbnailStage) {
      // session.thumbnailStages.delete(filePath);
      // thumbnailStage.id = file.path;
      // thumbnailStage.stageArtboards[0].path = file.path;
      // thumbnailStage.stageArtboards[0].rootLayerId = file.path + ":0";
      // session.thumbnailStages.set(file.path, thumbnailStage);

      session.emitPatch({
        op: "replace",
        path: `/thumbnailStages:::${filePath}:::/id`,
        value: newFileJSON.path
      });
      session.emitPatch({
        op: "replace",
        path: `/thumbnailStages:::${filePath}:::/stageArtboards/0/path`,
        value: newFileJSON.path
      });
      session.emitPatch({
        op: "replace",
        path: `/thumbnailStages:::${filePath}:::/stageArtboards/0/rootLayerId`,
        value: newFileJSON.path + ":0"
      });

      session.emitPatch({
        op: "move",
        from: `/thumbnailStages:::${filePath}`,
        path: `/thumbnailStages:::${newFileJSON.path}`
      });
    }
  }

  session.emitPatch({
    op: "replace",
    path: `/domain/files:::${filePath}:::/path`,
    value: newFileJSON.path
  });
  session.emitPatch({
    op: "move",
    from: `/domain/files:::${filePath}`,
    path: `/domain/files:::${newFileJSON.path}`
  });
  const symbolInstances = file.symbolInstances;
  forEach(symbolInstances, (symbolInstance: DomainLayer) => {
    if (symbolInstance !== file.layer) {
      // symbolInstance.import.layerName = newName;
      session.emitPatch({
        op: "replace",
        path: `/domain/files:::${Utils.modifyLayerPathForJsonPatch(
          symbolInstance.getFullPath()
        )}/import/layerName`,
        value: newName
      });
      // symbolInstance.import.packageName = file.path;
      session.emitPatch({
        op: "replace",
        path: `/domain/files:::${Utils.modifyLayerPathForJsonPatch(
          symbolInstance.getFullPath()
        )}/import/packageName`,
        value: file.path
      });

      const symbolInstanceFile = symbolInstance.getFile();
      if (symbolInstanceFile) {
        SetFileDirtyMutator(session, symbolInstanceFile.path, true);
      }
    }
  });

  if (file.dbFileId) {
    try {
      session.addFileIdToBeDeleted(file.dbFileId);

      // session.drivers.fileService.removeFolder(
      //   file.dbFileId,
      //   session.connectionId
      // );
    } catch (error) {
      console.error("Error in removing folder", error);
    }
  }

  newFile.formControls.forEach((formControl, index) => {
    // formControl.layerPath = formControl.layerPath.replace(
    //   filePath,
    //   newFileJSON.path
    // );

    session.emitPatch({
      op: "replace",
      path: `/domain/files:::${newFileJSON.path}:::/formControls/${index}/layerPath`,
      value: formControl.layerPath.replace(filePath, newFileJSON.path)
    });
  });

  delete file.dbFileId;
  session.drivers.fileService
    .writeFile(
      newFile.path,
      JSON.stringify(newFile.toJS()),
      session.connectionId
    )
    .then((response: any) => {
      SetDbFileIdMutator(session, newFile.path, response);
    });

  // const event = new SessionEvent("renameSymbolFile", {
  //   file: newFile,
  //   newName
  // });
  // session.eventManager.dispatchEvent("renameSymbolFile", event);
  // session.domain.emit("files");
}
