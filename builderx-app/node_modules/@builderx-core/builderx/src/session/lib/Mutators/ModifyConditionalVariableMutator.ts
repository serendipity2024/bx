import { Session } from "session";
import { forEach, get } from "lodash";
import { Utils } from "utils";

export default function ModifyConditionalVariableMutator(
  session: Session,
  domainLayerPath: string,
  oldName: string,
  newName: string
) {
  //
  const file = session.getFileFromLayerPath(domainLayerPath);
  const layer = session.getLayerFromLayerPath(domainLayerPath);

  let scopeVariablesArray: any = [];
  if (!file || !layer) {
    return;
  }
  scopeVariablesArray.push({
    scopeVariables: file.scopeVariables,
    layerPath: file.path
  });

  if (file.isSymbol()) {
    forEach(file.symbolInstances, syIns => {
      scopeVariablesArray.push({
        scopeVariables: syIns.scopeVariables,
        layerPath: syIns.getFullPath()
      });
    });

    file.formControls.forEach((formControl, index) => {
      if (formControl.title === `this.props.${oldName}`) {
        // formControl.title = `this.props.${newName}`;

        session.emitPatch({
          op: "replace",
          path: `/domain/files:::${file.path}:::/formControls/${index}/title`,
          value: `this.props.${newName}`
        });
      }
    });
  }

  const expressions = file.expressionList.get(`this.props.${oldName}`);

  if (expressions) {
    forEach(expressions, (expressionPath, index) => {
      // expression.expression = `this.props.${newName}`;

      session.emitPatch({
        op: "replace",
        path: `/domain/files:::${Utils.modifyLayerPathForJsonPatch(
          expressionPath
        )}/expression`,
        value: `this.props.${newName}`
      });

      // session.applyPatch({
      //   op: "replace",
      //   path: `/domain/files:::${file.path}:::/expressionList:::this.props.${oldName}:::/${index}/expression`,
      //   value: `this.props.${newName}`
      // });
    });
  }

  forEach(scopeVariablesArray, svObj => {
    const sv = svObj.scopeVariables;
    const layerPath = svObj.layerPath;
    const value = get(sv, `this.props.${oldName}`);
    if (value) {
      // delete sv[`this.props.${oldName}`];
      session.emitPatch({
        op: "remove",
        path: `/domain/files:::${Utils.modifyLayerPathForJsonPatch(
          layerPath
        )}/scopeVariables/this.props.${oldName}`
      });
      // sv[`this.props.${newName}`] = value;
      session.emitPatch({
        op: "replace",
        path: `/domain/files:::${Utils.modifyLayerPathForJsonPatch(
          layerPath
        )}/scopeVariables/this.props.${newName}`,
        value: value
      });
    }
  });
}
