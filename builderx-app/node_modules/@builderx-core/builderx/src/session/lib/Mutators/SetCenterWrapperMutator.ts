import { IMutator } from "common-interfaces";
import { cloneDeep, isNil, merge, forEach, has } from "lodash";
import { Session } from "../models/Session";
import { File as DomainFile, DomainLayer } from "domain-x";
import { DeviceStore } from "bx-constants";
import { ResolveNodeValue, Utils } from "utils";
// import { SetStyleAttributeInDCAndRC } from "../Commands/CommandServices/SetStyleAttributeInDCAndRC";
import { Layer } from "@builderx-core/designer";
import { RemoveLayerMutator, SetFileDirtyMutator } from ".";
import { SessionEvent } from "event-manager";
import SetStyleAttributeMutator from "./SetStyleAttributeMutator";
import RemoveStyleAttributeMutator from "./RemoveStyleAttributeMutator";
import { SetLayerDimensionsService } from "../Commands/CommandServices/SetLayerDimensions";
import { SetAllStyleService } from "../Commands/CommandServices/SetAllStyleService";
import SetAllStyleAttributesMutator from "./SetAllStyleAttributesMutator";

type Center = {
  vertical?: boolean;
  horizontal?: boolean;
};

export default function SetCenterWrapperMutator(
  session: Session,
  layerId: string,
  center: Center
) {
  //

  const centerHorizontal: any = center.horizontal;
  const centerVertical: any = center.vertical;

  const domainLayer: DomainLayer = session.getLayerFromLayerPath(layerId);

  if (!domainLayer) {
    return;
  }
  let dimension: any = domainLayer.getBoundingClientRect();

  if (!domainLayer.template) {
    return;
  }

  if (has(center, "horizontal") && center.horizontal) {
    const width = domainLayer.getBoundingClientRect().width;

    if (
      isNil(domainLayer.props.getResolvedStyleAttribute("width")) &&
      !domainLayer.isWidthAuto
    ) {
      SetStyleAttributeMutator(
        session,
        domainLayer.getFullPath(),
        "width",
        width,
        undefined,
        false
      );
    }

    RemoveStyleAttributeMutator(
      session,
      domainLayer.getFullPath(),
      "left",
      undefined
    );

    RemoveStyleAttributeMutator(
      session,
      domainLayer.getFullPath(),
      "right",
      undefined
    );
  } else if (
    has(center, "horizontal") &&
    domainLayer.template.centerHorizontal
  ) {
    SetStyleAttributeMutator(
      session,
      domainLayer.getFullPath(),
      "left",
      dimension.x,
      undefined,
      false
    );
  }

  if (has(center, "vertical") && center.vertical) {
    const height = domainLayer.getBoundingClientRect().height;

    if (
      isNil(domainLayer.props.getResolvedStyleAttribute("height")) &&
      !domainLayer.isHeightAuto
    ) {
      SetStyleAttributeMutator(
        session,
        domainLayer.getFullPath(),
        "height",
        height,
        undefined,
        false
      );
    }

    RemoveStyleAttributeMutator(
      session,
      domainLayer.getFullPath(),
      "top",
      undefined
    );
    RemoveStyleAttributeMutator(
      session,
      domainLayer.getFullPath(),
      "bottom",
      undefined
    );
  } else if (has(center, "vertical") && domainLayer.template.centerVertical) {
    SetStyleAttributeMutator(
      session,
      domainLayer.getFullPath(),
      "top",
      dimension.y,
      undefined,
      false
    );
  }

  // const compiledLayer = domainLayer.getOwnCanvasRef();
  // const layerLayout = compiledLayer.convertLayerDimensions({
  //   ...dimension
  // });

  // SetAllStyleAttributesMutator(
  //   session,
  //   domainLayer.getFullPath(),
  //   layerLayout,
  //   undefined,
  //   false
  // );

  if (has(center, "horizontal")) {
    session.emitPatch({
      op: "replace",
      path: `/domain/files:::${Utils.modifyLayerPathForJsonPatch(
        layerId
      )}/template/centerHorizontal`,
      value: centerHorizontal
    });
    // domainLayer.template.setCenterHorizontal(centerHorizontal);
  }

  if (has(center, "vertical")) {
    session.emitPatch({
      op: "replace",
      path: `/domain/files:::${Utils.modifyLayerPathForJsonPatch(
        layerId
      )}/template/centerVertical`,
      value: centerVertical
    });
    // domainLayer.template.setCenterVertical(centerVertical);
  }

  const file = domainLayer.getFile();
  if (file) {
    SetFileDirtyMutator(session, file.path, true);
  }

  // const event = new SessionEvent("setCenterWrapper", {
  //   layer: domainLayer
  // });

  // session.eventManager.dispatchEvent("setCenterWrapper", event);
}
