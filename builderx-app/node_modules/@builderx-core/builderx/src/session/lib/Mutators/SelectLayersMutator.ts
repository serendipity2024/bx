import { Session } from "../models/Session";
import { forEach, isEmpty } from "lodash";
import {
  Layer as DomainLayer,
  LayerNode,
  DomainFile,
  LayerCollection
} from "domain-x";
import { Utils } from "utils";
export default function SelectLayersMutator(
  session: Session,
  layerIds: Array<string>,
  generatePreview: boolean = false
) {
  if (isEmpty(layerIds) && session.currentRootLayer) {
    layerIds = [session.currentRootLayer.getFullPath()];
  }
  const selectedLayers: Array<DomainLayer> = [];
  const selectedNodes: Array<LayerNode<
    DomainLayer | DomainFile,
    DomainLayer
  >> = [];
  forEach(layerIds, (layerId: string) => {
    const domainLayer = session.getLayerFromLayerPath(layerId);
    // layers.push(domainLayer);
    if (domainLayer && domainLayer.type !== "file") {
      // domainLayer.selected = true;
      if (layerId) {
        session.emitPatch({
          op: "replace",
          path: `/domain/files:::${Utils.modifyLayerPathForJsonPatch(
            layerId
          )}/selected`,
          value: true
        });
      }

      selectedLayers.push(domainLayer as any);
      selectedNodes.push(layerId as any);
      domainLayer.emit("selected");
    }
    if (domainLayer && domainLayer.type === "root") {
      // session.currentRootLayer = domainLayer;
      session.emitPatch({
        op: "replace",
        path: `/currentRootLayer`,
        value: domainLayer
      });
    }
  });
  let layerCollection = new LayerCollection(selectedLayers, session);
  session.emitPatch({
    op: "replace",
    path: `/selectedLayers`,
    value: [layerCollection]
  });
  session.emitPatch({
    op: "replace",
    path: `/selectedNodes`,
    value: selectedNodes
  });

  // session.emit("selectedLayers");

  // const event = new SessionEvent("selectLayers", {
  //   layers: layers,
  //   generatePreview
  // });
  // session.eventManager.dispatchEvent("selectLayers", event);
}
