import { Session } from "../models/Session";
import { Expression, File } from "domain-x";
import { isNil, get } from "lodash";
import createService from "../Commands/CommandServices";

export default function UpdateFileExpressionListMutator(
  session: Session,
  node: Expression,
  filePath?: string
) {
  let file;
  if (!filePath) {
    file = session.selectedFile;
  } else {
    file = session.domain.files.get(filePath);
  }
  // console.log(var, "hello selectedFile");
  if (!file) {
    return;
  }
  if (!file.expressionList || file.expressionList.size === 0) {
    // file.expressionList = new Map();

    session.emitPatch({
      op: "replace",
      path: `/domain/files:::${file.path}:::/expressionList`,
      value: {
        type: "class",
        className: "Map"
      }
    });
  }
  let expressions: any = [];
  if (file.expressionList.has(node.expression)) {
    expressions = file.expressionList.get(node.expression);
  }

  expressions.push(node);
  // file.expressionList.set(node.expression, expressions);

  session.emitPatch({
    op: "add",
    path: `/domain/files:::${file.path}:::/expressionList:::${node.expression}`,
    value: expressions.map((e: any) => (e.getFullPath ? e.getFullPath() : e))
  });

  if (isNil(get(file.scopeVariables, node.expression, undefined))) {
    // file.scopeVariables[node.expression] = undefined;

    session.emitPatch({
      op: "replace",
      path: `/domain/files:::${file.path}:::/scopeVariables/${node.expression}`,
      value: undefined
    });
  }
}
