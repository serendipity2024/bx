import { IMutator } from "common-interfaces";
import {
  cloneDeep,
  isNil,
  forEach,
  merge,
  camelCase,
  find,
  remove,
  findIndex
} from "lodash";
import { Session } from "../models/Session";
// import { Layer as CompiledLayer } from "@builderx-core/designer";

export default function RemoveStageArtboardMutator(
  session: Session,
  stageId: string,
  filePath: string
) {
  // const stageArtboard = new StageArtboard();
  // stageArtboard.setRootLayerId(rootLayerId);
  // stageArtboard.setPath(filePath);

  const stage = session.stages.get(stageId);
  if (!stage) {
    return;
  }

  const stageArtboardIndex = findIndex(stage.stageArtboards, (sa: any) => {
    return sa.path === filePath;
  });

  if (stageArtboardIndex === -1) {
    return;
  }

  const stageArtboard = stage.stageArtboards[stageArtboardIndex];

  session.emitPatch({
    op: "remove",
    path: `/stages:::${stageId}:::/stageArtboards/${stageArtboardIndex}`
  });
  // stage.stageArtboards.splice(stageArtboardIndex, 1);

  // stage.stageArtboards.push(stageArtboard);
  // session.eventManager.dispatchEvent(
  //   "removeStageArtboard",
  //   new SessionEvent("removeStageArtboard", {
  //     stageArtboard,
  //     stage
  //   })
  // );

  return stageArtboard;
}

//   static updateAndApplyAllSideEffects(
//     session: Session,
//     stageId: string,
//     filePath: string,
//     rootLayerId: string
//   ) {
//     return AddStageArtboardMutator.updateRootData(
//       session,
//       stageId,
//       filePath,
//       rootLayerId
//     );
//     // if (layer) {
//     //   layer.domainCompiledRefs.forEach(compiledLayer => {
//     //     SetText.applySideEffects(session, compiledLayer, layerId, value);
//     //   });
//     // }
//   }
// }
