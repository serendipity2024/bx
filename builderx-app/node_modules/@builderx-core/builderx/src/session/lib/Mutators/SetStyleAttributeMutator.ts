import { SessionEvent } from "event-manager";
import { isNil } from "lodash";
import { Session } from "../models/Session";
import { SetFileDirtyMutator, CreateExpressionNodeMutator } from ".";
import RemoveStyleAttributeMutator from "./RemoveStyleAttributeMutator";
import { DomainFile, DomainLayer } from "domain-x";
import { Gradient } from "@builderx-core/designer";
import { Utils } from "utils";

export default function SetStyleAttributeMutator(
  session: Session,
  layerId: string,
  key: any,
  value: any,
  stylePropName: any = "style",
  removeCenterWrapper: boolean = true
) {
  const layer: DomainFile | DomainLayer = session.getLayerFromLayerPath(
    layerId
  );
  if (!layer) {
    return;
  }

  if (layer.type === "literal") {
    return;
  }
  if (isNil(value)) {
    RemoveStyleAttributeMutator(session, layerId, key);
    return layer;
  }

  if (typeof value === "string" && value.indexOf("NaN%") === 0) {
    value = 0;
  }

  const file = layer.getFile();
  const oldValue = layer.props.getStyleAttribute(key);
  if ((!isNil(oldValue) && oldValue.type) || (!isNil(value) && value.type)) {
    // if (Utils.isExpression(value.type)) {
    CreateExpressionNodeMutator(
      session,
      layer,
      "props.style",
      key,
      value,
      oldValue
    );
    SetFileDirtyMutator(session, file.path, true);
    return;
    // }
  }

  if (file) {
    SetFileDirtyMutator(session, file.path, true);
  }
  // if (key === "transform" && get(value, "[0].rotate") === "0deg") {
  //   // RemoveStyleAttributeMutator(session, layerId, key);
  //   // return;
  // }
  if (key === "gradient" && value) {
    let { gradientType, from, to, stops, activeIndex } = value;
    stops = stops.map((stop: any) => {
      return { stopColor: stop.stopColor, offset: Number(stop.offset) };
    });
    const gradient = new Gradient(
      gradientType,
      { x: Number(from.x), y: Number(from.y) },
      { x: Number(to.x), y: Number(to.y) },
      stops,
      activeIndex
    );
    value = gradient;
  }
  // layer.props.setStyleAttribute(key, value, stylePropName);

  // if (layer.type !== "file") {
  const styleProp = layer.props.getResolvedProp(stylePropName);
  if (!styleProp) {
    session.emitPatch({
      op: "replace",
      path: `/domain/files:::${Utils.modifyLayerPathForJsonPatch(
        layerId
      )}/props/${stylePropName}`,
      value: {
        type: "class",
        className: "Style"
      }
    });
  }
  session.emitPatch({
    op: "replace",
    path: `/domain/files:::${Utils.modifyLayerPathForJsonPatch(
      layerId
    )}/props/${stylePropName}/${key}`,
    value: value
  });
  // } else {
  //   layer.props.setStyleAttribute(key, value, stylePropName);

  //   if (session.currentStage.dragging) {
  //     layer.emit("onDragLayer");
  //   } else {
  //     layer.props.style.emit(key);
  //   }

  //   const event = new SessionEvent("setStyleAttribute", {
  //     layer,
  //     key,
  //     value,
  //     stylePropName
  //   });

  //   session.eventManager.dispatchEvent("setStyleAttribute", event);
  // }
  // if (session.currentStage.dragging) {
  //   layer.emit("onDragLayer");
  // } else {
  //   layer.props.style.emit(key);
  // }

  // const event = new SessionEvent("setStyleAttribute", {
  //   layer,
  //   key,
  //   value,
  //   stylePropName
  // });

  // session.eventManager.dispatchEvent("setStyleAttribute", event);
  return layer;
}
