import { Session } from "../models/Session";
import { set, cloneDeep, upperFirst, isNil, get } from "lodash";
import {
  Layer as DomainLayer,
  loadThirdPartyComponent,
  LiteralNode
} from "domain-x";

import RootDefinition from "../componentJSON/Root";
import SymbolInstanceTemplate from "../componentJSON/SymbolInstance";
import { SetFileDirtyMutator } from ".";
import { SessionEvent } from "event-manager";
import { Utils } from "utils";
import CreateExpressionNodeMutator from "./CreateExpressionNodeMutator";
import { v1 as uuid } from "uuid";

const getLayerTemplate = (session: Session, layerType: string) => {
  return cloneDeep(
    session.currentStage.canvas.getComponentDefinition(layerType).template
  );
};

const getLayerJSON = (session: Session, layerType: string, layerJSON: any) => {
  switch (layerType) {
    case "view":
    case "text":
    case "textInput":
    case "ellipse":
    case "path":
    case "icon":
    case "slider":
    case "mapView":
    case "switch":
    case "activityIndicator":
    case "touchableOpacity":
    case "image":
    case "scrollView":
      return getLayerTemplate(session, layerType);

    case "root":
      return cloneDeep(RootDefinition.template);
    case "literal":
      return { type: "literal", value: "Lorem Ipsum" };
    case "flatList":
    case "swiper":
    case "tabView":
    case "picker":
      {
        const thirdPartyComponent = loadThirdPartyComponent(
          upperFirst(layerType)
        );
        if (thirdPartyComponent) {
          let thirdPartyLayerJSON = cloneDeep(thirdPartyComponent.template);
          return thirdPartyLayerJSON;
        } else {
          return getLayerTemplate(session, "view");
        }
      }
      break;
    case "symbol":
      let symbolInstanceTemplate = cloneDeep(SymbolInstanceTemplate.template);
      symbolInstanceTemplate.import.packageName = layerJSON.import.packageName;
      symbolInstanceTemplate.scopeVariables = layerJSON.scopeVariables;

      return symbolInstanceTemplate;
    default:
      return getLayerTemplate(session, "view");
  }
};

export default function AddLayerMutator(
  session: Session,
  filePath: string,
  layerType: string,
  parentLayerId: string,
  index?: number | string | undefined,
  json?: any
) {
  const parentLayer = session.getLayerFromLayerPath(parentLayerId);

  if (!parentLayer) {
    return;
  }
  // const oldValue = layer.props.getStyleAttribute(key);

  // if ((!isNil(oldValue) && oldValue.type) || (!isNil(value) && value.type)) {

  if (Utils.isExpression(layerType)) {
    //
    let path = "";
    let key = "";
    if (typeof index === "number") {
      path = `children`;
      key = index.toString();
    } else if (index === undefined) {
      path = `children`;
      key = parentLayer.children.length.toString();
    } else {
      path = "";
      key = index;
    }
    CreateExpressionNodeMutator(
      session,
      parentLayer,
      "",
      path + "." + key,
      json
    );
    SetFileDirtyMutator(session, filePath, true);

    return;
  }
  let layerJSON = getLayerJSON(session, layerType, json);

  let className: string;
  if (layerJSON.type === "literal") {
    className = "LiteralNode";
  } else {
    className = "DomainLayer";
  }

  let domainLayer: DomainLayer | LiteralNode;

  // preserve old layer id in case of existing project
  const layerUuid = json.id ? json.id : uuid();

  if (parentLayer.type !== "file") {
    if (parentLayer) {
      domainLayer = session.emitPatch({
        op: "add",
        path: `/domain/files:::${Utils.modifyLayerPathForJsonPatch(
          parentLayerId
        )}/children/${!isNil(index) ? index : "-"}`,
        value: {
          type: "class",
          className: className,
          value:
            className === "LiteralNode"
              ? layerJSON
              : { ...layerJSON, children: [], props: {}, id: layerUuid }
        }
      });
    }
  } else {
    domainLayer = session.emitPatch({
      op: "add",
      path: `/domain/files:::${filePath}:::/${!isNil(index) ? index : "layer"}`,
      value: {
        type: "class",
        className: className,
        value: { ...layerJSON, children: [], props: {}, id: layerUuid }
      }
    });
  }

  // @ts-ignore
  domainLayer = domainLayer as any;

  SetFileDirtyMutator(session, filePath, true);
  return domainLayer;
}
