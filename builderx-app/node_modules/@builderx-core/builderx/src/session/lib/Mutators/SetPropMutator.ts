import { get, isNil } from "lodash";
import { Session } from "../models/Session";
import { STYLE_PROP_NAMES } from "bx-constants";
import { SetFileDirtyMutator, CreateExpressionNodeMutator } from ".";
import SetAllStyleAttributes from "./SetAllStyleAttributesMutator";
import { SessionEvent } from "event-manager";
import { Utils } from "utils";

export default function SetPropMutator(
  session: Session,
  layerId: any,
  key: any,
  value: any
) {
  const file = session.getFileFromLayerPath(layerId);
  if (!file) {
    return;
  }

  const layer = file.getLayerFromPath(layerId);
  if (!layer) {
    return;
  }

  const oldValue = layer.props.get(key);
  if ((!isNil(oldValue) && oldValue.type) || (!isNil(value) && value.type)) {
    CreateExpressionNodeMutator(session, layer, "props", key, value, oldValue);
    SetFileDirtyMutator(session, file.path, true);

    return;
  }
  if (key === "source" && !get(value, "uri").startsWith("https://")) {
    if (!value.uri) {
      return layer;
    }
    value = {
      uri: `${
        session.envConstants.BACKEND_API_URL
      }/get-files-content/${session.project.getProjectId()}?fileName=${
        value.uri
      }`
    };
  }
  if (STYLE_PROP_NAMES.includes(key)) {
    SetAllStyleAttributes(session, layer.getFullPath(), value, key);
  } else {
    session.emitPatch({
      op: "replace",
      path: `/domain/files:::${Utils.modifyLayerPathForJsonPatch(
        layerId
      )}/props/${key}`,
      value: value
    });
  }

  SetFileDirtyMutator(session, file.path, true);

  return layer;
}
