import { IMutator } from "common-interfaces";
import { cloneDeep, isNil, merge, forEach } from "lodash";
import { Session } from "../models/Session";
import { File as DomainFile, DomainLayer } from "domain-x";
import { DeviceStore } from "bx-constants";
import { ResolveNodeValue, Utils } from "utils";
import { SetFileDirtyMutator } from ".";
import { Layer } from "@builderx-core/designer";
import { SessionEvent } from "event-manager";

export default function RemovePropMutator(
  session: Session,
  layerId: string,
  key: string
) {
  //

  const layer = session.getLayerFromLayerPath(layerId);
  const file = session.getFileFromLayerPath(layerId);

  if (!layer || !file) {
    return;
  }
  session.emitPatch({
    op: "remove",
    path: `/domain/files:::${Utils.modifyLayerPathForJsonPatch(
      layerId
    )}/props/${key}`
  });
  // layer.props.removeProp(key);

  SetFileDirtyMutator(session, file.path, true);

  // const event = new SessionEvent("removeProp", {
  //   layer,
  //   key
  // });

  // session.eventManager.dispatchEvent("removeProp", event);

  return layer;
}
//   static applySideEffects(compiledLayer: Layer, key: string) {
//     //
//     compiledLayer.props.remove(key);
//   }
//   static updateAndApplyAllSideEffects(
//     session: Session,
//     layerId: string,
//     key: string
//   ) {
//     const removedLayer = RemoveProp.updateRootData(session, layerId, key);
//     forEach(removedLayer.domainCompiledRefs, (compiledL: any) => {
//       RemoveProp.applySideEffects(compiledL, key);
//     });
//     //
//   }
// }
