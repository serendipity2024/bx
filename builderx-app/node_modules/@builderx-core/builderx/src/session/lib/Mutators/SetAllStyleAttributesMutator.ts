import { forEach } from "lodash";
import { Session } from "../models/Session";
import { SetFileDirtyMutator, SetStyleAttributeMutator } from ".";
import {
  stopAndBatchLayoutUpdates,
  resumeLayoutUpdates
} from "@builderx-core/designer";
import { Utils } from "utils";

export default function SetAllStyleAttributesMutator(
  session: Session,
  layerId: string,
  styles: any,
  stylePropName: any = "style",
  removeCenterWrapper: boolean = true
) {
  const layer = session.getLayerFromLayerPath(layerId);
  const file = session.getFileFromLayerPath(layerId);
  if (!file || !layer) {
    return;
  }

  if (layer.type === "literal") {
    return;
  }
  const styleKeys: any = [];
  stopAndBatchLayoutUpdates();

  if (layer) {
    forEach(styles, (styleValue, styleKey) => {
      SetStyleAttributeMutator(
        session,
        layerId,
        styleKey,
        styleValue,
        stylePropName,
        removeCenterWrapper
      );
    });

    if (layer.ui) {
      // layer.ui.setResizingType(layer.props.style.toJS());

      if (layerId) {
        // const resizingType = Utils.getResizingTypeFromStyle(layer.props.style.toJS())
        session.emitPatch({
          op: "replace",
          path: `/domain/files:::${Utils.modifyLayerPathForJsonPatch(
            layerId
          )}/ui/resizingType`,
          value: {
            type: "class",
            className: "ResizingType",
            value: layer.props.style.toJS()
          }
        });
      }
    }
  }
  resumeLayoutUpdates();

  SetFileDirtyMutator(session, file.path, true);

  return layer;
}
