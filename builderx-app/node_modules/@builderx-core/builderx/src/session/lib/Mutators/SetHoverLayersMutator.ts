import { Session } from "../models/Session";
import { forEach } from "lodash";
import { Layer as DomainLayer } from "domain-x";
import { SessionEvent } from "event-manager";
import { Utils } from "utils";

export default function SetHoverLayersMutator(
  session: Session,
  filePath: string,
  layerIds: Array<string>
) {
  const file = session.domain.files.get(filePath);
  if (!file) {
    return;
  }
  const hoveredLayers: Array<DomainLayer> = [];
  forEach(layerIds, (layerId: string) => {
    const domainLayer = file.getLayerFromPath(layerId);
    // layers.push(domainLayer);
    if (
      domainLayer &&
      domainLayer.type !== "file" &&
      domainLayer.type !== "root"
    ) {
      // domainLayer.hovered = true;
      if (layerId) {
        session.emitPatch({
          op: "replace",
          path: `/domain/files:::${Utils.modifyLayerPathForJsonPatch(
            layerId
          )}/hovered`,
          value: true
        });
      }
      hoveredLayers.push(domainLayer as any);

      // domainLayer.emit("hovered");
    }
  });

  session.emitPatch({
    op: "replace",
    path: `/hoveredLayers`,
    value: hoveredLayers
  });

  // session.emit("hoveredLayers");

  // const event = new SessionEvent("setHoverLayers", {
  //   file,
  //   layers
  // });
  // session.eventManager.dispatchEvent("setHoverLayers", event);
}
