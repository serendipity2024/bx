import { types } from "serializable";
import { Model } from "model";
import { IProject } from "common-interfaces";
import { generateRandomName } from "./../../Commands/Utils/randomNameGenerator";
import { Session } from "./../Session";

export default class Project extends Model implements IProject {
  defaultArtboardDirectory: string;
  defaultSymbolDirectory: string;
  defaultAssetDirectory: string;
  projectName: string;
  deviceName: string;
  session: Session;
  deviceOrientation: "portrait" | "landscape";
  // basePath: string;
  // tempPath: string | undefined;
  missingFonts: Array<string>;
  // rulers: Map<string, Array<RulerModel>>;
  projectId: string;
  connectedSessions: Array<any> = [];
  isLocked: boolean = false;
  trialEndDate: string;
  daysRemaining: number;
  isSubscribed: boolean;
  shareabilityData: any = [];
  lastEditedBy: any;
  access: any;
  teamId: any;
  isSample: boolean = false;
  getFields() {
    return {
      defaultArtboardDirectory: types.literal,
      defaultSymbolDirectory: types.literal,
      defaultAssetDirectory: types.literal,
      projectName: types.literal,
      shareabilityData: types.literal,
      deviceName: types.literal,
      deviceOrientation: types.literal,
      // basePath: types.literal,
      projectId: types.literal,
      missingFonts: types.array(types.literal)
      // rulers: types.map(string, types.array(RulerModel))
    };
  }

  constructor(session: Session) {
    super();
    this.defaultArtboardDirectory = "/src/screens";
    this.defaultSymbolDirectory = "/src/components";
    this.defaultAssetDirectory = "/src/assets";
    this.deviceName = "iPhone X";
    this.deviceOrientation = "portrait";
    this.missingFonts = [];
    // this.rulers = new Map<string, RulerModel[]>();
    this.session = session;
    this.projectName = generateRandomName();
  }
  getProjectId() {
    return this.projectId;
  }
  setTeamId(id: any) {
    this.teamId = id;
  }
  getDeviceName() {
    return this.deviceName;
  }
  getAllProjectSettings() {
    return {
      defaultArtboardDirectory: this.defaultArtboardDirectory,
      defaultAssetDirectory: this.defaultAssetDirectory,
      defaultSymbolDirectory: this.defaultSymbolDirectory,
      deviceName: this.deviceName,
      deviceOrientation: this.deviceOrientation
      // basePath: this.basePath,
      // tempPath: this.tempPath,
      // rulers: this.rulers
    };
  }
  addMissingFontName(fontName: string) {
    if (this.missingFonts.indexOf(fontName) === -1) {
      this.missingFonts.push(fontName);
    }
  }
  setProjectId(projectId: string) {
    this.projectId = projectId;
  }
  setIsSample(value: boolean) {
    this.isSample = value;
  }
  setConnectedSessions(sessions: Array<any>) {
    this.connectedSessions = sessions;
  }
  // setIsLocked(locked: boolean) {
  //   this.isLocked = locked;
  // }
  setLastEditedBy(data: boolean) {
    this.lastEditedBy = data;
  }

  setProjectAccess(access: any) {
    this.access = access;
  }

  setTrialEndDate(date: string) {
    this.trialEndDate = date;
  }
  setSubscription(isSubscribed: boolean, days: any) {
    this.isSubscribed = isSubscribed;
    this.daysRemaining = parseInt(days, 10);
  }

  setShareabilityData(data: any) {
    this.shareabilityData = data;
  }
  setProjectName(projectName: string) {
    this.projectName = projectName;
  }
  setDefaultArtboardDirectory(defaultArtboardDirectory: string) {
    this.defaultArtboardDirectory = defaultArtboardDirectory;
  }
  setDefaultSymbolDirectory(defaultSymbolDirectory: string) {
    this.defaultSymbolDirectory = defaultSymbolDirectory;
  }
  setDefaultAssetDirectory(defaultAssetDirectory: string) {
    this.defaultAssetDirectory = defaultAssetDirectory;
  }
  // setTempPath(tempPath: string) {
  //   this.tempPath = tempPath;
  // }
  setDeviceName(deviceName: string) {
    this.deviceName = deviceName;
  }
  setDeviceOrientation(deviceOrientation: "portrait" | "landscape") {
    this.deviceOrientation = deviceOrientation;
  }
  clearMissingFontList() {
    this.missingFonts.length = 0;
  }

  // getFileRulers(filePath: string): RulerModel[] {
  //   var rulers: RulerModel[] = [];

  //   var selectedFileRulers = this.rulers.get(filePath);
  //   if (selectedFileRulers) {
  //     rulers = selectedFileRulers;
  //   }
  //   return rulers;
  // }
  // addRuler(ruler: RulerModel) {
  //   this.rulers.rulers.push(ruler);
  // }
  // removeRuler(ruler: RulerModel) {
  //   let rulerIndex = this.rulers.rulers.indexOf(ruler);
  //   this.rulers.rulers.splice(rulerIndex, 1);
  // }
}
