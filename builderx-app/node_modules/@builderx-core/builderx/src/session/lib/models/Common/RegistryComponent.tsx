import { CommandManager } from "command-manager";
import * as React from "react";
import CommandKeyMapperService from "../../services/CommandKeyMapperService";
import KeyMapper from "../../services/KeyMapper";
import WindowService from "../../services/WindowService";
import { Session } from "../Session";
import Feedback from "./../Feedback";

const localStorage = window["localStorage"];

export default class RegistryComponent extends React.Component<
  {
    session: Session;
    commandManager: CommandManager;
  },
  {}
> {
  componentDidMount() {
    let { session, commandManager } = this.props;
    session.keyMapper = new KeyMapper();
    session.commandKeyMapperService = new CommandKeyMapperService(
      session,
      commandManager
    );

    session.windowService = new WindowService(session);
    // session.drivers.contextMenu = new ContextMenuService(
    //   this.props.contextMenuAdapter,
    //   session
    // );
    session.feedback = new Feedback();
    // session.connectRealtimeIO();
    session.connectSocketIO();

    // this.storeSnapshot();
    // this.sendSnapshot();
    // session.commandManager.executeAndSkip(new ToggleSnap(session));
    this.clearSnapshot();
  }
  clearSnapshot = () => {
    localStorage.removeItem("bx_domain_json");
  };
  storeSnapshot = () => {
    setTimeout(() => {
      let { session } = this.props;
      const domainJSON = session.domain.toJS();
      const existingJSON = localStorage.getItem("bx_domain_json");
      let data = [];
      if (existingJSON) {
        data = JSON.parse(existingJSON);
      }
      data.push({ [session.project.projectId]: domainJSON });
      localStorage.setItem("bx_domain_json", JSON.stringify(data));
      this.storeSnapshot();
    }, 60000);
  };

  sendSnapshot = () => {
    // setTimeout(() => {
    //   const domainJSON = localStorage.getItem("bx_domain_json");
    //   if (domainJSON) {
    //     this.props.session.apiSdk.projectLog
    //       .post(domainJSON)
    //       .then(res => {
    //         this.sendSnapshot();
    //         localStorage.removeItem("bx_domain_json");
    //       })
    //       .catch(err => {
    //         this.sendSnapshot();
    //       });
    //   } else {
    //     this.sendSnapshot();
    //   }
    // }, 60000);
  };

  componentWillUnmount() {
    let { session } = this.props;
    session.keyMapper.unRegisterAll();
  }

  render() {
    return (
      <>
        {React.Children.map(this.props.children, (child: any) => {
          return React.cloneElement(child, child.props);
        })}
      </>
    );
  }
}
