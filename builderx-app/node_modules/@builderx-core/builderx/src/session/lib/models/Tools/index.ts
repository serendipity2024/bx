import { Model } from "model";
import { types } from "serializable";
import { IPosition } from "@builderx-core/designer";

class DrawModel extends Model {
  x: number;
  y: number;
  width: number;
  height: number;
  renderCompiledWidth: number;
  renderCompiledHeight: number;
  type: string;
  // populate from component def

  constructor() {
    super();
  }
  getFields() {
    return {
      x: types.literal,
      y: types.literal,
      width: types.literal,
      height: types.literal,
      renderCompiledWidth: types.literal,
      renderCompiledHeight: types.literal,
      type: types.literal
    };
  }
  setRenderCompiledDims(width: number, height: number) {
    this.renderCompiledWidth = width;
    this.renderCompiledHeight = height;
  }
  setType(type: string) {
    this.type = type;
  }
  getType() {
    return this.type;
  }
  setLayerDimensions(layerDims: {
    x: number;
    y: number;
    width: number;
    height: number;
  }) {
    this.x = layerDims.x;
    this.y = layerDims.y;
    this.width = layerDims.width;
    this.height = layerDims.height;
  }
}

export default class Tools extends Model {
  zooming: boolean = false;
  draw: DrawModel;
  selectedTool:
    | "default"
    | "view"
    | "ellipse"
    | "image"
    | "text"
    | "icon"
    | "path"
    | "switch"
    | "activityIndicator"
    | "slider"
    | "mapView"
    | "scrollView"
    | "touchableOpacity"
    | "textInput";

  pathEditorData: {
    actions: {
      deleteSelectedPoint: () => void;
      straightenSelectedPoint: () => void;
      disconnectSelectedPoint: () => void;
      finishEditing: () => void;
      closePath: () => void;
    };
    pointMode: "straight" | "disconnected";
  };
  zoom: number;
  initialScroll: {
    x: number;
    y: number;
  };
  currentScroll: {
    x: number;
    y: number;
  };
  cursorPosition: IPosition = {
    x: 0,
    y: 0
  };

  getFields() {
    return {};
  }

  constructor(
    resizerData: any,
    mouseRectData: any,
    snapLineHorizontalData: any,
    snapLineVerticalData: any,
    drawData: any,
    sharedComponentsGhostData: any
  ) {
    super();

    this.selectedTool = "default";
    this.zoom = 1;
    this.initialScroll = {
      x: 0.5,
      y: 0.5
    };
    this.currentScroll = {
      x: 0.5,
      y: 0.5
    };
    this.zooming = false;
    this.draw = DrawModel.fromJS(drawData);
  }

  setCursorPosition(position: IPosition) {
    this.cursorPosition = position;
  }

  getSelectedTool() {
    return this.selectedTool;
  }
}
