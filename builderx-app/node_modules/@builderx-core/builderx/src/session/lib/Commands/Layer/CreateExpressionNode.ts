import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { Expression, LiteralNode } from "domain-x";
import { set, forEach } from "lodash";
import UpdateFileExpressionListMutator from "../../Mutators/UpdateFileExpressionListMutator";

export default class CreateExpressionNode implements ICommand {
  displayName = "CreateExpressionNode";
  private session: Session;
  private JSON: any;
  private parent: any;
  private key: string;
  private property?: string;
  private resolveDomainCompile: boolean;
  constructor(
    session: Session,
    parent: any,
    key: string,
    JSON: any,
    property?: string,
    resolveDomainCompile: boolean = true
  ) {
    this.session = session;
    this.JSON = JSON;
    this.parent = parent;
    this.key = key;
    this.property = property;
    this.resolveDomainCompile = resolveDomainCompile;
  }
  execute() {
    const file = this.parent.getFile();
    const domainNode = new Expression(this.JSON, this.session);
    domainNode.parent = this.parent;
    UpdateFileExpressionListMutator(this.session, domainNode, file.path);
    set(this.parent, this.key, domainNode);
    if (this.resolveDomainCompile) {
    }
  }
  undo() {
    //
  }
  redo() {
    //
  }
}
