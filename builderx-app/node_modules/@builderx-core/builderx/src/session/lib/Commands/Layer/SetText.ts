import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { SetTextMutator, SetPropMutator } from "../../Mutators";
import { ResolveNode } from "utils";
import { DomainLayer } from "domain-x";
import { camelCase } from "lodash";
import SetStyleNameService from "../CommandServices/SetStyleName";
import GenerateLayerPreview from "../CommandServices/GenerateLayerPreview";

export default class SetText implements ICommand {
  displayName = "SetText";
  private session: Session;
  private newText: string;
  private oldText: any;
  private isFinalChange: boolean;
  private layerPath: string;
  constructor(
    session: Session,
    layer: DomainLayer,
    newText: string,
    isFinalChange: boolean = false
  ) {
    this.session = session;
    this.newText = newText.trim();
    this.isFinalChange = isFinalChange;
    this.layerPath = layer.getFullPath();
  }

  execute() {
    const layer = this.session.getLayerFromLayerPath(this.layerPath);

    if (!layer) {
      return;
    }
    if (this.isFinalChange) {
      this.session.currentStage.canvas.executeFunction(
        "TextEditorPlugin.unmountEditor"
      );
      this.session.currentStage.canvas.executeFunction("ResizerRenderer.show");
    }
    if (layer.type === "textInput") {
      this.oldText = this.session
        .getLayerFromLayerPath(this.layerPath)
        .props.get("placeholder");
      SetPropMutator(this.session, this.layerPath, "placeholder", this.newText);
    } else {
      const resolvedNode = ResolveNode(
        layer.children[0],
        this.session.selectedFile
          ? this.session.selectedFile.scopeVariables
          : {}
      );
      if (resolvedNode.type === "literal") {
        this.oldText = resolvedNode["value"];
      }
      SetTextMutator(this.session, this.layerPath, this.newText);
    }

    this.setStyleName(layer, this.newText, layer.styleName);

    if (this.session.showCodeEditor) {
      GenerateLayerPreview(this.session, [this.layerPath]);
    }
    this.session.drivers.analyticsService.addActivity(
      {
        name: `set.text`,
        category: "app/command"
      },
      true
    );
  }

  undo() {
    const layer = this.session.getLayerFromLayerPath(this.layerPath);
    if (!layer) {
      return;
    }
    if (layer.type === "textInput") {
      SetPropMutator(this.session, this.layerPath, "placeholder", this.oldText);
    } else {
      SetTextMutator(this.session, this.layerPath, this.oldText);
    }
    this.setStyleName(layer, this.oldText, layer.styleName);

    if (this.session.showCodeEditor) {
      GenerateLayerPreview(this.session, [this.layerPath]);
    }

    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.set.text`,
        category: "app/command"
      },
      true
    );
    // this.setText(this.oldText);
  }
  redo() {
    const layer = this.session.getLayerFromLayerPath(this.layerPath);
    if (!layer) {
      return;
    }
    if (layer.type === "textInput") {
      SetPropMutator(this.session, this.layerPath, "placeholder", this.newText);
    } else {
      SetTextMutator(this.session, this.layerPath, this.newText);
    }
    this.setStyleName(layer, this.newText, layer.styleName);

    if (this.session.showCodeEditor) {
      GenerateLayerPreview(this.session, [this.layerPath]);
    }
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.set.text`,
        category: "app/command"
      },
      true
    );
  }
  private setStyleName(
    layer: DomainLayer,
    newText: string,
    oldStyleName: string
  ) {
    if (
      this.isFinalChange &&
      camelCase(newText.replace(/ /g, " ")) !== layer.styleName &&
      ((layer.type === "text" && layer.autoRenaming) ||
        layer.type === "textInput") &&
      newText.length <= 20
    ) {
      let domainFile = layer.getFile();
      if (domainFile) {
        let newStyleName = domainFile.getStyleNameForStyleSheet(newText);
        SetStyleNameService(
          this.session,
          this.layerPath,
          oldStyleName,
          newStyleName
        );
      }
    }
  }
}
