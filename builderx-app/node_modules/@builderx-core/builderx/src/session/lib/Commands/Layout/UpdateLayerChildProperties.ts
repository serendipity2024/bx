import { Layer as DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import { ICommand } from "command-manager";
import UpdateLayerPropertiesService from "./../CommandServices/UpdateLayerProperties";
import { forEach } from "lodash";

export default class UpdateLayerChildProperties implements ICommand {
  displayName = "UpdateLayerChildProperties";
  private session: Session;
  private properties: any;
  private oldProperties: any = [];
  private key: string;
  private domainLayerChildrenPaths: Array<string> = [];

  constructor(
    session: Session,
    domainLayer: DomainLayer,
    properties: any,
    key: string
  ) {
    this.session = session;
    this.properties = properties;
    this.key = key;
    domainLayer.forEachChild((childLayer: DomainLayer) => {
      this.domainLayerChildrenPaths.push(childLayer.getFullPath());
      this.oldProperties.push({
        ...properties,
        [this.key]: childLayer.props.getResolvedStyleAttribute(this.key)
      });
    });
  }
  execute() {
    forEach(this.domainLayerChildrenPaths, (layerPath: string) => {
      UpdateLayerPropertiesService(
        this.session,
        layerPath,
        this.properties,
        this.key
      );
    });
  }
  undo() {
    forEach(this.domainLayerChildrenPaths, (layerPath: string, index: any) => {
      UpdateLayerPropertiesService(
        this.session,
        layerPath,
        this.oldProperties[index],
        this.key
      );
    });
  }
  redo() {
    this.execute();
  }
}
