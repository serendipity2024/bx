import { Session } from "../../models/Session";
import { File as DomainFile } from "domain-x";
import { ICommand } from "command-manager";
import RemoveArtboardService from "../CommandServices/RemoveArtboardService";
import PlaceArtboardsToCenter from "../CommandServices/PlaceArtboardsToCenter";
import { cloneDeep, isEmpty } from "lodash";
import AddArtboardService from "../CommandServices/AddArtboardService";
import GenerateLayerPreview from "../CommandServices/GenerateLayerPreview";
import RemoveHoveredForAllLayersService from "../CommandServices/RemoveHoveredForAllLayers";

export default class RemoveArtboard implements ICommand {
  displayName = "RemoveArtboard";
  private session: Session;
  private filePath: string;
  private fileJSON: any;
  private fileRulers: Array<any> = [];
  private shouldPlaceArtboard: boolean = false;

  constructor(
    session: Session,
    file: DomainFile,
    shouldPlaceArtboard: boolean = false
  ) {
    this.session = session;
    this.shouldPlaceArtboard = shouldPlaceArtboard;
    this.filePath = file.path;
    this.fileRulers = this.session.currentStage.canvas.executeFunction(
      "StageDesignerRuler.getAllLines",
      file.getOwnCanvasRef()
    );
    const fileJSON = file.toJS();
    this.fileJSON = cloneDeep(fileJSON);
  }
  execute() {
    this.removeOp();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `remove.artboard`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  undo() {
    const artboard = AddArtboardService(this.session, this.fileJSON);
    const artboardCanvas = artboard.getOwnCanvasRef();
    if (!isEmpty(this.fileRulers)) {
      let rootXNew = artboardCanvas.getBoundingClientRect().rootX;
      let rootYNew = artboardCanvas.getBoundingClientRect().rootY;
      let newRulerLines = this.fileRulers.map((ruler: any) => {
        if (ruler.axis === "y") {
          return {
            axis: "y",
            axisCoordinate: rootXNew + ruler.axisCoordinate
          };
        } else {
          return {
            axis: "x",
            axisCoordinate: rootYNew + ruler.axisCoordinate
          };
        }
      });
      this.session.currentStage.canvas.executeFunction(
        "RulerLines.addAll",
        newRulerLines,
        false
      );
    }
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.remove.artboard`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  redo() {
    this.removeOp();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.remove.artboard`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  removeOp() {
    const file = this.session.domain.files.get(this.filePath);
    if (file && file.isSymbol()) {
      return;
    }
    RemoveArtboardService(
      this.session,
      this.filePath,
      this.shouldPlaceArtboard
    );
    RemoveHoveredForAllLayersService(this.session);
    if (this.shouldPlaceArtboard) {
      PlaceArtboardsToCenter(this.session);
    }

    if (this.session.showCodeEditor) {
      GenerateLayerPreview(this.session, [
        this.session.currentRootLayer.getFullPath()
      ]);
    }
  }
}
