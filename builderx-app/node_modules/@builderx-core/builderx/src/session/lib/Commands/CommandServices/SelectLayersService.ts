import { Session } from "../../models/Session";
import DeselectAllLayers from "./DeselectAllLayers";
import { isEmpty, isEqual } from "lodash";
import SelectFileService from "./SelectFile";
import { SelectLayersMutator } from "../../Mutators";
import createService from ".";
import GenerateLayerPreview from "./GenerateLayerPreview";
import SetResizerVisibilityMutator from "../../Mutators/SetResizerVisibilityMutator";

const SelectLayersService = createService(
  "SelectLayers",
  (
    session: Session,
    layerPaths: Array<any>,
    unResizeFile: boolean = false,
    generatePreview: boolean = false
  ) => {
    const alreadySelected = session
      .getLayersFromSelectedLayerCollection()
      .map((layer: any) => layer.getFullPath());
    if (isEqual(layerPaths, alreadySelected)) {
      return;
    }
    const layers = layerPaths.map(layerPath =>
      session.getLayerFromLayerPath(layerPath)
    );
    if (
      !layers[0] ||
      layers[0].type === "unknown" ||
      layers[0].type === "conditionalExpression" ||
      layers[0].type === "literal" ||
      layers[0].type === "expression"
    ) {
      return;
    }
    DeselectAllLayers(session);
    if (!session.getLayersFromSelectedLayerCollection()) {
      session.selectedLayers = [];
      session.selectedNodes = [];
    }
    if (layers && !isEmpty(layers) && layers[0]) {
      let tempSelectFile: any = layers[0].getFile();

      if (tempSelectFile && tempSelectFile !== session.selectedFile) {
        SelectFileService(session, tempSelectFile.getFullPath());
        tempSelectFile.isResizerVisible = false;
      }
      if (unResizeFile) {
        session.selectedFile.isResizerVisible = false;
      }
      if (layers[0].traverseParentLayer) {
        //
      }
    }
    SelectLayersMutator(session, layerPaths, generatePreview);

    // generate layer preview
    if (generatePreview && session.showCodeEditor) {
      GenerateLayerPreview(
        session,
        session.getLayersFromSelectedLayerCollection().map(l => l.getFullPath())
      );
      return;
    }

    if (
      session.getLayersFromSelectedLayerCollection()[0] &&
      session.getLayersFromSelectedLayerCollection()[0].type === "root"
    ) {
      SetResizerVisibilityMutator(
        session,
        session.getLayersFromSelectedLayerCollection()[0].parent.getFullPath(),
        "hide"
      );
    }

    // emit select layers

    //
  }
);

export default SelectLayersService;
