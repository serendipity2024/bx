import { ICommand } from "command-manager";
import { Session } from "session";
export default class RemoveRecordingCondition implements ICommand {
  displayName = "RemoveRecordingCondition";
  private session: Session;
  private key: string;
  private oldValue: any;
  private shouldEmitUpdates?: boolean = true;

  constructor(
    session: Session,
    key: string,
    shouldEmitUpdates: boolean = true
  ) {
    this.session = session;
    this.key = key;
    this.shouldEmitUpdates = shouldEmitUpdates;
  }
  execute() {
    const recordingConditions = this.session.currentStage.recordingConditions;
    this.oldValue = recordingConditions[this.key];
    delete recordingConditions[this.key];
    if (this.shouldEmitUpdates) {
      if (this.session.selectedFile) {
        this.session.selectedFile.emit("scopeVariables");
      }
      this.session.currentStage.emit("recordingConditions");
    }
    this.session.drivers.analyticsService.addActivity(
      {
        name: `conditionals.recording.remove`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  undo() {
    const recordingConditions = this.session.currentStage.recordingConditions;
    recordingConditions[this.key] = this.oldValue;
    if (this.session.selectedFile) {
      this.session.selectedFile.emit("scopeVariables");
    }
    this.session.currentStage.emit("recordingConditions");
  }
  redo() {
    const recordingConditions = this.session.currentStage.recordingConditions;
    delete recordingConditions[this.key];
    if (this.session.selectedFile) {
      this.session.selectedFile.emit("scopeVariables");
    }
    this.session.currentStage.emit("recordingConditions");
  }
}
