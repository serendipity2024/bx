import { Layer as DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import { YogaDimensions } from "../../models/types";
import SetStyleAttributeMutator from "../../Mutators/SetStyleAttributeMutator";
import RemoveStyleAttributeMutator from "../../Mutators/RemoveStyleAttributeMutator";
import Ungroup from "./Ungroup";
import { Layer as CanvasLayer } from "@builderx-core/designer";
import createService from ".";

const styleAttributesToRemove = [
  "minWidth",
  "minHeight",
  "margin",
  "marginTop",
  "marginRight",
  "marginLeft",
  "marginBottom",
  "padding",
  "paddingTop",
  "paddingRight",
  "paddingLeft",
  "paddingBottom",
  "alignSelf"
];

const ChangeToAbsolute = createService(
  "ChangeToAbsolute",
  (session: Session, domainLayerPath: string, ungroup: boolean = true) => {
    const domainLayer = session.getLayerFromLayerPath(domainLayerPath);
    if (!domainLayer) {
      return;
    }

    session.drivers.analyticsService.addActivity(
      {
        name: `change.to.absolute`,
        path: "",
        category: "app/command"
      },
      true
    );
    // if (domainLayer.type === "scrollView") {
    //   CommandUtils.setScrollViewContentContainerStyle(session, domainLayer);
    // }
    const childLayout: YogaDimensions[] = [];
    domainLayer.forEachChild((child: DomainLayer, index: number) => {
      const childCompiledLayer = child.getOwnCanvasRef() as CanvasLayer;
      childLayout.push(childCompiledLayer.getComputedLayout());
    });
    domainLayer.forEachChild((child: DomainLayer, index: number) => {
      const childStyle = child.props.style;
      if (!childStyle.get("position")) {
        setStyle(child, session, childLayout[index]);
      }
    });

    const flexDirection = domainLayer.props.getResolvedStyleAttribute(
      "flexDirection"
    );

    if (flexDirection) {
      RemoveStyleAttributeMutator(
        session,
        domainLayer.getFullPath(),
        "flexDirection"
      );
    }
    const flexWrap = domainLayer.props.getResolvedStyleAttribute("flexWrap");

    if (flexWrap) {
      RemoveStyleAttributeMutator(
        session,
        domainLayer.getFullPath(),
        "flexWrap"
      );
    }
    const alignItems = domainLayer.props.getResolvedStyleAttribute(
      "alignItems"
    );
    if (alignItems) {
      RemoveStyleAttributeMutator(
        session,
        domainLayer.getFullPath(),
        "alignItems"
      );
    }
    const justifyContent = domainLayer.props.getResolvedStyleAttribute(
      "justifyContent"
    );
    if (justifyContent) {
      RemoveStyleAttributeMutator(
        session,
        domainLayer.getFullPath(),
        "justifyContent"
      );
    }
    if (domainLayer.type === "scrollView") {
      RemoveStyleAttributeMutator(
        session,
        domainLayer.getFullPath(),
        "justifyContent"
      );

      RemoveStyleAttributeMutator(
        session,
        domainLayer.getFullPath(),
        "alignItems"
      );
    }
    if (
      domainLayer !== session.currentRootLayer &&
      ungroup &&
      domainLayer.type !== "scrollView"
    ) {
      const newLayersRef = Ungroup(session, domainLayer.getFullPath());
      return newLayersRef;
    }
  }
);

function setStyle(
  layer: DomainLayer,
  session: Session,
  layout: YogaDimensions
) {
  SetStyleAttributeMutator(
    session,
    layer.getFullPath(),
    "position",
    "absolute"
  );

  SetStyleAttributeMutator(session, layer.getFullPath(), "top", layout.top);

  SetStyleAttributeMutator(session, layer.getFullPath(), "left", layout.left);
  if (
    layer.import.layerName !== "Switch" &&
    layer.import.layerName !== "ActivityIndicator"
  ) {
    SetStyleAttributeMutator(
      session,
      layer.getFullPath(),
      "height",
      layout.height
    );

    SetStyleAttributeMutator(
      session,
      layer.getFullPath(),
      "width",
      layout.width
    );
  }

  styleAttributesToRemove.forEach((property: string) => {
    RemoveStyleAttributeMutator(session, layer.getFullPath(), property);
  });
}

export default ChangeToAbsolute;
