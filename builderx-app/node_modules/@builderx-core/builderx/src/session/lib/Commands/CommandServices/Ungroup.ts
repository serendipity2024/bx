import { RemoveLayerMutator } from "../../Mutators";
import { Layer as DomainLayer } from "../../../../domain-x/lib";
import { times } from "lodash";
import { Session } from "../../models/Session";
import MoveLayerService from "./MoveLayerService";
import DeselectAllLayersService from "./DeselectAllLayers";
import createService from ".";

const Ungroup = createService(
  "Ungroup",
  (session: Session, domainWrapperLayerPath: string) => {
    const domainWrapperLayer = session.getLayerFromLayerPath(
      domainWrapperLayerPath
    );
    const newLayerRefs: Array<DomainLayer> = [];
    // TODO: Enable later
    const wrapperLayerIndexInParent = domainWrapperLayer.findIndexInParent();
    const wrapperLayerChildren = domainWrapperLayer.getChildren();
    const wrapperLayerChildCount = wrapperLayerChildren.length;
    const wrapperLayerParent = domainWrapperLayer.parent as DomainLayer;
    times(wrapperLayerChildCount, async (index: number) => {
      const newLayerRef = MoveLayerService(
        session,
        domainWrapperLayer.getFullPath(),
        wrapperLayerParent.getFullPath(),
        wrapperLayerChildCount - index - 1,
        wrapperLayerIndexInParent
      );
      if (newLayerRef instanceof DomainLayer) {
        newLayerRefs.unshift(newLayerRef);
      }
    });

    RemoveLayerMutator(session, domainWrapperLayer.getFullPath());

    DeselectAllLayersService(session);

    return newLayerRefs;
  }
);
export default Ungroup;
