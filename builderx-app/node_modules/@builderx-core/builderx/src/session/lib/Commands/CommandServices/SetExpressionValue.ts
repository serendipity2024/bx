import CommandUtils from "../Utils";
import { Expression, Style, DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import { forEach, get, isNil } from "lodash";
import { resolveBinaryTest, ResolveNode, ResolveNodeValue } from "utils";
import createService from ".";

const SetExpressionValue = createService(
  "SetExpressionValue",
  (
    session: Session,
    key: string,
    value: any,
    selectLayer: boolean = true,
    expressions: Map<any, any>
  ) => {
    // // session.commandManager.executeAndSkip(
    // //   new DeselectAllLayers(session)
    // // );
    // const selectedFile = session.selectedFile;
    // if (!selectedFile) {
    //   return;
    // }
    // setAndComputeDescendants(session, [session.selectedFile], () => {
    //   const expressionList: Map<any, any> = expressions;
    //   var expressions = expressionList.get(key);
    //   if (expressions) {
    //     // set evaluated value
    //     forEach(expressions, (expression: Expression) => {
    //       const expressionInLayer = expression.getLayer();
    //       if (expression.domainCompiledRefs) {
    //         forEach(
    //           expression.domainCompiledRefs,
    //           (domainCompiledNode: any, index: number) => {
    //             domainCompiledNode.value = value;
    //             domainCompiledNode.renderCompiledRef.value = value;
    //           }
    //         );
    //       }
    //     });
    //     // set evaluated value
    //     forEach(expressions, (expression: Expression) => {
    //       if (
    //         expression.parent &&
    //         (expression.parent.type === "binaryExpression" ||
    //           expression.parent.type === "logicalExpression" ||
    //           expression.parent.type === "conditionalExpression")
    //       ) {
    //         const parentNode = expression.parent.findParentWithReverseRef();
    //         const parentConditional = expression.findConditionalParent();
    //         // console.log(
    //         //   parentNode,
    //         //   parentConditional,
    //         //   expression,
    //         //   "associated key 1"
    //         // );
    //         const associatedKey: string = getAssociatedKey(
    //           parentNode,
    //           parentConditional
    //         );
    //         // console.log(associatedKey, "associated key");
    //         if (associatedKey === "") {
    //           return;
    //         }
    //         if (
    //           get(parentNode, `${associatedKey}.type`, "") ===
    //             "expressionStatement" ||
    //           get(parentNode, `${associatedKey}.type`, "") ===
    //             "conditionalExpression"
    //         ) {
    //           const expressionNode: any = get(parentNode, `${associatedKey}`);
    //           let node = ResolveNode(expressionNode, selectedFile.scopeVariables);
    //           // console.log(
    //           //   node,
    //           //   expressionNode,
    //           //   selectedFile.scopeVariables,
    //           //   "associated key ###"
    //           // );
    //           let nodeValue1 = ResolveNodeValue(
    //             expressionNode,
    //             selectedFile.scopeVariables
    //           );
    //           // console.log(parentNode[associatedKey], "hello associated key");
    //           // console.log(node, "maarse jaane", "jaane mari laaise re");
    //           let nodeValue: any;
    //           if (node.type === "literal") {
    //             nodeValue = node.value;
    //           } else if (node.type === "expression") {
    //             nodeValue = selectedFile.scopeVariables[node.expression];
    //           }
    //           // console.log(
    //           //   associatedKey,
    //           //   nodeValue,
    //           //   expressionNode,
    //           //   nodeValue.findIndexInParent(),
    //           //   "associated key"
    //           // );
    //           if (nodeValue instanceof DomainLayer) {
    //             nodeValue.domainCompiledRefs = [];
    //           }
    //           if (
    //             nodeValue instanceof DomainLayer &&
    //             !expressionNode.domainCompiledRefs
    //           ) {
    //             forEach(
    //               expressionNode.parent.domainCompiledRefs,
    //               (parentCompiledLayer: any) => {
    //                 // console.log(
    //                 //   session,
    //                 //   nodeValue,
    //                 //   parentCompiledLayer as CompiledLayer<any>,
    //                 //   parentConditional,
    //                 //   parentConditional.findIndexInParent() as number
    //                 // );
    //                 const compiledLayer = CreateCompiledLayer(
    //                   session,
    //                   nodeValue,
    //                   parentCompiledLayer as CompiledLayer<any>,
    //                   session.currentStage.id !== "artboard",
    //                   parentConditional.findIndexInParent() as number
    //                 );
    //                 expressionNode.domainCompiledRefs = [compiledLayer];
    //                 SetAllPropsInDCAndRC(
    //                   session,
    //                   compiledLayer,
    //                   node.value.props
    //                 );
    //               }
    //             );
    //           } else {
    //             forEach(
    //               expressionNode.domainCompiledRefs,
    //               (compiledNode: any) => {
    //                 // console.log(compiledNode, nodeValue, "o o ooooo");
    //                 if (compiledNode instanceof DomainCompiledLayer) {
    //                   compiledNode.domainRef.domainCompiledRefs = [];
    //                   compiledNode.renderCompiledRef.remove();
    //                   compiledNode.remove();
    //                   forEach(
    //                     expressionNode.parent.domainCompiledRefs,
    //                     (parentCompiledLayer: any) => {
    //                       if (nodeValue instanceof SymbolLayer) {
    //                         const index = parseInt(
    //                           parentConditional
    //                             .findIndexInParent()
    //                             .replace("children.", ""),
    //                           10
    //                         );
    //                         const domainCompiledLayers: any[] = ResolveSymbolInstance(
    //                           session,
    //                           nodeValue,
    //                           parentCompiledLayer as CompiledLayer<any>,
    //                           index
    //                           // true
    //                         );
    //                         expressionNode.domainCompiledRefs = domainCompiledLayers;
    //                       } else {
    //                         const compiledLayer = CreateCompiledLayer(
    //                           session,
    //                           nodeValue,
    //                           parentCompiledLayer as CompiledLayer<any>,
    //                           session.currentStage.id !== "artboard",
    //                           parentConditional.findIndexInParent() as number
    //                         );
    //                         expressionNode.domainCompiledRefs = [compiledLayer];
    //                       }
    //                       forEach(
    //                         expressionNode.domainCompiledRefs,
    //                         (expressionNodeCompiledLayer: any) => {
    //                           SetAllPropsInDCAndRC(
    //                             session,
    //                             expressionNodeCompiledLayer,
    //                             node.value.props
    //                           );
    //                         }
    //                       );
    //                     }
    //                   );
    //                 } else {
    //                   compiledNode.value = nodeValue;
    //                   compiledNode.renderCompiledRef.value = nodeValue;
    //                 }
    //               }
    //             );
    //           }
    //         } else {
    //           resolveConditional(
    //             get(parentNode, `${associatedKey}`),
    //             selectedFile.scopeVariables
    //           );
    //         }
    //         const expressionInLayer = expression.getLayer();
    //         forEach(
    //           expressionInLayer.domainCompiledRefs,
    //           (domainCompiledNode: any, index: number) => {
    //             let dimensions = domainCompiledNode.computeYogaNode();
    //             const rotation = domainCompiledNode.getRotation();
    //             const renderCompiledLayer = domainCompiledNode.renderCompiledRef;
    //             // renderCompiledLayer.paperScope.activate();
    //             renderCompiledLayer.setDimension({
    //               x: dimensions.left,
    //               y: dimensions.top,
    //               width: dimensions.width,
    //               height: dimensions.height,
    //               rotation
    //             });
    //             // console.log(domainCompiledNode, "here")
    //             renderCompiledLayer.emit(["props"]);
    //           }
    //           // }
    //         );
    //       }
    //     });
    //   }
    // });
    // if (session.selectedFile && selectLayer) {
    //   session.mutatorManager.execute(
    //     new SelectLayersMutator(session, selectedFile.getFullPath(), [
    //       session.selectedFile.layer.getFullPath()
    //     ])
    //   );
    //   // session.commandManager.executeAndSkip(
    //   //   new SelectLayers(session, [session.selectedFile.layer])
    //   // );
    // }
  }
);
export default SetExpressionValue;
function resolveConditional(
  conditionalObj: any,
  scopeVariables: { [key: string]: any }
) {
  const test = conditionalObj.test;

  if (test.type === "binaryExpression") {
    const resolvedTest = resolveBinaryTest(test, scopeVariables);
    // forEach(conditionalObj.domainCompiledRefs, (compiledNode: any) => {
    //   if (resolvedTest) {
    //     if (!conditionalObj.consequent["domainCompiledRefs"]) {
    //       conditionalObj.consequent.domainCompiledRefs = [];
    //     }
    //     conditionalObj.alternate["domainCompiledRefs"] = [];

    //     if (
    //       conditionalObj.consequent["domainCompiledRefs"].indexOf(
    //         compiledNode
    //       ) === -1
    //     ) {
    //       conditionalObj.consequent["domainCompiledRefs"].push(compiledNode);
    //     }

    //     if (conditionalObj.consequent.type === "literal") {
    //       compiledNode.value = conditionalObj.consequent.value;
    //       compiledNode.renderCompiledRef.value =
    //         conditionalObj.consequent.value;
    //     } else if (conditionalObj.consequent.type === "expression") {
    //       compiledNode.value = conditionalObj.consequent.evaluatedValue;
    //       compiledNode.renderCompiledRef.value =
    //         conditionalObj.consequent.evaluatedValue;
    //     } else if (conditionalObj.consequent.type === "conditionalExpression") {
    //       resolveConditional(conditionalObj.consequent, scopeVariables);
    //     }
    //   } else {
    //     if (!conditionalObj.alternate["domainCompiledRefs"]) {
    //       conditionalObj.alternate.domainCompiledRefs = [];
    //     }
    //     conditionalObj.consequent["domainCompiledRefs"] = [];
    //     if (
    //       conditionalObj.alternate["domainCompiledRefs"].indexOf(
    //         compiledNode
    //       ) === -1
    //     ) {
    //       conditionalObj.alternate["domainCompiledRefs"].push(compiledNode);
    //     }
    //     if (conditionalObj.alternate.type === "literal") {
    //       compiledNode.value = conditionalObj.alternate.value;
    //       compiledNode.renderCompiledRef.value = conditionalObj.alternate.value;
    //     } else if (conditionalObj.alternate.type === "expression") {
    //       compiledNode.value = conditionalObj.alternate.evaluatedValue;
    //       compiledNode.renderCompiledRef.value =
    //         conditionalObj.alternate.evaluatedValue;
    //     } else if (conditionalObj.alternate.type === "conditionalExpression") {
    //       resolveConditional(conditionalObj.alternate, scopeVariables);
    //     }
    //   }
    // });
    // console.log(parentNode, "parent node");

    // console.log(resolvedTest, "hello 1111111");
  }
}

function getAssociatedKey(node: any, expression: any): string {
  let resultKey = "";

  // if (node instanceof DomainLayer) {
  //   forEach(node.children, (value: any, key: string) => {
  //     if (value.domainCompiledRefs === expression.domainCompiledRefs) {
  //       resultKey = `children.${key}`;
  //     }
  //   });
  // } else {
  //   forEach(node, (value: any, key: string) => {
  //     if (key === "transform") {
  //       const rotateKey = node.parent.getRotateKey();
  //       if (
  //         get(node, `${rotateKey}.domainCompiledRefs`) ===
  //         expression.domainCompiledRefs
  //       ) {
  //         resultKey = rotateKey;
  //       }
  //     } else if (key === "shadowOffset") {
  //       // const rotateKey = node.parent.getRotateKey();

  //       if (
  //         get(node, `shadowOffset.width.domainCompiledRefs`) ===
  //         expression.domainCompiledRefs
  //       ) {
  //         resultKey = "shadowOffset.width";
  //       }
  //       if (
  //         get(node, `shadowOffset.height.domainCompiledRefs`) ===
  //         expression.domainCompiledRefs
  //       ) {
  //         resultKey = "shadowOffset.height";
  //       }
  //       // const rotateKey = node.parent.getRotateKey();
  //       // if (get(node, `${rotateKey}.domainCompiledRefs`) === expression.domainCompiledRefs) {
  //       //   resultKey = rotateKey;
  //       // }
  //     } else {
  //       if (value.domainCompiledRefs === expression.domainCompiledRefs) {
  //         resultKey = key;
  //       }
  //     }
  //   });
  // }

  return resultKey;
}
