import { CommandManager, ICommand } from "command-manager";
import { Expression, Layer as DomainLayer } from "domain-x";
import { Utils } from "utils";
import { Session } from "../../models/Session";
import moveLayerService from "../CommandServices/MoveLayerService";

export default class MoveLayer implements ICommand {
  displayName = "MoveLayer";
  private session: Session;
  private fromParent: DomainLayer;
  private toParent: DomainLayer;
  private fromIndex: number;
  private toIndex: number;
  private sourceLayer: DomainLayer;
  private symbolInstance?: DomainLayer;
  private shouldEmitUpdates?: boolean = true;
  private removeCenterWrapper?: boolean = true;
  private changeToAbsolute?: boolean = true;
  private sourceLayerTemplate: any;
  private commandManager: CommandManager;
  private computableLayers: Array<DomainLayer> = [];
  private fromParentPath: string;
  private toParentPath: string;
  private sameParent: boolean;

  constructor(
    session: Session,
    fromParent: DomainLayer,
    toParent: DomainLayer,
    fromIndex: number,
    toIndex: number,
    symbolInstance?: DomainLayer,
    shouldEmitUpdates: boolean = true,
    removeCenterWrapper: boolean = true,
    changeToAbsolute: boolean = true,
    sameParent: boolean = true
  ) {
    this.session = session;
    this.commandManager = new CommandManager();
    this.fromParent = fromParent;
    this.toParent = toParent;
    this.fromIndex = fromIndex;
    this.toIndex = toIndex;
    this.symbolInstance = symbolInstance;
    this.shouldEmitUpdates = shouldEmitUpdates;
    this.removeCenterWrapper = removeCenterWrapper;
    this.changeToAbsolute = changeToAbsolute;
    this.sameParent = sameParent;
    if (this.fromParent.type === "loop") {
      this.fromIndex = this.fromParent.findIndexInParent();
      this.fromParent = this.fromParent.parent;
    }

    this.fromParentPath = this.fromParent.getFullPath();
    this.toParentPath = this.toParent.getFullPath();
  }
  execute() {
    moveLayerService(
      this.session,
      this.fromParentPath,
      this.toParentPath,
      this.fromIndex,
      this.toIndex,
      this.sameParent
    );
    this.fromParentPath = this.fromParent.getFullPath();
    this.toParentPath = this.toParent.getFullPath();
  }

  isDescendant(layer: DomainLayer, ancestorLayer: DomainLayer): boolean {
    if (!layer) {
      return false;
    } else if (layer === ancestorLayer) {
      return true;
    } else {
      return this.isDescendant(layer.parent, ancestorLayer);
    }
  }

  undo() {
    const fromParent = this.session.getLayerFromLayerPath(this.fromParentPath);
    const toParent = this.session.getLayerFromLayerPath(this.toParentPath);
    moveLayerService(
      this.session,
      this.toParentPath,
      this.fromParentPath,
      this.toIndex,
      this.fromIndex
    );
    this.fromParentPath = fromParent.getFullPath();
    this.toParentPath = toParent.getFullPath();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.move.layers`,
        category: "app/command"
      },
      true
    );
  }
  redo() {
    const fromParent = this.session.getLayerFromLayerPath(this.fromParentPath);
    const toParent = this.session.getLayerFromLayerPath(this.toParentPath);
    moveLayerService(
      this.session,
      this.fromParentPath,
      this.toParentPath,
      this.fromIndex,
      this.toIndex
    );
    this.fromParentPath = fromParent.getFullPath();
    this.toParentPath = toParent.getFullPath();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.move.layers`,
        category: "app/command"
      },
      true
    );
  }
}
