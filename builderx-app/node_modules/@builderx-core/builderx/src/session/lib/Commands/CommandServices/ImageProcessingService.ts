import createService from ".";
import { action } from "model";
import RemoveLayerService from "../CommandServices/RemoveLayerService";
import { Session } from "../../models/Session";
import { GetImageAbsPath } from "../CommandServices/GetImagePath";
import { SetImageAssetsService } from "./SetImageAssetsService";
import { SetPropMutator } from "../../Mutators";
import { DomainLayer } from "domain-x";
import { Utils } from "utils";
import { forEach, get } from "lodash";

const setImageProps = (
  session: Session,
  domainLayerPath: string,
  absPath: string,
  relativePath: any
) => {
  // let image = new Image();
  // image.src = absPath;

  const img = new Image();
  img.src = absPath; // by setting an src, you trigger browser download

  // img.onload = () => {
  action(() => {
    // when it finishes loading, update the component state

    const assets = session.assetsMap.get(relativePath);

    if (assets) {
      assets.refs.forEach((layer: DomainLayer) => {
        try {
          SetPropMutator(session, layer.getFullPath(), "source", {
            uri: absPath
          });
        } catch (Err) {
          //
        }
      });
    }

    // update clipboard

    const clipboardData: any = session.drivers.clipboardService.get();

    if (clipboardData.type === "layer") {
      forEach(clipboardData.data, layerJSON => {
        Utils.traverseJSON(layerJSON, (childJSON: any) => {
          if (
            childJSON.type === "image" &&
            get(childJSON, "props.source_local.relativePath") === relativePath
          ) {
            childJSON.props.source = {
              uri: absPath
            };
          }
        });
      });
    }
  });
  // };
};
export const ImageProcessingService = createService(
  "ImageProcessing",
  (
    session: Session,
    domainLayerPath: string,
    imageJSON: any,
    imageObject?: any
  ) => {
    console.log(
      imageObject,
      imageJSON.props.source_local,
      imageJSON.relativePath,
      "hello image object here"
    );

    if (imageJSON.props.source_local) {
      SetImageAssetsService(
        session,
        domainLayerPath,
        imageJSON.props.source_local.relativePath,
        imageJSON.props.source_local.uri
      );
    }
    if (imageObject) {
      // if (typeof imageObject === "string") {
      //   fetch(imageObject)
      //     .then(function checkForBlobHealth(blob) {
      //       if (blob.ok) {
      //         console.log(blob, "hello here blol");
      //         // SetImageAssetsService(
      //         //   session,
      //         //   domainLayerPath,
      //         //   imageJSON.relativePath,
      //         //   imageObject
      //         // );
      //       }
      //     })
      //     .catch(function(err) {
      //       console.log("Failed verifying. Details: " + err);
      //       // compiledLayer.setProp(key, value);
      //     });
      // }
      if (
        typeof imageObject !== "string"
        // ||
        // (typeof imageObject === "string" && imageObject.indexOf("blob:") === 0)
      ) {
        let { absPath, relativePath } = GetImageAbsPath(
          session,
          imageObject[0].name
        );

        const newName = session.getNewImageName(relativePath);
        const updatedImagePaths = GetImageAbsPath(session, newName);
        absPath = updatedImagePaths.absPath;

        relativePath = updatedImagePaths.relativePath;
        const imageBlobURL = URL.createObjectURL(imageObject[0]);

        session.addAssetToMap({
          path: relativePath,
          blob: imageObject[0],
          blobURL: imageBlobURL
        });

        imageJSON.relativePath = relativePath;
        session.before();

        SetImageAssetsService(
          session,
          domainLayerPath,
          imageJSON.relativePath,
          imageBlobURL
        );

        session.apiSdk.assets
          .uploadAsset(
            session.project.projectId,
            relativePath,
            imageObject[0],
            session.connectionId,
            "image"
          )
          .then(res => {
            //
            setImageProps(session, domainLayerPath, absPath, relativePath);
          })
          .catch(error => {
            session.apiSdk.assets
              .uploadAsset(
                session.project.projectId,
                relativePath,
                imageObject[0],
                session.connectionId,
                "image"
              )
              .then(res => {
                setImageProps(session, domainLayerPath, absPath, relativePath);
              })
              .catch(err => {
                console.log(
                  err,
                  absPath,
                  relativePath,
                  session.selectedFile!.path,
                  "Image upload failed. The layer has been deleted."
                );
                const asset = session.assetsMap.get(relativePath);

                if (asset) {
                  asset.refs.forEach(layerRef => {
                    if (layerRef) {
                      action(() => {
                        const file = layerRef.getFile();
                        if (file) {
                          RemoveLayerService(
                            session,
                            layerRef.getFullPath(),
                            file.path
                          );
                        }
                      });
                    }
                  });
                  session.assetsMap.delete(relativePath);
                }
                session.notificationManager.notifyError(
                  "",
                  "Image upload failed. The layer has been deleted."
                );
              });
          })
          .finally(() => {
            session.after();
          });
        imageJSON.props["source"]["uri"] = absPath;
      }
    }
    return imageJSON;
  }
);
