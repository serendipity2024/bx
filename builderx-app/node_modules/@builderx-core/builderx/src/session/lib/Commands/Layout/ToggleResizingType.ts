import { Layer as DomainLayer, Layer } from "domain-x";
import { Session } from "../../models/Session";
import { ICommand } from "command-manager";
import { ResizingTypeAttributes } from "common-interfaces";
import { ResolveNodeValue, Utils } from "utils";
import { forEach } from "lodash";
// import UpdateRecordingConditions from "../Conditionals/UpdateRecordingConditions";
// import ClearRecordingConditions from "../Conditionals/ClearRecordingConditions";
import { SetStyleAttribute } from "..";
import { SetAllStyleService } from "../CommandServices/SetAllStyleService";
import ResetStyleService from "../CommandServices/ResetStyleService";
import { cloneDeep } from "lodash";
import { SetCenterWrapperMutator } from "../../Mutators";
import SetResizingTypeMutator from "../../Mutators/SetResizingTypeMutator";

export default class ToggleResizingType implements ICommand {
  displayName = "ToggleResizingType";
  private session: Session;
  private resizingTypeAttribute: ResizingTypeAttributes;
  private oldStyle: any;
  private domainLayerPath: string;
  private setValueInInt: boolean;

  constructor(
    session: Session,
    domainLayer: DomainLayer,
    resizingTypeAttribute: ResizingTypeAttributes
  ) {
    this.session = session;
    this.resizingTypeAttribute = resizingTypeAttribute;
    this.setValueInInt = this.session.drivers.configuration.configurations[
      "editor.style.value.int"
    ];
    this.domainLayerPath = domainLayer.getFullPath();
    this.oldStyle = cloneDeep(domainLayer.props.style.toJS());
  }

  execute() {
    // this.session.commandManager.executeAndSkip(
    //   new ClearRecordingConditions(this.session)
    // );
    this.session.drivers.analyticsService.addActivity(
      {
        name: `toggle.resizing.type`,
        path: "",
        category: "app/command"
      },
      true
    );
    const domainLayer = this.session.getLayerFromLayerPath(
      this.domainLayerPath
    );
    if (
      domainLayer.type === "image" &&
      this.resizingTypeAttribute === "width"
    ) {
      // TODO: remove special case handling for image
      return;
    }

    const parentCompiledLayer = (domainLayer.parent as DomainLayer).getOwnCanvasRef();

    const parentWidth = parentCompiledLayer.getBoundingClientRect().width;
    const parentHeight = parentCompiledLayer.getBoundingClientRect().height;

    this.toggleResizingType(
      domainLayer,
      this.resizingTypeAttribute,
      domainLayer.getOwnCanvasRef(),
      parentWidth,
      parentHeight,
      this.setValueInInt
    );

    // const compiledLayer: CompiledLayer<any> = this.domainLayer
    //   .domainCompiledRefs[0];
    // this.setRenderCompiledLayerDimensions(compiledLayer);
  }
  undo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.toggle.resizing.type`,
        path: "",
        category: "app/command"
      },
      true
    );
    const domainLayer = this.session.getLayerFromLayerPath(
      this.domainLayerPath
    );
    if (
      domainLayer.type === "image" &&
      this.resizingTypeAttribute === "width"
    ) {
      // TODO: remove special case handling for image
      return;
    }

    ResetStyleService(this.session, this.domainLayerPath);
    SetAllStyleService(this.session, this.domainLayerPath, this.oldStyle);
    // domainLayer.ui.setResizingType(this.oldStyle);
    SetResizingTypeMutator(this.session, this.domainLayerPath, this.oldStyle);
  }
  redo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.toggle.resizing.type`,
        path: "",
        category: "app/command"
      },
      true
    );
    const domainLayer = this.session.getLayerFromLayerPath(
      this.domainLayerPath
    );
    if (
      domainLayer.type === "image" &&
      this.resizingTypeAttribute === "width"
    ) {
      // TODO: remove special case handling for image
      return;
    }

    const parentRenderCompiledLayer = (domainLayer.parent as DomainLayer).getBoundingClientRect();
    const parentWidth = parentRenderCompiledLayer.width;
    const parentHeight = parentRenderCompiledLayer.height;

    this.toggleResizingType(
      domainLayer,
      this.resizingTypeAttribute,
      domainLayer.getOwnCanvasRef(),
      parentWidth,
      parentHeight,
      this.setValueInInt
    );

    // this.setRenderCompiledLayerDimensions(compiledLayer);
  }

  private toggleResizingType(
    layer: Layer,
    attribute: ResizingTypeAttributes,
    compiledLayer: any,
    parentWidth: number,
    parentHeight: number,
    setValueinInt: boolean
  ) {
    // const setValueinInt = this.builderx.io.configurationService.get(
    //   "editor.style.value.int"
    // );
    let currentStyle = layer.props.style.toJS();

    if (
      layer.template &&
      (layer.template.centerHorizontal || layer.template.centerVertical)
    ) {
      // TODO: fix-this

      SetCenterWrapperMutator(this.session, this.domainLayerPath, {
        horizontal: false,
        vertical: false
      });

      currentStyle = layer.props.style;
    }

    let scopeVariables = {};
    let file = layer.getFile();

    if (!file) {
      throw new Error("File not found!");
    }
    scopeVariables = file.scopeVariables;

    const resolvedCurrentStyle = {
      top: ResolveNodeValue(currentStyle["top"], scopeVariables),
      left: ResolveNodeValue(currentStyle["left"], scopeVariables),
      bottom: ResolveNodeValue(currentStyle["bottom"], scopeVariables),
      right: ResolveNodeValue(currentStyle["right"], scopeVariables),
      width: ResolveNodeValue(currentStyle["width"], scopeVariables),
      height: ResolveNodeValue(currentStyle["height"], scopeVariables)
    };

    var dimsMode = {
      heightAuto: layer.isHeightAuto,
      widthAuto: layer.isWidthAuto,
      heightFill: layer.isHeightFill,
      widthFill: layer.isWidthFill
    };
    const layerDimensions = compiledLayer.getBoundingClientRect();

    const newStyle = layer.ui.resizingType.calculateNewStyleFromResizingType(
      attribute,
      resolvedCurrentStyle,
      parentWidth,
      parentHeight,
      dimsMode,
      layerDimensions,
      setValueinInt
    );

    // const resolvedStyle = Object.assign(
    //   {},
    //   currentStyle.toJS(),
    //   resolvedCurrentStyle
    // );

    let newCurrentStyle = {};

    forEach(currentStyle, (value: any, key: string) => {
      if (!Utils.isInvalidKey(key)) {
        newCurrentStyle[key] = ResolveNodeValue(value, scopeVariables);
        currentStyle[key] = undefined;
      }
    });
    const mergedStyle = Object.assign({}, newCurrentStyle, newStyle);

    SetAllStyleService(this.session, layer.getFullPath(), mergedStyle, "style");
    // layer.ui.setResizingType(mergedStyle);
    SetResizingTypeMutator(this.session, layer.getFullPath(), mergedStyle);
    const domainLayer = this.session.getLayerFromLayerPath(
      this.domainLayerPath
    );
    if (domainLayer.type === "image") {
      if (
        domainLayer.ui.resizingType.top &&
        domainLayer.ui.resizingType.bottom
      ) {
        this.session.commandManager.executeAndSkip(
          new SetStyleAttribute(this.session, layer, "height", null)
        );
      }
      if (
        domainLayer.ui.resizingType.left &&
        domainLayer.ui.resizingType.right
      ) {
        this.session.commandManager.executeAndSkip(
          new SetStyleAttribute(this.session, layer, "width", null)
        );
      }
    }
    layer.ui.emit("resizingType");
  }
}
