import { Session } from "../../models/Session";
import { Layer as DomainLayer } from "../../../../domain-x/lib";
import { SetLayerDimensionsService } from "../CommandServices/SetLayerDimensions";
import createService from ".";

const DragLayerWithArrowKeysService = createService(
  "DragLayerWithArrowKeysService",
  (
    session: Session,
    shiftPressed: boolean,
    newPositions: Array<any> = [],
    direction: string
  ) => {
    const arrowValue = session.drivers.configuration.get(
      "editor.shift.layer.arrow.value"
    );
    const arrowShiftValue = session.drivers.configuration.get(
      "editor.shift.layer.cmd.arrow.value"
    );
    const jumpValue = shiftPressed
      ? Number(arrowShiftValue)
      : Number(arrowValue);
    let selectedLayers = session.getLayersFromSelectedLayerCollection();
    selectedLayers.forEach((selectedLayer: DomainLayer, index: number) => {
      const renderCompiledLayer = selectedLayer.getBoundingClientRect();
      newPositions[index] = {
        x: renderCompiledLayer.x,
        y: renderCompiledLayer.y,
        width: renderCompiledLayer.width,
        height: renderCompiledLayer.height,
        rotation: renderCompiledLayer.rotation
      };

      // RemoveCenterWrapper(session, selectedLayer);

      switch (direction) {
        case "up":
          newPositions[index].y -= jumpValue;

          break;
        case "left":
          newPositions[index].x -= jumpValue;

          break;
        case "right":
          newPositions[index].x += jumpValue;

          break;
        case "down":
          newPositions[index].y += jumpValue;

          break;
        default:
          break;
      }

      SetLayerDimensionsService(
        session,
        selectedLayer.getFullPath(),
        newPositions[index]
      );
    });
  }
);

export default DragLayerWithArrowKeysService;
