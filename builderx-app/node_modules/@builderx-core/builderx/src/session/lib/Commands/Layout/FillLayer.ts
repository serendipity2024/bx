import { ICommand } from "command-manager";
import { Layer as DomainLayer } from "domain-x";
import { cloneDeep } from "lodash";
import { Session } from "../../models/Session";
import { SetAllStyleService } from "../CommandServices/SetAllStyleService";
import ResetStyleService from "../CommandServices/ResetStyleService";
import { SetCenterWrapperMutator } from "../../Mutators";

export default class FillLayer implements ICommand {
  displayName = "FillLayer";
  private session: Session;
  private property: "width" | "height";
  private oldStyle: any;
  private newStyle: any;
  private domainLayerPath: any;
  constructor(
    session: Session,
    domainLayer: DomainLayer,
    property: "width" | "height"
  ) {
    this.session = session;
    this.property = property;
    this.domainLayerPath = domainLayer.getFullPath();
  }
  execute() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `fill.layer`,
        path: "",
        category: "app/command"
      },
      true
    );
    const domainLayer = this.session.getLayerFromLayerPath(
      this.domainLayerPath
    );
    SetCenterWrapperMutator(this.session, this.domainLayerPath, {
      horizontal: false,
      vertical: false
    });

    this.oldStyle = cloneDeep(domainLayer.props.style.toJS());
    this.newStyle = { ...this.oldStyle };
    // RemoveCenterWrapperMutator(session, domainLayer);

    const position = domainLayer.props.getResolvedStyleAttribute("position");

    if (position === "absolute") {
      if (this.property === "width") {
        this.newStyle.left = 0;
        if (domainLayer.type === "image") {
          this.newStyle.width = "100%";
        } else {
          this.newStyle.right = 0;
        }
      } else if (this.property === "height") {
        this.newStyle.top = 0;
        this.newStyle.bottom = 0;
      }
    } else {
      const flexDirection = domainLayer.getParentLayerFlexDirection();

      if (
        (this.property === "width" && flexDirection === "row") ||
        (this.property === "height" && flexDirection !== "row")
      ) {
        this.newStyle.flex = 1;
      } else {
        this.newStyle.alignSelf = "stretch";
      }
    }

    if (
      domainLayer.type === "image" &&
      position === "absolute" &&
      this.property !== "width"
    ) {
      this.newStyle[this.property] = null;
    } else if (!(domainLayer.type === "image")) {
      delete this.newStyle[this.property];
    }

    ResetStyleService(this.session, this.domainLayerPath);
    SetAllStyleService(this.session, this.domainLayerPath, this.newStyle);
  }
  undo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.fill.layer`,
        path: "",
        category: "app/command"
      },
      true
    );
    ResetStyleService(this.session, this.domainLayerPath);
    SetAllStyleService(this.session, this.domainLayerPath, this.oldStyle);
  }
  redo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.fill.layer`,
        path: "",
        category: "app/command"
      },
      true
    );
    ResetStyleService(this.session, this.domainLayerPath);
    SetAllStyleService(this.session, this.domainLayerPath, this.newStyle);
  }
}
