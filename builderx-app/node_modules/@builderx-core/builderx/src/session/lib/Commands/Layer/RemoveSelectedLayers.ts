import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { isArray, forEach, cloneDeep, isEmpty, sortBy } from "lodash";
import RemoveLayerService from "./../CommandServices/RemoveLayerService";
import { AddLayerService } from "../CommandServices/AddLayerService";
import { Layer } from "domain-x";
import SelectLayersService from "../CommandServices/SelectLayersService";

export default class RemoveSelectedLayers implements ICommand {
  displayName = "RemoveSelectedLayers";
  session: Session;
  layersPath: Array<string>;
  layersJSON: Array<{ index: number; json: any }>;
  parentLayerPath: string;
  constructor(session: Session) {
    this.session = session;
  }
  execute() {
    this.layersJSON = [];
    if (
      this.session.currentStage.canvas.executeFunction("GradientEditor.isOpen")
    ) {
      return;
    }
    const selectedLayers = this.session.getLayersFromSelectedLayerCollection();
    this.parentLayerPath = !isEmpty(selectedLayers)
      ? selectedLayers[0].parent.getFullPath()
      : this.session.currentRootLayer.getFullPath();
    if (isArray(selectedLayers)) {
      forEach(selectedLayers, (layer: Layer) => {
        if (layer !== this.session.currentRootLayer) {
          this.layersJSON.push({
            index: layer.findIndexInParent(),
            json: cloneDeep(layer.toJS())
          });
        }
      });
      forEach(selectedLayers, (layer: Layer) => {
        if (layer !== this.session.currentRootLayer) {
          RemoveLayerService(
            this.session,
            layer.getFullPath(),
            undefined,
            true
          );
        }
      });
    }
    this.session.drivers.analyticsService.addActivity(
      {
        name: `remove.selected.layer`,
        category: "app/command"
      },
      true
    );
  }
  undo() {
    this.layersPath = [];
    let layers: Array<Layer> = [];
    this.layersJSON = sortBy(this.layersJSON, layer => layer.index);
    this.layersJSON.forEach((layerObj: { index: number; json: any }) => {
      const layer: Layer = AddLayerService(
        this.session,
        this.parentLayerPath,
        layerObj.json,
        layerObj.index
      );
      layers.push(layer);
    });
    layers.forEach((layer: Layer) => {
      this.layersPath.push(layer.getFullPath());
    });
    SelectLayersService(this.session, this.layersPath, undefined, true);
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.remove.selected.layer`,
        category: "app/command"
      },
      true
    );
  }
  redo() {
    const layers: Array<Layer> = [];
    this.layersPath.forEach((layerPath: string) => {
      layers.push(this.session.getLayerFromLayerPath(layerPath));
    });
    layers.forEach((layer: Layer) => {
      RemoveLayerService(this.session, layer.getFullPath(), undefined, true);
    });
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.remove.selected.layer`,
        category: "app/command"
      },
      true
    );
  }
}
