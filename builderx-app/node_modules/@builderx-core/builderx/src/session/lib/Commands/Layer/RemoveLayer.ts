import { CommandManager, ICommand } from "command-manager";
import {
  ConditionalExpression,
  ExpressionStatement,
  Layer as DomainLayer
} from "domain-x";
import { cloneDeep } from "lodash";
import { Session } from "../../models/Session";
import { AddLayerService } from "../CommandServices/AddLayerService";
import RemoveLayerService from "../CommandServices/RemoveLayerService";
import DeselectAllLayers from "../CommandServices/DeselectAllLayers";
import { SetHoverLayersMutator } from "../../Mutators";
import SelectLayersService from "../CommandServices/SelectLayersService";

export default class RemoveLayer implements ICommand {
  displayName = "RemoveLayer";
  private session: Session;
  private domainParentLayer: DomainLayer;
  private domainLayer:
    | DomainLayer
    | ExpressionStatement
    | ConditionalExpression;
  private oldValue: any;
  private newValue: any;
  private index?: number | string;
  private commandManager: CommandManager;
  private currentRecordingConditions: { [key: string]: any };
  private currentScopeVariables: { [key: string]: any };
  private astPath: string;
  private filePath: any;
  private domainLayerPath: string;
  constructor(
    session: Session,
    domainLayer: DomainLayer | ExpressionStatement | ConditionalExpression
  ) {
    this.session = session;
    this.domainLayer = domainLayer;
    this.astPath = this.domainLayer.getPath();
    this.domainParentLayer = domainLayer.parent;

    let file: any = this.domainLayer.getFile();
    this.domainLayerPath = this.domainLayer.getPath(undefined, true);
    this.filePath = file.path;
  }
  execute() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `remove.layer`,
        category: "app/command"
      },
      true
    );
    this.oldValue = cloneDeep(this.domainLayer.toJS());
    RemoveLayerService(this.session, this.domainLayerPath, this.filePath, true);

    SetHoverLayersMutator(this.session, this.filePath, []);
  }

  undo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.remove.layer`,
        category: "app/command"
      },
      true
    );
    this.domainLayer = AddLayerService(
      this.session,
      this.domainParentLayer.getFullPath(),
      this.oldValue
    );
    SelectLayersService(this.session, [this.domainLayerPath], undefined, true);
    // this.domainLayerPath = this.domainLayer.getFullPath();
    // this.emitUpdates();
  }
  redo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.remove.layer`,
        category: "app/command"
      },
      true
    );
    this.oldValue = cloneDeep(this.domainLayer.toJS());
    RemoveLayerService(this.session, this.domainLayerPath, this.filePath, true);
    // this.emitUpdates();
  }
}
