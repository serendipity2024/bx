import { Layer as DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import { ICommand } from "command-manager";
import { isNil } from "lodash";
import {
  RemoveStyleAttributeMutator,
  SetStyleAttributeMutator,
  SetCenterWrapperMutator
} from "../../Mutators";
import CommandUtils from "../Utils";
import SetResizingTypeMutator from "../../Mutators/SetResizingTypeMutator";
import ResetStyleService from "../CommandServices/ResetStyleService";
import { SetAllStyleService } from "../CommandServices/SetAllStyleService";

export default class SetLayerAuto implements ICommand {
  displayName = "SetLayerAuto";
  private session: Session;
  private property: "width" | "height";
  private domainLayerPath: string;
  private oldAspectRatio: any;
  private oldStyle: any;
  private newStyle: any;
  constructor(
    session: Session,
    domainLayer: DomainLayer,
    property: "width" | "height"
  ) {
    this.session = session;
    this.property = property;
    this.domainLayerPath = domainLayer.getFullPath();
    this.oldAspectRatio = domainLayer.aspectRatio;
    this.oldStyle = domainLayer.props.style.toJS();
  }
  execute() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `set.auto`,
        path: "",
        category: "app/command"
      },
      true
    );

    SetCenterWrapperMutator(this.session, this.domainLayerPath, {
      horizontal: false,
      vertical: false
    });
    const domainLayer = this.session.getLayerFromLayerPath(
      this.domainLayerPath
    );
    const position = domainLayer.props.getResolvedStyleAttribute("position");
    if (position === "absolute") {
      if (this.property === "width") {
        const left = domainLayer.props.getResolvedStyleAttribute("left");
        const right = domainLayer.props.getResolvedStyleAttribute("right");
        if (!isNil(left) && !isNil(right)) {
          RemoveStyleAttributeMutator(
            this.session,
            domainLayer.getFullPath(),
            "right"
          );
        }
      } else if (this.property === "height") {
        const top = domainLayer.props.getResolvedStyleAttribute("top");
        const bottom = domainLayer.props.getResolvedStyleAttribute("bottom");
        if (!isNil(top) && !isNil(bottom)) {
          RemoveStyleAttributeMutator(
            this.session,
            this.domainLayerPath,
            "bottom"
          );
        }
      }
    } else {
      const flexDirection = domainLayer.getParentLayerFlexDirection();
      if (
        (this.property === "width" && flexDirection === "row") ||
        (this.property === "height" && flexDirection !== "row")
      ) {
        RemoveStyleAttributeMutator(this.session, this.domainLayerPath, "flex");
      } else {
        SetStyleAttributeMutator(
          this.session,
          this.domainLayerPath,
          "alignSelf",
          "flex-start"
        );
      }
    }
    RemoveStyleAttributeMutator(
      this.session,
      this.domainLayerPath,
      this.property
    );
    let layer = domainLayer;
    if (layer instanceof DomainLayer) {
      const handle = this.property === "width" ? "L" : "B";
      layer = CommandUtils.getFixedAncestor(layer, handle);
    }
    // domainLayer.ui.setResizingType(domainLayer.props.style.toJS());
    SetResizingTypeMutator(
      this.session,
      this.domainLayerPath,
      domainLayer.props.style.toJS()
    );
  }
  undo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.set.auto`,
        path: "",
        category: "app/command"
      },
      true
    );
    ResetStyleService(this.session, this.domainLayerPath);
    SetAllStyleService(this.session, this.domainLayerPath, this.oldStyle);
    const domainLayer = this.session.getLayerFromLayerPath(
      this.domainLayerPath
    );
    // domainLayer.ui.setResizingType(domainLayer.props.style.toJS());
    SetResizingTypeMutator(
      this.session,
      this.domainLayerPath,
      domainLayer.props.style.toJS()
    );
  }
  redo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.set.auto`,
        path: "",
        category: "app/command"
      },
      true
    );
    const domainLayer = this.session.getLayerFromLayerPath(
      this.domainLayerPath
    );
    // domainLayer.ui.setResizingType(domainLayer.props.style.toJS());
    SetResizingTypeMutator(
      this.session,
      this.domainLayerPath,
      domainLayer.props.style.toJS()
    );
  }
}
