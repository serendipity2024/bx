import { ICommand, CommandManager } from "command-manager";
import { Session } from "../../models/Session";
import { forEach, isArray, cloneDeep, size } from "lodash";
import { action } from "model";
import { Utils } from "utils";
import { Alert } from "dialog-x";
import * as path from "path";
import SelectLayersService from "../CommandServices/SelectLayersService";
import RemoveLayerService from "../CommandServices/RemoveLayerService";
import { AddLayerService } from "../CommandServices/AddLayerService";
import { Layer } from "domain-x";
import { SetFileDirtyMutator } from "../../Mutators";
export class Paste implements ICommand {
  displayName = "Paste";
  session: Session;
  commandManager: CommandManager;
  newLayersPath: Array<string>;
  newLayersJSON: Array<any>;
  oldLayersPath: Array<string>;
  parentLayerPath: string | undefined;
  clipboardData: any;
  constructor(session: Session, clipboardData?: any) {
    this.session = session;
    this.commandManager = new CommandManager();
    this.newLayersPath = [];
    this.newLayersJSON = [];
    this.oldLayersPath = [];
    this.clipboardData = clipboardData
      ? clipboardData
      : this.session.drivers.clipboardService.get();
  }
  execute() {
    if (this.session.currentStage.dragging) {
      return;
    }
    this.newLayersPath = [];
    this.newLayersJSON = [];
    this.oldLayersPath = [];
    this.parentLayerPath = undefined;
    this.session
      .getLayersFromSelectedLayerCollection()
      .forEach((layer: Layer) => {
        this.oldLayersPath.push(layer.getFullPath());
      });
    if (size(this.session.currentStage.recordingConditions) !== 0) {
      Alert("Warning!", "Unable to paste while recording!", true).then(() => {
        return;
      });
      return;
    }

    const clipboardData: any = this.clipboardData;
    let currentRootLayer: any;

    switch (clipboardData.type) {
      case "layer":
        if (Utils.isEditableInput()) {
          return;
        }
        const selectedFile = this.session.getSelectedFile();
        if (!selectedFile) {
          return;
        }
        // let newLayersData: any[] = [];
        if (isArray(clipboardData.data)) {
          forEach(clipboardData.data, (layerJSON: any) => {
            if (layerJSON.type === "symbol") {
              const symbolFile = this.session.domain.getSymbolFileFromSymbolInstance(
                layerJSON
              );
              if (
                symbolFile &&
                Utils.checkIfCircularSymbol(
                  this.session,
                  symbolFile,
                  this.session.currentRootLayer
                )
              ) {
                return;
              }
            }
            let newlayerJSON = cloneDeep(layerJSON);
            const parentDims = this.session.currentRootLayer.getBoundingClientRect();
            let instanceDim = layerJSON.rcDims;
            if (
              Math.round(instanceDim.x) >= Math.round(parentDims.width) ||
              Math.round(instanceDim.y) >= Math.round(parentDims.height)
            ) {
              newlayerJSON.props.style["position"] = "absolute";
              newlayerJSON.props.style["top"] =
                parentDims.height / 2 - instanceDim.height / 2;
              newlayerJSON.props.style["left"] =
                parentDims.width / 2 - instanceDim.width / 2;
            }
            this.session.globalStateService.addResolvedValue = true;
            const layer: Layer = AddLayerService(
              this.session,
              this.session.currentRootLayer.getFullPath(),
              newlayerJSON,
              undefined,
              undefined,
              true
            );
            this.session.globalStateService.addResolvedValue = false;
            this.newLayersPath.push(layer.getFullPath());
            this.newLayersJSON.push(newlayerJSON);
            this.parentLayerPath = this.session.currentRootLayer.getFullPath();
          });
        }
        this.session.drivers.analyticsService.addActivity(
          {
            name: `paste.layer`,
            path: "",
            category: "app/command"
          },
          true
        );
        break;
      case "image":
        action(() => {
          let imageLayerJSON: any = cloneDeep(
            this.session.currentStage.canvas.getComponentDefinition("image")
              .template
          );
          let imageName = clipboardData.data.name;
          let extName = path.extname(imageName);
          imageName = path.basename(imageName, extName);
          imageName = `${imageName}_${Utils.randomString(4)}.${extName}`;
          let file = clipboardData.data;
          var blob = file.slice(0, file.size, file.type);
          var newFile = new File([blob], imageName, { type: file });
          imageLayerJSON.props["source"]["uri"] = newFile.name;
          currentRootLayer = this.session.currentRootLayer;
          imageLayerJSON.props.style = imageLayerJSON.props.style
            ? imageLayerJSON.props.style
            : {};
          if (currentRootLayer) {
            let parentRenderCompiled = currentRootLayer.getBoundingClientRect();
            let parentHeight = parentRenderCompiled.height;
            let parentWidth = parentRenderCompiled.width;
            let instanceDim = 200;
            imageLayerJSON.props.style["position"] = "absolute";
            imageLayerJSON.props.style["top"] =
              parentHeight / 2 - instanceDim / 2;
            imageLayerJSON.props.style["left"] =
              parentWidth / 2 - instanceDim / 2;
            imageLayerJSON.props.style["height"] = instanceDim;
            imageLayerJSON.props.style["width"] = instanceDim;

            const layer: Layer = AddLayerService(
              this.session,
              currentRootLayer.getFullPath(),
              imageLayerJSON,
              undefined,
              undefined,
              true,
              [newFile]
            );

            this.newLayersPath.push(layer.getFullPath());
            this.newLayersJSON.push(cloneDeep(layer.toJS()));
            this.parentLayerPath = this.session.currentRootLayer.getFullPath();
            this.session.drivers.analyticsService.addActivity(
              {
                name: `paste.image`,
                path: "",
                category: "app/command"
              },
              true
            );
          }
        });
        break;
      case "text":
        if (Utils.isEditableInput()) {
          this.session.drivers.clipboardService.nativePaste();
        } else {
          const TextDefinition = this.session.currentStage.canvas.getComponentDefinition(
            "text"
          );
          let textLayerJSON = Utils.domainLayerTemplateFromCanvasTemplate(
            TextDefinition.template
          );
          textLayerJSON["children"] = [
            {
              type: "literal",
              value: clipboardData.data
            }
          ];
          currentRootLayer = this.session.currentRootLayer;
          let textStyle = textLayerJSON.props.style;
          if (currentRootLayer) {
            let parentRenderCompiled = currentRootLayer.getBoundingClientRect();
            let parentHeight = parentRenderCompiled.height;
            let parentWidth = parentRenderCompiled.width;
            textStyle["position"] = "absolute";
            textStyle["top"] = parentHeight / 2;
            textStyle["left"] = parentWidth / 2;
            const layer: Layer = AddLayerService(
              this.session,
              currentRootLayer.getFullPath(),
              textLayerJSON,
              undefined,
              undefined,
              true
            );
            this.newLayersPath.push(layer.getFullPath());
            this.newLayersJSON.push(cloneDeep(layer.toJS()));
            this.parentLayerPath = this.session.currentRootLayer.getFullPath();
            this.session.drivers.analyticsService.addActivity(
              {
                name: `paste.text`,
                path: "",
                category: "app/command"
              },
              true
            );
          }
        }
        break;
      default:
        break;
    }
    if (this.newLayersPath[0]) {
      const file = this.session.getFileFromLayerPath(this.newLayersPath[0]);

      if (file) {
        SetFileDirtyMutator(this.session, file.path, true);
      }
    }
    SelectLayersService(this.session, this.newLayersPath, undefined, true);
  }
  undo() {
    this.newLayersPath
      .sort()
      .reverse()
      .forEach((layerPath: string) => {
        RemoveLayerService(this.session, layerPath);
      });
    SelectLayersService(this.session, this.oldLayersPath, undefined, true);
  }
  redo() {
    this.newLayersPath = [];
    this.newLayersJSON.forEach((layerJSON: string) => {
      const layer: Layer = AddLayerService(
        this.session,
        this.parentLayerPath,
        layerJSON,
        undefined,
        undefined,
        true
      );
      this.newLayersPath.push(layer.getFullPath());
    });
    SelectLayersService(this.session, this.newLayersPath, undefined, true);
  }
}
