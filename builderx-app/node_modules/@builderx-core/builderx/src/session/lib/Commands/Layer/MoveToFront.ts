import { ICommand, CommandManager } from "command-manager";
import { Layer } from "domain-x";
import { Session } from "../../models/Session";
import MoveLayerService from "../CommandServices/MoveLayerService";
import SelectLayersService from "../CommandServices/SelectLayersService";

export default class MoveToFront implements ICommand {
  displayName = "MoveToFront";
  private session: Session;
  private layers: Array<Layer>;
  private movedLayersOldIndices: Array<number>;
  private movedLayersNewPath: Array<string>;
  constructor(session: Session, layers: Array<Layer>) {
    this.session = session;
    this.layers = layers;
  }
  execute() {
    this.movedLayersNewPath = [];
    this.movedLayersOldIndices = [];
    let parent = this.layers.length ? this.layers[0].parent : undefined;
    if (parent && parent instanceof Layer) {
      let children = parent.getChildren();
      this.layers.forEach((childLayer: any) => {
        let index = children.indexOf(childLayer);
        this.movedLayersOldIndices.push(index);
        let domainLayer = MoveLayerService(
          this.session,
          parent.getFullPath(),
          parent.getFullPath(),
          index,
          children.length - 1
        );
        this.movedLayersNewPath.push(domainLayer.getFullPath());
      });
      SelectLayersService(this.session, this.movedLayersNewPath);
    }
    this.session.drivers.analyticsService.addActivity(
      {
        name: `move.layer.to.front`,
        category: "app/command"
      },
      true
    );
  }
  undo() {
    let newLayers: Array<string> = [];
    this.layers = [];
    this.movedLayersNewPath.forEach((layerPath: string, index: number) => {
      const layer: Layer = this.session.getLayerFromLayerPath(layerPath);
      const parent = layer.parent;
      if (parent) {
        let domainLayer = MoveLayerService(
          this.session,
          parent.getFullPath(),
          parent.getFullPath(),
          parent.children.indexOf(layer),
          this.movedLayersOldIndices[index]
        );
        this.layers.push(domainLayer);
        newLayers.push(domainLayer.getFullPath());
      }
    });
    SelectLayersService(this.session, newLayers);
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.move.layer.to.front`,
        category: "app/command"
      },
      true
    );
  }
  redo() {
    this.execute();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.move.layer.to.front`,
        category: "app/command"
      },
      true
    );
  }
}
