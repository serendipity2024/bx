import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { LiteralNode } from "domain-x";
import { set, cloneDeep, get } from "lodash";
import { Utils } from "utils";
import ClearRecordingConditions from "../Conditionals/ClearRecordingConditions";
import { SetAllProps, AddLayer } from "..";
import UpdateRecordingConditions from "../Conditionals/UpdateRecordingConditions";
import CreateDomainNode from "./CreateDomainNode";
import { SetAllPropsService } from "../CommandServices/SetAllPropsService";

export default class CreateLiteralNode implements ICommand {
  displayName = "CreateLiteralNode";
  private session: Session;
  private JSON: any;
  private parent: any;
  private key: string;
  private property?: string;
  private currentRecordingConditions: { [key: string]: any };
  constructor(
    session: Session,
    parent: any,
    key: string,
    JSON: any,
    property?: string
  ) {
    this.session = session;
    this.JSON = JSON;
    this.parent = parent;
    this.key = key;
    this.property = property;
  }
  execute() {
    this.currentRecordingConditions = this.session.getRecordingConditions();

    const oldJSON = cloneDeep(this.JSON);

    let domainNode = new LiteralNode(this.JSON, this.session);
    set(this.parent, this.key, domainNode);
    domainNode.parent = this.parent;

    if (
      get(oldJSON, "value.type") &&
      (get(oldJSON, "value.type") === "unknown" ||
        !Utils.shouldIgnoreLayer(oldJSON.value.type))
    ) {
      this.session.commandManager.executeAndSkip(
        new CreateDomainNode(this.session, domainNode, "value", oldJSON.value)
      );
      // domainNode.value = DomainLayerFactory.createDomainLayer(oldJSON.value);
      // // TODO: jugaad
      // if (oldJSON.value.type === "text") {
      //   domainNode.value.children[0] = DomainLayerFactory.createDomainLayer(
      //     oldJSON.value.children[0]
      //   );
      //   domainNode.value.children[0].parent = domainNode.value;
      // }
    }

    if (get(domainNode, "value.type")) {
      // TODO: heavy-jugaad
      // this.session.commandManager.executeAndSkip(
      //   new ClearRecordingConditions(this.session)
      // );
      // clear recording condition
      domainNode.value._parent = domainNode;
      if (!Utils.shouldIgnoreLayer(domainNode.value.type)) {
        this.session.currentStage.recordingConditions = {};

        SetAllPropsService(
          this.session,
          domainNode.value.getFullPath(),
          oldJSON.value.props
        );

        // add condition after set prop
        this.session.currentStage.recordingConditions = this.currentRecordingConditions;
      }
      // forEach(this.currentRecordingConditions, (value: any, key: any) => {
      //   this.session.commandManager.executeAndSkip(
      //     new UpdateRecordingConditions(this.session, key, value)
      //   );
      // });
    }
  }
  undo() {
    //
  }
  redo() {
    //
  }
}
