import { Session } from "../../models/Session";
import Stage from "../../models/Stage";
import {
  AddStageMutator,
  AddStageArtboardMutator,
  SetCurrentStageMutator,
  SetPropMutator,
  CreateExpressionNodeMutator,
  SetStyleAttributeMutator
} from "../../Mutators";
import { AddLayerService } from "./AddLayerService";
import createService from ".";
import { SetAllPropsService } from "./SetAllPropsService";
import { find, get } from "lodash";
import { FormControl, DomainLayer } from "domain-x";

function layerHasExpressionStatement(layer: DomainLayer) {
  if (layer.type === "text") {
    return get(layer, "children.0.type") === "expressionStatement";
  } else if (layer.type === "textInput") {
    return get(layer, "props.placeholder.type") === "expressionStatement";
  } else if (layer.type === "view") {
    return;
    get(layer, "props.style").get("backgroundColor.type") ===
      "expressionStatement";
  } else if (layer.type === "icon") {
    return;
    get(layer, "props").get("name.type") === "expressionStatement";
  } else if (layer.type === "touchableOpacity") {
    return get(layer, "props").get("onPress.type") === "expressionStatement";
  }
  return false;
}
function setExpressionStatement(
  session: Session,
  layer: DomainLayer,
  formControl: FormControl,
  value: any
) {
  const expression = formControl.title;
  const layerJSON = {
    type: "expressionStatement",
    expression: {
      type: "logicalExpression",
      left: {
        type: "expression",
        expression
      },
      operator: "||",
      right: { type: "literal", value: value }
    }
  };
  if (layer.type === "text") {
    CreateExpressionNodeMutator(session, layer, "", "children.0", layerJSON);

    // this.newExpressionNode = layer.children[0];
  } else if (layer.type === "textInput") {
    // this.session.commandManager.executeAndSkip(
    //   new SetProp(this.session, layer, "placeholder", this.layerJSON)
    // );
    SetPropMutator(session, layer.getFullPath(), "placeholder", layerJSON);
  } else if (layer.type === "view") {
    SetStyleAttributeMutator(
      session,
      layer.getFullPath(),
      "backgroundColor",
      layerJSON
    );
    // this.session.commandManager.executeAndSkip(
    //   new SetStyleAttribute(
    //     this.session,
    //     layer,
    //     "backgroundColor",
    //     this.layerJSON
    //   )
    // );
  } else if (layer.type === "icon") {
    let propName = formControl.title.endsWith("Family") ? "type" : "name";
    // this.session.commandManager.executeAndSkip(
    //   new SetProp(this.session, layer, propName, this.layerJSON)
    // );
    SetPropMutator(session, layer.getFullPath(), propName, layerJSON);
  } else if (layer.type === "touchableOpacity") {
    SetPropMutator(session, layer.getFullPath(), "onPress", layerJSON);

    // this.session.commandManager.executeAndSkip(
    //   new SetProp(this.session, layer, "onPress", this.layerJSON)
    // );
  }
}

export const ActivateFormControlService = createService(
  "ActivateFormControlService",
  (session: Session, symbolInstanceId: string, overrideKey: string) => {
    let activated = false;
    const symbolInstance = session.getLayerFromLayerPath(symbolInstanceId);
    const symbolFile = session.domain.getSymbolFileFromSymbolInstance(
      symbolInstance
    );

    if (!symbolFile) {
      return;
    }
    const formControl: any = find(
      symbolFile.formControls,
      (formControl: FormControl) => {
        return formControl.title === overrideKey;
      }
    );

    if (!formControl) {
      return;
    }

    const expression = formControl.title;

    const layer = session.getLayerFromLayerPath(formControl.layerPath);
    let value;
    if (layer.type === "text") {
      value =
        layer.children && layer.children.length
          ? (layer.children[0] as any).value
          : "";
    } else if (layer.type === "textInput") {
      value = layer.props.getResolvedProp("placeholder");
    } else if (layer.type === "view") {
      value = layer.props.getResolvedStyleAttribute("backgroundColor");
    } else if (layer.type === "icon") {
      let propName = formControl.title.endsWith("Family") ? "type" : "name";
      value = layer.props.getResolvedProp(propName);
    } else if (layer.type === "touchableOpacity") {
      value = layer.props.getResolvedProp("onPress");
    }
    // @ts-ignore
    // set(this.symbolInstance.scopeVariables, [expression], value);
    if (!layerHasExpressionStatement(layer)) {
      setExpressionStatement(session, layer, formControl, value);
      activated = true;
    }

    let styleName =
      layer.type === "icon"
        ? formControl.title.endsWith("Family")
          ? layer.styleName + "Family"
          : layer.styleName + "Name"
        : layer.styleName;

    SetPropMutator(session, symbolInstanceId, styleName, value);
    // this.commandManager.execute(
    //   new SetProp(
    //     this.session,
    //     this.symbolInstance,
    //     styleName,
    //     this.oldValue,
    //     true
    //   )
    // );
    return activated;
  }
);
