import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import updateRecordingConditions from "../CommandServices/UpdateRecordingConditions";

export default class UpdateRecordingConditions implements ICommand {
  displayName = "UpdateRecordingConditions";
  private session: Session;
  private key: string;
  private value: any;
  private oldValue: any;
  private shouldEmitUpdates?: boolean = true;

  constructor(
    session: Session,
    key: string,
    value: any,
    shouldEmitUpdates: boolean = true
  ) {
    this.session = session;
    this.key = key;
    this.value = value;
    this.shouldEmitUpdates = shouldEmitUpdates;
  }
  execute() {
    const recordingConditions = this.session.currentStage.recordingConditions;
    this.oldValue = recordingConditions[this.key];
    updateRecordingConditions(
      this.session,
      recordingConditions,
      this.key,
      this.value,
      this.shouldEmitUpdates
    );
    this.session.drivers.analyticsService.addActivity(
      {
        name: `conditionals.recording.update`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  undo() {
    const recordingConditions = this.session.currentStage.recordingConditions;
    if (this.value) {
      recordingConditions[this.key] = this.oldValue;
    } else {
      delete recordingConditions[this.key];
    }
    // if (this.session.selectedFile) {
    //   this.session.selectedFile.emit("scopeVariables");
    // }
    // this.session.currentStage.emit("recordingConditions");
  }
  redo() {
    const recordingConditions = this.session.currentStage.recordingConditions;
    recordingConditions[this.key] = this.value;
    // if (this.session.selectedFile) {
    //   this.session.selectedFile.emit("scopeVariables");
    // }
    // this.session.currentStage.emit("recordingConditions");
  }
}
