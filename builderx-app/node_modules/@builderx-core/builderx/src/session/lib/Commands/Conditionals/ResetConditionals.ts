import { ICommand, CommandManager } from "command-manager";
import { Session } from "session";
import {
  Layer,
  ExpressionStatement,
  ConditionalExpression,
  Expression
} from "domain-x";
import { forEach } from "lodash";
import { ResolveNodeValue } from "utils";
import SetStyleAttribute from "../Style/SetStyleAttribute";
import SetProp from "../Prop/SetProp";
export default class ResetConditionals implements ICommand {
  displayName = "ResetConditionals";
  private session: Session;
  private layer: Layer;
  private commandManager: CommandManager;
  private oldProps: { [key: string]: any };
  private newProps: { [key: string]: any };
  constructor(session: Session, layer: Layer) {
    this.session = session;
    this.layer = layer;
    this.commandManager = new CommandManager();
    this.oldProps = { style: {} };
    this.newProps = { style: {} };
  }
  execute() {
    this.resetConditionals(
      this.layer.props,
      "props",
      (value: any, key: string, type: "props" | "style") => {
        if (
          value instanceof ExpressionStatement ||
          value instanceof Expression ||
          value instanceof ConditionalExpression
        ) {
          const defaultValue = ResolveNodeValue(value, {});
          if (type === "props") {
            this.oldProps[key] = this.layer.props[key].toJS();
            this.layer.props[key] = undefined;
            this.commandManager.executeAndSkip(
              new SetProp(this.session, this.layer, key, defaultValue)
            );
            this.newProps[key] = this.layer.props[key];
          } else {
            this.oldProps.style[key] = this.layer.props.style[key].toJS();
            this.layer.props.style[key] = undefined;
            this.commandManager.executeAndSkip(
              new SetStyleAttribute(this.session, this.layer, key, defaultValue)
            );
            this.newProps.style[key] = this.layer.props.style[key];
          }
        }
      }
    );
    this.session.drivers.analyticsService.addActivity(
      {
        name: `conditionals.recording.reset`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  undo() {
    this.resetConditionals(
      this.oldProps,
      "props",
      (prevValue: any, key: string, type: "props" | "style") => {
        if (type === "props") {
          this.commandManager.executeAndSkip(
            new SetProp(this.session, this.layer, key, prevValue)
          );
        } else {
          this.commandManager.executeAndSkip(
            new SetStyleAttribute(this.session, this.layer, key, prevValue)
          );
        }
      }
    );
  }
  redo() {
    this.resetConditionals(
      this.newProps,
      "props",
      (newValue: any, key: string, type: "props" | "style") => {
        if (type === "props") {
          this.layer.props[key] = undefined;
          this.commandManager.executeAndSkip(
            new SetProp(this.session, this.layer, key, newValue)
          );
        } else {
          this.layer.props.style.set(key, undefined);
          this.commandManager.executeAndSkip(
            new SetStyleAttribute(this.session, this.layer, key, newValue)
          );
        }
      }
    );
  }
  resetConditionals(
    node: any,
    type: "props" | "style",
    callback: (value: any, key: string, type: "props" | "style") => void
  ) {
    forEach(node, (value: any, key: string) => {
      if (key === "style") {
        this.resetConditionals(value, key, callback);
      } else {
        callback(value, key, type);
      }
    });
  }
}
