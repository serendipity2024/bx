import { Layer as DomainLayer } from "domain-x";
import { isNil } from "lodash";
import { Session } from "../../models/Session";
import SetStyleAttributeMutator from "../../Mutators/SetStyleAttributeMutator";
import RemoveStyleAttributeMutator from "../../Mutators/RemoveStyleAttributeMutator";
import { Utils } from "utils";
import createService from ".";
const NormalizeChildrenFlex = createService(
  "NormalizeChildrenFlex",
  (session: Session, domainLayer: DomainLayer) => {
    if (!domainLayer.showLayoutOptions()) {
      return;
    }
    const totalChildrenFlex = domainLayer.getTotalFlexOfFlexChildren();
    domainLayer.forEachChild((child: DomainLayer, index: number) => {
      if (Utils.shouldIgnoreLayer(child.type)) {
        return;
      }
      const layerFlex = child.getFlexValue();
      if (!isNil(layerFlex) && !isNil(totalChildrenFlex)) {
        RemoveStyleAttributeMutator(
          session,
          child.getPath(undefined, true),
          "flexGrow",
          "style"
        );

        const newFlex = layerFlex * (1 / totalChildrenFlex);
        SetStyleAttributeMutator(
          session,
          child.getPath(undefined, true),
          "flex",
          newFlex
        );
      }
    });
  }
);

export default NormalizeChildrenFlex;
