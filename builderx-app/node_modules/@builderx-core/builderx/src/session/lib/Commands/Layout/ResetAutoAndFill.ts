import { Layer as DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import { ICommand, CommandManager } from "command-manager";
import RemoveStyleAttribute from "../Style/RemoveStyleAttribute";
import { isNil } from "lodash";

export default class ResetAutoAndFill implements ICommand {
  displayName = "ResetAutoAndFill";
  private domainLayer: DomainLayer;
  private session: Session;
  private property: "width" | "height";
  private commandManager: CommandManager;
  constructor(
    session: Session,
    domainLayer: DomainLayer,
    property: "width" | "height"
  ) {
    this.session = session;
    this.domainLayer = domainLayer;
    this.property = property;
    this.commandManager = new CommandManager();
  }
  execute() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `reset.auto.and.fill`,
        path: "",
        category: "app/command"
      },
      true
    );
    const position = this.domainLayer.props.getResolvedStyleAttribute(
      "position"
    );
    if (position === "absolute") {
      if (this.property === "width") {
        const left = this.domainLayer.props.getResolvedStyleAttribute("left");
        const right = this.domainLayer.props.getResolvedStyleAttribute("right");
        if (!isNil(left) && !isNil(right)) {
          this.commandManager.execute(
            new RemoveStyleAttribute(this.session, this.domainLayer, "right")
          );
        }
      } else if (this.property === "height") {
        const top = this.domainLayer.props.getResolvedStyleAttribute("top");
        const bottom = this.domainLayer.props.getResolvedStyleAttribute(
          "bottom"
        );
        if (!isNil(top) && !isNil(bottom)) {
          this.commandManager.execute(
            new RemoveStyleAttribute(this.session, this.domainLayer, "bottom")
          );
        }
      }
    } else {
      const flexDirection = this.domainLayer.getParentLayerFlexDirection();
      if (
        (this.property === "width" && flexDirection === "row") ||
        (this.property === "height" && flexDirection !== "row")
      ) {
        this.commandManager.execute(
          new RemoveStyleAttribute(this.session, this.domainLayer, "flex")
        );
      } else {
        const alignSelf = this.domainLayer.props.getResolvedStyleAttribute(
          "alignSelf"
        );
        if (alignSelf === "stretch") {
          this.commandManager.execute(
            new RemoveStyleAttribute(
              this.session,
              this.domainLayer,
              "alignSelf"
            )
          );
        }
      }
    }
  }
  undo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.reset.auto.and.fill`,
        path: "",
        category: "app/command"
      },
      true
    );
    this.commandManager.undoAll();
  }
  redo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.reset.auto.and.fill`,
        path: "",
        category: "app/command"
      },
      true
    );
    this.commandManager.redoAll();
  }
}
