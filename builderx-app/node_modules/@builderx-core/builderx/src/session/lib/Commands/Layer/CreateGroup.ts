import { Layer as DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import { ICommand } from "command-manager";
import CreateGroupService from "./../CommandServices/CreateGroup";
import UngroupService from "../CommandServices/Ungroup";

export default class CreateGroup implements ICommand {
  displayName = "CreateGroup";
  private session: Session;
  private domainLayersPath: Array<string> = [];
  private wrapperLayerPath: string | undefined;

  constructor(session: Session, domainLayers: Array<DomainLayer>) {
    this.session = session;
    domainLayers.forEach(domainLayer => {
      this.domainLayersPath.push(domainLayer.getFullPath());
    });
  }
  execute() {
    const wrapperLayer = CreateGroupService(
      this.session,
      this.domainLayersPath
    );
    this.wrapperLayerPath = wrapperLayer.getFullPath();
  }
  undo() {
    if (this.wrapperLayerPath) {
      UngroupService(this.session, this.wrapperLayerPath);
    }
  }
  redo() {
    this.execute();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.create.group`,
        category: "app/command"
      },
      true
    );
  }
}
