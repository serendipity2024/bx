import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { Layer } from "domain-x";
import SetStyleAttributeMutator from "../../Mutators/SetStyleAttributeMutator";
import { StylePropNameType, SystemFont } from "common-interfaces";
import { Utils } from "utils";
import SetFontPropertiesMutator from "../../Mutators/SetFontPropertiesMutator";

export default class SetFontProperties implements ICommand {
  displayName = "SetFontProperties";
  private session: Session;
  private domainLayerPath: string;
  private value: SystemFont;
  private oldValue: any;
  private key: string;
  private stylePropName: StylePropNameType;
  private noPreserve: boolean;
  constructor(
    session: Session,
    domainLayer: Layer,
    key: string,
    value: SystemFont,
    stylePropName: StylePropNameType,
    noPreserve: boolean = false
  ) {
    this.session = session;
    this.domainLayerPath = domainLayer.getFullPath();
    this.key = key;
    this.value = value;
    this.stylePropName = stylePropName;
    this.noPreserve = noPreserve;
    this.oldValue = {
      family: domainLayer.props.getResolvedStyleAttribute("fontFamily"),
      style: domainLayer.props.getResolvedStyleAttribute("fontStyle"),
      weight: domainLayer.props.getResolvedStyleAttribute("fontWeight")
    };
  }
  execute() {
    SetFontPropertiesMutator(
      this.session,
      this.domainLayerPath,
      this.value,
      this.stylePropName,
      this.noPreserve
    );
    if (!this.noPreserve) {
      this.setPostscriptName(this.value);
    }
  }
  undo() {
    SetFontPropertiesMutator(
      this.session,
      this.domainLayerPath,
      this.oldValue,
      this.stylePropName,
      this.noPreserve
    );
    if (!this.noPreserve) {
      this.setPostscriptName(this.oldValue);
    }
  }
  redo() {
    SetFontPropertiesMutator(
      this.session,
      this.domainLayerPath,
      this.value,
      this.stylePropName,
      this.noPreserve
    );
    if (!this.noPreserve) {
      this.setPostscriptName(this.value);
    }
  }

  setPostscriptName(value: any) {
    const fontFamily: string = value.family;
    if (fontFamily) {
      const typeface = Utils.getTypeface(
        fontFamily,
        value.weight,
        value.style,
        this.session.getFontsList()
      );
      if (typeface) {
        SetStyleAttributeMutator(
          this.session,
          this.domainLayerPath,
          "fontPostscriptName",
          typeface.postscriptName,
          this.stylePropName
        );
      }
    }
  }
}
