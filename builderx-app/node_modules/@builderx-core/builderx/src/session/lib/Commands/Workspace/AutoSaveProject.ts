import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { File } from "domain-x";
import SaveProject from "./SaveProject";
import { action } from "model";
import { Utils } from "utils";
export default class AutoSaveProject implements ICommand {
  displayName = "AutoSaveProject";
  private session: Session;

  constructor(session: Session) {
    this.session = session;
  }

  async execute() {
    if (this.shouldExecute()) {
      // return;
      // let promises: Promise<any>[] = [];
      // console.log(this.session.dirtyFiles, "this.session.dirtyFiles");
      // this.session.dirtyFiles.forEach(async (file: File) => {
      //   if (file.isProcessing || file.path === BX_PREVIEW_FILE_PATH) {
      //     return;
      //   }

      //   const promise = new Promise((resolve, reject) => {
      //     const fileJSON = file.toJS();
      //     const validateCode = this.session.AstModule.executeCommand(
      //       "validateCodeWithJSON",
      //       [fileJSON]
      //     );

      //     if (!validateCode) {
      //       throw new Error("Faild to validate Code With Design");
      //     }

      //     validateCode
      //       .then((response: any) => {
      //         if (!response) {
      //           const errorMessage =
      //             "File not found. Probably the server has crashed or rebooted.";
      //           throw new Error(errorMessage);
      //         } else if (!response.isValid) {
      //           if (response.diff) {
      //             const errorMessage = {
      //               title: "Code JSON out of sync",
      //               diff: response.diff,
      //               fileId: response.fileId
      //             };
      //             throw new Error(JSON.stringify(errorMessage, null, 2));
      //           } else {
      //             throw response.err;
      //           }

      //           resolve({
      //             isValid: false,
      //             err: response.diff
      //           });
      //         } else {
      //           resolve({
      //             isValid: true,
      //             err: []
      //           });
      //         }
      //       })
      //       .catch((err: any) => {
      //         resolve({
      //           isValid: false,
      //           err: err
      //         });
      //         throw err;
      //       });
      //   });
      //   promises.push(promise);
      // // });
      // Promise.all(promises)
      //   .then(() => {
      this.session.dirtyFiles = [];
      action(() => {
        this.session.commandManager.executeAndSkip(
          new SaveProject(this.session)
        );
      });
      // })
      // .catch(() => {
      //   //
      // });
    }
  }

  undo() {
    //
  }

  redo() {
    //
  }

  shouldExecute() {
    let isDirty: boolean = false;
    this.session.domain.files.forEach((file: File) => {
      if (file.isDirty) {
        isDirty = true;
      }
    });
    return (
      isDirty &&
      this.session.pageRouter.currentRoute === "workspace" &&
      this.session.currentStage.tools.selectedTool !== "path" &&
      !this.session.autoSaveDisabled &&
      !Utils.isEditableInput()
    );
  }
}
