import { Session, FileDefinition } from "session";
import { action } from "model";
import { forEach, cloneDeep } from "lodash";
import { RemoveLayer, AddLayer, AddNewArtboard } from "..";
import createService from ".";

const LoadFiles = createService(
  "LoadFiles",
  (
    session: Session,
    filesJSON: { symbols: any[]; artboards: any[]; assets: any[] },
    loadFrom: "ExistingProject" | "Sketch",
    shouldRepositionArtboard: boolean = false
  ) => {
    if (filesJSON) {
      action(() => {
        session.globalStateService.setDimensions = false;
        const generateCode = true;
        session.existingFilesJSON = filesJSON;
        if (filesJSON && filesJSON.symbols && filesJSON.symbols.length > 0) {
          // DOC: dont use forEach loop, has issues with promise
          // console.log(filesJSON, "filesJSON");
          for (let index = 0; index < filesJSON.symbols.length; index++) {
            let symbol = filesJSON.symbols[index];
            session.addSymbolFromJS(symbol, generateCode).then(() => {
              //
            });
          }
        }

        if (
          filesJSON &&
          filesJSON.artboards &&
          filesJSON.artboards.length > 0
        ) {
          for (let index = 0; index < filesJSON.artboards.length; index++) {
            session
              .addArtboardFromJS(
                filesJSON.artboards[index],
                shouldRepositionArtboard,
                generateCode
              )
              .then(() => {
                //
              });
          }
        }

        if (
          filesJSON &&
          filesJSON.artboards &&
          filesJSON.artboards.length === 0
        ) {
          const fileLayerJSON = cloneDeep(FileDefinition.template);
          session.commandManager.executeAndSkip(
            new AddNewArtboard(session, fileLayerJSON, "artboard", true, true)
          );
        }

        while (session.unresolvedSymbolInstances.length > 0) {
          resolveUnresolvedSymbols(session, session.unresolvedSymbolInstances);
        }

        if (filesJSON && filesJSON.assets && filesJSON.assets.length > 0) {
          // DOC: dont use forEach loop, has issues with promise
          for (let index = 0; index < filesJSON.assets.length; index++) {
            session.addAssetToMap(filesJSON.assets[index]);
          }
        }
        session.shouldDisableAutoSave(false);
        session.globalStateService.setDimensions = true;
      });
    }
  }
);
// function traverseLayers(
//   compiledLayer: any,
//   domainLayer: DomainLayer,
//   callback: (compiledLayer: any, domainLayer: DomainLayer) => void
// ) {
//   callback(compiledLayer, domainLayer);
//   compiledLayer.children.forEach((childLayer: any, index: number) => {
//     const symbolChildLayer = domainLayer.children[index];
//     if (symbolChildLayer instanceof DomainLayer) {
//       traverseLayers(childLayer, symbolChildLayer, callback);
//     }
//   });
// }

// private clearUnresolvedSymbols(unresolvedSymbolInstances: any[]) {
//   const newUnresolvedSymbolInstances = [...unresolvedSymbolInstances];
//   forEach(newUnresolvedSymbolInstances, (unresolvedSymbolInst, index) => {
//     action(() => {
//       const parentLayer = unresolvedSymbolInst.domainLayer.parent;
//       if (!parentLayer) {
//         return;
//       }
//       setAndComputeDescendants(this.session, [], () => {
//         const layerJSON = unresolvedSymbolInst.domainLayer.toJS();
//         if (parentLayer) {
//           this.session.commandManager.executeAndSkip(
//             new RemoveLayer(this.session, unresolvedSymbolInst.domainLayer)
//           );
//         }
//       });
//     });

//     unresolvedSymbolInstances.splice(index, 1);
//   });
// }
function resolveUnresolvedSymbols(
  session: Session,
  unresolvedSymbolInstances: any[]
) {
  const newUnresolvedSymbolInstances = [...unresolvedSymbolInstances];
  forEach(newUnresolvedSymbolInstances, (unresolvedSymbolInst, index) => {
    action(() => {
      const parentLayer = unresolvedSymbolInst.domainLayer.parent;
      const indexInParent = unresolvedSymbolInst.domainLayer.findIndexInParent();

      if (parentLayer) {
        const layerJSON = unresolvedSymbolInst.domainLayer.toJS();

        if (parentLayer) {
          session.commandManager.executeAndSkip(
            new RemoveLayer(session, unresolvedSymbolInst.domainLayer)
          );
        }

        // console.log(unresolvedSymbolInst, "unresolved ");
        const symbolFile = session.domain.getSymbolFileFromSymbolInstance(
          unresolvedSymbolInst.domainLayer
        );

        if (symbolFile) {
          session.commandManager.executeAndSkip(
            new AddLayer(session, parentLayer, layerJSON, indexInParent)
          );
        }
      }
    });

    unresolvedSymbolInstances.splice(index, 1);
  });
}

export default LoadFiles;
