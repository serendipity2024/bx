import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { SetCurrentStageMutator } from "../../Mutators";
import PlaceArtboardsToCenter from "../CommandServices/PlaceArtboardsToCenter";
import GenerateLayerPreview from "../CommandServices/GenerateLayerPreview";
import { action } from "model";
import { get } from "lodash";

export default class SetCurrentStage implements ICommand {
  displayName = "SetCurrentStage";
  private session: Session;
  private oldStageId: string;
  private newStageId: string;
  constructor(session: Session, stageId: string) {
    this.session = session;
    this.oldStageId = session.currentStage
      ? session.currentStage.id
      : "artboard";
    this.newStageId = stageId;
  }
  execute() {
    this.changeStage(this.oldStageId, this.newStageId);
  }

  private changeStage(oldStageId: string, newStageId: string) {
    SetCurrentStageMutator(this.session, newStageId);
    PlaceArtboardsToCenter(this.session, true);
    if (
      this.session.currentRootLayer &&
      this.session.showCodeEditor &&
      oldStageId.includes("layer:") === false
    ) {
      GenerateLayerPreview(this.session, [
        this.session.currentRootLayer.getFullPath()
      ]);
    }

    // heavy-jugaad: scroll container issue
    // set overflow: initial on stage change
    setTimeout(() => {
      const scrollComponent = get(
        // @ts-ignore
        this.session.currentStage.canvas.dom.getElementsByClassName(
          "scrollcontainer"
        ),
        "0.children.0"
      );
      if (scrollComponent) {
        scrollComponent.style.overflow = "scroll";
      }
    });

    // SetZoomMutator(this.session, 0.5);
    action(() => {
      this.session.emit("currentStage");
    });
  }

  undo() {
    this.changeStage(this.newStageId, this.oldStageId);
  }
  redo() {
    this.changeStage(this.oldStageId, this.newStageId);
  }
}
