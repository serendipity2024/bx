import createService from ".";
import { Session } from "../../models/Session";
import { BX_PREVIEW_FILE_PATH } from "bx-constants";
import { get } from "lodash";

const UpdatePreviewStage = createService(
  "UpdatePreviewStage",
  (session: Session) => {
    const previewStage = session.stages.get(BX_PREVIEW_FILE_PATH);

    if (previewStage) {
      const stageContainerDom = document.querySelector(".stage-container");
      if (
        stageContainerDom &&
        // @ts-ignore
        stageContainerDom.children[0].contains(previewStage.canvasContainerDom)
      ) {
        stageContainerDom.children[0].removeChild(
          previewStage.canvasContainerDom
        );
      }

      // @ts-ignore
      const layerPreviewStageContainer: HTMLDivElement = document.querySelector(
        ".layer-preview-stage"
      );
      if (layerPreviewStageContainer) {
        const dims = previewStage.canvas.children[0].getBoundingClientRect();

        // @ts-ignore
        layerPreviewStageContainer.style.height = dims.height;
        // @ts-ignore
        layerPreviewStageContainer.style.width = dims.width;

        const containerHeight = (layerPreviewStageContainer.parentNode as HTMLDivElement).getBoundingClientRect()
          .height;
        const containerWidth = (layerPreviewStageContainer.parentNode as HTMLDivElement).getBoundingClientRect()
          .width;

        const horizontalZoom: number = containerWidth / dims.width;
        const verticalZoom: number = containerHeight / dims.height;

        // @ts-ignore
        layerPreviewStageContainer.style.zoom = Math.min(
          horizontalZoom,
          verticalZoom
        );

        previewStage.canvas.setLayout({
          width: dims.width,
          height: dims.height
        });
        previewStage.canvas.setViewport({
          width: dims.width,
          height: dims.height
        });
        previewStage.canvas.children[0].setLayout({
          width: dims.width,
          height: dims.height,
          bottom: undefined,
          right: undefined,
          top: 0,
          left: 0,
          position: "absolute"
        });
        const scrollComponent = get(
          // @ts-ignore
          previewStage.canvas.dom.getElementsByClassName("scrollcontainer"),
          "0.children.0"
        );
        if (scrollComponent) {
          scrollComponent.style.overflow = "hidden";
        }
        // const scrollContainer = get(
        //   // @ts-ignore
        //   previewStage.canvas.dom.getElementsByClassName("scrollcontainer"),
        //   "0"
        // );
        // if (scrollContainer) {
        //   scrollContainer.style.overflow = "hidden";
        // }
        // previewStage.canvas.children[0].setStyle("overflow", "hidden");
        // if (
        //   previewStage.canvas.children[0] &&
        //   previewStage.canvas.children[0].children[0]
        // ) {
        //   previewStage.canvas.children[0] &&
        //     previewStage.canvas.children[0].children[0].setStyle(
        //       "overflow",
        //       "hidden"
        //     );
        // }
        // previewStage.canvas.executeFunction("RulerScale.hide");

        layerPreviewStageContainer.innerHTML = "";

        previewStage.canvasContainerDom.style.visibility = "visible";
        layerPreviewStageContainer.appendChild(previewStage.canvasContainerDom);
        previewStage.canvasContainerDom.style.display = "block";

        // PlaceArtboardsToCenter(this.props.session, false, BX_PREVIEW_FILE_PATH);
      }
    }
  }
);

export default UpdatePreviewStage;
