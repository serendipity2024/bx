import { File, Layer, LiteralNode, DomainLayer } from "domain-x";
import { cloneDeep, forEach, get, set, merge } from "lodash";
import { Session } from "../../models/Session";
import { AddSymbolInstRefInSymbolFile } from "./AddSymbolInstRefInSymbolFile";
import { AddSymbolFromJS, RemoveLayer } from "..";
import { ResolveLayer } from "utils";

import FileTemplate from "../../componentJSON/SymbolFile";

// export default function ResolveSymbolInstance(
//   session: Session,
//   domainLayer: Layer,
//   compiledParentLayer: CompiledLayer<any>,
//   inputIndex: number
// ): CompiledLayer<any>[] {
//   const compiledLayers: CompiledLayer<any>[] = [];
//   try {
//     let symbolFile = session.domain.getSymbolFileFromSymbolInstance(
//       domainLayer
//     );
//     if (!symbolFile) {
//       const importPath = domainLayer.import.packageName;

//       // Adding dependent symbol file before resolving symbol layer
//       // nahi toh ** fategi baad me

//       let symbol = session.existingFilesJSON.symbols.find(
//         (symbolIn: any) => symbolIn.path === importPath
//       );

//       if (!symbol) {
//         const fileJSON = cloneDeep(FileTemplate.template);
//         fileJSON.path = importPath;

//         symbol = fileJSON;
//       }

//       session.commandManager
//         .executeAndSkip(new AddSymbolFromJS(session, symbol))
//         .catch(() => {
//           //
//         });

//       symbolFile = session.domain.files.get(importPath);
//     }

//     if (!symbolFile) {
//       throw new Error(
//         `symbol file doesnot exists for file id ${domainLayer.import.layerName}`
//       );
//     } else {
//       AddSymbolInstRefInSymbolFile(session, domainLayer);
//       // resolveLayer(session, symbolFile, compiledParentLayer, domainLayer);
//       const symbolInstFile: any = domainLayer.getFile();
//       if (symbolInstFile) {
//         const compiledLayer = resolveLayer(
//           session,
//           symbolFile,
//           compiledParentLayer,
//           domainLayer,
//           inputIndex
//         );

//         compiledLayers.push(compiledLayer);
//       }
//     }
//   } catch (Error) {
//     console.error(Error);
//     console.log("will resolve this symbol layer later");

//     // session.commandManager
//     //   .executeAndSkip(new RemoveLayer(session, domainLayer))
//     //   .catch(() => {
//     //     //
//     //   });
//     // const viewLayerJSON = cloneDeep(ViewDefinition.template);
//     // viewLayerJSON.template = domainLayer.toJS().template;
//     // const dummyDomainLayer = DomainLayerFactory.createDomainLayer(
//     //   viewLayerJSON
//     // );

//     // dummyDomainLayer.parent = domainLayer.parent;
//     // CreateCompiledLayer(
//     //   session,
//     //   dummyDomainLayer,
//     //   compiledParentLayer,
//     //   false,
//     //   inputIndex,
//     //   undefined,
//     //   "push",
//     //   false
//     // );

//     // createNestedLayers(
//     //   session,
//     //   dummyDomainLayer,
//     //   compiledParentLayer,
//     //   domainLayer as SymbolLayer,
//     //   domainLayer.findIndexInParent(),
//     //   "push",
//     //   false
//     // );

//     // domainLayer.domainCompiledRef = [];
//     // session.unresolvedSymbolInstances.push({
//     //   domainLayer,
//     //   compiledParentLayer,
//     //   dummyDomainLayer
//     // });
//   }

//   return compiledLayers;
// }
// function resolveLayer(
//   session: Session,
//   symbolFile: File,
//   compiledParentLayer: any,
//   domainLayer: any,
//   index: number
// ) {
//   const compiledLayer = createNestedLayers(
//     session,
//     symbolFile.layer,
//     compiledParentLayer,
//     domainLayer as SymbolLayer,
//     index
//   );
//   let renderCompiledLayer: RenderCompiledLayer =
//     compiledLayer.renderCompiledRef;

//   // // add ref
//   compiledLayer["domainRef"] = domainLayer;
//   renderCompiledLayer["domainCompiledRef"] = compiledLayer;

//   // add reverse ref
//   if (!domainLayer["domainCompiledRefs"]) {
//     domainLayer["domainCompiledRefs"] = [];
//   }

//   domainLayer["domainCompiledRefs"].push(compiledLayer);

//   return compiledLayer;
// }
// export function createNestedLayers(
//   session: Session,
//   layer: Layer,
//   parent: any,
//   symbolInstance: SymbolLayer,
//   index: number,
//   arrayOp: "unshift" | "push" = "push"
// ): any {
//   let centerWrapperDC = parent;
//   if (
//     parent &&
//     parent["type"] !== "file" &&
//     layer.template &&
//     (layer.template.centerHorizontal || layer.template.centerVertical)
//   ) {
//     const ViewDefinition = session.currentStage.canvas.getComponentDefinition(
//       "view"
//     );
//     const layerJSON = cloneDeep(ViewDefinition.template);
//     layerJSON.props.style = {
//       top: 0,
//       left: 0,
//       right: 0,
//       bottom: 0,
//       // backgroundColor: "red",
//       position: "absolute"
//     };
//     if (layer.template.centerVertical) {
//       layerJSON.props.style["justifyContent"] = "center";
//     }
//     if (layer.template.centerHorizontal) {
//       layerJSON.props.style["alignItems"] = "center";
//     }
//     const wrapperDomainLayer = DomainLayerFactory.createDomainLayer({
//       ...layerJSON,
//       children: []
//     });
//     centerWrapperDC = CreateCompiledLayer(
//       session,
//       wrapperDomainLayer,
//       parent,
//       false,
//       index,
//       undefined
//     );
//     //
//     SetAllPropsInDCAndRC(session, centerWrapperDC, layerJSON.props, undefined);
//     centerWrapperDC.domainRef = undefined;
//   }
//   const template = layer.template;

//   // console.log(layer.type, "layer type here");
//   if (layer.type === "symbol") {
//     const symbolFile: any = session.domain.getSymbolFileFromSymbolInstance(
//       layer
//     );
//     const compiledLayer = resolveLayer(
//       session,
//       symbolFile,
//       centerWrapperDC,
//       layer as SymbolLayer,
//       template && (template.centerHorizontal || template.centerVertical)
//         ? 0
//         : index
//     );

//     SetAllPropsInDCAndRC(session, compiledLayer, layer.props, symbolInstance);
//     return compiledLayer;
//   } else {
//     if (layer.parent.type === "text") {
//       return;
//     }

//     const layerFile = layer.getFile();

//     // if (layer.getFile() && layer.getFile().isSymbol()) {

//     // }
//     const compiledLayer = CreateCompiledLayer(
//       session,
//       layer,
//       centerWrapperDC,
//       false,
//       template && (template.centerHorizontal || template.centerVertical)
//         ? 0
//         : index,
//       symbolInstance
//     );

//     if (compiledLayer instanceof LiteralNode) {
//       return;
//     }

//     let scopeVariables = {};
//     if (session.selectedFile) {
//       scopeVariables = session.selectedFile.scopeVariables;
//       if (symbolInstance) {
//         scopeVariables = merge(
//           { ...scopeVariables },
//           { ...symbolInstance.scopeVariables }
//         );
//       }
//     }

//     console.log(scopeVariables, "scope scopeVariables");

//     // shallow false so that it won't change the references
//     const resolvedLayer = ResolveLayer(layer, scopeVariables, false);
//     if (compiledLayer) {
//       // used native forEach intentionally
//       resolvedLayer.children.forEach(
//         (childLayer: Layer, childIndex: number) => {
//           createNestedLayers(
//             session,
//             childLayer,
//             compiledLayer,
//             symbolInstance,
//             childIndex,
//             arrayOp
//           );
//         }
//       );
//     }
//     SetAllPropsInDCAndRC(
//       session,
//       compiledLayer,
//       resolvedLayer.props,
//       symbolInstance
//     );

//     if (resolvedLayer.type === "root") {
//       SetStyleAttributeInDCAndRC(session, compiledLayer, "flex", undefined);
//     }

//     return compiledLayer;
//   }
// }
