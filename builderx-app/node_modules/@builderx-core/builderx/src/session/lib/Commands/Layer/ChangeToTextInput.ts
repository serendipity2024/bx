import { ICommand, CommandManager } from "command-manager";
import { Session } from "../../../lib/models/Session";
import { Layer } from "domain-x";
import { replace, cloneDeep } from "lodash";
import { AddLayerService } from "../CommandServices/AddLayerService";
import RemoveLayerService from "../CommandServices/RemoveLayerService";
import SelectLayersService from "../CommandServices/SelectLayersService";

export default class ChangeToTextInput implements ICommand {
  displayName = "ChangeToTextInput";
  session: Session;
  domainLayer: Layer;
  domainParentLayer: Layer;
  commandManager: CommandManager;
  oldLayerJSON: any;
  newLayerJSON: any;
  makeEditable: boolean;
  domainLayerPath: string;
  domainParentLayerPath: string;
  constructor(session: Session, domainLayer: Layer, makeEditable: boolean) {
    this.session = session;
    this.domainLayer = domainLayer;
    this.makeEditable = makeEditable;
    this.commandManager = new CommandManager();
    this.domainParentLayer = this.domainLayer.parent;
    this.domainLayerPath = domainLayer.getFullPath();
    this.domainParentLayerPath = this.domainParentLayer.getFullPath();
    this.oldLayerJSON = this.domainLayer.toJS();
    this.newLayerJSON = cloneDeep(this.oldLayerJSON);
    delete this.newLayerJSON["styleName"];
  }
  execute() {
    // removeCenterWrapperService(this.session, this.domainLayer);
    if (!this.domainParentLayerPath) {
      return;
    }
    if (this.makeEditable) {
      const sceneLayer = this.session
        .getLayerFromLayerPath(this.domainLayerPath)
        .getBoundingClientRect();
      if (this.newLayerJSON["children"]) {
        this.newLayerJSON["children"][0]["value"] = replace(
          this.newLayerJSON["children"][0]["value"],
          new RegExp("\n", "g"),
          " "
        );
        this.newLayerJSON["children"][0]["value"] = replace(
          this.newLayerJSON["children"][0]["value"],
          new RegExp("\t", "g"),
          " "
        );

        this.newLayerJSON.props["placeholder"] = this.newLayerJSON[
          "children"
        ][0]["value"];
      } else {
        this.newLayerJSON.props["placeholder"] = "placeholder";
      }
      this.newLayerJSON["type"] = "textInput";
      this.newLayerJSON.props.style["width"] = sceneLayer["width"];
      this.newLayerJSON.props.style["height"] = sceneLayer["height"];
      this.newLayerJSON.import["layerName"] = "TextInput";
      this.newLayerJSON.import["asName"] = undefined;
      this.newLayerJSON["children"] = [];
    } else {
      this.newLayerJSON["children"][0] = {
        type: "literal",
        value: this.newLayerJSON.props.placeholder
          ? this.newLayerJSON.props.placeholder
          : "Text Added"
      };
      const style = this.newLayerJSON.props.style;
      delete this.newLayerJSON.props;
      this.newLayerJSON.props = { style };
      this.newLayerJSON["type"] = "text";
      this.newLayerJSON.import["layerName"] = "Text";
      this.newLayerJSON.import["asName"] = undefined;
    }

    const parentLayer = this.session.getLayerFromLayerPath(
      this.domainParentLayerPath
    );
    const layerIndex = parentLayer.children.indexOf(
      this.session.getLayerFromLayerPath(this.domainLayerPath)
    );
    RemoveLayerService(this.session, this.domainLayerPath);
    let newLayer = AddLayerService(
      this.session,
      this.domainParentLayerPath,
      this.newLayerJSON,
      layerIndex
    );
    SelectLayersService(this.session, [newLayer.getFullPath()]);
    this.session.drivers.analyticsService.addActivity(
      {
        name: `change.to.textInput`,
        category: "app/command"
      },
      true
    );
  }
  undo() {
    const parentLayer = this.session.getLayerFromLayerPath(
      this.domainParentLayerPath
    );
    const layerIndex = parentLayer.children.indexOf(
      this.session.getLayerFromLayerPath(this.domainLayerPath)
    );
    RemoveLayerService(this.session, this.domainLayerPath);
    let newLayer = AddLayerService(
      this.session,
      this.domainParentLayerPath,
      this.oldLayerJSON,
      layerIndex
    );
    SelectLayersService(this.session, [newLayer.getFullPath()]);
    this.newLayerJSON = cloneDeep(this.oldLayerJSON);
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.change.to.textInput`,
        category: "app/command"
      },
      true
    );
  }
  redo() {
    this.execute();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.change.to.textInput`,
        category: "app/command"
      },
      true
    );
  }
}
