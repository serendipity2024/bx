import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { DomainLayer } from "domain-x";
import { times } from "lodash";
import CommandUtils from "../Utils";
// import ResolveSymbolInstance, {
//   createNestedLayers
// } from "../CommandServices/ResolveSymbolnstance";

export default class SetRepetitions implements ICommand {
  displayName = "SetRepetitions";
  session: Session;
  layer: DomainLayer;
  repetitions: number;
  oldRepetitions: number;
  constructor(session: Session, layer: DomainLayer, repetitions: number) {
    this.session = session;
    this.layer = layer;
    this.repetitions = repetitions;
  }
  execute() {
    this.oldRepetitions = this.layer.template.repetitions;
    if (!this.oldRepetitions) {
      this.oldRepetitions = 0;
    }
    this.setRepetitionsAndCreateLayers(this.repetitions);
  }

  undo() {
    this.setRepetitionsAndCreateLayers(this.oldRepetitions);
  }
  redo() {
    this.setRepetitionsAndCreateLayers(this.repetitions);
  }

  private setRepetitionsAndCreateLayers(repetitions: number) {
    // this.layer.template.repetitions = repetitions;
    // const layerJson = this.layer.children[0].toJS();
    // if (this.layer.children[0] && this.layer.children[0].domainCompiledRefs) {
    //   this.layer.children[0].domainCompiledRefs.forEach(
    //     (domainCompiled: CompiledLayer<any>) => {
    //       domainCompiled.remove();
    //       domainCompiled.renderCompiledRef.remove();
    //     }
    //   );
    // }
    // this.layer.children[0].domainCompiledRefs = [];
    // layerJson.children = [];
    // times(repetitions, index => {
    //   if (this.layer.children[0] instanceof SymbolLayer) {
    //     ResolveSymbolInstance(
    //       this.session,
    //       this.layer.children[0],
    //       this.layer.domainCompiledRefs[0],
    //       index
    //     );
    //     SetAllPropsInDCAndRC(
    //       this.session,
    //       this.layer.children[0].domainCompiledRefs[index],
    //       layerJson.props
    //     );
    //     CommandUtils.setSymbolDescendantDimensionsInDCAndRC(
    //       this.session,
    //       this.layer.children[0].domainCompiledRefs[index]
    //     );
    //   } else {
    //     createNestedLayers(
    //       this.session,
    //       this.layer.children[0],
    //       this.layer.domainCompiledRefs[0],
    //       undefined as any,
    //       index
    //     );
    //   }
    // });
    // this.layer.template.emit("repetitions");
  }
}
