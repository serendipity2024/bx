import { ICommand } from "command-manager";
import { Session } from "../../../models/Session";
import { DomainLayer, Expression } from "domain-x";
import { forEach, set } from "lodash";
// import {  } from "../..";
import { SetAllPropsService } from "../../CommandServices/SetAllPropsService";
import RemoveLayerService from "../../CommandServices/RemoveLayerService";
import { cloneDeep } from "lodash";
import { AddLayerService } from "../../CommandServices/AddLayerService";
import SelectLayersService from "../../CommandServices/SelectLayersService";
import { ActivateFormControlService } from "../../CommandServices/ActivateFormControlService";
import { DeactivateFormControlService } from "../../CommandServices/DeactivateFormControlService";
import {
  SetScopeVariableMutator,
  RemoveScopeVariableMutator
} from "src/session/lib/Mutators";
// import { RemoveLayerMutator } from "../../../Mutators";

export default class SetOverride implements ICommand {
  displayName = "SetOverride";
  private session: Session;
  private overrideKey: string;
  private value: any;
  private domainParentLayerPath: any;
  private index: any;
  private oldValue: any;
  private propType?: any;
  private domainLayerPath: string;
  private activatedFormControl: boolean = false;

  constructor(
    session: Session,
    layer: DomainLayer,
    overrideKey: string,
    value: any,
    propType?: any
  ) {
    this.session = session;
    this.overrideKey = overrideKey;
    this.value = value;
    this.propType = propType;
    this.domainLayerPath = layer.getFullPath();
    this.domainParentLayerPath = layer.parent.getFullPath();
    this.index = layer.findIndexInParent();
  }

  setOverride(value: any) {
    const layer = this.session.getLayerFromLayerPath(this.domainLayerPath);
    if (value) {
      SetScopeVariableMutator(
        this.session,
        this.domainLayerPath,
        this.overrideKey,
        value
      );
      // set((layer as any).scopeVariables, [this.overrideKey], value);
    } else {
      RemoveScopeVariableMutator(
        this.session,
        this.domainLayerPath,
        this.overrideKey
      );
      // delete (layer as any).scopeVariables[this.overrideKey];
    }

    const layerJSON = cloneDeep(layer.toJS());
    RemoveLayerService(
      this.session,
      this.domainLayerPath,
      this.session.selectedFile.path
    );
    const doaminLayer = AddLayerService(
      this.session,
      this.domainParentLayerPath,
      layerJSON,
      this.index
    );

    SelectLayersService(this.session, [doaminLayer.getFullPath()]);
  }
  execute() {
    this.activatedFormControl = ActivateFormControlService(
      this.session,
      this.domainLayerPath,
      this.overrideKey
    );
    this.setOverride(this.value);
  }
  undo() {
    // if (this.activatedFormControl) {
    //   DeactivateFormControlService(
    //     this.session,
    //     this.domainLayerPath,
    //     this.overrideKey
    //   );
    // }
    this.setOverride(this.oldValue);
  }
  redo() {
    this.activatedFormControl = ActivateFormControlService(
      this.session,
      this.domainLayerPath,
      this.overrideKey
    );
    this.setOverride(this.value);
  }
}
