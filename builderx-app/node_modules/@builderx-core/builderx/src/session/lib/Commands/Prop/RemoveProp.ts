import { Layer as DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import { ICommand } from "command-manager";
import { get } from "lodash";
import { ResolveNode, getConditionalJSON } from "utils";
import { RemovePropMutator } from "../../Mutators";
import CreateDomainNode from "../Layer/CreateDomainNode";

export default class RemoveProp implements ICommand {
  displayName = "RemoveProp";
  private domainLayer: DomainLayer;
  private oldValue: any;
  private key: string;
  private domainLayerPath: string;
  private filePath: string;
  private session: Session;

  private currentRecordingConditions: { [key: string]: any };
  private currentScopeVariables: { [key: string]: any };

  constructor(session: Session, domainLayer: DomainLayer, key: string) {
    this.domainLayer = domainLayer;
    this.key = key;
    this.session = session;

    let file: any = this.domainLayer.getFile();

    this.domainLayerPath = this.domainLayer.getPath(undefined, true);
    this.filePath = file.path;
  }

  addConditionalNode(resolvedNode: any, parentNode: any, index: any) {
    const layerJSON = getConditionalJSON(
      this.currentRecordingConditions,
      this.currentScopeVariables, //
      null,
      resolvedNode,
      ""
    );

    this.session.commandManager.executeAndSkip(
      new CreateDomainNode(
        this.session,
        parentNode,
        index,
        layerJSON,
        index,
        false
      )
    );
    const propAttribute = get(this.domainLayer.props, this.key, undefined);

    let scopeVariables = {};
    let file = this.domainLayer.getFile();

    if (file) {
      scopeVariables = file.scopeVariables;
    }

    const node = ResolveNode(propAttribute, scopeVariables);
  }
  execute() {
    let scopeVariables = {};
    let file = this.domainLayer.getFile();
    if (file) {
      scopeVariables = file.scopeVariables;
    }
    RemovePropMutator(this.session, this.domainLayerPath, this.key);

    // TODO: get compiled prop value for domain compiled

    this.domainLayer.props.emit(this.key);
  }
  undo() {
    //
  }
  redo() {
    //
  }
}
