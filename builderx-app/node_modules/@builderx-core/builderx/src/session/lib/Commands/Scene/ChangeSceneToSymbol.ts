import { CommandManager, ICommand } from "command-manager";
import { Layer } from "domain-x";
import { get, sortBy, find, findIndex } from "lodash";
import { Session } from "../../models/Session";
import PlaceArtboardsToCenter from "./../Session/PlaceArtboardsToCenter";
import SelectFile from "./../Session/SelectFile";
import SelectLayers from "./../Session/SelectLayers";
import SelectRootLayer from "./../Session/SelectRootLayer";
import SetInitialScroll from "./../Session/SetInitialScroll";
import SetZoom from "./../Session/SetZoom";
import { setupScrollViewStage, traverseLayersDFS } from "./SceneUtils";
import { Utils } from "utils";
import SelectLayersService from "../CommandServices/SelectLayersService";

export default class ChangeSceneToSymbol implements ICommand {
  displayName = "ChangeSceneToSymbol";
  session: Session;
  fileName: string;
  previousCurrentLayer: Layer;
  prevStageId: string;
  fromInstance: boolean;
  private commandManager: CommandManager;
  constructor(
    session: Session,
    fileName: string,
    currentLayer: Layer | undefined,
    fromInstance: boolean = true
  ) {
    this.session = session;
    this.commandManager = new CommandManager();
    this.fileName = fileName;
    this.prevStageId = this.session.currentStage.id;
    this.previousCurrentLayer = get(
      this,
      "session.previousStageData.currentLayer",
      this.session.currentRootLayer
    );
    this.session.previousStageData.currentLayer = currentLayer;
    this.fromInstance = fromInstance;
  }
  execute() {
    if (!this.fromInstance) {
      if (this.prevStageId.includes("layer:")) {
        this.session.currentStage.domainCompiled.files.clear();
        // removeCurrentStageRef(this.session, this.session.currentRootLayer);
        // traverseLayersDFS(
        //   this.session.currentStage.renderCompiled,
        //   (childLayer: any) => {
        //     if (childLayer.remove && childLayer.parent) {
        //       childLayer.remove();
        //     }
        //   }
        // );
        // this.session.currentStage.renderCompiled.children.length = 0;
      }
      if (this.prevStageId === "artboard" && this.session.selectedFile) {
        this.session.previousStageData.currentFile = this.session.selectedFile;
        this.session.previousStageData.layerSelectedInArtboard = this.session.getLayersFromSelectedLayerCollection()[0];
      }
    }
    this.setupSymbolStage(this.fileName);
    const currentScroll = this.session.currentStage.tools.currentScroll;
    this.commandManager.execute(
      new PlaceArtboardsToCenter(this.session, false)
    );
    // console.log("*** initialScroll", currentScroll);
    this.session.commandManager.executeAndSkip(
      new SetInitialScroll(this.session, currentScroll)
    );
    // this.commandManager.execute(
    //   new SetInitialScroll(this.session, { x: 0.5, y: 0.5 })
    // );

    // this.commandManager.execute(new SetZoom(this.session, 1));
    // const rcFile = this.session.currentStage.renderCompiled.children[0];

    this.commandManager.execute(new SelectRootLayer(this.session));
  }
  undo() {
    if (
      this.session.previousStageData &&
      this.session.previousStageData.currentFile
    ) {
      this.commandManager.executeAndSkip(
        new SelectFile(this.session, this.session.previousStageData.currentFile)
      );
    }
    this.setupSymbolStage(this.prevStageId);
    if (this.prevStageId.includes("layer:")) {
      let dims = Utils.getLayerSceneDimensions(this.previousCurrentLayer);
      setupScrollViewStage(this.session, this.previousCurrentLayer, dims);
      this.session.commandManager.executeAndSkip(
        new PlaceArtboardsToCenter(this.session)
      );
      this.session.commandManager.executeAndSkip(
        new SetInitialScroll(this.session, { x: 0.5, y: 0.5 })
      );
      this.session.commandManager.executeAndSkip(new SetZoom(this.session, 1));
      // this.session.currentStage.renderCompiled.children[0].traverseLayers(
      //   (childLayer: any) => {
      //     childLayer.setPaperNode();
      //   }
      // );
    }
    if (
      this.prevStageId === "artboard" &&
      this.session.previousStageData &&
      this.session.previousStageData.layerSelectedInArtboard
    ) {
      SelectLayersService(
        this.session,
        [this.session.previousStageData.layerSelectedInArtboard]
        // undefined,
        // true
      );
      this.session.previousStageData.layerSelectedInArtboard = undefined;
    } else {
      this.session.commandManager.executeAndSkip(
        new SelectRootLayer(this.session)
      );
    }
    this.commandManager.undoAll();
  }
  redo() {
    this.execute();
  }
  private setupSymbolStage(fileName: string) {
    this.session.setCurrentStage(fileName);
    const symbolFile = this.session.domain.files.get(fileName);
    if (symbolFile) {
      this.commandManager.executeAndSkip(
        new SelectFile(this.session, symbolFile)
      );
      // symbolFile.layer.domainCompiledRef.forEach(domainCompiledLayer => {
      //   domainCompiledLayer.traverseNonSymbolLayers(childLayer => {

      //   })
      // })
      // symbolFile.layer.traverseLayers(child => {
      //   const domainCompiledLayers = child.domainCompiledRefs;

      //   const found = findIndex(domainCompiledLayers, (obj: any) => {
      //     const file = obj.getFile();
      //     if (file.path) {
      //       return symbolFile.path === file.path;
      //     }
      //     return false;
      //   });

      //   if (found > -1) {
      //     const foundRef = child.domainCompiledRefs[found];
      //     child.domainCompiledRefs.splice(found, 1);
      //     child.domainCompiledRefs.unshift(foundRef);
      //   }
      // });
    }

    this.session.emit("currentStage");
    // this.session.currentStage.renderCompiled.emit("children");
  }
}
