import { Layer as DomainLayer } from "../../../../domain-x/lib";
import { isNil, cloneDeep } from "lodash";
import { YogaDimensions } from "../../models/types";

export default function resetAutoAndFill(
  domainLayer: DomainLayer,
  property: "width" | "height",
  dimensions: YogaDimensions
) {
  let oldStyle = cloneDeep(domainLayer.props.style.toJS());
  let newStyle = { ...oldStyle };
  const position = domainLayer.props.getResolvedStyleAttribute("position");
  if (position === "absolute") {
    if (property === "width") {
      newStyle.left = domainLayer.props.getResolvedStyleAttribute("left");
      newStyle.right = domainLayer.props.getResolvedStyleAttribute("right");
      if (!isNil(newStyle.left) && !isNil(newStyle.right)) {
        delete newStyle.right;
      }
      newStyle.width = dimensions.width;
    } else if (property === "height") {
      newStyle.top = domainLayer.props.getResolvedStyleAttribute("top");
      newStyle.bottom = domainLayer.props.getResolvedStyleAttribute("bottom");
      if (!isNil(newStyle.top) && !isNil(newStyle.bottom)) {
        delete newStyle.bottom;
      }
      newStyle.height = dimensions.height;
    }
  } else {
    const flexDirection = domainLayer.getParentLayerFlexDirection();
    if (
      (property === "width" && flexDirection === "row") ||
      (property === "height" && flexDirection !== "row")
    ) {
      delete newStyle.flex;
      newStyle[property] = dimensions[property];
    } else {
      const alignSelf = domainLayer.props.getResolvedStyleAttribute(
        "alignSelf"
      );
      if (alignSelf === "stretch") {
        delete newStyle.alignSelf;
      }
      newStyle[property] = dimensions[property];
    }
  }

  return {
    oldStyle,
    newStyle
  };
}
