import { ICommand } from "command-manager";
import FileDefinition from "../../componentJSON/File";
import { cloneDeep } from "lodash";
import { Session } from "../../models/Session";
import PlaceArtboardsToCenter from "../CommandServices/PlaceArtboardsToCenter";
import RemoveArtboardService from "../CommandServices/RemoveArtboardService";
import AddArtboardService from "../CommandServices/AddArtboardService";
import SetResizerVisibilityMutator from "../../Mutators/SetResizerVisibilityMutator";
import GenerateLayerPreview from "../CommandServices/GenerateLayerPreview";
export default class AddNewArtboard implements ICommand {
  displayName = "AddNewArtboard";
  private fileJSON: { [key: string]: any };
  private session: Session;
  private fileId: string;
  private shouldPlaceArtboard: boolean = true;
  private initial: boolean = false;
  private hasPosition: boolean = false;
  // private currentRecordingConditions: { [key: string]: any };
  // private currentScopeVariables: { [key: string]: any };

  constructor(
    session: Session,
    fileJSON: { [key: string]: any } | undefined,
    type: "artboard" | "symbol",
    shouldPlaceArtboard: boolean = true,
    initial: boolean = false
  ) {
    if (fileJSON) {
      this.fileJSON = cloneDeep(fileJSON);
      this.hasPosition = true;
    } else {
      this.fileJSON = cloneDeep(FileDefinition.template);
    }
    this.session = session;
    this.fileJSON.path =
      fileJSON && fileJSON.path ? fileJSON.path : session.getNewFilePath(type);
    this.fileId = this.fileJSON.path;
    this.shouldPlaceArtboard = shouldPlaceArtboard;
    this.initial = initial;
  }
  execute() {
    if (!this.hasPosition) {
      const position = this.session.getNewArtboardPosition();
      this.fileJSON.props.style.left = position.fileLeft;
      this.fileJSON.props.style.top = position.fileTop;
    }
    this.addArtboardOp();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `add.new.artboard`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  undo() {
    RemoveArtboardService(this.session, this.fileId, this.shouldPlaceArtboard);
    if (this.shouldPlaceArtboard) {
      PlaceArtboardsToCenter(this.session);
    }

    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.add.new.artboard`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  redo() {
    this.addArtboardOp();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.add.new.artboard`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  addArtboardOp() {
    // call mutator to save domain and domainCompiledData
    const artboard = AddArtboardService(this.session, this.fileJSON);
    if (this.session.showCodeEditor) {
      GenerateLayerPreview(this.session, [
        this.session.currentRootLayer.getFullPath()
      ]);
    }
    SetResizerVisibilityMutator(this.session, artboard.path, "show");
  }
}
