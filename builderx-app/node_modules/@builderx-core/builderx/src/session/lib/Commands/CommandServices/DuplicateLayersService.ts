import { forEach } from "lodash";
import { Layer } from "domain-x";
import { Utils } from "utils";
import { Session } from "../../models/Session";
import { AddLayerService } from "./AddLayerService";
import SelectLayersService from "./SelectLayersService";
import createService from ".";
const DuplicateLayersService = createService(
  "DuplicateLayers",
  (session: Session, oldLayersPath: Array<string>) => {
    if (oldLayersPath.length === 0) {
      return;
    }
    const parentLayer = session.getLayerFromLayerPath(oldLayersPath[0]).parent;
    if (!(parentLayer instanceof Layer)) {
      return;
    }
    let newLayersPath: Array<string> = [];
    forEach(oldLayersPath, (layerPath: string) => {
      const layerIsGroup = session.getLayerFromLayerPath(layerPath).isGroup;
      const domainLayer = session.getLayerFromLayerPath(layerPath);
      const layerJSON = domainLayer.toJS();
      Utils.traverseJSON(layerJSON, (child: any) => {
        delete child["styleName"];
      });

      let layer = AddLayerService(
        session,
        parentLayer.getFullPath(),
        layerJSON,
        undefined,
        layerIsGroup,
        true
      );
      newLayersPath.push(layer.getFullPath());
    });
    SelectLayersService(session, newLayersPath);
    return newLayersPath;
  }
);

export default DuplicateLayersService;
