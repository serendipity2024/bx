import { Session } from "../../models/Session";
import { File as DomainFile } from "domain-x";
import { ICommand } from "command-manager";
import DuplicateRulers from "../../Mutators/DuplicateRulers";
import { isEmpty, get } from "lodash";
import AddArtboardService from "../CommandServices/AddArtboardService";
import RemoveArtboardService from "../CommandServices/RemoveArtboardService";

export default class DuplicateArtboard implements ICommand {
  displayName = "DuplicateArtboard";
  file: DomainFile;
  session: Session;
  fileId: string;
  fileJSON: any;
  constructor(session: Session, file: DomainFile) {
    this.file = file;
    this.session = session;
  }
  execute() {
    this.fileJSON = this.file.toJS();
    const position = this.session.getNewArtboardPosition();
    let style = this.fileJSON.props.style;
    style["left"] = position.fileLeft;
    style["top"] = position.fileTop;
    const splittedPath = this.fileJSON.path.split("/");
    const splittedArr = !isEmpty(splittedPath)
      ? splittedPath[splittedPath.length - 1]
      : "";
    const oldName = !isEmpty(splittedArr) ? splittedArr.split(".") : [""];
    this.fileJSON.path = this.session.getNewFilePath("artboard", oldName[0]);

    this.duplicateOp();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `add.new.artboard.from.button`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  undo() {
    RemoveArtboardService(this.session, this.fileId, true);
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.add.new.artboard.from.button`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  redo() {
    this.duplicateOp();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.add.new.artboard.from.button`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  duplicateOp() {
    const artboard = AddArtboardService(this.session, this.fileJSON);
    this.fileId = artboard.getFullPath();
    let originalFilePath = get(this.file, "path");
    let newFilePath = get(this.session.selectedFile, "path");
    DuplicateRulers(this.session, originalFilePath, newFilePath);
  }
}
