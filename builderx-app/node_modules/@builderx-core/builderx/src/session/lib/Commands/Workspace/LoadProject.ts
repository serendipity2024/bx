import { ICommand } from "command-manager";
import { forEach, get } from "lodash";
import { action } from "model";
import { Session, applyPatchInBuilderX } from "../../models/Session";
import AddNewArtboard from "../File/AddNewArtboard";
import SetPageRoute from "../Router/SetPageRoute";
import PlaceArtboardsToCenterService from "../CommandServices/PlaceArtboardsToCenter";
import SelectRootLayerService from "../CommandServices/SelectRootLayer";
import SetInitialScroll from "../Session/SetInitialScroll";
import SetWarning from "./SetWarning";
import LoadFiles from "../CommandServices/LoadFilesService";
import { ResponseFile } from "common-interfaces";
import SetFileCode from "../CommandServices/SetFileCode";
import { SetLastEditedBy, SetCurrentStage } from "..";
import { Alert } from "dialog-x";
import urljoin from "url-join";

export default class LoadProject implements ICommand {
  displayName = "LoadProject";
  private session: Session;

  private projectId: string;

  constructor(session: Session) {
    this.session = session;
  }
  cloneProject = () => {
    // this.session.apiSdk.project
    //   .clone(this.session.project.projectId)
    //   .then((resp: any) => {
    //     if (resp.data.id) {
    //       window.location.href = `${this.session.envConstants.APP_URL}/${resp.data.id}`;
    //       window.location.href = `http://localhost:3000/app/${resp.data.id}`;
    //     }
    //   })
    //   .catch((error: any) => {
    //     this.session.notificationManager.notifyError(
    //       "",
    //       "There is some issue in cloning this template. Please try again."
    //     );
    //     console.log("error in cloning project", error);
    //   });
  };
  execute() {
    // console.trace();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `open.existing.project`,
        path: "",
        category: "app/command"
      },
      true
    );
    this.session.drivers.offScreenRendererService.showOffscreenLoader(
      "Loading...",
      "Please Wait"
    );

    this.session.globalStateService.setDirty = false;

    if (this.projectId) {
      this.session.setShouldUpdateCode(false);
      // this.session.setProjectId(this.projectId);
      // @ts-ignore
      // const projectDetails = await this.session.drivers.fileService.getProjectDetails(
      //   this.session.connectionId
      // );
      // const cloneProject = localStorage.getItem("clone-project");
      // if (cloneProject && projectDetails.sample) {
      //   localStorage.removeItem("clone-project");
      //   try {
      //     this.session.cloneProject();
      //   } catch (error) {
      //     this.session.notificationManager.notifyError(
      //       "",
      //       "There is some issue in cloning this template. Please try again."
      //     );
      //   }
      // }
      // this.session.readonly = !projectDetails.isEditable;
      // this.session.project.setShareabilityData(
      //   projectDetails.project_shareability
      // );
      // this.session.project.setIsSample(
      //   !projectDetails.isEditable && projectDetails.sample
      // );
      // this.session.project.setTeamId(projectDetails.team.id);
      // this.session.project.setProjectName(projectDetails.name);
      // this.session.project.isLocked = projectDetails.isLocked;
      // this.session.project.setProjectAccess(projectDetails.access);
      // this.session.setEditorMode(
      //   projectDetails.sample
      //     ? { mode: "design_code" }
      //     : projectDetails.access
      // );
      // if (projectDetails.session) {
      //   this.session.commandManager.executeAndSkip(
      //     new SetLastEditedBy(this.session, projectDetails.session)
      //   );
      // }
      // if (projectDetails.isLocked) {
      //   this.session.readonly = true;
      // }
      // this.session.project.setSubscription(
      //   get(projectDetails, "team.isSubscribed", false),
      //   get(projectDetails, "team.days_remaining")
      // );
      if (
        !this.session.project.isSubscribed &&
        this.session.project.daysRemaining < 1
      ) {
        action(() => {
          this.session.commandManager.executeAndSkip(
            new SetPageRoute(this.session, "blank")
          );
          Alert(
            "Trial Expired!",
            "Your subscription of BuilderX is not activated and its trial period has expired. Please get a licence.",
            true,
            "Go to Pricing"
          ).then(() => {
            window.open(
              urljoin(this.session.envConstants.WEBSITE_URL, "pricing")
            );
          });
        });
        return;
      }

      // const { filesJSON, unresolvedFilesPath }: any = await this.openProject(
      //   this.projectId
      // );

      // LoadFiles(this.session, filesJSON, "ExistingProject");
      this.session.setShouldUpdateCode(true);
      if (this.session.showCodeEditor) {
        SetFileCode(this.session);
      }
      // const len = unresolvedFilesPath.length;
      // if (len > 0) {
      //   this.session.notificationManager.notifyError(
      //     unresolvedFilesPath,
      //     `Unable to load some file${len > 1 ? "s" : ""}`
      //   );
      // }
    }
    action(() => {
      // if (this.session.getAllFileNames().artboards.length === 0) {
      //   this.session.commandManager.executeAndSkip(
      //     new AddNewArtboard(this.session, undefined, "artboard")
      //   );
      // }

      SelectRootLayerService(this.session);
      this.session.commandManager.executeAndSkip(
        new SetWarning(
          this.session,
          this.session.project.missingFonts.length > 0 || !this.session.fontUrl
        )
      );
      PlaceArtboardsToCenterService(this.session, true);
      this.session.commandManager.executeAndSkip(
        new SetInitialScroll(this.session, {
          x: 0.5,
          y: 0.5
        })
      );

      this.session.commandManager.executeAndSkip(
        new SetCurrentStage(this.session, "artboard")
      );

      this.session.commandManager.executeAndSkip(
        new SetPageRoute(this.session, "workspace")
      );

      this.session.dirtyFiles = [];
      this.session.emit("currentStage");
      this.session.emit("readonly");
      this.session.emit("projectLoaded");
    });

    if (this.session.drivers.analyticsService.init) {
      this.session.drivers.analyticsService.init();
    }
    this.session.globalStateService.setDirty = true;
  }
  undo() {
    //
  }
  redo() {
    //
  }

  private async openProject(projectId: string) {
    let files: ResponseFile[];
    let unresolvedFilesPath: string[] = [];
    let filesJSON: { artboards: any[]; symbols: any[]; assets: any[] } = {
      artboards: [],
      symbols: [],
      assets: []
    };
    try {
      files = await this.session.drivers.fileService.readFolder(projectId);
      const { symbols, artboards, assets } = this.filterFiles(files);
      forEach(symbols, (file: ResponseFile, index: number) => {
        if (file.content) {
          let fileJSON;
          try {
            fileJSON = JSON.parse(file.content);
          } catch (err) {
            console.log(err);
            return;
            // fileJSON = this.getFileJSONFromAST(file);
          }

          fileJSON.dbFileId = file.id;
          if (fileJSON) {
            filesJSON.symbols.push(fileJSON);
          } else {
            console.error(`Unable to process ${file.path}`);
          }
        }
      });
      forEach(artboards, (file: ResponseFile, index: number) => {
        if (file.content) {
          let fileJSON;
          try {
            fileJSON = JSON.parse(file.content);
          } catch (err) {
            return;
            // fileJSON = this.getFileJSONFromAST(file);
          }

          fileJSON.dbFileId = file.id;
          if (fileJSON) {
            filesJSON.artboards.push(fileJSON);
          } else {
            console.error(`Unable to process ${file.path}`);
          }
        }
      });
      filesJSON.assets = assets;
      return { filesJSON, unresolvedFilesPath: [] };
    } catch (error) {
      console.error("Error in reading files", error);
      return { filesJSON, unresolvedFilesPath: [] };
    }
  }
  filterFiles(files: ResponseFile[]) {
    let symbols: any[] = [];
    let artboards: any[] = [];
    let assets: any[] = [];
    forEach(files, (file: ResponseFile) => {
      if (
        file.path.indexOf("/symbols") !== -1 ||
        file.path.indexOf("/components") !== -1
      ) {
        symbols.push(file);
      } else if (file.path.indexOf("/screens") !== -1) {
        artboards.push(file);
      } else if (file.path.indexOf("/assets") !== -1) {
        assets.push(file);
      }
    });
    return { artboards, symbols, assets };
  }

  getFileJSONFromAST(file: ResponseFile) {
    // try {
    //   this.ast.fileOperations.openFile({
    //     content: file.content,
    //     path: file.path,
    //     id: file.id,
    //     stats: []
    //   });
    //   return this.ast.fileOperations.getFileJSON(file.path);
    // } catch (err) {
    //   console.log(err);
    //   return undefined;
    // }
  }
}
