import { Layer as DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import { ICommand, CommandManager } from "command-manager";
// import { YogaDimensions } from "../../models/types";
// import SetStyleAttribute from "../Style/SetStyleAttribute";
// import RemoveStyleAttribute from "../Style/RemoveStyleAttribute";
// import CommandUtils from "../Utils";
import ChangeToAbsoluteService from "../CommandServices/ChangeToAbsolute";
import { SetAllStyleService } from "../CommandServices/SetAllStyleService";
import ResetStyleService from "../CommandServices/ResetStyleService";
import ChangeToFlex from "../CommandServices/ChangeToFlex";
import CreateGroupService from "../CommandServices/CreateGroup";
import { forEach } from "lodash";

const styleAttributesToRemove = [
  "minWidth",
  "minHeight",
  "margin",
  "marginTop",
  "marginRight",
  "marginLeft",
  "marginBottom",
  "padding",
  "paddingTop",
  "paddingRight",
  "paddingLeft",
  "paddingBottom"
];
export default class ChangeToAbsolute implements ICommand {
  displayName = "ChangeToAbsolute";
  private domainLayerPath: string;
  private session: Session;
  private ungroup: boolean;
  private oldStyles: any = {};
  private commandManager: CommandManager;
  private domainLayerChildrenPaths: Array<string> = [];

  constructor(
    session: Session,
    domainLayer: DomainLayer,
    ungroup: boolean = true
  ) {
    this.session = session;
    this.commandManager = new CommandManager();
    this.ungroup = ungroup;

    const layerPath = domainLayer.getFullPath();
    this.oldStyles[layerPath] = domainLayer.props.style.toJS();
    domainLayer.children.forEach((domainLayerChild: DomainLayer) => {
      const childLayerPath = domainLayerChild.getFullPath();
      this.domainLayerChildrenPaths.push(childLayerPath);
      this.oldStyles[childLayerPath] = domainLayerChild.props.style.toJS();
    });
    this.domainLayerPath = domainLayer.getFullPath();
  }
  execute() {
    const layers = ChangeToAbsoluteService(
      this.session,
      this.domainLayerPath,
      this.ungroup
    );

    this.domainLayerChildrenPaths = [];

    if (layers) {
      forEach(layers, layer => {
        const layerPath = layer.getFullPath();
        this.domainLayerChildrenPaths.push(layerPath);
        // this.oldStyles[layerPath] = layer.props.style.toJS();
      });
    }
    // this.domainLayer.children.forEach((domainLayerChild: DomainLayer) => {
    //   const layerPath = domainLayerChild.getFullPath();
    //   this.domainLayerChildrenPaths.push(layerPath);
    //   this.oldStyles[layerPath] = domainLayerChild.props.style.toJS();
    // });
  }

  private getWrapperLayer() {
    if (!this.ungroup && this.domainLayerChildrenPaths.length === 1) {
      return this.session.getLayerFromLayerPath(
        this.domainLayerChildrenPaths[0]
      );
    }

    const wrapperLayer = CreateGroupService(
      this.session,
      this.domainLayerChildrenPaths
    );

    // let wrappedParent: DomainLayer = get(this.selectedLayers, "0.parent");

    // this.wrapperLayerPath = wrapperLayer.getFullPath();
    return wrapperLayer;
  }

  undo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.change.to.absolute`,
        path: "",
        category: "app/command"
      },
      true
    );

    // if (this.ungroup) {
    //   const wrapperLayer = CreateGroupService(
    //     this.session,
    //     this.selectedLayersPaths
    //   );
    //   ChangeToFlex(this.session, this.domainLayerPath);

    // }

    const domainLayer = this.session.getLayerFromLayerPath(
      this.domainLayerPath
    );
    let wrapperLayer = domainLayer;
    if (this.domainLayerChildrenPaths.length > 0) {
      wrapperLayer = this.getWrapperLayer();
    }

    ChangeToFlex(this.session, wrapperLayer.getFullPath());

    ResetStyleService(this.session, wrapperLayer.getFullPath());
    SetAllStyleService(
      this.session,
      wrapperLayer.getFullPath(),
      this.oldStyles[wrapperLayer.getFullPath()]
    );

    wrapperLayer.children.forEach((child: any) => {
      const layerPath = child.getFullPath();
      ResetStyleService(this.session, layerPath);
      SetAllStyleService(this.session, layerPath, this.oldStyles[layerPath]);
      const selectedLayer = this.session.getLayerFromLayerPath(layerPath);

      if (selectedLayer) {
        selectedLayer.children.forEach((selectedLayerChild: DomainLayer) => {
          ResetStyleService(this.session, selectedLayerChild.getFullPath());
          SetAllStyleService(
            this.session,
            selectedLayerChild.getFullPath(),
            this.oldStyles[selectedLayerChild.getFullPath()]
          );
        });
      }
    });

    // SetStyleAttributeMutator(
    //   this.session,
    //   wrapperLayer.getFullPath(),
    //   "flexDirection",
    //   "row"
    // );

    // if (stack) {
    //   RemoveStyleAttributeMutator(
    //     this.session,
    //     wrapperLayer.getFullPath(),
    //     "justifyContent"
    //   );
    // } else {
    //   SetStyleAttributeMutator(
    //     this.session,
    //     wrapperLayer.getFullPath(),
    //     "justifyContent",
    //     "space-between"
    //   );
    // }

    // SelectLayersService(this.session, [wrapperLayer.getFullPath()]);

    // ChangeToFlex(this.session, this.domainLayerPath);

    // ResetStyleService(this.session, this.domainLayer.getFullPath());
    // SetAllStyleService(
    //   this.session,
    //   this.domainLayer.getFullPath(),
    //   this.oldStyles[this.domainLayer.getFullPath()]
    // );
    // this.domainLayer.children.forEach((domainLayerChild: DomainLayer) => {
    //   ResetStyleService(this.session, domainLayerChild.getFullPath());
    //   SetAllStyleService(
    //     this.session,
    //     domainLayerChild.getFullPath(),
    //     this.oldStyles[domainLayerChild.getFullPath()]
    //   );
    // });
  }
  redo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.change.to.absolute`,
        path: "",
        category: "app/command"
      },
      true
    );
    ChangeToAbsoluteService(this.session, this.domainLayerPath, this.ungroup);
  }
  // private setStyle(layer: DomainLayer, layout: YogaDimensions) {
  //   this.commandManager.execute(
  //     new SetStyleAttribute(this.session, layer, "position", "absolute")
  //   );
  //   this.commandManager.execute(
  //     new SetStyleAttribute(this.session, layer, "top", layout.top)
  //   );
  //   this.commandManager.execute(
  //     new SetStyleAttribute(this.session, layer, "left", layout.left)
  //   );

  //   if (
  //     layer.import.layerName !== "Switch" &&
  //     layer.import.layerName !== "ActivityIndicator"
  //   ) {
  //     this.commandManager.execute(
  //       new SetStyleAttribute(this.session, layer, "height", layout.height)
  //     );
  //     this.commandManager.execute(
  //       new SetStyleAttribute(this.session, layer, "width", layout.width)
  //     );
  //   }

  //   styleAttributesToRemove.forEach((property: string) => {
  //     this.commandManager.execute(
  //       new RemoveStyleAttribute(this.session, layer, property)
  //     );
  //   });
  // }
}
