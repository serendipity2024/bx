import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { Layer } from "domain-x";
import SetLayerAspectRatioMutator from "../../Mutators/SetLayerAspectRatioMutator";
import { round } from "lodash";

export default class LockAspectRatio implements ICommand {
  displayName = "LockAspectRatio";
  private session: Session;
  private layersPath: Array<string> = [];
  constructor(session: Session, layers: Array<Layer>) {
    this.session = session;
    layers.forEach((layer: Layer) => {
      this.layersPath.push(layer.getFullPath());
    });
  }
  execute() {
    this.layersPath.forEach((layerPath: string) => {
      const layer = this.session.getLayerFromLayerPath(layerPath);
      let bounds = layer.getBoundingClientRect();
      SetLayerAspectRatioMutator(
        this.session,
        layerPath,
        round(bounds.width / bounds.height, 2)
      );
    });
    this.session.drivers.analyticsService.addActivity(
      {
        name: `lock.layer.aspect.ratio`,
        category: "app/command"
      },
      true
    );
  }
  undo() {
    this.layersPath.forEach((layerPath: string) => {
      SetLayerAspectRatioMutator(this.session, layerPath, undefined);
    });
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.lock.layer.aspect.ratio`,
        category: "app/command"
      },
      true
    );
  }
  redo() {
    this.layersPath.forEach((layerPath: string) => {
      const layer = this.session.getLayerFromLayerPath(layerPath);
      let bounds = layer.getBoundingClientRect();
      SetLayerAspectRatioMutator(
        this.session,
        layerPath,
        round(bounds.width / bounds.height, 2)
      );
    });
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.lock.layer.aspect.ratio`,
        category: "app/command"
      },
      true
    );
  }
}
