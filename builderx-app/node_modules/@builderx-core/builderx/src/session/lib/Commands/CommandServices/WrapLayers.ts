import { Layer as DomainLayer } from "domain-x";
import { cloneDeep, forEach, reverse, sortBy, isNil } from "lodash";
import { Session } from "../../models/Session";
import { AddLayerService } from "./AddLayerService";
import MoveLayerService from "./MoveLayerService";
import createService from ".";
import SetLayerIsGroupMutator from "../../Mutators/SetLayerIsGroupMutator";

const WrapLayers = createService(
  "WrapLayers",
  (session: Session, domainLayers: Array<DomainLayer>, layerJSON?: any) => {
    let domainParentLayer = domainLayers[0].parent as DomainLayer;
    if (!layerJSON) {
      const ViewDefinition = session.currentStage.canvas.getComponentDefinition(
        "view"
      );
      const boundingBox = session.getBoundingBox(domainLayers, true);
      layerJSON = cloneDeep(ViewDefinition.template);
      let layout = layerJSON.layout;
      let style = layerJSON.style;
      layout["top"] =
        boundingBox.y - domainParentLayer.getOwnCanvasRef().getBorderTop();
      layout["left"] =
        boundingBox.x - domainParentLayer.getOwnCanvasRef().getBorderLeft();
      layout["width"] = boundingBox.width;
      layout["height"] = boundingBox.height;
      style["backgroundColor"] = undefined;

      layerJSON.props.style = { ...layout };
    }

    let firstLayerIndex: number | undefined = undefined;
    const sortedLayers = reverse(
      sortBy(domainLayers, (layer: any) => {
        const index = layer.findIndexInParent();
        if (firstLayerIndex === undefined || firstLayerIndex > index) {
          firstLayerIndex = index;
        }
        return index;
      })
    );
    const domainWrapperLayer = AddLayerService(
      session,
      domainParentLayer.getFullPath(),
      layerJSON,
      !isNil(firstLayerIndex) ? firstLayerIndex : undefined,
      true,
      true
    );
    // domainWrapperLayer.setIsGroup();
    SetLayerIsGroupMutator(session, domainWrapperLayer.getFullPath());
    // sort layer ids in reverse order

    let fromParentPath = domainParentLayer.getPath(undefined, true);
    forEach(sortedLayers, (layer: DomainLayer, index: number) => {
      let indexInParent = layer.findIndexInParent();
      const toParentPath = domainWrapperLayer.getPath(undefined, true);
      MoveLayerService(session, fromParentPath, toParentPath, indexInParent, 0);
    });

    fromParentPath = domainParentLayer.getPath(undefined, true);
    return domainWrapperLayer;
  }
);
export default WrapLayers;
