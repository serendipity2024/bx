import { Layer as DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import { ICommand, CommandManager } from "command-manager";
import SetStyleAttribute from "../Style/SetStyleAttribute";
import { IDelta } from "common-interfaces";
import { MouseOpInitialDims } from "../../models/types";
import { isNil } from "lodash";
import CommandUtils from "../Utils";

export default class DragLayout implements ICommand {
  displayName = "DragLayout";
  private domainLayer: DomainLayer;
  private session: Session;
  private commandManager: CommandManager;
  private payload: any;
  private handle: any;
  private startDims: MouseOpInitialDims;
  private layoutElementArray: any;
  constructor(
    session: Session,
    domainLayer: DomainLayer,
    payload: any,
    handle: string,
    startDims: MouseOpInitialDims,
    layoutElementArray: any
  ) {
    this.commandManager = new CommandManager();
    this.session = session;
    this.domainLayer = domainLayer;
    this.payload = payload;
    this.handle = handle;
    this.startDims = startDims; // width height of the layer on drag start
    this.layoutElementArray = layoutElementArray;
  }
  execute() {
    let deltaX: number = this.payload.deltaX;
    let deltaY: number = this.payload.deltaY;

    const originalDelta: IDelta = { x: deltaX, y: deltaY };

    let totalFlex = 0;

    let deltaFactor = this.getDeltaFactor(
      this.domainLayer,
      originalDelta,
      this.handle
    );

    const selectedLayerFlex = this.startDims.flex;
    // console.log(
    //   "hello 111,  222",
    //   selectedLayerFlex,
    //   selectedLayerFlex,
    //   this.layoutElementArray
    // );

    if (!selectedLayerFlex) {
      this.setLayoutChildSize(this.domainLayer, deltaFactor);
    } else {
      // console.log(this.layoutElementArray, "hello 1111");
      const childrenLength = this.layoutElementArray.length;
      this.layoutElementArray.forEach((child: any, index: number) => {
        // console.log(
        //   selectedLayerFlex,
        //   deltaFactor,
        //   "hello 123123123 flex flex"
        // );

        let expectedFlex;
        if (child.domainLayer === this.domainLayer) {
          expectedFlex = selectedLayerFlex + deltaFactor;
        } else {
          expectedFlex = child.startFlex - deltaFactor / (childrenLength - 1);
          // expectedFlex =
          //   (1 - (child.startFlex + deltaFactor)) / (childrenLength - 1);
        }

        // if (index === childrenLength - 1) {
        //   expectedFlex = 1 - totalFlex;
        // }
        expectedFlex = +expectedFlex;
        // console.log("hello 111, ", selectedLayerFlex, expectedFlex);

        if (!isNil(expectedFlex)) {
          this.commandManager.execute(
            new SetStyleAttribute(
              this.session,
              child.domainLayer,
              "flex",
              expectedFlex
            )
          );
          totalFlex = expectedFlex + totalFlex;
        }
      });
    }
    // if (!this.session.currentStage.tools.resizer.dragging) {
    //   // CommandUtils.setDimensionsForChildren(
    //   //   this.session,
    //   //   this.domainLayer.parent as DomainLayer,
    //   //   "flex"
    //   // );
    // }
  }

  undo() {
    this.commandManager.undoAll();
  }
  redo() {
    this.commandManager.redoAll();
  }
  private setLayoutChildSize(layer: DomainLayer, deltaFactor: any) {
    const parentFlexDirection = layer.getParentLayerFlexDirection();
    let width = this.startDims.width;
    let height = this.startDims.height;

    if (this.startDims) {
      width = this.startDims.width + this.startDims.width * deltaFactor;
      height = this.startDims.height + this.startDims.height * deltaFactor;
    }
    if (parentFlexDirection === "row") {
      this.commandManager.execute(
        new SetStyleAttribute(this.session, layer, "width", width)
      );
    } else {
      this.commandManager.execute(
        new SetStyleAttribute(this.session, layer, "height", height)
      );
    }
  }
  private getDeltaFactor(layer: DomainLayer, delta: IDelta, handle: any): any {
    const parent = layer.parent as DomainLayer;
    const flexDirection = parent.props.getResolvedStyleAttribute(
      "flexDirection"
    );
    const width = parent.getBoundingClientRect().width;
    const height = parent.getBoundingClientRect().height;

    let deltaX = delta.x / width;
    let deltaY = delta.y / height;

    let deltaFactor = 0;
    if (handle.indexOf("C") === -1) {
      if (flexDirection === "row") {
        if (handle.indexOf("L") > -1) {
          deltaX = -deltaX;
        }
        deltaFactor = deltaX;
      } else {
        if (handle.indexOf("T") > -1) {
          deltaY = -deltaY;
        }
        deltaFactor = deltaY;
      }
    }

    return +deltaFactor.toFixed(2);
  }
}
