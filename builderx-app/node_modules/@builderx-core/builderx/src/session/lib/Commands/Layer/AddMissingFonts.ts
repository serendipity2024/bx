import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { forEach, get, pick, size, find, toLower, findIndex } from "lodash";
import { SystemFont } from "common-interfaces";
import { Utils } from "utils";
export default class AddMissingFonts implements ICommand {
  displayName = "AddMissingFonts";
  private session: Session;
  private fileJSON: any;
  constructor(session: Session, fileJSON: any) {
    this.session = session;
    this.fileJSON = fileJSON;
  }
  execute() {
    // debugger;
    // console.time("AddMissingFonts" + this.fileJSON.path);
    this.traverseLayers(this.fileJSON.layer, (childLayer: any) => {
      const style = get(childLayer, "props.style");
      const fontPostScriptName: any = get(style, "fontPostscriptName");
      const fontFamilyObj: any = pick(style, ["fontFamily"]);
      if (size(fontFamilyObj) !== 0) {
        this.addMissingFonts(fontPostScriptName);
      }
    });
    // console.timeEnd("AddMissingFonts" + this.fileJSON.path);
    this.session.drivers.analyticsService.addActivity(
      {
        name: `add.missing.fonts`,
        category: "app/command"
      },
      true
    );
  }
  undo() {
    //
  }
  redo() {
    //
  }
  traverseLayers(layer: any, callback: (childLayer: any) => void) {
    callback(layer);
    forEach(layer.children, (childLayer: any, childIndex: number) => {
      if (childLayer && typeof childLayer !== "string") {
        this.traverseLayers(childLayer, callback);
      }
    });
  }
  addMissingFonts(fontPostScriptName: string) {
    if (!fontPostScriptName) {
      return;
    }
    const project = this.session.project;
    const fontIndex: any = findIndex(
      this.session.systemFonts,
      (systemFont: SystemFont) => {
        return (
          systemFont.postscriptName === fontPostScriptName ||
          toLower(systemFont.postscriptName) === fontPostScriptName
        );
      }
    );
    if (fontIndex > -1) {
      const font = this.session.systemFonts[fontIndex];
      const { postscriptName } = font;
      const ignoreFonts = ["Helvetica", "Arial", "Verdana", "Times New Roman"];
      if (ignoreFonts.indexOf(font.family) === -1) {
        Utils.loadFont({ family: font.family, style: font.style });
      }
    } else {
      project.addMissingFontName(fontPostScriptName);
    }
  }
}
