import { ICommand } from "command-manager";
import { Session } from "session";
import domtoimage from "dom-to-image";
import { COLORS } from "components-x";
export default class GenerateProjectThumbnail implements ICommand {
  private session: Session;
  displayName: string = "GenerateProjectThumbnail";
  constructor(session: Session) {
    this.session = session;
  }
  execute() {
    // console.time("GenerateProjectThumbnail 1111");
    const node = document.getElementsByClassName("artboards");
    // console.log(node, "node");
    if (node) {
      // console.time("GenerateProjectThumbnail domtoimage 1111");
      domtoimage
        .toBlob(node[0] as any, {
          bgcolor: COLORS.primary[900],
          quality: 0.2,
          style: {
            backgroundColor: COLORS.primary[900]
          }
        })
        .then(async (dataUrl: any) => {
          // console.timeEnd("GenerateProjectThumbnail domtoimage 1111");
          let image: any = new Image();
          image.onload = () => {
            // console.time("GenerateProjectThumbnail onload 1111");
            // let boundingBox = this.session.currentStage.renderCompiled.getBoundingBox(
            //   this.session.currentStage.renderCompiled.children
            // );
            // // console.time("GenerateProjectThumbnail getCroppedImg 1111");
            // this.getCroppedImg(image, {
            //   x: 900,
            //   y: 900,
            //   height: boundingBox.height + 200,
            //   width: boundingBox.width + 200
            // }).then(imageData => {
            //   // console.log(imageData);
            //   // console.timeEnd("GenerateProjectThumbnail getCroppedImg 1111");
            //   const file = new File([imageData as any], ".thumbnail.png", {
            //     type: "image/png"
            //   });
            //   this.session.before();
            //   ApiSdk.assets
            //     .uploadAsset(
            //       this.session.project.projectId,
            //       "/.thumbnail.png",
            //       file as any,
            //       this.session.connectionId,
            //       "image"
            //     )
            //     .then(res => {
            //       //
            //     })
            //     .catch(err => {
            //       console.log(err, "Image upload failed");
            //       this.session.notificationManager.notifyError(
            //         "",
            //         "Image upload failed"
            //       );
            //     })
            //     .finally(() => {
            //       this.session.after();
            //     });
            // });
            // console.timeEnd("GenerateProjectThumbnail onload 1111");
          };
          image.src = URL.createObjectURL(dataUrl);
          // console.log(image.src, "image.src");
        })
        .catch((error: any) => {
          console.error("oops, something went wrong!", error);
        });
    }
    // console.timeEnd("GenerateProjectThumbnail 1111");
  }
  undo() {
    //
  }
  redo() {
    //
  }
  getCroppedImg(image: any, crop: any) {
    const canvas = document.createElement("canvas");
    const scaleX = image.naturalWidth / image.width;
    const scaleY = image.naturalHeight / image.height;
    canvas.width = crop.width;
    canvas.height = crop.height;
    const ctx: any = canvas.getContext("2d");
    ctx.drawImage(
      image,
      crop.x * scaleX,
      crop.y * scaleY,
      crop.width * scaleX,
      crop.height * scaleY,
      0,
      0,
      crop.width,
      crop.height
    );
    // console.log(
    //   ctx,
    //   canvas.height,
    //   canvas.width,
    //   " !!!!!!! ",
    //   1024 / canvas.width,
    //   1024 / canvas.height,
    //   "before"
    // );
    // ctx.scale(1024 / canvas.width, 1024 / canvas.height);
    // console.log(canvas.height, canvas.width, "after");
    return new Promise((resolve, reject) => {
      canvas.toBlob((blob: any) => {
        resolve(blob);
      }, "image/png");
    });
  }
}
