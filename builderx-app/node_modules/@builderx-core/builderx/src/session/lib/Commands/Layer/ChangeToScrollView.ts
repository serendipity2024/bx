import { ICommand, CommandManager } from "command-manager";
import { Session } from "../../../lib/models/Session";
import { Layer, DomainLayer } from "domain-x";
// import RemoveLayer from "./RemoveLayer";
// import AddLayer from "./AddLayer";
import { AddLayerService } from "../CommandServices/AddLayerService";
import CommandUtils from "../Utils";
import RemoveLayer from "../CommandServices/RemoveLayerService";
import SelectLayersService from "../CommandServices/SelectLayersService";
import { cloneDeep } from "lodash";
// import { action } from "model";
// import SelectRootLayer from "../Session/SelectRootLayer";
// import SelectLayers from "../Session/SelectLayers";
// import { removeCurrentStageRef } from "../Scene/SceneUtils";

export default class ChangeToScrollView implements ICommand {
  displayName = "ChangeToScrollView";
  session: Session;
  domainLayer: Layer;
  domainParentLayer: Layer;
  commandManager: CommandManager;
  makeScrollable: boolean;
  isHorizontal: boolean;

  oldLayerJSON: any;
  newLayerJSON: any;
  domainLayerPath: string;
  domainParentLayerPath: string;
  constructor(
    session: Session,
    domainLayer: Layer,
    makeScrollable: boolean,
    isHorizontal: boolean = false
  ) {
    this.session = session;
    this.domainLayer = domainLayer;
    this.makeScrollable = makeScrollable;
    this.commandManager = new CommandManager();
    this.domainParentLayer = this.domainLayer.parent;
    this.isHorizontal = isHorizontal;

    this.domainLayerPath = domainLayer.getFullPath();
    this.domainParentLayerPath = this.domainParentLayer.getFullPath();

    this.oldLayerJSON = this.domainLayer.toJS();
    this.newLayerJSON = cloneDeep(this.oldLayerJSON);

    delete this.newLayerJSON["styleName"];
    if (this.makeScrollable) {
      this.newLayerJSON["type"] = "scrollView";
      this.newLayerJSON.import["layerName"] = "ScrollView";
      if (this.isHorizontal) {
        this.newLayerJSON.props["horizontal"] = true;
      } else {
        this.newLayerJSON.props["horizontal"] = false;
      }
    } else {
      delete this.newLayerJSON.props["horizontal"];
      delete this.newLayerJSON.props["contentContainerStyle"];
      this.newLayerJSON["type"] = "view";
      this.newLayerJSON.import["layerName"] = "View";
    }
  }

  setContentContainerStyle(domainLayer: DomainLayer) {
    // if (this.makeScrollable) {
    //   if (domainLayer && domainLayer.type === "scrollView") {
    //     CommandUtils.setScrollViewContentContainerStyle(
    //       this.session,
    //       domainLayer as DomainLayer
    //     );
    //   }
    // }
  }
  execute() {
    const parentLayer = this.session.getLayerFromLayerPath(
      this.domainParentLayerPath
    );
    const layerIndex = parentLayer.children.indexOf(
      this.session.getLayerFromLayerPath(this.domainLayerPath)
    );
    RemoveLayer(this.session, this.domainLayerPath);
    const scrollViewLayer = AddLayerService(
      this.session,
      this.domainParentLayerPath,
      this.newLayerJSON,
      layerIndex
    );
    this.setContentContainerStyle(scrollViewLayer);
    SelectLayersService(this.session, [this.domainLayerPath]);
    this.session.drivers.analyticsService.addActivity(
      {
        name: `change.to.scrollview`,
        category: "app/command"
      },
      true
    );
  }
  undo() {
    const parentLayer = this.session.getLayerFromLayerPath(
      this.domainParentLayerPath
    );
    const layerIndex = parentLayer.children.indexOf(
      this.session.getLayerFromLayerPath(this.domainLayerPath)
    );
    RemoveLayer(this.session, this.domainLayerPath);
    const addedLayer = AddLayerService(
      this.session,
      this.domainParentLayerPath,
      this.oldLayerJSON,
      layerIndex
    );

    this.setContentContainerStyle(addedLayer);
    SelectLayersService(this.session, [this.domainLayerPath]);
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.change.to.scrollview`,
        category: "app/command"
      },
      true
    );
  }
  redo() {
    const parentLayer = this.session.getLayerFromLayerPath(
      this.domainParentLayerPath
    );
    const layerIndex = parentLayer.children.indexOf(
      this.session.getLayerFromLayerPath(this.domainLayerPath)
    );
    RemoveLayer(this.session, this.domainLayerPath);
    const addedLayer = AddLayerService(
      this.session,
      this.domainParentLayerPath,
      this.newLayerJSON,
      layerIndex
    );

    this.setContentContainerStyle(addedLayer);
    SelectLayersService(this.session, [this.domainLayerPath]);
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.change.to.scrollview`,
        category: "app/command"
      },
      true
    );
  }
}
