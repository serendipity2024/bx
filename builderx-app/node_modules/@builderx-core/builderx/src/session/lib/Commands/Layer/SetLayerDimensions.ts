import { Dimension } from "../../models/types";
import { Layer as DomainLayer, File } from "domain-x";
import { Session } from "../../models/Session";
import { ICommand } from "command-manager";
import { SetGridSizeMutator } from "../../Mutators";
import { SetLayerDimensionsService } from "../CommandServices/SetLayerDimensions";
import { SetAllScopeVariablesService } from "../CommandServices/SetAllScopeVariablesService";
import GenerateLayerPreview from "../CommandServices/GenerateLayerPreview";

export default class SetLayerDimensions implements ICommand {
  displayName = "SetLayerDimensions";
  private domainLayer: DomainLayer | File;
  private newDimensions: Dimension;
  private oldDimensions: Dimension;
  private session: Session;
  private domainLayerPath: string;
  private oldDeviceName: string;

  constructor(
    session: Session,
    domainLayer: DomainLayer | File,
    dimensions: Dimension
  ) {
    this.newDimensions = dimensions;
    this.session = session;

    this.oldDeviceName = this.session.selectedFile.scopeVariables.deviceName;
    this.domainLayerPath = domainLayer.getFullPath();
    const compiledLayer = domainLayer.getOwnCanvasRef();
    if (compiledLayer) {
      const oldDims = compiledLayer.getBoundingClientRect();
      this.oldDimensions = {
        x: oldDims.x,
        y: oldDims.y,
        width: oldDims.width,
        height: oldDims.height,
        rotation: oldDims.rotation
      };
    }
  }

  execute() {
    SetLayerDimensionsService(
      this.session,
      this.domainLayerPath,
      this.newDimensions
    );

    const domainLayer = this.session.getLayerFromLayerPath(
      this.domainLayerPath
    );
    if (domainLayer && domainLayer.type === "file") {
      if (
        this.oldDimensions.width !== this.newDimensions.width ||
        this.oldDimensions.height !== this.newDimensions.height
      ) {
        // this.oldDeviceName = this.session.selectedFile.scopeVariables.deviceName;
        SetAllScopeVariablesService(this.session, domainLayer.path, {
          ...this.session.selectedFile.scopeVariables,
          deviceName: "custom"
        });
      }
    }
  }
  undo() {
    SetLayerDimensionsService(
      this.session,
      this.domainLayerPath,
      this.oldDimensions
    );
    let layer = this.session.getLayerFromLayerPath(this.domainLayerPath);
    if (layer.type === "file") {
      SetAllScopeVariablesService(this.session, layer.path, {
        ...this.session.selectedFile.scopeVariables,
        deviceName: this.oldDeviceName
      });
    }

    if (this.session.showCodeEditor) {
      GenerateLayerPreview(this.session, [
        ...this.session
          .getLayersFromSelectedLayerCollection()
          .map(l => l.getFullPath())
      ]);
    }
  }
  redo() {
    SetLayerDimensionsService(
      this.session,
      this.domainLayerPath,
      this.newDimensions
    );
    let layer = this.session.getLayerFromLayerPath(this.domainLayerPath);
    if (layer.type === "file") {
      if (
        this.oldDimensions.width !== this.newDimensions.width ||
        this.oldDimensions.height !== this.newDimensions.height
      ) {
        SetAllScopeVariablesService(this.session, layer.path, {
          ...this.session.selectedFile.scopeVariables,
          deviceName: "custom"
        });
      }
    }

    if (this.session.showCodeEditor) {
      GenerateLayerPreview(this.session, [
        ...this.session
          .getLayersFromSelectedLayerCollection()
          .map(l => l.getFullPath())
      ]);
    }
  }
}
