import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { Layer } from "domain-x";
import { AddLayerService } from "../CommandServices/AddLayerService";
import RemoveLayerService from "../CommandServices/RemoveLayerService";
import { Utils } from "utils";
import SelectLayersService from "../CommandServices/SelectLayersService";

export default class AddImage implements ICommand {
  displayName = "AddImage";
  private session: Session;
  private imageObject: any;
  private imageJSON?: any;
  private currentRootLayerPath?: any;
  private index?: number | string;
  private domainLayerPath: string;
  constructor(
    session: Session,
    imageObject?: any,
    imageJSON?: any,
    index?: number | string
  ) {
    this.session = session;
    this.imageObject = imageObject;
    this.imageJSON = imageJSON;
    this.index = index;
    this.currentRootLayerPath = this.session.currentRootLayer.getFullPath();
  }
  execute() {
    this.addImageOp();
  }
  undo() {
    RemoveLayerService(this.session, this.domainLayerPath);
  }
  redo() {
    this.addImageOp();
  }
  addImageOp() {
    let imageJSON = this.imageJSON;
    if (!this.imageJSON) {
      const ImageDefinition = this.session.currentStage.canvas.getComponentDefinition(
        "image"
      );
      imageJSON = Utils.domainLayerTemplateFromCanvasTemplate(
        ImageDefinition.template
      );
    }
    const domainLayer: Layer = AddLayerService(
      this.session,
      this.currentRootLayerPath,
      imageJSON,
      this.index,
      false,
      false,
      this.imageJSON ? undefined : this.imageObject
    );
    this.domainLayerPath = domainLayer.getFullPath();
    SelectLayersService(this.session, [this.domainLayerPath], undefined, true);

    // this.imageJSON = domainLayer.toJS();
  }
}
