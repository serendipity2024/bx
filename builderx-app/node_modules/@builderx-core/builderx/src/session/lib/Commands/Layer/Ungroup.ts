import { Layer as DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import { ICommand } from "command-manager";
import UngroupService from "../CommandServices/Ungroup";
import CreateGroupService from "../CommandServices/CreateGroup";

export default class Ungroup implements ICommand {
  displayName = "Ungroup";
  private domainWrapperLayerChildrenPaths: Array<string> = [];
  private session: Session;
  private domainWrapperLayerPath: string | undefined;
  private domainWrapperLayerJSON: any;
  constructor(session: Session, domainWrapperLayer: DomainLayer) {
    this.session = session;
    this.domainWrapperLayerPath = domainWrapperLayer.getFullPath();
    this.domainWrapperLayerJSON = domainWrapperLayer.toJS();
    this.domainWrapperLayerJSON.children = [];
  }
  execute() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `ungroup`,
        category: "app/command"
      },
      true
    );
    this.ungroupUtilityFn();
  }
  undo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.ungroup`,
        category: "app/command"
      },
      true
    );
    if (
      this.domainWrapperLayerChildrenPaths &&
      this.domainWrapperLayerChildrenPaths.length
    ) {
      const domainWrapperLayer = CreateGroupService(
        this.session,
        this.domainWrapperLayerChildrenPaths,
        this.domainWrapperLayerJSON
      );
      this.domainWrapperLayerPath = domainWrapperLayer.getFullPath();
    }
  }
  redo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.ungroup`,
        category: "app/command"
      },
      true
    );
    this.ungroupUtilityFn();
  }
  ungroupUtilityFn() {
    if (this.domainWrapperLayerPath) {
      const domainWrapperLayerChildren: Array<DomainLayer> = UngroupService(
        this.session,
        this.domainWrapperLayerPath
      );
      if (domainWrapperLayerChildren) {
        this.domainWrapperLayerChildrenPaths = domainWrapperLayerChildren.map(
          c => c.getFullPath()
        );
      }
    }
  }
}
