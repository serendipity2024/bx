import {
  File as DomainFile,
  DomainLayer,
  LiteralNode,
  LogicalExpression,
  Expression,
  BinaryExpression
} from "domain-x";
import { StylePropNameType } from "common-interfaces";
import { Session } from "../../models/Session";
import { ICommand } from "command-manager";
import { RemoveStyleAttributeMutator } from "../../Mutators";
import { SetStyleAttributeMutator } from "../../Mutators";

export default class RemoveStyleAttribute implements ICommand {
  displayName = "RemoveStyleAttribute";
  private domainLayer: DomainLayer | DomainFile;
  private oldValue: any;
  private key: string;
  private session: Session;
  private stylePropName: StylePropNameType = "style";

  private currentRecordingConditions: { [key: string]: any };
  private currentScopeVariables: { [key: string]: any };
  private shouldEmitUpdates?: boolean = true;
  private domainLayerPath: string;
  private filePath: string;

  constructor(
    session: Session,
    domainLayer: DomainLayer | DomainFile,
    key: string,
    stylePropName: StylePropNameType = "style",
    shouldEmitUpdates: boolean = true
  ) {
    this.session = session;
    this.domainLayer = domainLayer;
    this.key = key;
    this.stylePropName = stylePropName;
    this.shouldEmitUpdates = shouldEmitUpdates;
    let file = this.domainLayer.getFile();

    // if (file) {
    //   scopeVariables = file.scopeVariables;
    // }

    this.domainLayerPath = this.domainLayer.getPath(undefined, true);
    this.filePath = file.path;
  }

  execute() {
    this.oldValue = this.domainLayer.props.getStyleAttribute(
      this.key,
      this.stylePropName
    );

    RemoveStyleAttributeMutator(
      this.session,
      this.domainLayerPath,
      this.key,
      this.stylePropName
    );

    // if (this.shouldEmitUpdates) {
    //   this.domainLayer.props.style.emit(this.key);

    //   forEach(
    //     this.domainLayer.domainCompiledRefs,
    //     (revRef: CompiledLayer<any>) => {
    //       renderCompiledLayer = revRef.renderCompiledRef as RenderCompiledLayer;
    //       renderCompiledLayer.props.style.emit(this.key);
    //     }
    //   );
    // }

    // });
  }
  undo() {
    SetStyleAttributeMutator(
      this.session,
      this.domainLayerPath,
      this.key,
      this.oldValue,
      this.stylePropName
    );
  }
  redo() {
    this.execute();
  }

  getActiveConditionForCode(
    node: LiteralNode | Expression,
    scopeVariables: { [key: string]: any }
  ): { [key: string]: any } {
    let activeConditions = {};
    if (node.parent instanceof LogicalExpression) {
      node.parent.traverse((child: Expression | BinaryExpression) => {
        if (child instanceof BinaryExpression) {
          if (scopeVariables[child.left.expression] === child.right.value) {
            activeConditions[child.left.expression] = child.right.value
              ? child.right.value
              : child.right.expression;
          }
        }
      });
    }
    return activeConditions;
  }
}
