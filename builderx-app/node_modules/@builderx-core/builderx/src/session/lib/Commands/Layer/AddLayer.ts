import { ICommand } from "command-manager";
import {
  File as DomainFile,
  Layer as DomainLayer,
  LogicalExpression
} from "domain-x";
import { get } from "lodash";
import { Session } from "../../models/Session";
import { AddLayerService } from "../CommandServices/AddLayerService";
import SelectLayersService from "../CommandServices/SelectLayersService";
import RemoveLayerService from "../CommandServices/RemoveLayerService";

export default class AddLayer implements ICommand {
  displayName = "AddLayer";
  private domainParentLayer: DomainLayer | DomainFile | LogicalExpression;
  private domainLayer: DomainLayer;
  private index?: number | string;
  private session: Session;
  private layerJSON?: any;
  private currentRecordingConditions: { [key: string]: any };
  private currentScopeVariables: { [key: string]: any };
  private isSymbolStage?: boolean = false;
  private isGroupWrapper: boolean | undefined;
  private isPastedLayer: boolean = false;

  private domainParentLayerPath: string;
  private filePath: string;
  private domainLayerPath: string;

  constructor(
    session: Session,
    domainParentLayer: DomainLayer | DomainFile | LogicalExpression,
    layerJSON: any,
    index?: number | string,
    isGroupWrapper?: boolean,
    isPastedLayer: boolean = false
  ) {
    this.session = session;
    this.domainParentLayer = domainParentLayer;
    this.index = index;
    this.layerJSON = layerJSON;
    this.isGroupWrapper = isGroupWrapper;
    this.isPastedLayer = isPastedLayer;

    const file = this.domainParentLayer.getFile();
    this.filePath = get(file, "path");
    this.domainParentLayerPath = this.domainParentLayer.getFullPath();
    this.domainLayerPath = "";
  }

  execute() {
    this.addOp();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `add.layer`,
        category: "app/command"
      },
      true
    );
  }

  undo() {
    RemoveLayerService(this.session, this.domainLayerPath, undefined, true);
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.add.layer`,
        category: "app/command"
      },
      true
    );
  }
  redo() {
    this.addOp();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.add.layer`,
        category: "app/command"
      },
      true
    );
  }
  addOp() {
    this.domainLayer = AddLayerService(
      this.session,
      this.domainParentLayerPath,
      this.layerJSON,
      this.index,
      this.isGroupWrapper,
      this.isPastedLayer
    );
    this.domainLayerPath = this.domainLayer.getFullPath();
    if (this.session.recordPatches) {
      SelectLayersService(
        this.session,
        [this.domainLayerPath],
        undefined,
        true
      );
    }
  }
}
