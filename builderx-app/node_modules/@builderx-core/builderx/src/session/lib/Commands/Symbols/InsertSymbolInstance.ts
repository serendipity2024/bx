import { ICommand } from "command-manager";
import { File } from "domain-x";
import { cloneDeep, get } from "lodash";
import SymbolInstanceTemplate from "../../componentJSON/SymbolInstance";
import { Session } from "../../models/Session";
import { AddLayerService } from "../CommandServices/AddLayerService";
import RemoveLayerService from "../CommandServices/RemoveLayerService";
import SelectLayersService from "../CommandServices/SelectLayersService";
import { Utils } from "utils";
const path = require("path");

export default class InsertSymbolInstance implements ICommand {
  displayName = "InsertSymbolInstance";
  private session: Session;
  private file: File;
  private domainLayerPath: string;
  position: { x: number; y: number } | undefined;
  constructor(
    session: Session,
    file: File,
    position?: { x: number; y: number }
  ) {
    this.session = session;
    this.file = file;
    this.position = position;
  }
  execute() {
    this.localExecute();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `insert.symbol.instance`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  undo() {
    if (this.domainLayerPath) {
      RemoveLayerService(this.session, this.domainLayerPath);
      this.session.drivers.analyticsService.addActivity(
        {
          name: `undo.insert.symbol.instance`,
          path: "",
          category: "app/command"
        },
        true
      );
    }
  }
  redo() {
    this.localExecute();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.insert.symbol.instance`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  localExecute() {
    const symbolInstanceTemplate = cloneDeep(SymbolInstanceTemplate.template);
    let symbolInstanceStyle = symbolInstanceTemplate.props.style;
    let parentRootDims = this.session.currentRootLayer.getBoundingClientRect();
    let parentHeight = parentRootDims.height;
    let parentWidth = parentRootDims.width;
    let instanceWidth = get(this.file, "props.style.width", 150);
    let instanceHeight = get(this.file, "props.style.height", 150);
    symbolInstanceStyle["position"] = "absolute";
    if (this.position) {
      symbolInstanceStyle["left"] = this.position.x;
      symbolInstanceStyle["top"] = this.position.y;
    } else {
      symbolInstanceStyle["top"] = parentHeight / 2 - instanceHeight / 2 || 100;
      symbolInstanceStyle["left"] = parentWidth / 2 - instanceWidth / 2 || 100;
    }
    symbolInstanceStyle["width"] = instanceWidth;
    symbolInstanceStyle["height"] = instanceHeight;
    symbolInstanceTemplate.import.packageName = this.file.path;
    symbolInstanceTemplate.import.layerName = path.basename(
      this.file.path,
      ".js"
    );
    const symbolInstanceFile = this.session.domain.getSymbolFileFromSymbolInstance(
      symbolInstanceTemplate as any
    );
    if (
      symbolInstanceFile &&
      Utils.checkIfCircularSymbol(
        this.session,
        symbolInstanceFile,
        this.session.currentRootLayer
      )
    ) {
      return;
    }
    const domainParentLayerPath = this.session.currentRootLayer.getFullPath();
    const domainLayer = AddLayerService(
      this.session,
      domainParentLayerPath,
      symbolInstanceTemplate
    );
    this.domainLayerPath = domainLayer.getFullPath();
    SelectLayersService(this.session, [this.domainLayerPath]);
  }
}
