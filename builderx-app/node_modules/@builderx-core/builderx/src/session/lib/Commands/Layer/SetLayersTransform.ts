import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { Layer } from "domain-x";
import { Dimension } from "../../models/types";
import { SetLayerDimensionsService } from "../CommandServices/SetLayerDimensions";

export default class SetLayersTransform implements ICommand {
  displayName = "SetLayersTransform";
  private domainLayers: Array<Layer>;
  private rotation: number;
  private oldDimensions: Array<Dimension> = [];
  private session: Session;
  private domainLayersPath: Array<string> = [];
  constructor(session: Session, domainLayers: Array<Layer>, rotation: number) {
    // dimensions from the resizer
    this.domainLayers = domainLayers;
    this.rotation = rotation;
    this.session = session;
    this.domainLayersPath = [];
    this.domainLayers.forEach((layer: Layer) => {
      this.domainLayersPath.push(layer.getFullPath());
    });
  }
  execute() {
    this.oldDimensions = [];
    this.domainLayersPath.forEach((layerPath: string) => {
      const layer = this.session.getLayerFromLayerPath(layerPath);
      const layerDims = layer.getBoundingClientRect();
      this.oldDimensions.push(layerDims);
      const dims = {
        x: layerDims.x,
        y: layerDims.y,
        width: layerDims.width,
        height: layerDims.height,
        rotation: this.rotation
      };
      SetLayerDimensionsService(this.session, layerPath, dims);
    });
  }
  undo() {
    this.domainLayersPath.forEach((layerPath: string, index: number) => {
      SetLayerDimensionsService(
        this.session,
        layerPath,
        this.oldDimensions[index]
      );
    });
  }
  redo() {
    this.execute();
  }
}
