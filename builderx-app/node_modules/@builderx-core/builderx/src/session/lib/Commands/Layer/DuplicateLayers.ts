import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { Layer } from "domain-x";
import DuplicateLayersService from "../CommandServices/DuplicateLayersService";
import RemoveLayerService from "../CommandServices/RemoveLayerService";
import SelectLayersService from "../CommandServices/SelectLayersService";

export default class DuplicateLayers implements ICommand {
  displayName = "DuplicateLayers";
  session: Session;
  private oldLayersPath: Array<string> = [];
  private layersPath: Array<string> = [];
  constructor(session: Session, layers: Array<Layer>) {
    this.session = session;
    layers.forEach((layer: Layer) => {
      this.oldLayersPath.push(layer.getFullPath());
    });
  }
  execute() {
    this.duplicateFn();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `duplicate.layers`,
        category: "app/command"
      },
      true
    );
  }
  undo() {
    this.layersPath
      .sort()
      .reverse()
      .forEach((layerPath: string) => {
        RemoveLayerService(this.session, layerPath);
      });
    SelectLayersService(this.session, this.oldLayersPath);

    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.duplicate.layers`,
        category: "app/command"
      },
      true
    );
  }
  redo() {
    this.duplicateFn();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.duplicate.layers`,
        category: "app/command"
      },
      true
    );
  }
  duplicateFn() {
    if (this.oldLayersPath.length === 0) {
      return;
    }
    this.layersPath = DuplicateLayersService(this.session, this.oldLayersPath);
  }
}
