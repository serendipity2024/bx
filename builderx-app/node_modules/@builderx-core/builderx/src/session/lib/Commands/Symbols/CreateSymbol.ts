import { ICommand, CommandManager } from "command-manager";
import { Layer as DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import { Utils } from "utils";
import { Prompt } from "dialog-x";
// const outerPositionStyleAttrs = [
//   "position",
//   "top",
//   "left",
//   "bottom",
//   "right",
//   "height",
//   "width",
//   "flex",
//   "alignSelf"
// ];
const pascalCase = require("pascalcase");
import CreateSymbolFromSelectedLayers from "./CreateSymbolFromSelectedLayers";
import { action } from "model";

export default class CreateSymbol implements ICommand {
  displayName = "CreateSymbol";
  private session: Session;
  private domainLayers: DomainLayer[];
  constructor(session: Session, domainLayers: DomainLayer[]) {
    this.session = session;
    this.domainLayers = domainLayers;
  }

  execute() {
    this.createSymbol();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `create.symbol`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  undo() {
    //
  }
  redo() {
    //
  }
  async createSymbol(promptMsg?: string, fileId?: string): Promise<any> {
    // return new Promise((resolve, reject) => {
    if (this.domainLayers.length === 0) {
      return "Please select a layer to create a new component";
    } else if (!this.session.isLayersHaveSameParent(this.domainLayers)) {
      this.session.notificationManager.notifyError(
        "Cannot create component for selected layers",
        "Component error"
      );
      return "Cannot create component for selected layers";
    } else {
      const files = this.session.domain.files;
      const defaultSymbolDirectory = this.session.project
        .defaultSymbolDirectory;

      if (this.domainLayers.length === 0) {
        return;
      }

      if (!fileId) {
        fileId = Utils.getNewSymbolFileName(defaultSymbolDirectory, files);
      }
      if (!fileId) {
        return;
      }

      if (!promptMsg) {
        promptMsg = "Create a new component.";
      }

      const symbolName = Utils.getSymbolNameFromFileId(fileId);
      if (process.env.NODE_ENV === "test") {
        await this.session.commandManager.execute(
          new CreateSymbolFromSelectedLayers(
            this.session,
            this.domainLayers,
            fileId as string
          )
        );
      } else {
        Prompt(promptMsg, "Enter component name", symbolName).then(
          (result: any) => {
            action(async () => {
              if (!result) {
                return false;
              } else if (result === "" || !Utils.validateVariableName(result)) {
                return this.createSymbol("Please enter a valid component name");
              } else if (result.length > 0) {
                fileId = `${defaultSymbolDirectory}/${pascalCase(result)}.js`;
                if (
                  !files.has(fileId) &&
                  !files.has(fileId.replace("/components/", "/symbols/"))
                ) {
                  await this.session.commandManager.execute(
                    new CreateSymbolFromSelectedLayers(
                      this.session,
                      this.domainLayers,
                      fileId
                    )
                  );
                  return true;
                } else {
                  return this.createSymbol("Component name already exists");
                }
              }
            });
          }
        );
      }
    }
  }
}
