import { Layer as DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import { ICommand } from "command-manager";
import { YogaDimensions } from "../../models/types";
import ResetStyleService from "../CommandServices/ResetStyleService";
import { SetAllStyleService } from "../CommandServices/SetAllStyleService";
import resetAutoAndFill from "../Utils/resetAutoAndFill";
import { SetCenterWrapperMutator } from "../../Mutators";
import SetResizingTypeMutator from "../../Mutators/SetResizingTypeMutator";

export default class FixLayer implements ICommand {
  displayName = "FixLayer";
  private session: Session;
  private property: "width" | "height";
  private oldStyle: any;
  private newStyle: any;
  private domainLayerPath: any;
  constructor(
    session: Session,
    domainLayer: DomainLayer,
    property: "width" | "height"
  ) {
    this.session = session;
    this.property = property;
    this.domainLayerPath = domainLayer.getFullPath();
  }
  execute() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `fix.layer`,
        path: "",
        category: "app/command"
      },
      true
    );
    const domainLayer = this.session.getLayerFromLayerPath(
      this.domainLayerPath
    );
    SetCenterWrapperMutator(this.session, this.domainLayerPath, {
      horizontal: false,
      vertical: false
    });

    const compiledLayer: any = domainLayer.getOwnCanvasRef();
    const dimensions: YogaDimensions = compiledLayer.getBoundingClientRect();

    let styles = resetAutoAndFill(domainLayer, this.property, dimensions);
    this.oldStyle = styles.oldStyle;
    this.newStyle = styles.newStyle;
    ResetStyleService(this.session, this.domainLayerPath);
    SetAllStyleService(this.session, this.domainLayerPath, this.newStyle);
    // domainLayer.ui.setResizingType(domainLayer.props.style.toJS());
    SetResizingTypeMutator(
      this.session,
      this.domainLayerPath,
      domainLayer.props.style.toJS()
    );
  }
  undo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.fix.layer`,
        path: "",
        category: "app/command"
      },
      true
    );
    ResetStyleService(this.session, this.domainLayerPath);
    SetAllStyleService(this.session, this.domainLayerPath, this.oldStyle);
  }
  redo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.fix.layer`,
        path: "",
        category: "app/command"
      },
      true
    );
    ResetStyleService(this.session, this.domainLayerPath);
    SetAllStyleService(this.session, this.domainLayerPath, this.newStyle);
  }
}
