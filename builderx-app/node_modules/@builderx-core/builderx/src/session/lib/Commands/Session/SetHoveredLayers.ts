import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { Layer } from "domain-x";
import { forEach, isEqual, isEmpty } from "lodash";
import RemoveHoveredForAllLayers from "./../CommandServices/RemoveHoveredForAllLayers";
// import RemoveDragHoveredForAllLayers from "./../CommandServices/RemoveDragHoveredForAllLayers";
import SetHoverLayersMutator from "../../Mutators/SetHoverLayersMutator";
import { action } from "model";
export default class SetHoveredLayers implements ICommand {
  displayName = "SetHoveredLayers";
  session: Session;
  layers: Array<Layer>;
  drawing: boolean;
  constructor(
    session: Session,
    layers: Array<Layer>,
    drawing: boolean = false
  ) {
    this.session = session;
    this.layers = layers;
    this.drawing = drawing;
  }
  execute() {
    if (isEqual(this.layers, this.session.hoveredLayers)) {
      return;
    }
    this.session.hoveredLayers.forEach((layer: Layer) => {
      layer.hovered = false;
      action(() => {
        layer.emit("hovered");
      });
    });

    RemoveHoveredForAllLayers(this.session);
    const file = this.layers[0] ? this.layers[0].getFile() : undefined;
    if (!file) {
      return;
    }
    // RemoveDragHoveredForAllLayers(this.session);
    let layerIds: Array<string> = [];
    forEach(this.layers, (layer: Layer) => {
      let hidden =
        (layer.props &&
          layer.props.getResolvedStyleAttribute("display") &&
          layer.props.getResolvedStyleAttribute("display") === "none") ||
        false;
      if (
        !layer.locked &&
        !hidden &&
        layer.type !== "conditionalExpression" &&
        layer.getOwnCanvasRef()
      ) {
        layer.hovered = true;
        action(() => {
          layer.emit("hovered");
        });
        layerIds.push(layer.getPath(undefined, true));
      }
    });
    SetHoverLayersMutator(this.session, file.getFullPath(), layerIds);
  }
  undo() {
    // nope
  }
  redo() {
    // nope
  }
}
