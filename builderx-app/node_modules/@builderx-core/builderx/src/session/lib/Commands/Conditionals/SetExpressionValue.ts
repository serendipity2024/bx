import { ICommand } from "command-manager";
import { Session } from "session";
// import { forEach, get, isNil } from "lodash";
// import { Expression, Style, CompiledLayer, SymbolLayer } from "domain-x";
// import CommandUtils, { setAndComputeDescendants } from "../Utils";
// import {
//   CreateCompiledLayer
//   // DeselectAllLayers,
//   // SelectLayers
// } from "..";
// import { resolveBinaryTest, ResolveNode, ResolveNodeValue } from "utils";
// import { Layer as DomainLayer } from "domain-x";
// import ResolveSymbolInstance from "../CommandServices/ResolveSymbolnstance";
// import { SelectLayersMutator } from "../../Mutators";
import SetExpressionValueService from "../CommandServices/SetExpressionValue";
import { forEach, cloneDeep } from "lodash";
import { Expression } from "domain-x";
import { CreateExpressionNodeMutator } from "../../Mutators";

export default class SetExpressionValue implements ICommand {
  displayName = "SetExpressionValue";
  session: Session;
  key: string;
  value: any;
  expressions: Map<any, any>;
  selectLayer: boolean = true;
  constructor(
    session: Session,
    key: string,
    value: any,
    expressions: Map<any, any>,
    selectLayer: boolean = true
  ) {
    this.session = session;
    this.key = key;
    this.value = value;
    this.expressions = expressions;
    this.selectLayer = selectLayer;
  }

  execute() {
    // const expression = this.expressions.get(this.key);

    // if (!expression) {
    //     return;
    // }
    var expressions = this.expressions.get(this.key);

    const expressionCopy = [...expressions]; // creating copy due to splice and add at the same time
    if (expressions) {
      // set evaluated value
      forEach(expressionCopy, (expression: Expression) => {
        const expressionInLayer = expression.getLayer();
        const conditionalObj = expression.findConditionalParent();
        const pathRelativeToLayer = conditionalObj.getPathRelativeToLayer();

        const layerIndexOfDot = pathRelativeToLayer.lastIndexOf(".");
        const path = pathRelativeToLayer.slice(0, layerIndexOfDot);
        const key = pathRelativeToLayer.slice(layerIndexOfDot + 1);

        const json = cloneDeep(conditionalObj.toJS());
        CreateExpressionNodeMutator(
          this.session,
          expressionInLayer,
          path,
          key,
          json
        );
        expressions.splice(expressions.indexOf(expression), 1);
      });
    }
  }
  undo() {
    //
  }
  redo() {
    //
  }
}
