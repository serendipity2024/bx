import { Layer as DomainLayer } from "domain-x";
import { forEach } from "lodash";
import { Session } from "../../models/Session";
import SetStyleAttributeMutator from "../../Mutators/SetStyleAttributeMutator";
import RemoveStyleAttributeMutator from "../../Mutators/RemoveStyleAttributeMutator";
import { StylePropNameType } from "common-interfaces";
import createService from ".";

const UpdateLayerProperties = createService(
  "UpdateLayerProperties",
  (
    session: Session,
    domainLayerPath: string,
    properties: any,
    key: string,
    stylePropName: StylePropNameType = "style"
  ) => {
    const domainLayer = session.getLayerFromLayerPath(domainLayerPath);
    if (!domainLayer) {
      return;
    }
    if (properties.lock) {
      SetStyleAttributeMutator(
        session,
        domainLayerPath,
        key,
        properties[key] ? parseInt(properties[key], 10) : properties[key],
        stylePropName
      );

      const removeAtribute: string[] = getRemoveAttributesArray(key);
      forEach(removeAtribute, (key: string) => {
        const attribute = domainLayer.props.getResolvedStyleAttribute(key);
        if (attribute) {
          RemoveStyleAttributeMutator(
            session,
            domainLayerPath,
            key,
            stylePropName
          );
        }
      });
    } else {
      if (!properties) {
        return;
      }
      forEach(properties, (value: any, key: string) => {
        SetStyleAttributeMutator(
          session,
          domainLayerPath,
          key,
          parseInt(value, 10),
          stylePropName
        );
      });
    }
    if (key === "padding") {
      // reRenderChildren(domainLayer, stylePropName);
    }
  }
);
export default UpdateLayerProperties;

function getRemoveAttributesArray(key: string) {
  switch (key) {
    case "borderRadius":
      return [
        `borderTopLeftRadius`,
        `borderTopRightRadius`,
        `borderBottomRightRadius`,
        `borderBottomLeftRadius`
      ];
      break;
    case "borderWidth":
      return [
        `borderTopWidth`,
        `borderRightWidth`,
        `borderBottomWidth`,
        `borderLeftWidth`
      ];
      break;
    default:
      return [`${key}Top`, `${key}Right`, `${key}Bottom`, `${key}Left`];
      break;
  }
}
