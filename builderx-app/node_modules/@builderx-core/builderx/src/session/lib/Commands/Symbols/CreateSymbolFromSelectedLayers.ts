import { ICommand } from "command-manager";
import { Layer as DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import { Utils } from "utils";
import { CreateSymbolFile } from "../CommandServices/CreateSymbolFile";
import { times, forEach } from "lodash";
import MoveLayerService from "../CommandServices/MoveLayerService";
import { AddLayerService } from "../CommandServices/AddLayerService";
import SelectLayersService from "../CommandServices/SelectLayersService";
import { RemoveLayerMutator, RemoveFileMutator } from "../../Mutators";
import { cloneDeep } from "lodash";
import DeselectAllLayers from "../CommandServices/DeselectAllLayers";

export default class CreateSymbolFromSelectedLayers implements ICommand {
  displayName = "CreateSymbolFromSelectedLayers";
  private session: Session;
  private domainLayers: DomainLayer[];
  private symbolFileId: string;
  private domainLayersPath: Array<string> = [];
  private domainParentLayerPath: string;
  private domainLayersJSON: any = [];
  symbolLayerPath: string;
  constructor(
    session: Session,
    domainLayers: DomainLayer[],
    symbolFileId: string
  ) {
    this.session = session;
    this.domainLayers = domainLayers;
    this.symbolFileId = symbolFileId;
    this.domainParentLayerPath = this.domainLayers[0].parent.getFullPath();
    this.domainLayers.forEach((layer: DomainLayer) => {
      this.domainLayersPath.push(layer.getFullPath());
      const layerJSON = cloneDeep(layer.toJS());
      layerJSON.index = layer.findIndexInParent();
      this.domainLayersJSON.push(layerJSON);
    });
  }

  createSymbol() {
    // const abstractedTargetLayer = this.domainLayers[0].getAbstractedLayer();
    // if (Utils.shouldIgnoreLayer(abstractedTargetLayer.type)) {
    //   Alert(
    //     "Warning!",
    //     "Unable to create Component from conditional layer!",
    //     true
    //   ).then(() => {
    //     return;
    //   });
    //   return;
    // }
    let response: any;
    response = CreateSymbolFile(
      this.session,
      this.domainLayersPath,
      this.domainParentLayerPath,
      this.symbolFileId
    );
    const {
      symbolInstance,
      template,
      wrapperLayer,
      symbolFile,
      layerIndex
    } = response;

    if (!symbolInstance || !template || !wrapperLayer || !symbolFile) {
      throw new Error("Could not create Component");
    }
    const wrapperLayerChildrenLen = wrapperLayer.getChildren().length;
    times(wrapperLayerChildrenLen, (index: number) => {
      MoveLayerService(
        this.session,
        wrapperLayer.getFullPath(),
        symbolFile.layer.getFullPath(),
        wrapperLayerChildrenLen - index - 1,
        0
      );
    });
    const symbolLayer = AddLayerService(
      this.session,
      this.domainParentLayerPath,
      template,
      layerIndex
    );

    this.symbolLayerPath = symbolLayer.getFullPath();
    symbolLayer.import.packageName = symbolFile.path;

    symbolLayer.import.layerName = Utils.getSymbolNameFromFileId(
      symbolFile.path
    );

    RemoveLayerMutator(this.session, wrapperLayer.getFullPath());
    SelectLayersService(
      this.session,
      [symbolLayer.getFullPath()],
      undefined,
      true
    );
  }
  execute() {
    this.createSymbol();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `create.symbol.from.selected.layers`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  undo() {
    RemoveLayerMutator(this.session, this.symbolLayerPath);
    forEach(this.domainLayersJSON, layerJSON => {
      AddLayerService(
        this.session,
        this.domainParentLayerPath,
        layerJSON,
        layerJSON.index
      );
    });
    RemoveFileMutator(this.session, this.symbolFileId);
    DeselectAllLayers(this.session, true);
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.create.symbol.from.selected.layers`,
        path: "",
        category: "app/command"
      },
      true
    );
    // this.commandManager.undoAll();
  }

  redo() {
    this.createSymbol();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.create.symbol.from.selected.layers`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
}
