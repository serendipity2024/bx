import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { Expression, LiteralNode } from "domain-x";
import { set, forEach } from "lodash";
import { ExpressionStatement } from "domain-x";
import CreateBinaryExpression from "./CreateBinaryExpression";
import CreateExpressionNode from "./CreateExpressionNode";
import CreateLogicalExpression from "./CreateLogicalExpression";
import { ResolveNode, ResolveNodeValue } from "utils";
import CreateLiteralNode from "./CreateLiteralNode";
import { Layer as DomainLayer } from "domain-x";

export default class CreateExpressionStatementNode implements ICommand {
  displayName = "CreateExpressionStatementNode";
  private session: Session;
  private JSON: any;
  private parent: any;
  private key: string;
  private property?: string;
  private resolveDomainCompile: boolean;
  private replace: boolean;
  constructor(
    session: Session,
    parent: any,
    key: string,
    JSON: any,
    property?: string,
    resolveDomainCompile: boolean = true,
    replace: boolean = false
  ) {
    this.session = session;
    this.JSON = JSON;
    this.parent = parent;
    this.key = key;
    this.property = property;
    this.resolveDomainCompile = resolveDomainCompile;
    this.replace = replace;
  }
  execute() {
    const node = new ExpressionStatement(this.JSON, this.session);

    node.parent = this.parent;
    if (node.parent instanceof DomainLayer && !this.replace) {
      const index = parseInt(this.key.replace("children.", ""), 10);
      node.parent.appendChild(node, index);
    } else {
      set(this.parent, this.key, node);
    }

    if (this.JSON.expression.type === "binaryExpression") {
      this.session.commandManager.executeAndSkip(
        new CreateBinaryExpression(
          this.session,
          node,
          "expression",
          this.JSON.expression,
          this.property
        )
      );
    } else if (this.JSON.expression.type === "logicalExpression") {
      this.session.commandManager.executeAndSkip(
        new CreateLogicalExpression(
          this.session,
          node,
          "expression",
          this.JSON.expression,
          this.property
        )
      );
    } else if (this.JSON.expression.type === "expression") {
      this.session.commandManager.executeAndSkip(
        new CreateExpressionNode(
          this.session,
          node,
          "expression",
          this.JSON.expression,
          this.property
        )
      );
    } else if (this.JSON.expression.type === "literal") {
      this.session.commandManager.executeAndSkip(
        new CreateLiteralNode(
          this.session,
          node,
          "expression",
          this.JSON.expression,
          this.property
        )
      );
    }
    if (this.resolveDomainCompile) {
    }
  }
  undo() {
    //
  }
  redo() {
    //
  }
}
