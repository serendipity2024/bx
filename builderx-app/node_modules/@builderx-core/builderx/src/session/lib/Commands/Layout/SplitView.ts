import { Layer as DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import { ICommand, CommandManager } from "command-manager";
import SetStyleAttributeMutator from "../../Mutators/SetStyleAttributeMutator";
import AddLayer from "../Layer/AddLayer";
import { forEach, cloneDeep } from "lodash";
import SelectLayersService from "../CommandServices/SelectLayersService";

export default class SplitView implements ICommand {
  displayName = "SplitView";
  private domainLayer: DomainLayer;
  private session: Session;
  private direction: "Horizontal" | "Vertical";
  private commandManager: CommandManager;
  constructor(
    session: Session,
    domainLayer: DomainLayer,
    direction: "Horizontal" | "Vertical"
  ) {
    this.commandManager = new CommandManager();
    this.session = session;
    this.domainLayer = domainLayer;
    this.direction = direction;
  }
  execute() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `split.view`,
        path: "",
        category: "app/command"
      },
      true
    );

    if (this.domainLayer) {
      var command = undefined;
      if (this.direction === "Horizontal") {
        SetStyleAttributeMutator(
          this.session,
          this.domainLayer.getPath(undefined, true),
          "flexDirection",
          "column"
        );
      } else if (this.direction === "Vertical") {
        SetStyleAttributeMutator(
          this.session,
          this.domainLayer.getPath(undefined, true),
          "flexDirection",
          "row"
        );
      }

      if (this.domainLayer.getChildren().length < 1) {
        for (var i = 0; i < 2; i++) {
          const color = Math.floor(Math.random() * (255 - 204 + 1) + 204);
          const ViewDefinition = this.session.currentStage.canvas.getComponentDefinition(
            "view"
          );
          const layerJSON = cloneDeep(ViewDefinition.template);
          layerJSON.props["style"] = {
            flex: 0.5,
            backgroundColor: `rgba(${color}, ${color}, ${color},1)`
          };

          let addLayerCmd = new AddLayer(
            this.session,
            this.domainLayer,
            layerJSON
          );
          this.commandManager.execute(addLayerCmd);
        }
      } else {
        let children = this.domainLayer.getLayoutChildrenLayerIds();
        let totalFlex = 0;
        let flex = +(1 / (children.length + 1)).toFixed(2);
        forEach(children, (child, index) => {
          SetStyleAttributeMutator(
            this.session,
            child.getFullPath(),
            "flex",
            flex
          );

          totalFlex += flex;
        });
        const color = Math.floor(Math.random() * (255 - 204 + 1) + 204);

        const ViewComponentDefinition = this.session.currentStage.canvas.getComponentDefinition(
          "view"
        );

        const layerJSON = cloneDeep(ViewComponentDefinition.template);
        layerJSON.props["style"] = {
          flex: 1 - totalFlex,
          backgroundColor: `rgba(${color}, ${color}, ${color},1)`
        };

        let addLayerCmd = new AddLayer(
          this.session,
          this.domainLayer,
          layerJSON
        );
        this.commandManager.execute(addLayerCmd);
      }
      // CommandUtils.setDimensionsForChildren(
      //   this.session,
      //   this.domainLayer,
      //   "flex"
      // );
      SelectLayersService(this.session, [this.domainLayer.getFullPath()]);
    }
  }
  undo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.split.view`,
        path: "",
        category: "app/command"
      },
      true
    );
    this.commandManager.undoAll();
  }
  redo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.split.view`,
        path: "",
        category: "app/command"
      },
      true
    );
    this.commandManager.redoAll();
  }
}
