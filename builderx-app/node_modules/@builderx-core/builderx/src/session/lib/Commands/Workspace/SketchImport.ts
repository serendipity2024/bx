import { ICommand } from "command-manager";
import { SketchImportDialog } from "dialog-x";
import { action, shouldStopUpdates } from "model";
import { Session } from "../../models/Session";
import OpenFileDialog from "./../../services/OpenFileDialog";
import { ProgressIndicatorDialog } from "dialog-x";
import LoadFiles from "../CommandServices/LoadFilesService";
import PlaceArtboardsToCenterService from "../CommandServices/PlaceArtboardsToCenter";
import SetFileCode from "../CommandServices/SetFileCode";

export default class SketchImport implements ICommand {
  displayName = "SketchImport";
  private session: Session;
  private sketchFile: any;
  constructor(session: Session, sketchFile?: any) {
    this.session = session;
    this.sketchFile = sketchFile;
  }
  async execute() {
    action(async () => {
      this.session.drivers.analyticsService.addActivity(
        {
          name: `sketch.import`,
          path: "",
          category: "app/command"
        },
        true
      );
      let fileContent;
      if (this.sketchFile) {
        fileContent = this.sketchFile;
      } else {
        fileContent = await OpenFileDialog();
      }
      let existingFiles = this.session.getAllFileNames();
      clearInterval(this.session.autoSaveProjectOnInterval);
      this.session.shouldDisableAutoSave(true);
      this.session.setSketchImportProgress(true);
      const sketchExtension = this.session.extensionService.extensionsIPC.get(
        "SketchImport"
      );
      try {
        if (sketchExtension) {
          if (fileContent) {
            ProgressIndicatorDialog(
              "Importing Sketch File",
              "Please wait while we are processing the file",
              2
            );
            this.session.setShouldUpdateCode(false);
            shouldStopUpdates(true);
            await sketchExtension.executeCommand("extractSketchFile", [
              fileContent
            ]);
            ProgressIndicatorDialog(
              "Importing Sketch File",
              "Please wait while we are processing the file",
              5,
              false,
              true
            );

            let artboardsList: any = await sketchExtension.executeCommand(
              "getArtboardsList"
            );
            if (artboardsList) {
              let importData: any = await SketchImportDialog(
                artboardsList,
                existingFiles.artboards
              );
              if (importData) {
                ProgressIndicatorDialog(
                  "Importing Sketch File",
                  "Please wait while we are processing the file",
                  5
                );
                let responseJSON: any;
                try {
                  responseJSON = await sketchExtension.executeCommand(
                    "getOutputJSON",
                    [
                      importData.scale,
                      importData.convertSVG,
                      importData.selectedArtboards,
                      this.calculateInitialPosition(),
                      existingFiles,
                      this.session.systemFonts
                    ]
                  );
                } catch (error) {
                  console.log("Issue in Sketch Import", error);
                  this.session.notificationManager.notifyWarning(
                    "There is some issue with some layers in the sketch file you are trying to import, " +
                      "some layers might have been skipped in import.",
                    "Screens import warning"
                  );
                  this.session.drivers.Sentry.captureException(
                    error ? error : { message: "Sketch Import error" }
                  );
                }
                LoadFiles(
                  this.session,
                  responseJSON,
                  "Sketch",
                  importData.selectedArtboards.length !== artboardsList.length
                );
              }
              ProgressIndicatorDialog(
                "Importing Sketch File",
                "Please wait while we are processing the file",
                100,
                false,
                true
              );
            }
          }
        }
      } catch (error) {
        console.log("Sketch Import Failed", error);
        ProgressIndicatorDialog("", "Error", 100, false, true);
        this.session.notificationManager.notifyError(
          "There is some error with the sketch file you are trying to import, " +
            "please try saving sketch file again, if the issue persists, please contact support.",
          "Screens import failed"
        );
        this.session.drivers.Sentry.captureException(
          error ? error : { message: "Sketch Import error" }
        );
      } finally {
        shouldStopUpdates(false);
        this.session.setShouldUpdateCode(true);
        if (this.session.showCodeEditor) {
          SetFileCode(this.session);
        }
        action(() => {
          PlaceArtboardsToCenterService(this.session);
          this.session.emit([
            "currentStage",
            "selectedFile",
            "addArtboardButton"
          ]);
        });

        action(() => {
          this.session.setSketchImportProgress(false);
          this.session.shouldDisableAutoSave(false);
          this.session.emit("importingSketchFile");
        });
        this.session.autoSaveProjectOnInterval = this.session.autoSaveProject(
          true
        );
        ProgressIndicatorDialog(
          "Reading Sketch File...",
          "Please wait while we are processing the file",
          2,
          false,
          true
        );
      }
    });
  }
  undo() {
    //
  }
  redo() {
    //
  }
  private calculateInitialPosition() {
    let position = this.session.getNewArtboardPosition();
    return {
      x: position.fileLeft,
      y: position.fileTop
    };
  }
}
