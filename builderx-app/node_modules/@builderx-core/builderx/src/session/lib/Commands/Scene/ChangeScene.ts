import { ICommand } from "command-manager";
import { File, Layer } from "domain-x";
import { get, isEmpty } from "lodash";
import { Session } from "../../models/Session";
import PlaceArtboardsToCenter from "./../Session/PlaceArtboardsToCenter";
import SelectFile from "./../Session/SelectFile";
import SelectRootLayer from "./../Session/SelectRootLayer";
import SetInitialScroll from "./../Session/SetInitialScroll";
import SetZoom from "./../Session/SetZoom";
import ChangeSceneToSymbol from "./ChangeSceneToSymbol";
import { reset, setupScrollViewStage, traverseLayersDFS } from "./SceneUtils";
import CloseCodeEditor from "../Session/CloseCodeEditor";
import { GetNextValidArtboard } from "../CommandServices/GetNextValidArtboard";
import SetCurrentRootLayer from "../CommandServices/SetCurrentRootLayer";
import CommandUtils from "../Utils";
import { Utils } from "utils";

export default class ChangeScene implements ICommand {
  displayName = "ChangeScene";
  session: Session;
  currentLayer: Layer | undefined;
  previousCurrentLayer: Layer;
  stageId: string;
  prevStageId: string;
  symbolFile: File;
  constructor(
    session: Session,
    currentLayer: Layer | undefined,
    stageId: string
  ) {
    this.session = session;
    this.currentLayer = currentLayer;
    this.stageId = stageId;
    this.prevStageId = this.session.currentStage.id;
    this.previousCurrentLayer = get(
      this,
      "session.previousStageData.currentLayer",
      this.session.currentRootLayer
    );
    this.session.previousStageData.currentLayer = currentLayer;
  }
  execute() {
    this.changeScene(this.stageId, this.currentLayer, this.prevStageId);
  }
  undo() {
    this.changeScene(this.prevStageId, this.previousCurrentLayer, this.stageId);
  }
  redo() {
    this.changeScene(this.stageId, this.currentLayer, this.prevStageId);
  }

  private changeScene(
    curentStageId: string,
    currentLayer: Layer | undefined,
    prevStageId: string
  ) {
    // if (curentStageId.includes("layer:")) {
    //   this.session.commandManager.executeAndSkip(
    //     new CloseCodeEditor(this.session)
    //   );
    // }
    if (this.session.currentStage.id === "artboard") {
      this.session.commandManager.executeAndSkip(
        new SetInitialScroll(
          this.session,
          this.session.currentStage.tools.currentScroll
        )
      );
    }
    if (
      curentStageId.includes("layer:") &&
      currentLayer &&
      prevStageId === "artboard" &&
      !isEmpty(this.session.getLayersFromSelectedLayerCollection())
    ) {
      this.session.previousStageData.layerSelectedInArtboard = this.session.getLayersFromSelectedLayerCollection()[0];
    }
    reset(this.session);
    let dims = { width: 0, height: 0 };

    if (currentLayer) {
      dims = Utils.getLayerSceneDimensions(currentLayer);
    }

    if (prevStageId.includes("layer:")) {
      this.session.currentStage.domainCompiled.files.clear();
      // removeCurrentStageRef(this.session, this.session.currentRootLayer);
      // traverseLayersDFS(
      //   this.session.currentStage.renderCompiled,
      //   (childLayer: any) => {
      //     if (childLayer.remove && childLayer.parent) {
      //       childLayer.remove();
      //     }
      //   }
      // );
      // this.session.currentStage.renderCompiled.children.length = 0;

      if (this.session.currentRootLayer) {
        const stageData = {
          scroll: this.session.currentStage.tools.currentScroll,
          zoom: this.session.currentStage.tools.zoom
        };
        this.session.currentRootLayer.setStageData(stageData);
      }
    }

    // clear stage start
    if (curentStageId !== "artboard") {
      this.session.setCurrentStage(curentStageId);
    }
    // clear stage end

    // to symbol
    if (
      curentStageId !== "artboard" &&
      curentStageId.includes("layer:") === false &&
      currentLayer
    ) {
      if (prevStageId === "artboard" && this.session.selectedFile) {
        this.session.previousStageData.currentFile = this.session.selectedFile;
        this.session.previousStageData.layerSelectedInArtboard = this.session.getLayersFromSelectedLayerCollection()[0];
      }
      this.session.commandManager.executeAndSkip(
        new ChangeSceneToSymbol(
          this.session,
          currentLayer.import.packageName,
          currentLayer
        )
      );
    } else if (curentStageId.includes("layer:") && currentLayer) {
      setupScrollViewStage(this.session, currentLayer, dims);
      this.session.commandManager.executeAndSkip(
        new PlaceArtboardsToCenter(this.session)
      );

      // set scroll (move to another function)
      let scroll = { x: 0.5, y: 0.5 };
      let zoom = this.session.calculateZoom();
      const stageData = this.session.currentRootLayer.stageData;
      if (stageData) {
        scroll = stageData.scroll;
        zoom = stageData.zoom;
      }
      this.session.commandManager.executeAndSkip(
        new SetInitialScroll(this.session, scroll)
      );
      this.session.commandManager.executeAndSkip(
        new SetZoom(this.session, zoom)
      );
      //
      // this.session.currentStage.renderCompiled.children[0].traverseLayers(
      //   (childLayer: any) => {
      //     childLayer.setPaperNode();
      //   }
      // );
    } else if (curentStageId.includes("layer:") === false) {
      if (
        prevStageId !== "artboard" &&
        prevStageId.includes("layer:") === false
      ) {
        // if (
        //   this.session.previousStageData &&
        //   this.session.previousStageData.currentFile
        // ) {
        // this.session.commandManager.executeAndSkip(
        //   new SelectFile(
        //     this.session,
        //     this.session.previousStageData.currentFile
        //   )
        // );
        // }
      } else {
        // const file = this.session.currentRootLayer.getFile();
        // if (!file) {
        //   return;
        // }
        // file.domainCompiledRefs.splice(0, file.domainCompiledRefs.length - 1);
      }
      this.session.setCurrentStage(curentStageId);
    }
    if (curentStageId === "artboard") {
      let validFile = this.session.previousStageData.currentFile;
      if (!validFile) {
        validFile = GetNextValidArtboard(this.session);
      }
      if (validFile) {
        this.session.commandManager.executeAndSkip(
          new SelectFile(this.session, validFile)
        );
        SetCurrentRootLayer(this.session, validFile.layer);
      }
    }
    //  else {
    this.session.commandManager.executeAndSkip(
      new SelectRootLayer(this.session)
    );

    // }

    // this.session.commandManager.executeAndSkip(
    //   new GeneratePreviewAndSelectLayer(this.session, [
    //     this.session.currentRootLayer
    //   ])
    // );

    // if (this.session.selectedFile.calculatedDims === false) {

    if (
      prevStageId.includes("layer:") &&
      curentStageId.includes("layer:") === false
    ) {
      //
      const file = this.previousCurrentLayer.getFile();
      if (!file) {
        return;
      }
    }

    // }

    this.session.emit("currentStage");
    // this.session.currentStage.renderCompiled.emit("children");
  }
}
