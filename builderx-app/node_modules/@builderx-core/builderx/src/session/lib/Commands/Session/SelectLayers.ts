import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import SelectLayersService from "../CommandServices/SelectLayersService";
import { get } from "lodash";

export default class SelectLayers implements ICommand {
  displayName = "SelectLayers";
  session: Session;
  layers: Array<any>;
  private generatePreview?: boolean = false;
  private unResizeFile?: boolean = false;

  private layerPaths: Array<string> = [];
  private filePath: string = "";
  constructor(
    session: Session,
    layers: Array<any>,
    unResizeFile: boolean = false,
    generatePreview: boolean = false
  ) {
    this.session = session;
    this.layers = layers;
    this.unResizeFile = unResizeFile;
    this.generatePreview = generatePreview;

    if (this.layers[0]) {
      const file = this.layers[0].getFile();
      this.filePath = get(file, "path");
    }

    layers.forEach(layer => {
      this.layerPaths.push(layer.getPath(undefined, true));
    });
  }
  execute() {
    SelectLayersService(
      this.session,
      this.layers.map(layer => layer.getFullPath()),
      this.unResizeFile,
      true
    );
  }
  undo() {
    // nope
  }
  redo() {
    // nope
  }
}
