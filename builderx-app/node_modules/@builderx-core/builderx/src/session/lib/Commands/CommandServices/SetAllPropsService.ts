import { File as DomainFile, DomainLayer } from "domain-x";
import { forEach } from "lodash";
import { Session } from "../../models/Session";
import { SetPropMutator } from "../../Mutators";
import createService from ".";

export const SetAllPropsService = createService(
  "SetAllPropsService",
  (session: Session, domainLayerPath: string, props: any) => {
    // try {
    const domainLayer = session.getLayerFromLayerPath(domainLayerPath);
    const isListView =
      domainLayer &&
      domainLayer instanceof DomainLayer &&
      domainLayer.import.layerName === "FlatList";
    const inValidProps = [
      "renderItem",
      "ListFooterComponent",
      "ListHeaderComponent",
      "ItemSeparatorComponent",
      "disposed"
    ];
    forEach(props, (value: any, key: string) => {
      if (isListView && inValidProps.indexOf(key) !== -1) {
        // if (value) {
        //   this.commandManager.execute(
        //     new AddLayer(
        //       this.session,
        //       this.domainLayer,
        //       value,
        //       true,
        //       `props.${key}`,
        //       false
        //     )
        //   );
        // }
      } else {
        SetPropMutator(session, domainLayerPath, key, value);
      }
    });
    // } catch (err) {
    //   console.log(err, "Could't add symbol layer ref in symbol file");
    // }
  }
);
