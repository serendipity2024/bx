import { ICommand } from "command-manager";
import { Layer as DomainLayer } from "domain-x";
import { Session } from "../../../models/Session";
import SelectLayersService from "../../CommandServices/SelectLayersService";
import SelectRootLayer from "../../CommandServices/SelectRootLayer";
import DeselectAllLayers from "../../CommandServices/DeselectAllLayers";
import SetLayerHideMutator from "src/session/lib/Mutators/SetLayerHideMutator";
import RemoveHoveredForAllLayersMutator from "../../../Mutators/RemoveHoveredForAllLayersMutator";

export default class SetLayerHide implements ICommand {
  displayName = "SetLayerHide";
  session: Session;
  layerId: string;
  hide: boolean;
  selected: boolean;
  constructor(session: Session, layer: DomainLayer, hide: boolean) {
    this.session = session;
    this.hide = hide;
    this.layerId = layer.getFullPath();
  }
  hideLayer() {
    const layer = this.session.getLayerFromLayerPath(this.layerId);
    if (layer.type === "root") {
      return;
    }
    this.selected = layer.selected;
    SetLayerHideMutator(this.session, this.layerId, this.hide);
    if (this.selected) {
      DeselectAllLayers(this.session);
      SelectRootLayer(this.session);
    } else {
      RemoveHoveredForAllLayersMutator(this.session);
    }
  }
  execute() {
    this.hideLayer();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `set.layer.hide`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  undo() {
    const layer = this.session.getLayerFromLayerPath(this.layerId);
    if (layer.type === "root") {
      return;
    }
    SetLayerHideMutator(this.session, this.layerId, !this.hide);
    if (this.selected) {
      SelectLayersService(this.session, [this.layerId]);
    }
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.layer.hide`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  redo() {
    this.hideLayer();
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.layer.lock`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
}
