import { Layer as DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import { isNil, forEach } from "lodash";
import SetStyleAttributeMutator from "../../Mutators/SetStyleAttributeMutator";
import RemoveStyleAttributeMutator from "../../Mutators/RemoveStyleAttributeMutator";
import FillLayer from "./FillLayer";
import createService from ".";
import { SetCenterWrapperMutator } from "../../Mutators";

const ChangeToFlex = createService(
  "ChangeToFlex",
  (session: Session, domainLayerPath: string) => {
    const domainLayer = session.getLayerFromLayerPath(domainLayerPath);
    if (!domainLayer) {
      return;
    }
    const compiledLayer = domainLayer.getOwnCanvasRef() as any;
    // compiledLayer.calculateLayout();

    // set style of children layers
    domainLayer.forEachChild((child: DomainLayer, index: number) => {
      // RemoveCenterWrapperMutator(session, child);
      SetCenterWrapperMutator(session, child.getFullPath(), {
        vertical: false,
        horizontal: false
      });

      const childFlex = child.props.getResolvedStyleAttribute("flex");
      const childWidth = child.props.getResolvedStyleAttribute("width");
      const childHeight = child.props.getResolvedStyleAttribute("height");
      const elementType = child.props.getResolvedStyleAttribute("position");
      const isHeightFillBefore = child.isHeightFill;
      const isWidthFillBefore = child.isWidthFill;
      const isWidthAutoBefore = child.isWidthAuto;
      const isHeightAutoBefore = child.isHeightAuto;

      const dimensions = child.getBoundingClientRect();

      if (elementType && elementType === "absolute") {
        removePositionStyles(child, session);
      }

      if (
        isNil(childFlex) &&
        !childWidth &&
        !isWidthAutoBefore &&
        !isWidthFillBefore
      ) {
        SetStyleAttributeMutator(
          session,
          domainLayerPath,
          "width",
          dimensions.width
        );
      }
      if (
        isNil(childFlex) &&
        !childHeight &&
        !isHeightAutoBefore &&
        !isHeightFillBefore
      ) {
        SetStyleAttributeMutator(
          session,
          domainLayerPath,
          "height",
          dimensions.height
        );
      }
      if (isHeightFillBefore) {
        FillLayer(session, child, "height");
      }
      if (isWidthFillBefore) {
        FillLayer(session, child, "width");
      }
    });

    // calculate yoga node for parent
    compiledLayer.recalculateLayout();
  }
);
function removePositionStyles(layer: DomainLayer, session: Session) {
  let arrtibutes = ["position", "top", "left", "right", "bottom"];
  forEach(arrtibutes, (attribute: string) => {
    RemoveStyleAttributeMutator(
      session,
      layer.getPath(undefined, true),
      attribute,
      "style"
    );
  });
}

export default ChangeToFlex;
