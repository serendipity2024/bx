import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { Layer } from "domain-x";
import { action } from "model";
import { GetImageAbsPath } from "../CommandServices/GetImagePath";
import { SetPropMutator } from "../../Mutators";
import { get, cloneDeep } from "lodash";
import { SetImageAssetsService } from "../CommandServices/SetImageAssetsService";
import { AddLayerService } from "../CommandServices/AddLayerService";
import RemoveLayerService from "./../CommandServices/RemoveLayerService";
import SelectLayersService from "../CommandServices/SelectLayersService";

export default class ChangeImage implements ICommand {
  displayName = "ChangeImage";
  private session: Session;
  private domainLayerPath: string;
  private imageObject: any;
  private oldUri: any;
  private newUri: any;
  private oldLayerJSON: any;
  private parentLayerPath: any;
  private toIndex: any;

  constructor(session: Session, layer: Layer, imageObject: any) {
    this.session = session;
    this.domainLayerPath = layer.getFullPath();
    this.imageObject = imageObject;
    this.oldLayerJSON = cloneDeep(layer.toJS());
    this.parentLayerPath = layer.parent.getFullPath();
    this.toIndex = layer.findIndexInParent();
  }
  execute() {
    RemoveLayerService(this.session, this.domainLayerPath);
    const layerJSON = cloneDeep(this.oldLayerJSON);
    layerJSON.props.source = {
      uri: ""
    };
    layerJSON.props.source_local = {
      uri: ""
    };
    const layer = AddLayerService(
      this.session,
      this.parentLayerPath,
      layerJSON,
      this.toIndex,
      false,
      false,
      [this.imageObject]
    );

    SelectLayersService(this.session, [layer.getFullPath()], undefined, true);

    // this.session.drivers.analyticsService.addActivity(
    //   {
    //     name: `change.image`,
    //     path: "",
    //     category: "app/command"
    //   },
    //   true
    // );
  }
  undo() {
    RemoveLayerService(this.session, this.domainLayerPath);
    const layerJSON = this.oldLayerJSON;

    const layer = AddLayerService(
      this.session,
      this.parentLayerPath,
      layerJSON,
      this.toIndex
    );

    SelectLayersService(this.session, [layer.getFullPath()], undefined, true);

    // this.session.drivers.analyticsService.addActivity(
    //   {
    //     name: `undo.change.image`,
    //     path: "",
    //     category: "app/command"
    //   },
    //   true
    // );
  }
  redo() {
    this.execute();
    // if (this.newUri) {
    //   SetPropMutator(this.session, this.domainLayerPath, "source", {
    //     uri: this.newUri
    //   });
    // }
    // this.session.drivers.analyticsService.addActivity(
    //   {
    //     name: `redo.change.image`,
    //     path: "",
    //     category: "app/command"
    //   },
    //   true
    // );
  }
  readImage(file: any): Promise<string> {
    return new Promise((resolve, reject) => {
      var reader = new FileReader();
      reader.onload = function(evt: any) {
        resolve(evt.target.result);
      };
      reader.readAsDataURL(file);
    });
  }
}
