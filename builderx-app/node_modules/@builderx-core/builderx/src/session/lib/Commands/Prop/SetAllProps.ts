import { CommandManager, ICommand } from "command-manager";
import { File as DomainFile, Layer as DomainLayer } from "domain-x";
import { forEach } from "lodash";
import { Session } from "../../models/Session";
import AddLayer from "../Layer/AddLayer";
import SetProp from "./SetProp";

export default class SetAllProps implements ICommand {
  displayName = "SetAllProps";
  private commandManager: CommandManager;
  private session: Session;
  private domainLayer: DomainLayer | DomainFile;
  private newValue: { [key: string]: any };
  private resolveCompiledProps: boolean;
  constructor(
    session: Session,
    domainLayer: DomainLayer | DomainFile,
    value: { [key: string]: any },
    resolveCompiledProps: boolean = true
  ) {
    this.commandManager = new CommandManager();
    this.session = session;
    this.domainLayer = domainLayer;
    this.newValue = value;
    this.resolveCompiledProps = resolveCompiledProps;
  }
  execute() {
    const isListView =
      this.domainLayer &&
      this.domainLayer instanceof DomainLayer &&
      this.domainLayer.import.layerName === "FlatList";
    const inValidProps = [
      "renderItem",
      "ListFooterComponent",
      "ListHeaderComponent",
      "ItemSeparatorComponent",
      "disposed"
    ];

    forEach(this.newValue, (value: any, key: string) => {
      if (isListView && inValidProps.indexOf(key) !== -1) {
        if (value) {
          this.commandManager.execute(
            new AddLayer(
              this.session,
              this.domainLayer,
              value,
              `props.${key}`,
              false
            )
          );
        }
      } else {
        this.commandManager.execute(
          new SetProp(
            this.session,
            this.domainLayer,
            key,
            value,
            this.resolveCompiledProps,
            undefined,
            false
          )
        );
      }
    });
  }
  undo() {
    this.commandManager.undoAll();
  }
  redo() {
    this.commandManager.redoAll();
  }
}
