import { ICommand, CommandManager } from "command-manager";
import { Session } from "../../models/Session";
import { Layer } from "domain-x";
import { size, get } from "lodash";
import { Alert } from "dialog-x";
import { Utils } from "utils";
import RemoveLayer from "./RemoveLayer";
import AddLayer from "./AddLayer";
import DeselectAllLayers from "../Session/DeselectAllLayers";
import SelectLayersService from "../CommandServices/SelectLayersService";

export default class RemoveLoop implements ICommand {
  displayName = "RemoveLoop";
  session: Session;
  layer: Layer;
  astPath: string;
  commandManager: any;
  constructor(session: Session, layer: Layer) {
    this.session = session;
    this.layer = layer;
    this.commandManager = new CommandManager();
  }
  execute() {
    if (size(this.session.getRecordingConditions()) !== 0) {
      Alert("Warning!", "Unable to remove loop while recording!", true).then(
        () => {
          return;
        }
      );
      return;
    } else if (Utils.shouldIgnoreLayer(this.layer.type)) {
      Alert(
        "Warning!",
        "Unable to remove loop on conditional layer!",
        true
      ).then(() => {
        return;
      });
      return;
    }
    this.astPath = this.layer.getPath();
    const loopLayer = get(this.layer, "parent");

    if (
      this.layer.type === "root" &&
      get(this.layer, "parent.type") !== "loop"
    ) {
      return;
    }
    const layerJson = this.layer.toJS();
    const index = loopLayer.findIndexInParent();
    const loopParentLayer = get(loopLayer, "parent");
    this.commandManager.execute(new RemoveLayer(this.session, loopLayer));

    this.commandManager.execute(
      new AddLayer(this.session, loopParentLayer, layerJson, index)
    );
    SelectLayersService(this.session, [loopParentLayer.children[index]]);
  }
  undo() {
    this.session.commandManager.executeAndSkip(
      new DeselectAllLayers(this.session)
    );
    this.commandManager.undoAll();
    SelectLayersService(this.session, [this.session.currentRootLayer]);
  }
  redo() {
    this.session.commandManager.executeAndSkip(
      new DeselectAllLayers(this.session)
    );

    this.commandManager.redoAll();
    SelectLayersService(this.session, [this.session.currentRootLayer]);
  }
}
