import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
const path = require("path-browserify");
import domtoimage from "dom-to-image";
import NotifySuccess from "../Notifications/NotifySuccess";
import NotifyError from "../Notifications/NotifyError";
import { action } from "model";

export default class ExportArtboardsAsPNG implements ICommand {
  displayName = "ExportArtboardsAsPNG";
  session: Session;
  constructor(session: Session) {
    this.session = session;
  }
  async execute() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `export.artboards.to.png`,
        path: "",
        category: "app/command"
      },
      true
    );
    if (this.session.currentStage.id !== "artboard") {
      return;
    }
    const files = this.session.domain.files;
    const folderPath = await this.session.drivers.dialog.chooseFolderToExport();
    if (!folderPath) {
      return;
    }
    let promiseArray: Array<Promise<any>> = [];

    files.forEach(async (file: any) => {
      if (!file.isSymbol()) {
        const filePath = file.path;

        const artboardName = path.basename(filePath, ".js");
        let artboardNode = document.getElementsByClassName(
          `bx-artboard-${artboardName}`
        )[0];

        promiseArray.push(
          new Promise(async (resolve, reject) => {
            domtoimage
              .toPng(artboardNode.getElementsByTagName("div")[0])
              .then((dataUrl: any) => {
                let base64Image = dataUrl.split(";base64,").pop();
                const imagePath = path.join(folderPath, `${artboardName}.png`);
                // try {
                //   this.session.before();
                //   this.session.apiSdk.assets.uploadAsset(
                //     this.session.project.projectId,
                //     imagePath,
                //     base64Image,
                //     this.session.connectionId,
                //     "image"
                //   );
                //   resolve({ status: true, artboardName });
                // } catch (err) {
                //   console.error("Couldn't upload image in export as PNG", err);
                //   resolve({ status: false, artboardName });
                // } finally {
                //   this.session.after();
                // }
              })
              .catch((error: any) => {
                console.error("oops, something went wrong!", error);
                reject({ status: false, artboardName });
              });
          })
        );
      }
    });
    Promise.all(promiseArray)
      .then((response: any) => {
        action(() => {
          this.session.commandManager.executeAndSkip(
            new NotifySuccess(
              this.session,
              "Your screens has been exported to the specified folder.",
              "Screens exported successfully"
            )
          );
        });
        // this.session.drivers.fileService.openFolderInFinder(folderPath);
      })
      .catch((response: any) => {
        action(() => {
          this.session.commandManager.executeAndSkip(
            new NotifyError(
              this.session,
              `Something went wrong while exporting ${response.artboardName}.`,
              "Screens export failed"
            )
          );
        });
      });
  }
  undo() {
    //
  }
  redo() {
    //
  }
}
