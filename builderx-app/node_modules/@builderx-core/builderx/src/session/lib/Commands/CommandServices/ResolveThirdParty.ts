import { Session } from "../../models/Session";
import { Layer, DomainLayer } from "domain-x";
import { loadThirdPartyComponent } from "domain-x";
import createService from ".";

const ResolveThirdParty = createService(
  "ResolveThirdParty",
  (
    session: Session,
    domainLayer: Layer,
    compiledParentLayer: any,
    inputIndex: number
  ) => {
    const thirdPartyComponent = loadThirdPartyComponent(
      domainLayer.import.layerName
    );

    resolveLayer(
      session,
      thirdPartyComponent,
      compiledParentLayer,
      domainLayer,
      inputIndex
    );
    compiledParentLayer.traverseLayers((layer: any) => {
      const dims = layer.computeYogaNode();
      // layer.renderCompiledRef.setDimension({
      //   x: dims.left,
      //   y: dims.top,
      //   width: dims.width,
      //   height: dims.height
      // });
    });
  }
);
export default ResolveThirdParty;
function resolveLayer(
  session: Session,
  thirdPartyComponent: any,
  compiledParentLayer: any,
  domainLayer: any,
  index: number
) {
  const renderedThirdParty = thirdPartyComponent.componentRenderDefinition;
  // debugger;
  const compiledLayer = createNestedLayers(
    session,
    renderedThirdParty,
    compiledParentLayer,
    domainLayer,
    index
  );
}

function resolveProps(domainLayer: any, controlsProperty: any) {
  //

  // console.log(thirdPartyComponent, "hello 123");
  controlsProperty.forEach((property: any) => {
    if (property.type === "group") {
      resolveProps(domainLayer, property.properties);
    } else {
      if (property.category === "props") {
        domainLayer.props[property.propertyName] = undefined;
      }
    }
  });
}
function createNestedLayers(
  session: Session,
  renderedThirdParty: any,
  parent: any,
  domainLayer: DomainLayer | undefined,
  index: number
) {
  return parent;
  // debugger;
  // console.log(renderedThirdParty, domainLayer, "renderedThirdParty");
  // TODO: refactor-check
  // const compiledLayer = CreateCompiledLayer(session,{}, parent, false, index);
  // if (compiledLayer) {
  //   // used native forEach intentionally
  //   renderedThirdParty.children.forEach(
  //     (childLayer: Layer, childIndex: number) => {
  //       createNestedLayers(
  //         session,
  //         childLayer,
  //         compiledLayer,
  //         undefined,
  //         childIndex
  //       );
  //     }
  //   );
  // }
  // return compiledLayer;
}
