import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { debounce, forEach } from "lodash";
import SetZooming from "./SetZooming";
import { SetZoomMutator } from "../../Mutators";
// import { action } from "model";
// import { SetZoomMutator } from "../../Mutators";
let afterZoom = debounce(session => {
  session.commandManager.executeAndSkip(new SetZooming(session, false));

  // forEach(
  //   this.session.currentStage.renderCompiled.children,
  //   (renderCompiledLayer: RenderCompiledLayer) => {
  //     renderCompiledLayer.traverseLayers(
  //       (childLayer: RenderCompiledLayer) => {
  //         console.log(childLayer, "childLayer");
  //         childLayer.updateZoom(zoom);
  //       }
  //     );
  //   }
  // );
}, 300);
export default class SetZoom implements ICommand {
  displayName = "SetZoom";
  session: Session;
  zoom: number;
  // afterZoom: any;
  constructor(session: Session, zoom: number) {
    this.session = session;
    this.zoom = zoom;
  }
  execute() {
    // this.session.currentStage.tools.zooming = true;
    SetZoomMutator(this.session, this.zoom);
  }
  undo() {
    // nope
  }
  redo() {
    // nope
  }
}
