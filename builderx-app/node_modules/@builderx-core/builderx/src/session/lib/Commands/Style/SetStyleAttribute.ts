import { ICommand } from "command-manager";
import { StylePropNameType } from "common-interfaces";
import { File as DomainFile, Layer as DomainLayer } from "domain-x";
import { Utils } from "utils";
import { Session } from "../../models/Session";
import {
  SetStyleAttributeMutator,
  RemoveStyleAttributeMutator
} from "../../Mutators";
import { GradientEditorEvent } from "@builderx-core/designer";
export default class SetStyleAttribute implements ICommand {
  displayName = "SetStyleAttribute";
  private oldValue: any;
  private newValue: any;
  private key: string;
  private session: Session;
  private stylePropName: StylePropNameType;
  private resolveCompiledStyle: boolean;
  private currentRecordingConditions: { [key: string]: any };
  private shouldEmitUpdates?: boolean = true;
  private domainLayerPath: string;
  private oldBackgroundColor: string;
  constructor(
    session: Session,
    domainLayer: DomainLayer | DomainFile,
    key: string,
    value: any,
    stylePropName: StylePropNameType = "style",
    resolveCompiledStyle: boolean = true,
    shouldEmitUpdates: boolean = true
  ) {
    this.session = session;
    this.newValue =
      typeof value === "number" ? Math.round(value * 100) / 100 : value;
    this.key = key;
    this.stylePropName = stylePropName;
    this.resolveCompiledStyle = resolveCompiledStyle;
    this.shouldEmitUpdates = shouldEmitUpdates;
    this.domainLayerPath = domainLayer.getPath(undefined, true);
    this.oldValue = domainLayer.props.getStyleAttribute(
      this.key,
      this.stylePropName
    );
  }

  execute() {
    if (this.key === "gradient") {
      const domainLayer = this.session.getLayerFromLayerPath(
        this.domainLayerPath
      );
      this.oldBackgroundColor = domainLayer.props.getResolvedStyleAttribute(
        "backgroundColor"
      );
      RemoveStyleAttributeMutator(
        this.session,
        this.domainLayerPath,
        "backgroundColor"
      );
    }
    this.updateStyleAttribute(this.newValue);
    this.setPostscriptName(this.newValue);
  }

  setPostscriptName(value: any) {
    if (
      this.key === "fontFamily" ||
      this.key === "fontWeight" ||
      this.key === "fontStyle"
    ) {
      const domainLayer = this.session.getLayerFromLayerPath(
        this.domainLayerPath
      );
      const fontFamily: string = domainLayer.props.getResolvedStyleAttribute(
        "fontFamily"
      );
      if (fontFamily) {
        const fontWeight: string = domainLayer.props.getResolvedStyleAttribute(
          "fontWeight"
        );
        const fontStyle: string = domainLayer.props.getResolvedStyleAttribute(
          "fontStyle"
        );
        const typeface = Utils.getTypeface(
          fontFamily,
          fontWeight,
          fontStyle,
          this.session.getFontsList()
        );
        if (typeface) {
          SetStyleAttributeMutator(
            this.session,
            this.domainLayerPath,
            "fontPostscriptName",
            typeface.postscriptName,
            this.stylePropName
          );
        }
      }
    }
  }

  undo() {
    if (this.key === "gradient" && this.oldBackgroundColor) {
      SetStyleAttributeMutator(
        this.session,
        this.domainLayerPath,
        "backgroundColor",
        this.oldBackgroundColor,
        this.stylePropName
      );
      if (
        this.session.currentStage.canvas.executeFunction(
          "GradientEditor.isOpen"
        )
      ) {
        const domainLayer: DomainLayer = this.session.getLayerFromLayerPath(
          this.domainLayerPath
        );
        this.session.currentStage.canvas.dispatchEvent(
          `GradientEditor.close`,
          new GradientEditorEvent(
            `GradientEditor.close`,
            domainLayer.getOwnCanvasRef()
          )
        );
      }
    }
    this.updateStyleAttribute(this.oldValue);
    this.setPostscriptName(this.oldValue);
  }

  redo() {
    this.updateStyleAttribute(this.newValue);
    this.setPostscriptName(this.newValue);
  }

  updateStyleAttribute(value: any) {
    SetStyleAttributeMutator(
      this.session,
      this.domainLayerPath,
      this.key,
      value,
      this.stylePropName
    );
  }
}
