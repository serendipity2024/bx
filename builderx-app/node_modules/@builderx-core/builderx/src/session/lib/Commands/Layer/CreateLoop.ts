import { ICommand, CommandManager } from "command-manager";
import { Session } from "../../models/Session";
import Loop from "../../componentJSON/Loop";
import { Layer } from "domain-x";
import { cloneDeep, size } from "lodash";
import AddLayer from "./AddLayer";
import { RemoveLayer, DeselectAllLayers } from "..";
import SetRepetitions from "./SetRepetitions";
import { Utils } from "utils";
import { Alert } from "dialog-x";
import SelectLayers from "../Session/SelectLayers";
import SelectLayersService from "../CommandServices/SelectLayersService";
// import CommandUtils, { setAndComputeDescendants } from "../Utils";

export default class CreateLoop implements ICommand {
  displayName = "CreateLoop";
  session: Session;
  layer: Layer;
  commandManager: CommandManager;
  parentLayer: any;
  astPath: string;
  loopLayer: any;
  constructor(session: Session, layer: Layer) {
    this.session = session;
    this.layer = layer;
    this.parentLayer = layer.parent;
    this.commandManager = new CommandManager();
  }
  execute() {
    if (size(this.session.getRecordingConditions()) !== 0) {
      Alert("Warning!", "Unable to add loop while recording!", true).then(
        () => {
          return;
        }
      );
      return;
    } else if (Utils.shouldIgnoreLayer(this.layer.type)) {
      Alert("Warning!", "Unable to add loop on conditional layer!", true).then(
        () => {
          return;
        }
      );
      return;
    }
    const index = this.layer.findIndexInParent();

    this.astPath = this.layer.getPath();
    if (this.layer.type === "root") {
      return;
    }
    const loopLayerJson = cloneDeep(Loop.template);
    // remove layer will remove the center wrapper on this layer
    this.commandManager.execute(new RemoveLayer(this.session, this.layer));

    this.commandManager.execute(
      new AddLayer(this.session, this.parentLayer, loopLayerJson, index)
    );
    this.loopLayer = this.parentLayer.children[index];
    const domainLayerJson = this.layer.toJS();

    this.commandManager.execute(
      new AddLayer(this.session, this.loopLayer, domainLayerJson)
    );
    this.commandManager.execute(
      new SetRepetitions(this.session, this.loopLayer, 5)
    );
    SelectLayersService(this.session, [this.loopLayer.children[0]]);

    // CommandUtils.setDimensionsForChildren(
    //   this.session,
    //   this.loopLayer.children[0]
    // );

    this.session.drivers.analyticsService.addActivity(
      {
        name: `create.loop`,
        category: "app/command"
      },
      true
    );
  }
  undo() {
    this.session.commandManager.executeAndSkip(
      new DeselectAllLayers(this.session)
    );

    this.commandManager.undoAll();

    SelectLayersService(this.session, [this.session.currentRootLayer]);

    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.create.loop`,
        category: "app/command"
      },
      true
    );
  }
  redo() {
    this.session.commandManager.executeAndSkip(
      new DeselectAllLayers(this.session)
    );

    this.commandManager.redoAll();
    // CommandUtils.setDimensionsForChildren(
    //   this.session,
    //   this.loopLayer.children[0]
    // );

    SelectLayersService(this.session, [this.loopLayer.children[0]]);

    // this.session.commandManager.executeAndSkip(
    //   new SetResizerDimensions(
    //     this.session,
    //     this.session.getSelectedLayers(),
    //     false
    //   )
    // );
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.create.loop`,
        category: "app/command"
      },
      true
    );
  }
}
