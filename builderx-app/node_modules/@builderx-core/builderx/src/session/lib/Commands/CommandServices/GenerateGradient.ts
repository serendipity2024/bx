import { Session } from "../../models/Session";
import { GetImageAbsPath } from "./GetImagePath";
import { getGradientImage } from "builderx-module-gradient";
import { Utils } from "utils";
import createService from ".";
import { DomainLayer } from "domain-x";
export const GenerateGradient = createService(
  "GenerateGradient",
  async (session: Session, domainLayer: DomainLayer) => {
    return new Promise(
      (
        resolve: (res: { gradientBlob: any; path: string }) => void,
        reject: (err: string) => void
      ) => {
        let gradient = domainLayer.props.getResolvedStyleAttribute("gradient");
        const gradientImage = domainLayer.props.getResolvedProp(
          "gradientImage"
        );
        if (gradient) {
          // DOC: matched from gradientJSONType
          const newGradient = {
            gradientType: gradient.gradientType,
            stops: gradient.stops,
            shouldSmoothenOpacity: false,
            activeIndex: gradient.activeIndex,
            from: { x: Number(gradient.to.y), y: Number(gradient.to.x) },
            to: { x: Number(gradient.from.y), y: Number(gradient.from.x) }
          };
          const { relativePath } = GetImageAbsPath(session, gradientImage);
          if (relativePath) {
            getGradientImage(newGradient, {
              width: domainLayer.getBoundingClientRect().width,
              height: domainLayer.getBoundingClientRect().height
            }).then((base64Image: string) => {
              const arr = (relativePath as string).split("/");
              const imageName = arr[arr.length - 1];
              const file = Utils.getFileBlob(base64Image, imageName as string);
              resolve({ gradientBlob: file, path: relativePath });
            });
          } else {
            reject("relative path not found");
          }
        } else {
          reject("not a gradient layer");
        }
      }
    );
  }
);
