import { ICommand } from "command-manager";
import { DomainFile, Layer } from "domain-x";
import { Session } from "../../models/Session";
import RemoveLayerService from "../CommandServices/RemoveLayerService";
import RemoveArtboardService from "../CommandServices/RemoveArtboardService";
import { AddSymbolFromJsService } from "../CommandServices/AddSymbolFromJsService";
import { AddLayerService } from "../CommandServices/AddLayerService";
import RemoveStageMutator from "../../Mutators/RemoveStageMutator";
import RemoveThumbnailStageMutator from "../../Mutators/RemoveThumbnailStageMutator";
import PlaceArtboardsToCenter from "../CommandServices/PlaceArtboardsToCenter";
import { SetCurrentStageMutator } from "../../Mutators";

export default class RemoveSymbol implements ICommand {
  displayName = "RemoveSymbol";
  private session: Session;
  private symbolFileJson: any;
  private symbolLayersJson: Array<{
    parentPath: string;
    index: number;
    json: any;
  }>;
  private symbolFilePath: string;
  private openedInCurrentStage: boolean;
  constructor(session: Session, symbolFile: DomainFile) {
    this.session = session;
    this.symbolFilePath = symbolFile.path;
    this.symbolLayersJson = [];
    this.openedInCurrentStage = session.currentStage.id === this.symbolFilePath;
  }
  execute() {
    this.symbolLayersJson = [];
    const symbolFile = this.session.domain.files.get(this.symbolFilePath);
    if (symbolFile) {
      this.symbolFileJson = symbolFile.toJS();
      const instanceCopies = [...symbolFile.symbolInstances];
      instanceCopies.forEach((si: Layer) => {
        if (si && si.parent) {
          this.symbolLayersJson.push({
            index: si.findIndexInParent(),
            parentPath: si.parent.getFullPath(),
            json: si.toJS()
          });
        }
        RemoveLayerService(this.session, si.getFullPath());
      });
      RemoveArtboardService(this.session, this.symbolFilePath);
      RemoveStageMutator(this.session, this.symbolFilePath);
      RemoveThumbnailStageMutator(this.session, this.symbolFilePath);
      if (this.openedInCurrentStage) {
        SetCurrentStageMutator(this.session, "artboard");
        PlaceArtboardsToCenter(this.session, true);
      }
    }
    this.session.drivers.analyticsService.addActivity(
      {
        name: `remove.symbol`,
        path: "",
        category: "app/command"
      },
      true
    );
  }

  undo() {
    if (this.symbolFileJson) {
      AddSymbolFromJsService(this.session, this.symbolFileJson);
    }
    if (this.symbolLayersJson.length) {
      this.symbolLayersJson.forEach(
        (data: { parentPath: string; index: number; json: any }) => {
          AddLayerService(this.session, data.parentPath, data.json, data.index);
        }
      );
    }
    if (this.openedInCurrentStage) {
      SetCurrentStageMutator(this.session, this.symbolFilePath);
      PlaceArtboardsToCenter(this.session, true);
    }
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.remove.symbol`,
        path: "",
        category: "app/command"
      },
      true
    );
  }

  redo() {
    const symbolFile = this.session.domain.files.get(this.symbolFilePath);
    if (symbolFile) {
      const instanceCopies = [...symbolFile.symbolInstances];
      instanceCopies.forEach(si => {
        RemoveLayerService(this.session, si.getFullPath());
      });
      RemoveArtboardService(this.session, this.symbolFilePath);
      RemoveStageMutator(this.session, this.symbolFilePath);
      RemoveThumbnailStageMutator(this.session, this.symbolFilePath);
      if (this.openedInCurrentStage) {
        SetCurrentStageMutator(this.session, "artboard");
        PlaceArtboardsToCenter(this.session, true);
      }
    }
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.remove.symbol`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
}
