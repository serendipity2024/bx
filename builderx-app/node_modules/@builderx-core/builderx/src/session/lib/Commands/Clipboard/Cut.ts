import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { forEach, isArray, cloneDeep, isEmpty, sortBy } from "lodash";
import CopyService from "./../CommandServices/Copy";
import { Utils } from "utils";
import { Layer } from "domain-x";
import { AddLayerService } from "../CommandServices/AddLayerService";
import SelectLayersService from "../CommandServices/SelectLayersService";
import RemoveLayerService from "./../CommandServices/RemoveLayerService";

export class Cut implements ICommand {
  displayName = "Cut";
  session: Session;
  layersPath: Array<string>;
  layersJSON: Array<any>;
  parentLayerPath: string;
  constructor(session: Session) {
    this.session = session;
  }

  execute() {
    this.layersPath = [];
    this.layersJSON = [];
    if (Utils.isEditableInput()) {
      this.session.drivers.clipboardService.nativeCut();
      return;
    } else {
      CopyService(this.session);
      const selectedLayers = this.session.getLayersFromSelectedLayerCollection();
      this.parentLayerPath = !isEmpty(selectedLayers)
        ? selectedLayers[0].parent.getFullPath()
        : this.session.currentRootLayer.getFullPath();
      if (isArray(selectedLayers)) {
        forEach(selectedLayers, (layer: any) => {
          // preventing root layer from being deleted
          if (layer !== this.session.currentRootLayer) {
            this.layersJSON.push({
              index: layer.findIndexInParent(),
              json: cloneDeep(layer.toJS())
            });
          }
        });
        forEach(selectedLayers, (layer: any) => {
          // preventing root layer from being deleted
          if (layer !== this.session.currentRootLayer) {
            RemoveLayerService(
              this.session,
              layer.getFullPath(),
              undefined,
              true
            );
          }
        });
      }
      this.session.drivers.analyticsService.addActivity(
        {
          name: `cut.layer`,
          path: "",
          category: "app/command"
        },
        true
      );
    }
  }
  undo() {
    this.layersPath = [];
    let layers: Array<Layer> = [];
    this.layersJSON = sortBy(this.layersJSON, layer => layer.index);
    this.layersJSON.forEach((layerObj: { index: number; json: any }) => {
      const layer: Layer = AddLayerService(
        this.session,
        this.parentLayerPath,
        layerObj.json,
        layerObj.index
      );
      layers.push(layer);
    });
    layers.forEach((layer: Layer) => {
      this.layersPath.push(layer.getFullPath());
    });
    SelectLayersService(this.session, this.layersPath, undefined, true);
  }
  redo() {
    const layers: Array<Layer> = [];
    this.layersPath.forEach((layerPath: string) => {
      layers.push(this.session.getLayerFromLayerPath(layerPath));
    });
    layers.forEach((layer: Layer) => {
      RemoveLayerService(this.session, layer.getFullPath(), undefined, true);
    });
  }
}
