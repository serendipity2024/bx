import { Layer as DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import { ICommand } from "command-manager";
import SetLayerIsGroupMutator from "../../Mutators/SetLayerIsGroupMutator";

export default class ChangeToGroup implements ICommand {
  displayName = "ChangeToGroup";
  private layer: DomainLayer;
  private session: Session;

  constructor(session: Session, layer: DomainLayer) {
    this.session = session;
    this.layer = layer;
  }
  execute() {
    if (this.layer.type === "view" || this.layer.type === "touchableOpacity") {
      // this.layer.setIsGroup(true);
      SetLayerIsGroupMutator(this.session, this.layer.getFullPath());
    }
    this.layer.emit("isGroup");
  }
  undo() {
    if (this.layer.type === "view" || this.layer.type === "touchableOpacity") {
      // this.layer.setIsGroup(false);
      SetLayerIsGroupMutator(this.session, this.layer.getFullPath(), false);
    }
    this.layer.emit("isGroup");
  }
  redo() {
    this.execute();

    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.change.to.group`,
        category: "app/command"
      },
      true
    );
  }
}
