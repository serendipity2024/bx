import { Session } from "../../models/Session";
import { Layer as DomainLayer } from "domain-x";
import WrapLayers from "./../CommandServices/WrapLayers";
import wrapFlexLayersService from "../CommandServices/WrapFlexLayers";
import createService from ".";
import SelectLayersService from "./SelectLayersService";
import { SetCenterWrapperMutator } from "../../Mutators";

const CreateGroup = createService(
  "CreateGroup",
  (session: Session, domainLayerPaths: Array<string>, layerJSON?: any) => {
    let isAbsolute = false;
    let wrapperLayerPath;
    const domainLayers: Array<DomainLayer> = [];
    domainLayerPaths.forEach(domainLayerPath => {
      const domainLayer = session.getLayerFromLayerPath(domainLayerPath);
      if (domainLayer) {
        domainLayers.push(domainLayer);
        SetCenterWrapperMutator(session, domainLayerPath, {
          horizontal: false,
          vertical: false
        });
      }
    });

    domainLayers.map((layer: DomainLayer) => {
      if (isAbsolute) {
        return;
      }
      isAbsolute = layer.props.getResolvedStyleAttribute("position")
        ? true
        : false;
    });

    let wrappedLayer;
    if (isAbsolute) {
      wrappedLayer = WrapLayers(session, domainLayers, layerJSON);
    } else {
      wrappedLayer = wrapFlexLayersService(session, domainLayers, layerJSON);
    }
    wrapperLayerPath = wrappedLayer.getFullPath();
    SelectLayersService(session, [wrapperLayerPath]);
    session.drivers.analyticsService.addActivity(
      {
        name: `create.group`,
        category: "app/command"
      },
      true
    );

    return wrappedLayer;
  }
);
export default CreateGroup;
