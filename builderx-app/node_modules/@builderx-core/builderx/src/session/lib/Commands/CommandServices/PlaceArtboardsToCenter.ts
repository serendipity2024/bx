import { Session } from "../../models/Session";
import { SetStyleAttributeMutator } from "../../Mutators";
import { action } from "model";
import setInitialScroll from "./SetInitialScroll";
import createService from ".";
import SetStageArtboardStyleAttributeMutator from "../../Mutators/SetStageArtboardStyleAttributeMutator";
import Stage from "../../models/Stage";
import { DomainFile } from "domain-x";

const PlaceArtboardsToCenter = createService(
  "PlaceArtboardsToCenter",
  (session: Session, initial: boolean, stageId: string) => {
    let stage: Stage | undefined;

    let paddingLeft = 2000;
    let paddingTop = 2000;

    if (stageId) {
      stage = session.stages.get(stageId);

      if (stage) {
        paddingLeft = 200;
        paddingTop = 0;
      }
    }

    if (!stage) {
      stage = session.currentStage;
    }

    let boundingBox = stage.canvas.getBoundingBox(stage.canvas.children);

    const canvasDims = stage.canvas.getBoundingClientRect();
    let oldRenderWidth = canvasDims.width;
    let oldRenderHeight = canvasDims.height;
    let newRenderWidth = paddingLeft * 2 + boundingBox.width;
    let newRenderHeight = paddingTop * 2 + boundingBox.height;

    stage.canvas.setLayout({
      width: newRenderWidth,
      height: newRenderHeight
    });
    let offsetX = newRenderWidth / 2 - boundingBox.width / 2 - boundingBox.x;
    let offsetY = newRenderHeight / 2 - boundingBox.height / 2 - boundingBox.y;

    stage.canvas.children.forEach((file: any) => {
      action(() => {
        const fileDims = file.getBoundingClientRect();
        let x = fileDims.x + offsetX;
        let y = fileDims.y + offsetY;
        const stageArtboard: DomainFile = file.executeFunction(
          "getData",
          "stageArtboardRef"
        );

        if (!stageArtboard) {
          return;
        }

        const domainFilePath = stageArtboard.path;
        const domainFile = session.domain.files.get(domainFilePath);

        if (!domainFile) {
          return;
        }
        if (stage && stage.id.includes("layer:") === false) {
          // if file is artboard
          if (initial) {
            if (domainFile.isSymbol()) {
              file.setLayout({
                top: y,
                left: x
              });
            } else {
              SetStyleAttributeMutator(session, domainFilePath, "left", x);
              SetStyleAttributeMutator(session, domainFilePath, "top", y);
            }
          }
        } else {
          SetStageArtboardStyleAttributeMutator(
            session,
            domainFilePath,
            "left",
            x
          );
          SetStageArtboardStyleAttributeMutator(
            session,
            domainFilePath,
            "top",
            y
          );
        }
      });
    });

    // setInitialScroll(session, {
    //   x:
    //     (oldRenderWidth * stage.canvas.getScroll().x + offsetX) /
    //     newRenderWidth,
    //   y:
    //     (oldRenderHeight * stage.canvas.getScroll().y + offsetY) /
    //     newRenderHeight
    // });
  }
);

export default PlaceArtboardsToCenter;
