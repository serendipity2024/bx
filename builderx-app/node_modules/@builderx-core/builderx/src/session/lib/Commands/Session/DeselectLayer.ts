import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { Layer } from "domain-x";
import { SelectLayersMutator } from "../../Mutators";

export default class DeselectLayer implements ICommand {
  displayName = "DeselectLayer";
  session: Session;
  layer: Layer;
  constructor(session: Session, layer: Layer) {
    this.session = session;
    this.layer = layer;
  }
  execute() {
    if (!this.session.getLayersFromSelectedLayerCollection()) {
      this.session.selectedLayers = [];
    }
    let tempLayerIndex = this.session
      .getLayersFromSelectedLayerCollection()
      .indexOf(this.layer);
    if (tempLayerIndex !== -1) {
      this.layer.selected = false;
      this.layer.emit("selected");
      // FIXME: wouldn't work as this is only a getter, need to call remove
      this.session
        .getLayersFromSelectedLayerCollection()
        .splice(tempLayerIndex, 1);
      this.session.emit("selectedLayers");
    }
    let layerIds: Array<string> = [];
    this.session
      .getLayersFromSelectedLayerCollection()
      .forEach((layer: Layer) => {
        layerIds.push(layer.getPath(undefined, true));
      });

    SelectLayersMutator(this.session, layerIds);
  }
  undo() {
    // nope
  }
  redo() {
    // nope
  }
}
