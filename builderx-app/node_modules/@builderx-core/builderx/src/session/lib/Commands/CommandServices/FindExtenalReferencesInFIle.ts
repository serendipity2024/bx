import { Session } from "../../models/Session";
import { File as DomainFile, Layer } from "domain-x";
import { get, find } from "lodash";
import createService from ".";
type refs = { type: string; path: string; layer?: Layer };

const FindExternalReferencesInFile = createService(
  "FindExternalReferencesInFile",
  (session: Session, file: DomainFile) => {
    const references: refs[] = [];
    traverseFileForRefs(session, file, references);
    return references;
  }
);
export default FindExternalReferencesInFile;
function traverseFileForRefs(
  session: Session,
  file: DomainFile,
  references: refs[]
) {
  const rootLayer = file.layer;
  rootLayer.traverseLayers((child: Layer) => {
    if (child instanceof Layer) {
      if (child.type === "image") {
        const uri = get(child, "props.source.uri", undefined);
        const imageUri = find(references, ["path", uri]);
        if (uri && !imageUri) {
          references.push({
            type: "image",
            path: uri
          });
        }
      }
      if (child.type === "view" && get(child, "props.style").get("gradient")) {
        references.push({
          type: "gradient",
          path: "",
          layer: child
        });
      } else if (child.type === "symbol") {
        const packageName = get(child, "import.packageName", undefined);
        const symbolFound = find(references, ["path", packageName]);
        if (packageName && !symbolFound) {
          references.unshift({
            type: "file",
            path: packageName
          });

          const symbolFile = session.domain.getSymbolFileFromSymbolInstance(
            child
          );
          if (symbolFile) {
            traverseFileForRefs(session, symbolFile, references);
          }
        }
      } else if (child.type === "text" || child.type === "textInput") {
        const fontPostscriptName: string = child.props.getResolvedStyleAttribute(
          "fontPostscriptName"
        );
        if (fontPostscriptName) {
          const font = find(references, ["path", fontPostscriptName]);
          if (!font) {
            references.push({
              type: "font",
              path: fontPostscriptName
            });
          }
        }
      }
    }
  });
}
