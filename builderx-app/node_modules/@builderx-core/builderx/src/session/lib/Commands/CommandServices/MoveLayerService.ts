import { Layer as DomainLayer } from "domain-x";
import { cloneDeep } from "lodash";
import { Session } from "../../models/Session";
// import { AddLayerService } from "./AddLayerService";
// import MoveLayerMutator from "../../Mutators/MoveLayer";
import RemoveLayerService from "./RemoveLayerService";
import SelectFileService from "./SelectFile";
import SelectLayersService from "./SelectLayersService";
import { AddLayerService } from "./AddLayerService";
import { SetLayerDimensionsService } from "./SetLayerDimensions";
import createService from ".";
import { SetCenterWrapperMutator } from "../../Mutators";
import SetLayerIsGroupMutator from "../../Mutators/SetLayerIsGroupMutator";

const getDimensionsWRTParent = (
  session: Session,
  layer: DomainLayer,
  parent: DomainLayer
) => {
  const layerDimensions = layer.getBoundingClientRect();

  const parentLayerDimensions = parent.getBoundingClientRect();
  let x: any =
    layerDimensions.rootX -
    parentLayerDimensions.rootX -
    parent.getOwnCanvasRef().getBorderLeft();
  let y: any =
    layerDimensions.rootY -
    parentLayerDimensions.rootY -
    parent.getOwnCanvasRef().getBorderTop();
  const width = layerDimensions.width;
  const height = layerDimensions.height;
  // TODO: fix-this
  const rotation = layerDimensions.rotation;
  // if layer doesnot have flex property make it absolute

  if (layer.template.centerHorizontal) {
    x = undefined;
  }
  if (layer.template.centerVertical) {
    y = undefined;
  }
  const dimensions = { x, y, width, height, rotation };
  return dimensions;
};

const MoveLayerService = createService(
  "MoveLayerService",
  (
    session: Session,
    fromParentPath: string,
    toParentPath: string,
    fromIndex: any,
    toIndex: any,
    sameParent: boolean = true
  ) => {
    const fromFile = session.getFileFromLayerPath(fromParentPath);
    const toFile = session.getFileFromLayerPath(toParentPath);

    if (!fromFile || !toFile) {
      console.error("From file or to File is undefined");
      return;
    }
    const fromParent = session.getLayerFromLayerPath(fromParentPath);
    const toParent = session.getLayerFromLayerPath(toParentPath);
    if (!fromParent || !toParent) {
      console.error("From file parent or to File parent is undefined");
      return;
    }

    const targetLayer = fromParent.children[fromIndex];

    if (!targetLayer) {
      return;
    }
    SetCenterWrapperMutator(session, targetLayer.getFullPath(), {
      horizontal: false,
      vertical: false
    });

    const targetIsGroup = targetLayer && targetLayer.isGroup;

    const layerJSON = cloneDeep(targetLayer.toJS());
    layerJSON.id = targetLayer.id;

    // TODO: image-fixes
    // if (layerJSON.type === "image") {
    //   layerJSON.blobURL = targetLayer.blobURL;
    // }
    let dimensions;
    if (toFile === fromFile && targetLayer) {
      dimensions = getDimensionsWRTParent(session, targetLayer, toParent);
    }

    RemoveLayerService(
      session,
      targetLayer.getFullPath(),
      targetLayer.getFile().path
    );
    const layer = AddLayerService(
      session,
      toParent.getFullPath(),
      layerJSON,
      toIndex
    );

    const layerPath = layer.getFullPath();

    if (sameParent) {
      SelectLayersService(session, [layerPath]);
    } else {
      let tempSelectFile: any = layer.getFile();
      if (tempSelectFile && tempSelectFile !== session.selectedFile) {
        SelectFileService(session, tempSelectFile.getFullPath());
        tempSelectFile.isResizable = false;
      }
    }
    if (dimensions) {
      SetLayerDimensionsService(session, layerPath, dimensions);
    }
    if (targetIsGroup) {
      // layer.setIsGroup();
      SetLayerIsGroupMutator(session, layerPath);
    }
    return layer;
  }
);

export default MoveLayerService;
