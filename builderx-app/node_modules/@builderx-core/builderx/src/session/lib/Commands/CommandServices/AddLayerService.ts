import {
  File as DomainFile,
  Layer as DomainLayer,
  FormControl
} from "domain-x";
import { forEach, get, camelCase } from "lodash";
import { Utils } from "../../../../utils/lib";
import { Session } from "../../models/Session";
import {
  AddLayerMutator,
  SetLayerLockMutator,
  SetCenterWrapperMutator,
  SetAllScopeVariablesMutator
} from "../../Mutators";
import { SetAllPropsService } from "./SetAllPropsService";
import { ImageProcessingService } from "./ImageProcessingService";
import createService from ".";
import SetTextMutator from "../../Mutators/SetTextMutator";
import SetLayerHideMutator from "../../Mutators/SetLayerHideMutator";
import SetLayerCollapseMutator from "../../Mutators/SetLayerCollapseMutator";
import { Import } from "domain-x";
import { typeMap } from "../FormControl/constants";
import SetNavigationRouteMutator from "../../Mutators/SetNavigationRouteMutator";
import ModifyConditionalVariableMutator from "../../Mutators/ModifyConditionalVariableMutator";
import SetAllStyleAttributesMutator from "../../Mutators/SetAllStyleAttributesMutator";
import SetStatusBarMutator from "../../Mutators/SetStatusBarMutator";
import SetStyleNameMutator from "../../Mutators/SetStyleNameMutator";
import SetLayerImportMutator from "../../Mutators/SetLayerImportMutator";
import AddFormControlMutator from "../../Mutators/AddFormControlMutator";
import SetResizingTypeMutator from "../../Mutators/SetResizingTypeMutator";
import SetLayerAspectRatioMutator from "../../Mutators/SetLayerAspectRatioMutator";
const path = require("path-browserify");

export const AddLayerService = createService(
  "AddLayer",
  (
    session: Session,
    domainParentLayerPath: string,
    layerJSON: any,
    index?: number | string,
    isGroupWrapper?: boolean,
    isPastedLayer: boolean = false,
    imageObj?: any
  ) => {
    let domainLayer: any;
    let domainParentLayer = session.getLayerFromLayerPath(
      domainParentLayerPath
    );
    const file = domainParentLayer.getFile();
    let filePath = get(file, "path");
    // get domain layer ref from renderCompiled layer ref
    // call addLayer function on parentLayer from domain
    // getting new layer name before adding the layer in file to avoid same name conflicts
    if (
      !(domainParentLayer.type === "file") &&
      !(domainParentLayer as DomainLayer).getFile
    ) {
      console.log("getFile from domainParentLayer is not a function!");
    }

    let domainFile;
    if (domainParentLayer instanceof DomainFile) {
      domainFile = domainParentLayer;
    } else if (domainParentLayer instanceof DomainLayer) {
      domainFile = domainParentLayer.getFile
        ? domainParentLayer.getFile()
        : undefined;
    }

    if (session.selectedFile && session.selectedFile.isResizerVisible) {
      session.selectedFile.isResizerVisible = false;
    }
    let layerType = layerJSON.type;
    if (layerType === "thirdParty") {
      layerType = camelCase(layerJSON.import.layerName);
    }

    if ((layerType === "image" || layerType === "path") && layerJSON.mask) {
      layerJSON["props"]["mask"] = layerJSON.mask;
    }
    if (layerJSON.gradient) {
      let { from, to } = layerJSON.gradient;
      layerJSON["props"]["style"]["gradient"] = {
        ...layerJSON.gradient,
        from: { x: Number(to.y), y: Number(to.x) },
        to: { x: Number(from.y), y: Number(from.x) }
      };
    }
    if (typeof index === "string" || domainParentLayer instanceof DomainFile) {
      domainLayer = AddLayerMutator(
        session,
        filePath,
        layerType,
        domainParentLayerPath,
        index,
        layerJSON
      );
    } else {
      domainLayer = AddLayerMutator(
        session,
        filePath,
        layerType,
        domainParentLayerPath,
        index,
        layerJSON
      );
    }

    const domainLayerPath = domainLayer ? domainLayer.getFullPath() : "";

    if (layerType === "text" && layerJSON["autoRenaming"] !== false) {
      domainLayer["autoRenaming"] = true;
    }
    if (Utils.isExpression(layerType)) {
      return;
    }
    if (layerType === "literal" && domainLayer.parent.type === "text") {
      SetTextMutator(
        session,
        domainLayer.parent.getFullPath(),
        layerJSON.value
      );
    } else {
      // domainLayer.import = new Import(layerJSON.import);
      SetLayerImportMutator(session, domainLayerPath, layerJSON.import);
      SetStyleNameMutator(
        session,
        domainLayerPath,
        getStyleName(domainFile, layerJSON, isGroupWrapper, isPastedLayer),
        true
      );
      SetLayerLockMutator(session, domainLayerPath, layerJSON.locked);
      SetLayerHideMutator(session, domainLayerPath, layerJSON.hidden);
      SetLayerCollapseMutator(session, domainLayerPath, layerJSON.collapsed);
      SetNavigationRouteMutator(session, domainLayerPath, layerJSON.navigateTo);
      SetLayerAspectRatioMutator(
        session,
        domainLayerPath,
        layerJSON.aspectRatio
      );
      SetAllScopeVariablesMutator(
        session,
        domainLayerPath,
        layerJSON.scopeVariables
      );
    }

    // add form control

    if (file.isSymbol() && domainLayer.type !== "root") {
      if (get(domainLayer, "import.layerName")) {
        let controlType = typeMap[domainLayer.import.layerName];
        if (controlType) {
          const styleName = `this.props.${domainLayer.styleName}`;
          // file.addFormControl(
          //   new FormControl(controlType, styleName, domainLayer)
          // );

          AddFormControlMutator(
            session,
            file.path,
            controlType,
            styleName,
            domainLayerPath
          );

          if (file.version !== "4.0") {
            const oldName = `this.props.${file.getNameForFormControl(
              domainLayer
            )}`;

            ModifyConditionalVariableMutator(
              session,
              domainLayerPath,
              oldName,
              styleName
            );
          }
        }
      }
    }

    // emit rerenderers for add addLayer
    // import emit from rerenderer then

    // Adding FormControl
    // let parentSymbolFile = domainParentLayer.getFile();
    // if (parentSymbolFile && parentSymbolFile.isSymbol()) {
    //   if (
    //     domainLayer.type !== "root" ||
    //     (domainLayer.type === "root" &&
    //       domainLayer.import.layerName === "TouchableOpacity")
    //   ) {
    //     session.commandManager.executeAndSkip(
    //       new AddFormControl(domainLayer, parentSymbolFile)
    //     );
    //   }
    // }

    // traverse children and add layer

    // clear condition before set prop
    // index = domainLayer.findIndexInParent();
    if (layerJSON.type === "ellipse" && !isPastedLayer) {
      const height = get(layerJSON, "props.style.height", 100);
      const width = get(layerJSON, "props.style.width", 100);
      const strokeWidth = get(layerJSON, "props.strokeWidth", 100);
      layerJSON.props.cx = width / 2;
      layerJSON.props.cy = height / 2;
      layerJSON.props.rx = width / 2 - strokeWidth / 2;
      layerJSON.props.ry = height / 2 - strokeWidth / 2;
      layerJSON.props.viewBox = `0 0 ${width} ${height}`;
    }

    // heavy-jugaad
    // stopChildrenLayoutUpdates();
    SetAllPropsService(session, domainLayerPath, layerJSON.props);
    // startChildrenLayoutUpdates();

    if (layerType === "image") {
      if (layerJSON["blobURL"]) {
        imageObj = layerJSON["blobURL"];
      }
      layerJSON = ImageProcessingService(
        session,
        domainLayerPath,
        layerJSON,
        imageObj
      );
    }

    // domainLayer
    // if (get(layerJSON, "props.style")) {
    //   SetAllStyleAttributesMutator(
    //     session,
    //     domainLayerPath,
    //     layerJSON.props.style
    //   );
    // }

    if (domainLayer.ui) {
      // domainLayer.ui.setResizingType({ ...domainLayer.props.style.toJS() });
      SetResizingTypeMutator(session, domainLayerPath, {
        ...domainLayer.props.style.toJS()
      });
    }
    // if (layerType === "image") {
    // }

    // TODO: jugaad for backward compatibility
    let layerChildren: Array<any> = [];
    forEach(layerJSON.children, (childJSON: any, jsonIndex: number) => {
      if (childJSON.type === "statusBar") {
        SetStatusBarMutator(session, filePath, {
          ...file.statusBar,
          display: !get(childJSON, "props.hidden"),
          barStyle: get(childJSON, "props.barStyle"),
          animated: get(childJSON, "props.animated"),
          backgroundColor: get(childJSON, "props.backgroundColor")
        });
        return;
      }
      if (childJSON.type === "conditionalExpression") {
        return;
      }
      layerChildren.push(childJSON);
    });

    forEach(layerChildren, (childJSON: any, jsonIndex: number) => {
      AddLayerService(
        session,
        domainLayerPath,
        childJSON,
        jsonIndex,
        undefined,
        isPastedLayer
      );
    });
    session.drivers.analyticsService.addActivity(
      {
        name: `add.layer`,
        category: "app/command"
      },
      true
    );

    // set center wrapper
    if (layerJSON.template) {
      const templateCenter = {
        horizontal: layerJSON.template.centerHorizontal,
        vertical: layerJSON.template.centerVertical
      };

      SetCenterWrapperMutator(session, domainLayerPath, templateCenter);
    }

    // if (
    //   session.currentStage.id.includes("layer:") &&
    //   session.currentRootLayer.type === "scrollView" &&
    //   !session.globalStateService.previewGeneration
    // ) {
    //   CommandUtils.setScrollViewContentContainerStyle(
    //     session,
    //     session.currentRootLayer
    //   );
    // }

    return domainLayer;
  }
);

function getStyleName(
  domainFile: any,
  layerJSON: any,
  isGroupWrapper: boolean | undefined,
  isPastedLayer: boolean = false
) {
  let newName = layerJSON["styleName"];
  if (domainFile && layerJSON.import) {
    const layerName = layerJSON.import.layerName;
    if (!layerJSON.styleName) {
      let styleName;
      if (layerJSON.type === "root") {
        styleName = "root";
      } else if (layerJSON.type === "text") {
        const literalObj = layerJSON.children.filter(
          (val: any) => val.type === "literal"
        );
        let literalVal: string = literalObj.length
          ? literalObj[0].value
          : "LoremIpsum";
        styleName = domainFile.getStyleNameForStyleSheet(
          literalVal.length <= 20
            ? literalVal
            : isGroupWrapper
            ? "Group"
            : layerName
        );

        if (!Utils.validateVariableName(styleName)) {
          styleName = domainFile.getStyleNameForStyleSheet(
            isGroupWrapper ? "Group" : layerName
          );
        }
      } else {
        styleName = domainFile.getStyleNameForStyleSheet(
          isGroupWrapper ? "Group" : layerName
        );
      }
      newName = styleName;
    } else {
      const fileName = path.basename(domainFile.path) || "";
      const componentClassName = fileName.split(".")[0] || "";
      if (
        layerJSON.styleName.toLowerCase() === componentClassName.toLowerCase()
      ) {
        newName = domainFile.getStyleNameForStyleSheet(
          isGroupWrapper ? "Group" : layerName
        );
      } else if (isPastedLayer && domainFile && layerJSON["styleName"]) {
        newName = domainFile.newGetStyleNameForStyleSheet(
          layerJSON["styleName"]
        );
      }
      if (!Utils.validateVariableName(layerJSON["styleName"])) {
        newName = domainFile.getStyleNameForStyleSheet(
          isGroupWrapper ? "Group" : layerName
        );
      }
    }
  }
  return newName;
}
