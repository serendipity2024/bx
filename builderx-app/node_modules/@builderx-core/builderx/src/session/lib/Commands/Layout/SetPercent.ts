import { Layer as DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import { ICommand } from "command-manager";
import resetAutoAndFill from "../Utils/resetAutoAndFill";
import ResetStyleService from "../CommandServices/ResetStyleService";
import { SetAllStyleService } from "../CommandServices/SetAllStyleService";
import { SetCenterWrapperMutator } from "../../Mutators";

export default class SetPercent implements ICommand {
  displayName = "SetPercent";
  private session: Session;
  private property: "width" | "height";
  private domainLayerPath: any;
  private oldStyle: any;
  private newStyle: any;
  constructor(
    session: Session,
    domainLayer: DomainLayer,
    property: "width" | "height"
  ) {
    this.session = session;
    this.property = property;
    this.domainLayerPath = domainLayer.getFullPath();
  }
  execute() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `set.percent`,
        path: "",
        category: "app/command"
      },
      true
    );
    // this.session.commandManager.executeAndSkip(
    //   new RemoveCenterWrapper(this.session, this.domainLayer)
    // );
    SetCenterWrapperMutator(this.session, this.domainLayerPath, {
      horizontal: false,
      vertical: false
    });
    const domainLayer = this.session.getLayerFromLayerPath(
      this.domainLayerPath
    );
    const compiledLayer: any = domainLayer.getOwnCanvasRef();
    const dimensions = compiledLayer.getBoundingClientRect();

    if (compiledLayer.parent) {
      const parentDimensions = compiledLayer.parent.getBoundingClientRect();
      const value =
        (dimensions[this.property] / parentDimensions[this.property]) * 100;

      if (isNaN(value)) {
        return;
      }
      dimensions[this.property] = value + "%";
      let style = resetAutoAndFill(domainLayer, this.property, dimensions);

      this.newStyle = style.newStyle;
      this.oldStyle = style.oldStyle;

      ResetStyleService(this.session, this.domainLayerPath);
      SetAllStyleService(this.session, this.domainLayerPath, this.newStyle);
      // this.commandManager.execute(
      //   new ResetAutoAndFill(this.session, this.domainLayer, this.property)
      // );
      // this.commandManager.execute(
      //   new SetStyleAttribute(
      //     this.session,
      //     this.domainLayer,
      //     this.property,
      //     value + "%"
      //   )
      // );

      // this.commandManager.execute(
      //   new NormalizeChildrenFlex(
      //     this.session,
      //     this.domainLayer.parent as DomainLayer
      //   )
      // );
      // if (domainLayer.parent instanceof DomainLayer) {
      // CommandUtils.setDimensionsForChildren(
      //   this.session,
      //   this.domainLayer.parent,
      //   this.property
      // );
      // }
      domainLayer.ui.setResizingType(domainLayer.props.style.toJS());
    }
    // });
  }
  undo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.set.percent`,
        path: "",
        category: "app/command"
      },
      true
    );
    ResetStyleService(this.session, this.domainLayerPath);
    SetAllStyleService(this.session, this.domainLayerPath, this.oldStyle);
    // this.commandManager.undoAll();
    // if (this.domainLayer.parent instanceof DomainLayer) {
    //   // CommandUtils.setDimensionsForChildren(
    //   //   this.session,
    //   //   this.domainLayer.parent,
    //   //   this.property
    //   // );
    // }
    // this.domainLayer.ui.setResizingType(
    //   get(this.domainLayer, "props.style", {})
    // );
  }
  redo() {
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.set.percent`,
        path: "",
        category: "app/command"
      },
      true
    );
    ResetStyleService(this.session, this.domainLayerPath);
    SetAllStyleService(this.session, this.domainLayerPath, this.newStyle);
    // this.commandManager.redoAll();
    // if (this.domainLayer.parent instanceof DomainLayer) {
    //   // CommandUtils.setDimensionsForChildren(
    //   //   this.session,
    //   //   this.domainLayer.parent,
    //   //   this.property
    //   // );
    // }
    // this.domainLayer.ui.setResizingType(
    //   get(this.domainLayer, "props.style", {})
    // );
  }
}
