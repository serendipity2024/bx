import { ICommand } from "command-manager";
import { File, DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import CreateStageForDomainMutator from "../../Mutators/CreateStageForDomainMutator";
import PlaceArtboardsToCenter from "../CommandServices/PlaceArtboardsToCenter";
import RemoveStageMutator from "../../Mutators/RemoveStageMutator";
import { BX_PREVIEW_FILE_PATH } from "bx-constants";
import { SetCurrentStageMutator, SetZoomMutator } from "../../Mutators";
import SelectLayersService from "../CommandServices/SelectLayersService";
import SetResizerVisibilityMutator from "../../Mutators/SetResizerVisibilityMutator";

export default class CreateStageForDomain implements ICommand {
  displayName = "CreateStageForDomain";
  session: Session;
  domainLayer: DomainLayer | File;
  stageId: string;
  oldStageId: string;
  domainLayerPath: string;

  constructor(
    session: Session,
    domainLayer: DomainLayer | File,
    stageId: string
  ) {
    this.session = session;
    this.domainLayer = domainLayer;
    this.stageId = stageId;
    this.oldStageId = session.currentStage.id;
    this.domainLayerPath = domainLayer.getFullPath();
  }

  execute() {
    // // Remove all layer stages before creating a new layer stage
    // this.session.stages.forEach((stage, stageId) => {
    if (this.session.stages.get(this.stageId)) {
      RemoveStageMutator(this.session, this.stageId);
    }
    // });
    this.createStageForDomain();
  }

  private createStageForDomain() {
    CreateStageForDomainMutator(
      this.session,
      this.stageId,
      this.domainLayerPath
    );
    if (this.stageId !== BX_PREVIEW_FILE_PATH) {
      SetCurrentStageMutator(this.session, this.stageId);
    }
    SelectLayersService(this.session, [this.domainLayerPath]);
    PlaceArtboardsToCenter(this.session, false);
    if (this.stageId.includes("layer:")) {
      SelectLayersService(
        this.session,
        [this.domainLayerPath],
        undefined,
        true
      );
      SetResizerVisibilityMutator(this.session, this.domainLayerPath, "hide");
    }
    SetZoomMutator(this.session, this.session.calculateZoom());
  }

  undo() {
    //

    RemoveStageMutator(this.session, this.stageId);
    if (this.stageId !== BX_PREVIEW_FILE_PATH) {
      // if (this.oldStageId.includes("layer:")) {
      //   this.createStageForDomain();
      // } else {
      SetCurrentStageMutator(this.session, this.oldStageId);
      // }
    }
  }
  redo() {
    this.createStageForDomain();
  }
}
