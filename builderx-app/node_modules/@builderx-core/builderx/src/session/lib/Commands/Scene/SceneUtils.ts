import { forEach, get } from "lodash";
import { Layer } from "domain-x";
import { Session } from "../../models/Session";
import { LAYOUT_PROPERTIES } from "bx-constants";
import { File as DomainFile } from "domain-x";
import SetCurrentRootLayer from "./../CommandServices/SetCurrentRootLayer";
import { SetFilesRefAndRevRef } from "../CommandServices/SetFilesRefAndRevRef";
import RemoveDragHoveredForAllLayers from "./../Session/RemoveDragHoveredForAllLayers";
import RemoveHoveredForAllLayers from "./../Session/RemoveHoveredForAllLayers";
import DeselectAllLayers from "./../Session/DeselectAllLayers";
import DomainLayer from "src/domain-x/lib/models/Base/Domain/Layer";

export function traverseLayersDFS(
  layer: any,
  callback: (childLayer: any) => void
) {
  forEach(layer.children, (childLayer: any, childIndex: number) => {
    if (
      childLayer &&
      typeof childLayer !== "string" &&
      childLayer.type !== "literal"
    ) {
      traverseLayersDFS(childLayer, callback);
    }
  });
  callback(layer);
}

export function removePositionalAttribute(layerJSON: any) {
  forEach(LAYOUT_PROPERTIES, (key: string) => delete layerJSON[key]);
  return layerJSON;
}
export function reset(session: Session) {
  const executeAndSkip = session.commandManager.executeAndSkip;
  executeAndSkip(new DeselectAllLayers(session));
  executeAndSkip(new RemoveDragHoveredForAllLayers(session));
  executeAndSkip(new RemoveHoveredForAllLayers(session));
}

export function setupScrollViewStage(
  session: Session,
  currentLayer: Layer,
  dims?: any
) {
  // const file = currentLayer.getFile();
  // if (!file) {
  //   return;
  // }

  // session.globalStateService.setDimensions = false;
  // SetCurrentRootLayer(session, currentLayer);

  // const fileJSON = file.toJS();
  // const layerStyle = removePositionalAttribute(currentLayer.props.style.toJS());
  // let height = dims.height;
  // let width = dims.width;
  // fileJSON.layer.props["style"] = {
  //   ...layerStyle,
  //   width,
  //   height,
  //   position: "absolute"
  // };
  // fileJSON.props["style"]["width"] = width;
  // fileJSON.props["style"]["height"] = height;
  // let layerName = "ScrollView";
  if (currentLayer.parent && currentLayer.parent.type === "thirdParty") {
    // height =
    //   currentLayer.props.style.height &&
    //   !currentLayer.props.style.height.toString().includes("%")
    //     ? currentLayer.props.style.height
    //     : height;
    // width =
    //   currentLayer.props.style.width &&
    //   !currentLayer.props.style.width.toString().includes("%")
    //     ? currentLayer.props.style.width
    //     : width;
    // layerName = (currentLayer.parent as Layer).import.layerName;
  } else {
    // const prop = currentLayer.props.getProp("horizontal") ? "width" : "height";
    // fileJSON.props["style"][prop] *= 5;
    // fileJSON.layer.props["style"][prop] *= 5;
    // if (prop === "height") {
    //   height *= 5;
    // } else {
    //   width *= 5;
    // }
  }
  // fileJSON.layer.import.layerName = layerName;
  // const domainFile = new DomainFile(fileJSON);
  // const { renderCompiledFile, compiledFile } = AddDCAndRCFile(
  //   session,
  //   domainFile
  // );
  // // domainFile.parent = session.currentStage.renderCompiled;
  // compiledFile.path = layerName + "_" + domainFile.path;
  // // file.path = "ScrollView_" + file.path;

  // SetFilesRefAndRevRef({
  //   domainFile: file,
  //   renderCompiledFile,
  //   compiledFile
  // });
  // createNestedLayers(
  //   session,
  //   currentLayer,
  //   compiledFile as any,
  //   undefined as any,
  //   0,
  //   "unshift"
  // );
  // compiledFile.domainRef = currentLayer;
  // setAndComputeDescendants(session, [], () => {
  //   SetAllPropsInDCAndRC(session, compiledFile, fileJSON.props);

  //   // TODO: heavy-jugaad
  //   SetStyleAttributeInDCAndRC(session, compiledFile.layer, "right", undefined);
  //   SetStyleAttributeInDCAndRC(session, compiledFile.layer, "left", 0);
  //   SetStyleAttributeInDCAndRC(
  //     session,
  //     compiledFile.layer,
  //     "bottom",
  //     undefined
  //   );
  //   SetStyleAttributeInDCAndRC(session, compiledFile.layer, "top", 0);
  //   SetStyleAttributeInDCAndRC(session, compiledFile.layer, "width", width);
  //   SetStyleAttributeInDCAndRC(session, compiledFile.layer, "height", height);
  //   SetStyleAttributeInDCAndRC(
  //     session,
  //     compiledFile.layer,
  //     "transform",
  //     undefined
  //   );
  // });
  // if (compiledFile) {
  //   CommandUtils.setAndComputeDimensions(
  //     session,
  //     compiledFile as any,
  //     compiledFile.renderCompiledRef
  //   );
  // }
  // session.globalStateService.setDimensions = true;
}

const removeRCDC = (childDomainLayer: DomainLayer, childCompiledLayer: any) => {
  if (childDomainLayer) {
    // const index = childDomainLayer.domainCompiledRefs.indexOf(childCompiledLayer);
    // forEach(childCompiledLayers, childCompiledLayer => {
    // if (childDomainLayer) {
    //   const index = childDomainLayer.domainCompiledRefs.indexOf(
    //     childCompiledLayer
    //   );
    //   if (index > -1) {
    //     childDomainLayer.domainCompiledRefs.splice(index, 1);
    //   }
    // }
    // });
  }
};
const removeSymbolInstRefFromSymbolFile = (
  childCompiledLayers: Array<any>,
  childDomainLayer: Layer,
  preview?: boolean
) => {
  // for center wrapper layer domain layer doesnt exist

  // if (preview) {
  forEach(childCompiledLayers, childCompiledLayer => {
    removeRCDC(childDomainLayer, childCompiledLayer);
  });
  // } else {
  //   removeRCDC(childDomainLayer, childCompiledLayers[0]);
  // }
};

export function traverseLayers(
  session: Session,
  compiledLayer: any,
  domainLayer: Layer,
  callback: (compiledLayer: any, domainLayer: Layer) => void
) {
  callback(compiledLayer, domainLayer);
  compiledLayer.children.forEach((childLayer: any, index: number) => {
    // const symbolChildLayer = domainLayer.children[index];

    // console.log(childLayer, "hello child layer here");
    // const symbolChildLayer = childLayer.domainRef;
    // // if (symbolChildLayer instanceof DomainLayer) {
    // traverseLayers(session, childLayer, symbolChildLayer, callback);
    // } else {
    //   removeCurrentStageRef(session, symbolChildLayer);
    // }

    const symbolChildLayer = childLayer.domainRef;

    if (symbolChildLayer) {
      if (symbolChildLayer.type === "symbol") {
        // removeCurrentStageRef(session, symbolChildLayer);
      } else {
        traverseLayers(session, childLayer, symbolChildLayer as any, callback);
      }
    } else {
      traverseLayers(session, childLayer, symbolChildLayer as any, callback);
    }
  });
}
