import { ICommand } from "command-manager";
import { StylePropNameType } from "common-interfaces";
import { File as DomainFile, Layer as DomainLayer } from "domain-x";
import { Session } from "../../models/Session";
import {
  SetStyleAttributeMutator,
  RemoveStyleAttributeMutator
} from "../../Mutators";
import { forEach } from "lodash";

export default class RemoveShadowAttributes implements ICommand {
  displayName = "RemoveShadowAttributes";
  private domainLayer: DomainLayer | DomainFile;
  private oldValue: any = {};
  private newValue: any;
  private session: Session;
  private stylePropName: StylePropNameType;
  private domainLayerPath: string;
  constructor(
    session: Session,
    domainLayer: DomainLayer | DomainFile,
    value: any,
    stylePropName: StylePropNameType = "style"
  ) {
    this.session = session;
    this.domainLayer = domainLayer;
    this.newValue = value;
    this.stylePropName = stylePropName;
    this.domainLayerPath = this.domainLayer.getPath(undefined, true);
    forEach(this.newValue, (key: string) => {
      this.oldValue[key] = this.domainLayer.props.getStyleAttribute(
        key,
        this.stylePropName
      );
    });
  }
  execute() {
    this.removeStyleAttribute(this.newValue);
  }
  undo() {
    forEach(this.oldValue, (val: string, key: string) => {
      SetStyleAttributeMutator(
        this.session,
        this.domainLayerPath,
        key,
        val,
        this.stylePropName
      );
    });
  }
  redo() {
    this.removeStyleAttribute(this.newValue);
  }
  removeStyleAttribute(value: any) {
    forEach(value, (key: string) => {
      RemoveStyleAttributeMutator(
        this.session,
        this.domainLayerPath,
        key,
        this.stylePropName
      );
    });
  }
}
