import { Layer as DomainLayer, File } from "domain-x";
import { Session } from "../../models/Session";
import { ICommand } from "command-manager";

export default class MoveRuler implements ICommand {
  displayName = "MoveRuler";
  private session: Session;
  // private ruler: RulerModel;
  private oldPosition: number;
  private oldOriginalPosition: number;
  private newOriginalPosition: number;
  private newPosition: number;
  private selectedFile: File | undefined;
  constructor(session: Session, newPosition: number) {
    this.session = session;
    this.newPosition = newPosition;
    this.selectedFile = this.session.selectedFile;
  }
  execute() {
    // this.session.drivers.analyticsService.addActivity(
    //   {
    //     name: `move.ruler`,
    //     path: "",
    //     category: "app/command"
    //   },
    //   true
    // );
    // this.oldPosition = this.ruler.distance;
    // this.oldOriginalPosition = this.ruler.originalDistance;
    // if (!this.selectedFile) {
    //   return;
    // }
    // let fileDistance =
    //   this.ruler.direction === "horizontal"
    //     ? this.selectedFile.domainCompiledRefs[0].renderCompiledRef.rootY
    //     : this.selectedFile.domainCompiledRefs[0].renderCompiledRef.rootX;
    // this.newOriginalPosition =
    //   this.newPosition / this.session.currentStage.tools.zoom - fileDistance;
    // // let originalDistance = this.distance - fileDistance;
    // this.moveRuler(this.ruler, this.newPosition, this.newOriginalPosition);
    // this.ruler.emit("distance");
  }
  undo() {
    // this.session.drivers.analyticsService.addActivity(
    //   {
    //     name: `undo.move.ruler`,
    //     path: "",
    //     category: "app/command"
    //   },
    //   true
    // );
    // if (!this.selectedFile) {
    //   return;
    // }
    // let fileDistance =
    //   this.ruler.direction === "horizontal"
    //     ? this.selectedFile.domainCompiledRefs[0].renderCompiledRef.rootY
    //     : this.selectedFile.domainCompiledRefs[0].renderCompiledRef.rootX;
    // let oldPosition =
    //   (this.oldOriginalPosition + fileDistance) *
    //   this.session.currentStage.tools.zoom;
    // this.moveRuler(this.ruler, oldPosition, this.oldOriginalPosition);
    // this.ruler.emit("distance");
  }
  redo() {
    // this.session.drivers.analyticsService.addActivity(
    //   {
    //     name: `redo.move.ruler`,
    //     path: "",
    //     category: "app/command"
    //   },
    //   true
    // );
    // if (!this.selectedFile) {
    //   return;
    // }
    // let fileDistance =
    //   this.ruler.direction === "horizontal"
    //     ? this.selectedFile.domainCompiledRefs[0].renderCompiledRef.rootY
    //     : this.selectedFile.domainCompiledRefs[0].renderCompiledRef.rootX;
    // let newPosition =
    //   (this.newOriginalPosition + fileDistance) *
    //   this.session.currentStage.tools.zoom;
    // this.moveRuler(this.ruler, newPosition, this.newOriginalPosition);
    // this.ruler.emit("distance");
  }

  // private moveRuler(
  //   ruler: RulerModel,
  //   distance: number,
  //   originalDistance: number
  // ) {
  //   ruler.distance = distance;
  //   ruler.originalDistance = originalDistance;
  // }
}
