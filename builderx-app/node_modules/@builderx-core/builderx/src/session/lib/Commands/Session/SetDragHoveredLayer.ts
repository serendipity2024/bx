import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import { Layer } from "domain-x";
import RemoveDragHoveredForAllLayers from "./RemoveDragHoveredForAllLayers";
import RemoveHoveredForAllLayers from "./RemoveHoveredForAllLayers";

export default class SetDragHoveredLayer implements ICommand {
  displayName = "SetDragHoveredLayer";
  session: Session;
  layer: Layer;
  position: string;
  constructor(session: Session, layer: Layer, position: string) {
    this.session = session;
    this.layer = layer;
    this.position = position;
  }
  execute() {
    this.session.commandManager.executeAndSkip(
      new RemoveDragHoveredForAllLayers(this.session)
    );
    this.session.commandManager.executeAndSkip(
      new RemoveHoveredForAllLayers(this.session)
    );
    let parentLayer = this.layer.parent;
    if (this.layer.isGroup && this.position === "inside") {
      this.layer.dragHoverParent = true;
      this.session.dragHoveredInsideParent = this.layer;
      this.layer.emit("dragHoverParent");
      const lastChild = this.layer.children.length
        ? this.layer.children[this.layer.children.length - 1]
        : undefined;
      if (lastChild && lastChild instanceof Layer) {
        lastChild.dragHoverBefore = true;
        this.session.dragHoveredBeforeLayers.push(lastChild);
        lastChild.emit("dragHoverBefore");
      }
      // this.layer.children.forEach((child: Layer) => {
      //   child.dragHoverInside = true;
      //   this.session.dragHoveredInsideLayers.push(child);
      //   child.emit("dragHoverInside");
      // });
    } else if (
      parentLayer &&
      parentLayer.type !== "root" &&
      parentLayer.isGroup
    ) {
      parentLayer.dragHoverParent = true;
      this.session.dragHoveredInsideParent = parentLayer;
      // parentLayer.dragHoverInside = true;
      // this.session.dragHoveredInsideLayers.push(parentLayer);
      // parentLayer.emit(["dragHoverInside", "dragHoverParent"]);
      parentLayer.emit("dragHoverParent");
      // parentLayer.children.forEach((child: Layer) => {
      //   child.dragHoverInside = true;
      //   this.session.dragHoveredInsideLayers.push(child);
      //   child.emit("dragHoverInside");
      // });
    }
    switch (this.position) {
      case "inside":
        this.layer.dragHoverInside = true;
        this.session.dragHoveredInsideLayers.push(this.layer);
        break;
      case "before":
        this.layer.dragHoverBefore = true;
        this.session.dragHoveredBeforeLayers.push(this.layer);
        break;
      case "after":
        this.layer.dragHoverAfter = true;
        this.session.dragHoveredAfterLayers.push(this.layer);
        break;
      default:
        break;
    }

    this.layer.emit(["dragHoverInside", "dragHoverBefore", "dragHoverAfter"]);
    this.session.emit([
      "dragHoveredInsideLayers",
      "dragHoveredBeforeLayers",
      "dragHoveredAfterLayers",
      "dragHoveredInsideParent"
    ]);
  }
  undo() {
    // nope
  }
  redo() {
    // nope
  }
}
