import { Layer as DomainLayer, File as DomainFile } from "domain-x";
import { Session } from "../../models/Session";
import { ICommand } from "command-manager";
import { get } from "lodash";
import { STYLE_PROP_NAMES } from "bx-constants";
import { SetPropMutator } from "../../Mutators";
import { SetAllStyleService } from "../CommandServices/SetAllStyleService";
import { StylePropNameType } from "common-interfaces";

export default class SetProp implements ICommand {
  displayName = "SetProp";
  // private domainLayer: DomainLayer | DomainFile;
  private oldValue: any;
  private newValue: any;
  private key: string;
  private session: Session;
  private resolveCompiledProps: boolean;
  private currentRecordingConditions: { [key: string]: any };
  private currentScopeVariables: { [key: string]: any };
  private shouldEmitUpdates?: boolean = true;
  private propType?: "callback";
  private domainLayerPath: string;
  private filePath: string;

  constructor(
    session: Session,
    domainLayer: DomainLayer | DomainFile,
    key: string,
    value: any,
    resolveCompiledProps: boolean = true,
    propType?: "callback",
    shouldEmitUpdates: boolean = true
  ) {
    this.key = key;
    this.newValue = value;
    this.session = session;
    this.resolveCompiledProps = resolveCompiledProps;
    this.shouldEmitUpdates = shouldEmitUpdates;
    this.propType = propType;

    let file = domainLayer.getFile();

    this.domainLayerPath = domainLayer.getPath(undefined, true);
    this.filePath = file.path;
  }

  // updateValue(newValue: any, scopeVariables: any) {
  //   this.commandManager.execute(
  //     new CreateDomainNode(
  //       this.session,
  //       this.domainLayer.props,
  //       this.key,
  //       newValue,
  //       this.key,
  //       false
  //     )
  //   );

  //   const propAttribute = this.domainLayer.props[this.key];
  //   if (propAttribute && !propAttribute["domainCompiledRefs"]) {
  //     propAttribute.domainCompiledRefs = [];
  //   }
  //   if (this.resolveCompiledProps) {
  //     let resolvedNode = ResolveNode(propAttribute, scopeVariables);

  //     if (resolvedNode.type === "expression") {
  //       resolvedNode = ResolveNode(propAttribute, {});
  //     }
  //     // console.log(
  //     //   "update value",
  //     //   scopeVariables,
  //     //   propAttribute,
  //     //   scopeVariables,
  //     //   resolvedNode
  //     // );

  //     forEach(
  //       this.domainLayer.domainCompiledRefs,
  //       (compiledLayer: CompiledLayer<any>) => {
  //         const symbolInst = compiledLayer.getSymbolInstance();
  //         if (symbolInst) {
  //           let scopeVariablesInside = symbolInst.scopeVariables;
  //           if (this.domainLayer.type === "thirdParty" && this.key === "type") {
  //             scopeVariablesInside = {};
  //           }
  //           const resolvedNodeValue = ResolveNodeValue(
  //             this.oldValue,
  //             scopeVariablesInside
  //           );
  //           resolvedNode = { type: "literal", value: resolvedNodeValue };
  //         } else {
  //           resolvedNode = resolvedNode.toJS
  //             ? resolvedNode.toJS()
  //             : resolvedNode;
  //         }
  //         SetPropInDCAndRC(this.session, compiledLayer, this.key, resolvedNode);
  //         const compiledPropAttribute = compiledLayer.domain.props[this.key];
  //         propAttribute.domainCompiledRefs.push(compiledPropAttribute);
  //       }
  //     );
  //   }
  // }

  execute() {
    this.currentRecordingConditions = this.session.getRecordingConditions();
    this.currentScopeVariables = this.session.getFileScopeVariables();
    let scopeVariables = {};
    const domainLayer = this.session.getLayerFromLayerPath(
      this.domainLayerPath
    );
    let file = domainLayer.getFile();
    if (file) {
      scopeVariables = file.scopeVariables;
    }

    if (STYLE_PROP_NAMES.indexOf(this.key as any) !== -1) {
      this.oldValue = domainLayer.props.getResolvedProp(this.key).toJS();

      SetAllStyleService(
        this.session,
        this.domainLayerPath,
        this.newValue,
        this.key as any
      );
    } else if (this.key !== "itemStyle") {
      this.oldValue = domainLayer.props.getProp(this.key);
      if (this.key === "strokeWidth") {
        this.setConsequentProps(domainLayer, this.newValue);
      }
      SetPropMutator(
        this.session,
        this.domainLayerPath,
        this.key,
        this.newValue
      );
      // if (this.shouldEmitUpdates) {
      // domainLayer.props.emit(this.key);
      // }

      this.newValue = domainLayer.props.getProp(this.key);
      this.newValue =
        this.newValue && this.newValue.toJS
          ? this.newValue.toJS()
          : this.newValue;
      this.oldValue =
        this.oldValue && this.oldValue.toJS
          ? this.oldValue.toJS()
          : this.oldValue;
    }
  }

  updateFromJSON(value: any) {
    const oldValueType = get(value, "type", undefined);
    if (oldValueType) {
      // this.updateValue(value, this.currentScopeVariables);
    } else {
      // this.domainLayer.props.setProp(this.key, value);

      SetPropMutator(this.session, this.domainLayerPath, this.key, value);

      if (this.resolveCompiledProps) {
        // forEach(
        //   this.domainLayer.domainCompiledRefs,
        //   (compiledLayer: CompiledLayer<any>) => {
        //     SetPropInDCAndRC(this.session, compiledLayer, this.key, value);
        //   }
        // );
      }
    }
  }

  undo() {
    if (STYLE_PROP_NAMES.includes(this.key as StylePropNameType)) {
      SetAllStyleService(
        this.session,
        this.domainLayerPath,
        this.oldValue,
        this.key as any
      );
    } else {
      const domainLayer = this.session.getLayerFromLayerPath(
        this.domainLayerPath
      );
      if (this.key === "strokeWidth") {
        this.setConsequentProps(domainLayer, this.oldValue);
      }
      this.updateFromJSON(this.oldValue);
      // domainLayer.props.emit(this.key);
    }
  }
  redo() {
    if (STYLE_PROP_NAMES.includes(this.key as StylePropNameType)) {
      SetAllStyleService(
        this.session,
        this.domainLayerPath,
        this.newValue,
        this.key as any
      );
    } else {
      const domainLayer = this.session.getLayerFromLayerPath(
        this.domainLayerPath
      );
      if (this.key === "strokeWidth") {
        this.setConsequentProps(domainLayer, this.newValue);
      }
      this.updateFromJSON(this.newValue);
      // domainLayer.props.emit(this.key);
    }
  }

  updateNavigationValue(key: string, value: string) {
    // if (key !== "onPress") {
    //   return;
    // }
    // const response = this.session.AstModule.executeCommand(
    //   "getNavigationValue",
    //   [value]
    // );
    // if (response) {
    //   response.then((result: any) => {
    //     if (this.domainLayer instanceof TouchableOpacityLayer) {
    //       this.domainLayer.setNavigationRoute(result);
    //       if (this.shouldEmitUpdates) {
    //         //
    //       }
    //     }
    //   });
    // }
  }
  setConsequentProps(layer: DomainLayer, value: any) {
    const boundingClientRect = layer.getBoundingClientRect();
    const oldStrokeWidth = get(layer, "props.strokeWidth", 0);
    if (layer.type === "ellipse") {
      const oldRx = get(layer, "props.rx", boundingClientRect.width / 2);
      const oldRy = get(layer, "props.ry", boundingClientRect.height / 2);
      SetPropMutator(
        this.session,
        this.domainLayerPath,
        "rx",
        oldRx + (oldStrokeWidth - value) / 2
      );
      SetPropMutator(
        this.session,
        this.domainLayerPath,
        "ry",
        oldRy + (oldStrokeWidth - value) / 2
      );
    } else if (layer.type === "path") {
      let viewBox = get(layer, "props.viewBox", "");
      viewBox = viewBox.split(" ");
      const originalWidth = viewBox[2]
        ? viewBox[2] - oldStrokeWidth * 1.5
        : boundingClientRect.width;
      const originalHeight = viewBox[3]
        ? viewBox[3] - oldStrokeWidth * 1.5
        : boundingClientRect.height;
      SetPropMutator(
        this.session,
        this.domainLayerPath,
        "viewBox",
        `${Math.round((-value / 4) * 100) / 100} ${Math.round(
          (-value / 4) * 100
        ) / 100} ${Math.round((originalWidth + value * 1.5) * 100) /
          100} ${Math.round((originalHeight + value * 1.5) * 100) / 100}`
      );
    }
  }
}
