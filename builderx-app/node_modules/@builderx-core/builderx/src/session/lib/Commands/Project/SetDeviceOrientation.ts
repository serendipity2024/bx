import { ICommand } from "command-manager";
import { Session } from "../../models/Session";
import SetDeviceOrientationService from "../CommandServices/SetDeviceOrientation";

export default class SetDeviceOrientation implements ICommand {
  displayName = "SetDeviceOrientation";
  session: Session;
  deviceOrientation: "portrait" | "landscape";
  oldDeviceOrientation: "portrait" | "landscape";
  constructor(session: Session, deviceOrientation: "portrait" | "landscape") {
    this.session = session;
    this.deviceOrientation = deviceOrientation;
  }
  execute() {
    this.oldDeviceOrientation = this.session.project.deviceOrientation;
    const selectedFile = this.session.getSelectedFile();
    SetDeviceOrientationService(
      this.session,
      selectedFile,
      this.deviceOrientation
    );
    if (!selectedFile) {
      return;
    }
    this.session.emit("addArtboardButton");
    this.session.drivers.analyticsService.addActivity(
      {
        name: `set.device.orientation`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  undo() {
    const selectedFile = this.session.getSelectedFile();
    SetDeviceOrientationService(
      this.session,
      selectedFile,
      this.oldDeviceOrientation
    );
    if (!selectedFile) {
      return;
    }
    this.session.emit("addArtboardButton");
    this.session.drivers.analyticsService.addActivity(
      {
        name: `undo.set.device.orientation`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
  redo() {
    const selectedFile = this.session.getSelectedFile();
    SetDeviceOrientationService(
      this.session,
      selectedFile,
      this.deviceOrientation
    );
    if (!selectedFile) {
      return;
    }
    this.session.emit("addArtboardButton");
    this.session.drivers.analyticsService.addActivity(
      {
        name: `redo.set.device.orientation`,
        path: "",
        category: "app/command"
      },
      true
    );
  }
}
