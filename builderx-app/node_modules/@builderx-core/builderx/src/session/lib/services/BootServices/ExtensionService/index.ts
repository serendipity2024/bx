// @ts-ignore
import SketchImportWorker from "../../../../../sketch-import/lib/src/index.worker.ts";
// @ts-ignore
import CodeEngineWorker from "../../../../../code-engine/index.worker.ts";
import IPC from "./IPC";
import { EnvConfig } from "common-interfaces";

export default class ExtensionService {
  extensionsIPC: Map<string, IPC>;
  envConfig: EnvConfig;
  connectionId: string;
  constructor(envConfig: EnvConfig, connectionId: string) {
    this.envConfig = envConfig;
    this.connectionId = connectionId;
    this.extensionsIPC = new Map<string, IPC>();
    this.bootExtensions(envConfig);
  }
  getExtensionIPC(extensionName: string): IPC | undefined {
    if (this.extensionsIPC.has(extensionName)) {
      return this.extensionsIPC.get(extensionName);
    }
    throw new Error(`Extension ${extensionName} not found`);
  }
  bootExtensions(envConfig: EnvConfig) {
    if (!envConfig.isSharedComponentInstance) {
      this.bootCodeEngineExtension();
      this.bootSketchExtension();
    }
  }

  bootSketchExtension() {
    let sketchImportWorker: SketchImportWorker = new SketchImportWorker();
    this.extensionsIPC.set(
      "SketchImport",
      new IPC(sketchImportWorker, this.envConfig)
    );
  }
  bootCodeEngineExtension() {
    const codeEngineWorker: CodeEngineWorker = new CodeEngineWorker();
    this.extensionsIPC.set(
      "CodeEngine",
      new IPC(codeEngineWorker, this.envConfig)
    );
  }
}
