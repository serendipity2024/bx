import { Model } from "model";
import { DefaultConfigurations } from "..";
import { get, merge } from "lodash";
import { IConfiguration } from "common-interfaces";

const configurations = {
  "editor.snap": false,
  "editor.snap.grid": false,
  "editor.snap.ruler": false,
  "editor.snap.gutter": false,
  "editor.snap.parent": true,
  "editor.snap.snapMagnet": 5,
  "editor.snap.sibling": false,
  "editor.show.ruler": true,
  "editor.show.grid": false,
  "editor.grid.row": 10,
  "editor.grid.column": 10
};
export default class Configuration extends Model implements IConfiguration {
  configurations: any;
  defaultConfigurations: any;
  userConfigurations: any;
  workspaceConfigurations: any;
  userPath: string;
  settingPath: string;

  constructor() {
    super();
    this.defaultConfigurations = DefaultConfigurations;
    this.configurations = DefaultConfigurations;

    this.configurations = merge(this.configurations, configurations);
    // console.log("hello here",this.configurations)

    // this.userPath = userDataPath + "/User";
    // this.settingPath = this.userPath + "/settings.json";
    // //console.log("path======== this.userPath", this.userPath);
    // //console.log("path======== this.settingPath", this.settingPath);
  }

  getFields() {
    return {};
  }

  get = (key: string): any => {
    return get(this.configurations, key);
  };
  getAll = () => {
    return this.configurations;
  };
  set = (key: string, value: any) => {
    this.configurations[key] = value;
  };

  saveUserConfiguration() {}
}
