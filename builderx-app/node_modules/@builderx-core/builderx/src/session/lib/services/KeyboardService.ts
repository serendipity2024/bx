import * as Mousetrap from "mousetrap";
import { Model, action } from "model";
const constKeys: Array<string> = [];
const constKeysData: Array<any> = [];
export default class KeyboardService extends Model {
  keys: Array<string>;
  constructor() {
    super();
    // this.keys = [];
    this.registerKeyboardEvents();
  }

  getFields() {
    return {};
  }
  getCurrentKeyData(): Array<number> {
    return constKeysData;
  }
  getCurrentKey(): Array<string> {
    // return this.keys;
    return constKeys;
  }

  setCurrentKey(name: string, keyData: any) {
    action(() => {
      // if (this.keys.indexOf(key) === -1) {
      if (constKeys.indexOf(name) === -1) {
        // this.keys.push(key);
        constKeys.push(name);
        constKeysData.push({
          key: keyData.key,
          keyCode: keyData.keyCode,
          altKey: keyData.altKey,
          metaKey: keyData.metaKey,
          shiftKey: keyData.shiftKey,
          code: keyData.code
        });
        this.emit("keys");
      }
    });
  }
  removeCurrentKey(key: string) {
    action(() => {
      // const keyIndex = this.keys.indexOf(key);
      const keyIndex = constKeys.indexOf(key);
      // this.keys.splice(keyIndex, 1);
      constKeys.splice(keyIndex, 1);
      constKeysData.splice(keyIndex, 1);
      this.emit("keys");
    });
  }
  clearCurrentKey() {
    action(() => {
      // this.keys.length = 0;
      constKeys.length = 0;
      constKeysData.length = 0;
      this.emit("keys");
    });
  }

  registerKeyboardEvents() {
    var self = this;
    Mousetrap.prototype.handleKey = function(name: any, event: any) {
      let that = this;
      if (arguments[2].type === "keydown") {
        self.setCurrentKey(name, arguments[2]);
      }
      if (arguments[2].type === "keyup") {
        self.removeCurrentKey(name);
      }
      return that._handleKey.apply(self, arguments);
    };
  }
}
