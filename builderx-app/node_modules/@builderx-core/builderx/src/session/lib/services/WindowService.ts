import { Session } from "../models/Session";
import { File as DomainFile } from "domain-x";
import SaveProject from "./../Commands/Workspace/SaveProject";
import { action } from "model";
import { SetModalRoute } from "../Commands";
import KeyMapper from "./KeyMapper";
import CommandKeyMapperService from "./CommandKeyMapperService";

export default class WindowService {
  session: Session;
  constructor(session: Session) {
    this.session = session;
    this.register();
  }
  onKeyDown = (e: any) => {
    this.preventNativeShortcuts(e);
    if (
      e.keyCode === 80 &&
      (navigator.platform.match("Mac") ? e.metaKey : e.ctrlKey)
    ) {
      let win = window.open(this.session.envConstants.APP_URL, "_blank");
      if (win) {
        win.focus();
      }
    }
  };
  preventNativeShortcuts = (e: any) => {
    const nativeKeys = [68, 72, 76, 80, 83];
    if (
      nativeKeys.includes(e.keyCode) &&
      (navigator.platform.match("Mac") ? e.metaKey : e.ctrlKey)
    ) {
      e.preventDefault();
    }
  };

  register() {
    window.onfocus = (e: any) => {
      this.session.keyboardService.clearCurrentKey();
    };
    window.addEventListener("beforeunload", this.beforeUnloadHandler);
    window.addEventListener("online", this.updateOnlineStatus);
    window.addEventListener("offline", this.updateOnlineStatus);
    document.addEventListener("keydown", this.onKeyDown);
  }
  updateOnlineStatus = (event: any) => {
    let condition = navigator.onLine ? "online" : "offline";

    if (condition === "offline") {
      action(async () => {
        this.session.keyMapper.unRegisterAll();
        this.session.commandManager.executeAndSkip(
          new SetModalRoute(this.session, "noInternet")
        );
      });

      // const domainJSON = this.session.domain.toJS();
      // const existingJSON = localStorage.getItem("bx_domain_json");

      // let data = {};
      // if (existingJSON) {
      //   data = JSON.parse(existingJSON);
      //   data[this.session.project.projectId] = domainJSON;
      // } else {
      //   data = {
      //     [this.session.project.projectId]: domainJSON
      //   };
      // }
      // localStorage.setItem("bx_domain_json", JSON.stringify(data));
    } else {
      action(async () => {
        this.session.keyMapper = new KeyMapper();
        this.session.commandKeyMapperService = new CommandKeyMapperService(
          this.session,
          this.session.commandManager
        );
        this.session.commandManager.executeAndSkip(
          new SetModalRoute(this.session, "")
        );
      });
    }
  };

  eraseCookieFromAllPaths = (name: string) => {
    // This function will attempt to remove a cookie from all paths.
    var pathBits = location.pathname.split("/");
    var pathCurrent = " path=";

    // do a simple pathless delete first.
    document.cookie = name + "=; expires=Thu, 01-Jan-1970 00:00:01 GMT;";

    for (var i = 0; i < pathBits.length; i++) {
      pathCurrent += (pathCurrent.substr(-1) !== "/" ? "/" : "") + pathBits[i];
      document.cookie =
        name + "=; expires=Thu, 01-Jan-1970 00:00:01 GMT;" + pathCurrent + ";";
    }
  };
  beforeUnloadHandler = async (e: any) => {
    let returnVal: boolean = false;
    this.session.domain.files.forEach((file: DomainFile) => {
      if (file.isDirty) {
        returnVal = true;
      }
    });
    if (
      returnVal ||
      this.session.astNetworkRequestCounter ||
      this.session.fileIdsToBeDeleted.length > 0 ||
      this.session.networkRequestCounter ||
      this.session.importingSketchFile ||
      this.session.isSaving
    ) {
      e.returnValue = false;
      action(() => {
        this.session.commandManager.executeAndSkip(
          new SaveProject(this.session)
        );
      });
    }
  };
}
