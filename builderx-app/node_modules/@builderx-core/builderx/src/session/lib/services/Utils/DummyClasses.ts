import {
  IRecentProject,
  IRecentProjects,
  IFileService,
  IDialog,
  IAppUpdater,
  IUserService,
  IDeviceDetail,
  IAppLifeCycleService,
  IOffScreenRendererService,
  IAnalyticsService,
  IClipboardService,
  ClipboardType,
  ResponseFile
} from "common-interfaces";
import { Model } from "model";
import { Session } from "../../models/Session";
import * as pathBrowserify from "path";
import { isEmpty } from "lodash";

export class RecentProjects implements IRecentProjects {
  recentProjectList: Map<string, IRecentProject> = new Map();
  addRecentProject(basePath: string, lastOpened: number) {
    //
  }
  setRecentProjectList(newRecentProjectList: any) {
    //
  }
  removeRecentProject(basePath: string) {
    //
  }
}
export class FileService implements IFileService {
  appPath: "";
  sharedComponentsPath: "";
  path = pathBrowserify;
  writeFile(filePath: string, data: string, type?: any): any {
    //
  }
  readFile(filePath: string): any {
    //
  }
  readJSONFile(filePath: string): any {
    //
  }
  readFolderAsync(filePath: string): any {
    //
  }
  readDirectoryAsync(folderPath: string): any {
    //
  }
  readDirectory(folderPath: string): any {
    //
  }
  getFileModifiedTimestamp(filePath: string): any {
    //
  }
  isDirectory(filePath: string): any {
    //
  }
  createFolder(folderPath: string): any {
    //
  }
  isFolderExists(filePath: string): any {
    //
  }
  getPathFromHomeDirectory(folderPath: string): any {
    //
  }
  getPath(arrayOfPath: Array<string>): any {
    //
  }
  isFileExists(filePath: string): any {
    //
  }
  copyFile(fromPath: string, toPath: string): any {
    //
  }
  createTempFolder(): any {
    //
  }
  moveFolder(fromPath: string, toPath: string): any {
    //
  }
  removeFolder(folderPath: string): any {
    //
  }
  restoreFile(dbFileId: string): any {
    //
  }
  renameProject(projectId: string, newName: string): any {
    //
  }
  resolve(basePath: string, filePath: string): any {
    //
  }
  normalize(basePath: string): any {
    //
  }
  relative(basePath: string, filePath: string): any {
    //
  }
  openFolderInFinder(folderPath: string): any {
    //
  }
  writeJSONFile(filePath: string, data: any): any {
    //
  }
  async getNewImageName() {
    return new Promise<string>((resolve, reject) => {
      resolve("");
    });
  }

  readFolder = async (projectId: string): Promise<ResponseFile[]> => {
    return new Promise(
      async (resolve: (files: ResponseFile[]) => void, reject) => {
        resolve([]);
      }
    );
  };
}
export class Dialog implements IDialog {
  getImagePath(): any {
    //
  }
  chooseFolder(): any {
    //
  }
  saveProject(): any {
    //
  }
  saveJSONFileDialog(): any {
    //
  }
  openJSONFileDialog(): any {
    //
  }
  openSketchFileDialog(): any {
    //
  }
  chooseFile(): any {
    //
  }
  chooseProjectFile(): any {
    //
  }
  chooseFolderToExport(): any {
    //
  }
  chooseFolderOrFile(): any {
    //
  }
  saveAsProject(): any {
    //
  }
}

export class AppUpdaterService implements IAppUpdater {
  userService: IUserService;
  session: Session;
  deviceDetailsService: IDeviceDetail;
  userApiService: any;
  appUpdaterIndicator: string;
  // tslint:disable:no-empty
  constructor() {}

  setLocalVersion(newVersion: string): any {}
  getLocalVersion(): any {}
  quitAndInstall() {}

  getVersion() {}

  checkAndMatchVersions() {}
  setAppUpdaterIndicator(value: string) {}

  checkForUpdates() {}
}

export class DeviceDetailService extends Model implements IDeviceDetail {
  device: any;
  getDeviceDetails(cb: any) {}

  getIpAddress(device: any) {}
}

export class AnalyticsService extends Model {
  activities: any = [];

  // lastTenActivities: any = [];
  // getActivities() {}
  // recordLastTenActivities(activityObj: any) {}
  // getLastTenActivities() {
  // return this.lastTenActivities;
  // }
  // hasAnalyticsData() {}
  // storeAnalyticsData(_activities: any) {}
  // sendAnalyticsData() {}
  addActivity(activity: any, manual?: boolean) {}
  init() {}
}

export class UserService extends Model {
  isUserRegistered: boolean;
  isUserLicenceValid: boolean;
  expiryDate: string;
  uuid: string;
  expiresIn: string;
  isExpired: boolean;
  email: string;
  role: string;
  id: string;
  userName: string;
  lastSync: string;
  sketchConversionCount?: number;
  newTAndCAccepted: boolean;
  updateDownloaded: boolean;

  // tslint:disable:no-empty
  setIsUserRegistered(isUserRegistered: boolean) {}
  setIsUserLicenceValid(isUserLicenceValid: boolean) {}
  setIsExpired(isExpired: boolean) {}
  setExpiryDate(expiryDate: string) {}
  setNewTAndCAccepted(accepted: boolean) {}
  setExpiresIn(expiresIn?: string) {}
  setUuid(uuid: string) {}
  setSketchConversionCount(count: number) {}
  setLastSync(date: string) {}
  setEmail(email: string) {}
  setUserName(name: string) {}
  setUserRole(role: string) {}
  isNewTermsAndConditionsAccepted() {}
  isUserLoggedIn() {
    return new Promise<boolean>((resolve, reject) => {
      resolve(false);
    });
  }
  getTeamData() {
    return new Promise<boolean>((resolve, reject) => {
      resolve(false);
    });
  }
  isRegistered(): boolean {
    return true;
  }
  getUpdateDownloaded(): boolean {
    return true;
  }
  setUpdateDownloaded(updated: boolean) {}
  verifyExpiry(resolve: {}) {}
  updateExpiry(resolve: {}) {}
  getUserData() {}
  update(userAppVersion: string, currentVersion: string) {}
  registerAndVerifyLicense(key: string | null, email?: string): any {
    return new Promise((resolve, reject) => {
      resolve(false);
    });
  }
}

export class AppLifecycleService extends Model implements IAppLifeCycleService {
  ipcRenderer: any;
  BrowserWindow: any;
  app: any;
  shell: any;
  remote: any;
  registerListener() {}
  getAppVersion() {}
  getAppName() {}
  quitApp() {}
  hideApp() {}
  exitApp() {}
  showApp() {}
  closeWindow() {}
  openWeb(urlString: string) {}
  createNewWindow() {}
  createNewProject() {}
  createNewProjectWithTutorial() {}
  openNewWindow(index: string, callback: any) {}
  getWindows() {
    return [];
  }
}
export class GradientService {
  constructor() {}

  genrateGradientImage(
    layerId: string,
    value: any,
    gradientJS: any,
    elementDims: {
      width: number;
      height: number;
    }
  ) {}
}

export class Sentry {
  captureException(err: any) {}
  configureScope(callback: any) {}
  withScope(callback: any) {}
}

export class OffScreenRendererService implements IOffScreenRendererService {
  showOffscreenLoader(heading: string, subHeading: string) {}
  showProgressOffscreenLoader() {}
  setContentProgressOffscreenLoader(
    heading: string,
    subHeading: string,
    currentProgress: number
  ) {}
  hideOffscreenLoader() {}
}

export class ClipboardService implements IClipboardService {
  type: ClipboardType;
  data: any;
  get(): { data: any; type: ClipboardType } {
    return { data: {}, type: "invalid" };
  }
  set(data: any, type: ClipboardType) {}
  nativeCut() {}
  nativeCopy() {}
  nativePaste() {}
}

export class AstModule {
  executeCommand() {}
}

export class Robotjs {
  getMousePos() {}
  getPixelColor() {}
}
