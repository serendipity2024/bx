import { CommandManager } from "command-manager";
import { File } from "domain-x";
import { action } from "model";
import {
  AddLayer,
  SelectTool,
  ChangeDisplayMode,
  MoveToFront,
  SendToBack,
  CreateSymbol,
  Ungroup,
  DuplicateArtboard,
  SelectLayers,
  SetStyleAttribute,
  SetOverride
} from "../Commands";
import { Copy } from "../Commands/Clipboard/Copy";
import { Cut } from "../Commands/Clipboard/Cut";
// import UpdateRecordingConditions from "../Commands/Conditionals/UpdateRecordingConditions";
import AddNewArtboard from "../Commands/File/AddNewArtboard";
import RemoveArtboard from "../Commands/File/RemoveArtboard";
// import UpdateFileScopeVariables from "../Commands/File/UpdateFileScopeVariables";
import CreateGroup from "../Commands/Layer/CreateGroup";
import DragLayerWithArrowKeys from "../Commands/Layer/DragLayerWithArrowKeys";
import DuplicateLayers from "../Commands/Layer/DuplicateLayers";
import RemoveSelectedLayers from "../Commands/Layer/RemoveSelectedLayers";
import ResetZoom from "../Commands/Session/ResetZoom";
import SelectRootLayer from "../Commands/Session/SelectRootLayer";
import ToggleCodeEditor from "../Commands/Session/ToggleCodeEditor";
import SetGridVisibility from "../Commands/Session/SetGridVisibility";
import ZoomIn from "../Commands/Session/ZoomIn";
import ZoomOut from "../Commands/Session/ZoomOut";
import SaveProject from "../Commands/Workspace/SaveProject";
import SketchImport from "../Commands/Workspace/SketchImport";
import { Session } from "../models/Session";
import SetLayerHide from "../Commands/Panels/LayerPanel/SetLayerHide";
import SetLayerLock from "../Commands/Panels/LayerPanel/SetLayerLock";
import SetModalRoute from "./../Commands/Router/SetModalRoute";
import SetRulerVisibility from "../Commands/Session/SetRulerVisibility";
import ToggleSnap from "./../Commands/Snap/ToggleSnap";
import ToggleSnapConfig from "../Commands/Snap/ToggleSnapConfig";
import PreviousArtboardPreview from "./../Commands/Session/PreviousArtboardPreview";
import NextArtboardPreview from "./../Commands/Session/NextArtboardPreview";
import { size, isEmpty } from "lodash";
import ClearRecordingConditions from "../Commands/Conditionals/ClearRecordingConditions";
import OpenDialogAndAddImage from "../services/OpenDialogAndAddImage";
import RemoveSymbol from "../Commands/Symbols/RemoveSymbol";

export default class CommandKeyMapperService {
  constructor(session: Session, commandManager: CommandManager) {
    this.register(session, commandManager);
  }

  async createSymbol(session: any) {
    session.commandManager.executeAndSkip(
      new CreateSymbol(session, session.getLayersFromSelectedLayerCollection())
    );
  }

  register(session: Session, commandManager: CommandManager) {
    let { keyMapper } = session;
    // User 'mod' helper key instead of command. It maps to 'Command" on Mac and 'Ctrl' on Win and Linux
    if (session.isPluginLoaded("KeyMapperProvider")) {
      let externalMappings = session.executeFunction("KeyMapperProvider.get");
      externalMappings.forEach(({ callback, actionName }: any, key: string) => {
        keyMapper.register(key, callback, actionName);
      });
    }
    // keyMapper.register(
    //   "mod+option+shift+s",
    //   () => {
    //     action(() => {
    //       DownloadReadmeDialog(
    //         "react-native",
    //         "project"
    //       );
    //     });
    //   },
    //   "Testing"
    // );

    keyMapper.register(
      "mod+=",
      () => {
        if (session.currentStage.dragging) {
          return;
        }
        action(() => {
          commandManager.executeAndSkip(new ZoomIn(session));
        });
      },
      "Zoom In"
    );

    keyMapper.register(
      "mod+-",
      () => {
        if (session.currentStage.dragging) {
          return;
        }
        action(() => {
          commandManager.executeAndSkip(new ZoomOut(session));
        });
      },
      "Zoom Out"
    );

    keyMapper.register(
      "mod+0",
      () => {
        if (session.currentStage.dragging) {
          return;
        }
        action(() => {
          commandManager.executeAndSkip(new ResetZoom(session));
        });
      },
      "Reset Zoom"
    );

    keyMapper.register(
      ["mod+'"],
      () => {
        if (session.currentStage.dragging) {
          return;
        }
        let oldGridVisibility = session.drivers.configuration.get(
          "editor.show.grid"
        );
        action(() => {
          commandManager.execute(
            new SetGridVisibility(session, !oldGridVisibility)
          );
        });
      },
      "Toggle Grid"
    );
    keyMapper.register(
      ["mod+shift+'"],
      () => {
        if (session.currentStage.dragging) {
          return;
        }
        let oldRulerVisibility = session.drivers.configuration.get(
          "editor.show.ruler"
        );
        action(() => {
          commandManager.execute(
            new SetRulerVisibility(session, !oldRulerVisibility)
          );
        });
      },
      "Toggle Ruler"
    );
    keyMapper.register(
      "mod+a",
      () => {
        if (session.currentStage.dragging) {
          return;
        }
        action(() => {
          // @ts-ignore
          if (session.currentStage.tools.selectedTool !== "textEditor") {
            const file = session.selectedFile;
            if (!file) {
              return;
            }
            session.commandManager.executeAndSkip(
              new SelectLayers(session, [...session.currentRootLayer.children])
            );
          }
        });
      },
      "Select All"
    );
    keyMapper.register(
      "left",
      () => {
        if (session.currentStage.dragging) {
          return;
        }
        action(() => {
          if (
            session.displayMode === "preview" &&
            session.getLayersFromSelectedLayerCollection()[0] ===
              session.currentRootLayer
          ) {
            commandManager.execute(new PreviousArtboardPreview(session));
          } else if (!session.readonly) {
            if (
              session.getLayersFromSelectedLayerCollection().length > 0 &&
              !(
                session.getLayersFromSelectedLayerCollection()[0] ===
                session.currentRootLayer
              )
            ) {
              commandManager.execute(
                new DragLayerWithArrowKeys(session, "left", false)
              );
            }
          }
        });
      },
      "Left"
    );
    keyMapper.register(
      "right",
      () => {
        if (session.currentStage.dragging) {
          return;
        }
        action(() => {
          if (
            session.displayMode === "preview" &&
            session.getLayersFromSelectedLayerCollection()[0] ===
              session.currentRootLayer
          ) {
            commandManager.execute(new NextArtboardPreview(session));
          } else if (!session.readonly) {
            if (
              session.getLayersFromSelectedLayerCollection().length > 0 &&
              !(
                session.getLayersFromSelectedLayerCollection()[0] ===
                session.currentRootLayer
              )
            ) {
              commandManager.execute(
                new DragLayerWithArrowKeys(session, "right", false)
              );
            }
          }
        });
      },
      "Right"
    );
    keyMapper.register(
      "esc",
      () => {
        if (session.currentStage.dragging) {
          return;
        }
        action(() => {
          if (session.displayMode === "preview" && session.readonly) {
            if (
              session.getLayersFromSelectedLayerCollection()[0] ===
              session.currentRootLayer
            ) {
              session.commandManager.executeAndSkip(
                new ChangeDisplayMode(session, "stage")
              );
              return;
            }
          }
          session.commandManager.executeAndSkip(new SelectRootLayer(session));
          session.commandManager.executeAndSkip(
            new SelectTool(session, "default", true)
          );
        });
      },
      "Clear Selection"
    );
    // DOC: commands making any changes
    if (!session.readonly) {
      keyMapper.register(
        ["e", "o"],
        () => {
          action(() => {
            session.commandManager.executeAndSkip(
              new SelectTool(session, "ellipse")
            );
          });
        },
        "Ellipse"
      );
      keyMapper.register(
        "t",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            session.commandManager.executeAndSkip(
              new SelectTool(session, "text")
            );
          });
        },
        "Text"
      );
      keyMapper.register(
        "p",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            session.commandManager.executeAndSkip(
              new SelectTool(session, "path")
            );
          });
        },
        "Svg"
      );
      keyMapper.register(
        "r",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            session.commandManager.executeAndSkip(
              new SelectTool(session, "view")
            );
          });
        },
        "Rect"
      );
      keyMapper.register(
        "mod+i",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            session.commandManager.executeAndSkip(
              new SelectTool(session, "default")
            );
          });
          OpenDialogAndAddImage(session);
        },
        "Image"
      );
      keyMapper.register(
        "a",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            if (
              session.displayMode === "stage" &&
              session.currentStage &&
              session.currentStage.id === "artboard" &&
              session.currentStage.tools.selectedTool === "default"
            ) {
              session.commandManager.execute(
                new AddNewArtboard(session, undefined, "artboard", true, true)
              );
            }
          });
        },
        "Add Artboard"
      );

      // keyMapper.register(
      //   "i",
      //   () => {
      //     action(() => {
      //       if (session.displayMode === "stage") {
      //         //
      //         this.createSymbol(session);
      //       }
      //     });
      //   },
      //   "Add Artboard"
      // );

      keyMapper.register(
        "mod+c",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            const copyCommand = new Copy(session);
            commandManager.executeAndSkip(copyCommand);
          });
        },
        "Copy"
      );
      // keyMapper.register(
      //   "mod+v",
      //   () => {
      //     action(async () => {
      //       const pasteCommand = new Paste(session);
      //       await commandManager.execute(pasteCommand);
      //     });
      //   },
      //   "Paste"
      // );
      keyMapper.register(
        "mod+x",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            const cutCommand = new Cut(session);
            commandManager.execute(cutCommand);
          });
        },
        "Cut"
      );
      keyMapper.register(
        "mod+z",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            if (size(session.getRecordingConditions()) !== 0) {
              session.commandManager.executeAndSkip(
                new ClearRecordingConditions(session)
              );
            }
            commandManager.undo();
          });
        },
        "Undo"
      );
      keyMapper.register(
        ["mod+y", "mod+shift+z"],
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            if (size(session.getRecordingConditions()) !== 0) {
              session.commandManager.executeAndSkip(
                new ClearRecordingConditions(session)
              );
            }
            commandManager.redo();
          });
        },
        "Redo"
      );

      keyMapper.register(
        ["mod+s"],
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(async () => {
            await commandManager.executeAndSkip(new SaveProject(session));
          });
        },
        "Save"
      );

      keyMapper.register(
        ["mod+option+s"],
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(async () => {
            await commandManager.executeAndSkip(new SaveProject(session));
          });
        },
        "Save As"
      );

      keyMapper.register(
        ["del", "backspace"],
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            let artboardLength: number = 0;
            session.domain.files.forEach((file: File) => {
              if (file && !file.isSymbol()) {
                artboardLength++;
              }
            });
            if (
              artboardLength > 1 &&
              session.selectedFile &&
              (session.selectedFile.isResizerVisible ||
                session.selectedFile.layer.children.length === 0)
            ) {
              commandManager.execute(
                new RemoveArtboard(session, session.selectedFile)
              );
            } else if (
              session.getLayersFromSelectedLayerCollection().length > 0 &&
              !(
                session.getLayersFromSelectedLayerCollection()[0] ===
                session.currentRootLayer
              )
            ) {
              commandManager.execute(new RemoveSelectedLayers(session));
            }
          });
        },
        "Remove"
      );
      keyMapper.register(
        "mod+g",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            if (
              !session.disableForScrollViewRoot() &&
              session.getLayersFromSelectedLayerCollection().length &&
              session.getLayersFromSelectedLayerCollection()[0] !==
                session.currentRootLayer
            ) {
              const createGroup = new CreateGroup(
                session,
                session.getLayersFromSelectedLayerCollection()
              );
              commandManager.execute(createGroup);
            }
          });
        },
        "Group"
      );

      keyMapper.register(
        "mod+shift+g",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            if (
              session.getLayersFromSelectedLayerCollection().length === 1 &&
              session.getLayersFromSelectedLayerCollection()[0] !==
                session.currentRootLayer &&
              session.getLayersFromSelectedLayerCollection()[0].children
                .length > 0
            ) {
              commandManager.execute(
                new Ungroup(
                  session,
                  session.getLayersFromSelectedLayerCollection()[0]
                )
              );
            }
          });
        },
        "Ungroup"
      );

      // keyMapper.register(
      //   "mod+option+shift+e",
      //   () => {
      //     if (session.selectedLayers.length > 0) {
      //       action(() => {
      //         commandManager.executeAndSkip(new ExportLayers(session));
      //       });
      //     }
      //   },
      //   "Export Layer"
      // );
      keyMapper.register(
        "mod+l",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            if (session.getLayersFromSelectedLayerCollection().length > 0) {
              const layerLocked = session.getLayersFromSelectedLayerCollection()[0]
                .locked;
              commandManager.execute(
                new SetLayerLock(
                  session,
                  session.getLayersFromSelectedLayerCollection()[0],
                  !layerLocked
                )
              );
            }
          });
        },
        "Lock Layer"
      );
      keyMapper.register(
        "mod+h",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            if (session.getLayersFromSelectedLayerCollection().length > 0) {
              const layerHidden = session.getLayersFromSelectedLayerCollection()[0]
                .hidden;
              commandManager.execute(
                new SetLayerHide(
                  session,
                  session.getLayersFromSelectedLayerCollection()[0],
                  !layerHidden
                )
              );
            }
          });
        },
        "Hide Layer"
      );
      keyMapper.register(
        ["mod+option+up"],
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          if (
            session.getLayersFromSelectedLayerCollection().length > 0 &&
            session.getLayersFromSelectedLayerCollection()[0].type &&
            session.getLayersFromSelectedLayerCollection()[0].type !== "root"
          ) {
            action(() => {
              commandManager.execute(
                new MoveToFront(
                  session,
                  session.getLayersFromSelectedLayerCollection()
                )
              );
            });
          }
        },
        "Move To Front"
      );
      keyMapper.register(
        ["mod+option+down"],
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          if (
            session.getLayersFromSelectedLayerCollection().length > 0 &&
            session.getLayersFromSelectedLayerCollection()[0].type &&
            session.getLayersFromSelectedLayerCollection()[0].type !== "root"
          ) {
            action(() => {
              commandManager.execute(
                new SendToBack(
                  session,
                  session.getLayersFromSelectedLayerCollection()
                )
              );
            });
          }
        },
        "Send To Back"
      );
      keyMapper.register(
        ["mod+d"],
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            if (
              !isEmpty(session.getLayersFromSelectedLayerCollection()) &&
              session.getLayersFromSelectedLayerCollection()[0].type ===
                "root" &&
              session.currentStage &&
              session.currentStage.id === "artboard"
            ) {
              commandManager.execute(
                new DuplicateArtboard(session, session.selectedFile)
              );
            } else if (
              !isEmpty(session.getLayersFromSelectedLayerCollection()) &&
              session.getLayersFromSelectedLayerCollection()[0].type !== "root"
            ) {
              commandManager.execute(
                new DuplicateLayers(
                  session,
                  session.getLayersFromSelectedLayerCollection()
                )
              );
            }
          });
        },
        "Duplicate"
      );
      keyMapper.register(
        "up",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            if (
              session.getLayersFromSelectedLayerCollection().length > 0 &&
              !(
                session.getLayersFromSelectedLayerCollection()[0] ===
                session.currentRootLayer
              )
            ) {
              commandManager.execute(
                new DragLayerWithArrowKeys(session, "up", false)
              );
            }
          });
        },
        "Up"
      );
      keyMapper.register(
        "shift+up",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            if (
              session.getLayersFromSelectedLayerCollection().length > 0 &&
              !(
                session.getLayersFromSelectedLayerCollection()[0] ===
                session.currentRootLayer
              )
            ) {
              commandManager.execute(
                new DragLayerWithArrowKeys(session, "up", true)
              );
            }
          });
        },
        "Shift Up"
      );
      keyMapper.register(
        "down",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            if (
              session.getLayersFromSelectedLayerCollection().length > 0 &&
              !(
                session.getLayersFromSelectedLayerCollection()[0] ===
                session.currentRootLayer
              )
            ) {
              commandManager.execute(
                new DragLayerWithArrowKeys(session, "down", false)
              );
            }
          });
        },
        "Down"
      );
      keyMapper.register(
        "shift+down",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            if (
              session.getLayersFromSelectedLayerCollection().length > 0 &&
              !(
                session.getLayersFromSelectedLayerCollection()[0] ===
                session.currentRootLayer
              )
            ) {
              commandManager.execute(
                new DragLayerWithArrowKeys(session, "down", true)
              );
            }
          });
        },
        "Shift Down"
      );

      keyMapper.register(
        "shift+left",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            if (
              session.getLayersFromSelectedLayerCollection().length > 0 &&
              !(
                session.getLayersFromSelectedLayerCollection()[0] ===
                session.currentRootLayer
              )
            ) {
              commandManager.execute(
                new DragLayerWithArrowKeys(session, "left", true)
              );
            }
          });
        },
        "Shift Left"
      );

      keyMapper.register(
        "shift+right",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            if (
              session.getLayersFromSelectedLayerCollection().length > 0 &&
              !(
                session.getLayersFromSelectedLayerCollection()[0] ===
                session.currentRootLayer
              )
            ) {
              commandManager.execute(
                new DragLayerWithArrowKeys(session, "right", true)
              );
            }
          });
        },
        "Shift Right"
      );

      keyMapper.register(
        "mod+option+s",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            commandManager.execute(new ToggleSnap(session));
          });
        },
        "Snap"
      );
      keyMapper.register(
        "mod+shift+s+g",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            commandManager.execute(new ToggleSnapConfig(session, "grid"));
          });
        },
        "Snap To Grid "
      );
      keyMapper.register(
        "mod+shift+s+l",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            commandManager.execute(new ToggleSnapConfig(session, "sibling"));
          });
        },
        "Snap To Layers "
      );
      keyMapper.register(
        "mod+shift+s+d",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            commandManager.execute(new ToggleSnapConfig(session, "parent"));
          });
        },
        "Snap To Document "
      );
      keyMapper.register(
        "mod+shift+s+r",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            commandManager.execute(new ToggleSnapConfig(session, "ruler"));
          });
        },
        "Snap To Rulers "
      );
      keyMapper.register(
        "mod+shift+s+u",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            commandManager.execute(new ToggleSnapConfig(session, "gutter"));
          });
        },
        "Snap To Gutter "
      );

      keyMapper.register(
        "mod+option+u",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            commandManager.execute(new ToggleCodeEditor(session));
          });
        },
        "Code Editor"
      );

      keyMapper.register(
        "mod+shift+i",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          if (session.displayMode === "stage") {
            action(async () => {
              await session.commandManager.executeAndSkip(
                new SketchImport(session)
              );
            });
          }
        },
        "Sketch Import"
      );
      keyMapper.register(
        "mod+,",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(async () => {
            await session.commandManager.executeAndSkip(
              new SetModalRoute(session, "settings")
            );
          });
        },
        "Settings"
      );
      keyMapper.register(
        "mod+shift+option+,",
        () => {
          if (session.currentStage.dragging) {
            return;
          }
          action(() => {
            session.modalRouter.currentRoute !== "shortcuts"
              ? commandManager.execute(new SetModalRoute(session, "shortcuts"))
              : commandManager.execute(new SetModalRoute(session, ""));
          });
        },
        "Shortcuts"
      );
      keyMapper.register(
        "mod+option+shift+d",
        () => {
          if (window["debug"]) {
            window["debug"] = false;
          } else {
            window["debug"] = true;
          }

          if (window["debug"]) {
            session.currentStage.canvas.executeFunction(
              "showConstructionLines"
            );
          } else {
            session.currentStage.canvas.executeFunction(
              "hideConstructionLines"
            );
          }
        },
        "Testing"
      );

      keyMapper.register(
        "mod+option+shift+b",
        () => {
          action(() => {
            throw new Error("Magic Error");
          });
        },
        "Testing"
      );

      // keyMapper.register(
      //   "mod+option+shift+a",
      //   () => {
      //     action(() => {
      //       if (session.selectedLayers[0].type === "symbol") {
      //         // const
      //         commandManager.execute(
      //           new SetCurrentStage(
      //             session,
      //             session.selectedLayers[0].import.packageName
      //           )
      //         );

      //         // SetCurrentStageMutator(
      //         //   session,
      //         //   session.selectedLayers[0].import.packageName
      //         // );
      //       } else {
      //         commandManager.execute(
      //           new CreateStageForDomain(
      //             session,
      //             session.selectedLayers[0],
      //             "layer"
      //           )
      //         );
      //       }
      //     });
      //   },
      //   "Testing"
      // );

      keyMapper.register(
        "mod+option+shift+8",
        () => {
          commandManager.execute(
            new RemoveSymbol(session, session.selectedFile)
          );
        },
        "Testing remove symbol"
      );

      keyMapper.register(
        "mod+option+shift+u",
        () => {
          action(() => {
            //

            session.selectedFile.scopeVariables = {
              ...session.selectedFile.scopeVariables,
              color: !session.selectedFile.scopeVariables.color
            };
            // commandManager.execute(
            //   new SetExpressionValue(
            //     session,
            //     "color",
            //     true,
            //     session.selectedFile.expressionList
            //   )
            // );
            // session.selectedFile.scopeVariables = {
            //   ...session.selectedFile.scopeVariables,
            //   color: !session.selectedFile.scopeVariables.color
            // };
            commandManager.execute(
              new SetOverride(
                session,
                session.getLayersFromSelectedLayerCollection()[0],
                "color",
                !session.getLayersFromSelectedLayerCollection()[0]
                  .scopeVariables.color
              )
            );
          });
        },
        "Testing"
      );

      keyMapper.register(
        "mod+option+shift+x",
        () => {
          action(() => {
            // commandManager.execute(
            //   new SetStyleAttribute(
            //     session,
            //     session.selectedLayers[0],
            //     "backgroundColor",
            //     {
            //       type: "conditionalExpression",
            //       test: {
            //         type: "expression",
            //         value: "color"
            //       },
            //       consequent: {
            //         type: "literal",
            //         value: "yellow"
            //       },
            //       alternate: {
            //         type: "literal",
            //         value: "blue"
            //       }
            //     }
            //   )
            // );

            commandManager.execute(
              new SetStyleAttribute(
                session,
                session.getLayersFromSelectedLayerCollection()[0],
                "backgroundColor",
                {
                  type: "conditionalExpression",
                  test: {
                    type: "expression",
                    expression: "color"
                  },
                  consequent: {
                    type: "literal",
                    value: "yellow"
                  },
                  alternate: {
                    type: "literal",
                    value: "blue"
                  }
                }
              )
            );

            // const
            // commandManager.execute(
            //   new AddLayer(session, session.currentRootLayer, {
            //     type: "conditionalExpression",
            //     test: {
            //       type: "expression",
            //       value: "this.props.isView"
            //     },
            //     consequent: {
            //       type: "literal",
            //       value: {
            //         type: "view",
            //         children: [],
            //         import: {
            //           layerName: "View",
            //           packageName: "native",
            //           isDefaultImport: false,
            //           asName: ""
            //         },
            //         locked: false,
            //         template: {
            //           centerVertical: false,
            //           centerHorizontal: false
            //         },
            //         layout: {
            //           top: 50,
            //           left: 100,
            //           width: 100,
            //           height: 100,
            //           position: "absolute"
            //         },
            //         style: {
            //           backgroundColor: "#E6E6E6"
            //         },
            //         props: {
            //           // style: {
            //           //   top: 0,
            //           //   left: 150,
            //           //   width: 150,
            //           //   height: 150,
            //           //   position: 'absolute',
            //           //   backgroundColor: 'rgba(230, 230, 230,1)',
            //           // },
            //         }
            //       }
            //     },
            //     alternate: {
            //       type: "literal",
            //       value: {
            //       type: "view",
            //       children: [],
            //       import: {
            //         layerName: "View",
            //         packageName: "native",
            //         isDefaultImport: false,
            //         asName: ""
            //       },
            //       locked: false,
            //       template: {
            //         centerVertical: false,
            //         centerHorizontal: false
            //       },
            //       layout: {
            //         top: 50,
            //         left: 100,
            //         width: 100,
            //         height: 100,
            //         position: "absolute"
            //       },
            //       style: {
            //         backgroundColor: "red"
            //       },
            //       props: {
            //         // style: {
            //         //   top: 0,
            //         //   left: 150,
            //         //   width: 150,
            //         //   height: 150,
            //         //   position: 'absolute',
            //         //   backgroundColor: 'rgba(230, 230, 230,1)',
            //         // },
            //       }
            //     }
            //   }
            //   })
            // );
            // SetCurrentStageMutator(
            //   session,
            //   session.selectedLayers[0].import.packageName
            // );
          });
        },
        "Testing"
      );

      keyMapper.register(
        "mod+option+shift+f",
        () => {
          action(() => {
            session.socket.emit("patch", {
              op: "snapshot",
              path: "",
              value: session.domain.toJS()
            });
          });
        },
        "Testing"
      );

      keyMapper.register(
        "mod+option+shift+y",
        () => {
          action(() => {
            commandManager.execute(
              new AddLayer(session, session.currentRootLayer, "awvdwyhvd")
            );
            // SetCurrentStageMutator(session, "artboard");
            // commandManager.execute(new Cha(session, session.selectedLayers[0], "awvdwyhvd"));
          });
        },
        "Testing"
      );

      if (session.envConfig.runningContext === "session") {
        // keyMapper.register(
        //   "mod+option+shift+2",
        //   () => {
        //     action(() => {
        //       const file = session.selectedFile;
        //       if (!file) {
        //         return;
        //       }
        //       commandManager.executeAndSkip(
        //         new UpdateRecordingConditions(session, "platform", "iOS")
        //       );
        //       commandManager.executeAndSkip(
        //         new UpdateRecordingConditions(session, "deviceName", "iPhone6")
        //       );
        //     });
        //   },
        //   "Update Recording Conditions"
        // );
        // keyMapper.register(
        //   "mod+option+shift+o",
        //   () => {
        //     action(() => {
        //       const file = session.selectedFile;
        //       if (!file) {
        //         return;
        //       }
        //       commandManager.execute(
        //         new SetOverride(
        //           session,
        //           session.selectedLayers[0] as SymbolLayer,
        //           "this.props.textInput",
        //           "Android"
        //         )
        //       );
        //     });
        //   },
        //   "Set Expression"
        // );
        // keyMapper.register(
        //   "mod+option+shift+i",
        //   () => {
        //     action(() => {
        //       const file = session.selectedFile;
        //       if (!file) {
        //         return;
        //       }
        //       commandManager.execute(
        //         new UpdateFileScopeVariables(session, { a: true })
        //       );
        //     });
        //   },
        //   "Set Expression"
        // );
        // keyMapper.register(
        //   "mod+option+shift+r",
        //   () => {
        //     action(() => {
        //       session.debugTools.reveseRefData = !session.debugTools
        //         .reveseRefData;
        //       session.emit("selectedLayers");
        //     });
        //   },
        //   "Add Layer wewd"
        // );
        // keyMapper.register(
        //   "mod+option+shift+r",
        //   () => {
        //     action(() => {
        //       session.debugTools.reveseRefData = !session.debugTools
        //         .reveseRefData;
        //       session.emit("selectedLayers");
        //     });
        //   },
        //   "Add Layer wewd"
        // );
      }
    }
    // keyMapper.register(
    //   "mod+option+shift+r",
    //   () => {
    //     action(() => {
    //       session.debugTools.reveseRefData = !session.debugTools
    //         .reveseRefData;
    //       session.emit("refDebugger");
    //     });
    //   },
    //   "Add Layer wewd"
    // );
  }
}
