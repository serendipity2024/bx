import * as Mousetrap from "mousetrap";

export default class KeyMapper {
  actionMap: Map<string, string> = new Map<string, string>();
  register(name: string | string[], callback: any, actionName: string) {
    Mousetrap.bind(name, (e: any) => {
      if (e.preventDefault) {
        e.preventDefault();
      }
      callback();
    });
    if (typeof name === "string") {
      this.actionMap.set(name, actionName);
    } else {
      name.forEach((otherName: string) => {
        this.actionMap.set(otherName, actionName);
      });
    }

    // Mousetrap.prototype.stopCallback = function() {
    //   return false;
    // };
  }

  unregister(name: string) {
    Mousetrap.unbind(name);
    this.actionMap.delete(name);
  }

  unRegisterAll() {
    Mousetrap.reset();
    this.actionMap = new Map<string, string>();
  }

  getAll() {
    let newArr: any = [];
    this.actionMap.forEach((value: string, key: string) => {
      newArr.push({ key, value });
    });
    return newArr;
  }
  get(name: string) {
    return this.actionMap.get(name);
  }
}
