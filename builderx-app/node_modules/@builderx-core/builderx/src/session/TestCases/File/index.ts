import AddNewArtboard from "../../lib/Commands/File/AddNewArtboard";
import RemoveArtboard from "../../lib/Commands/File/RemoveArtboard";
import { fileJSON } from "../Templates/File";
import { layerJSON, layerJSON1 } from "../Templates/Layer";
import DuplicateArtboard from "../../lib/Commands/File/DuplicateArtboard";
import { CommandManager } from "command-manager";
import { Session } from "../../lib/models/Session";
import { File } from "domain-x";
import SelectFile from "../../lib/Commands/Session/SelectFile";

export const AddNewArtboardTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Add New Artboard", () => {
    // debugger;
    const addNewFile = new AddNewArtboard(session, fileJSON, "artboard");
    commandManager.execute(addNewFile);
    const file = session.domain.files.get("/src/screens/Untitled.js");
    expect(file).toBeDefined();
    if (file) {
      // expect(file.layer.domainCompiledRefs).toBeDefined();
      // expect(file.layer.domainCompiledRefs[0].renderCompiledRef).toBeDefined();
      // expect(
      //   session.currentStage.domainCompiled.files.get(
      //     "/src/screens/Untitled.js"
      //   )
      // ).toBeDefined();
      // expect(session.currentStage.renderCompiled.children[0]).toBeDefined();
    }
  });
};
export const RemoveFileTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Remove File", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");
    expect(file).toBeDefined();
    if (file) {
      const removeFile = new RemoveArtboard(session, file);
      commandManager.execute(removeFile);
      expect(session.domain.files.size).toBe(0);
      expect(session.currentStage.domainCompiled.files.size).toBe(0);
      // expect(session.currentStage.renderCompiled.children.length).toBe(0);
    }
  });
};
export const UndoRemoveFileTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Undo Remove File", () => {
    // commandManager.undo();
    // const file = session.domain.files.get("/src/screens/Untitled.js");
    // expect(file).toBeDefined();
    // if (file) {
    //   expect(file.layer.domainCompiledRefs).toBeDefined();
    //   expect(file.layer.domainCompiledRefs[0].renderCompiledRef).toBeDefined();
    //   expect(
    //     session.currentStage.domainCompiled.files.get(
    //       "/src/screens/Untitled.js"
    //     )
    //   ).toBeDefined();
    //   // expect(session.currentStage.renderCompiled.children[0]).toBeDefined();
    // }
    // expect(session.domain.files.size).toBe(1);
    // expect(session.currentStage.domainCompiled.files.size).toBe(1);
    // // expect(session.currentStage.renderCompiled.children.length).toBe(2);
  });
};

export const AddArtboardFromJSTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Add Artboard From JS", () => {
    fileJSON.path = "/src/screens/Untitled1.js";
    fileJSON.layer.children.push(layerJSON);
    fileJSON.layer.children.push(layerJSON1);
    const addArtboardFromJS = new AddNewArtboard(session, fileJSON, "artboard");
    commandManager.execute(addArtboardFromJS);
    // expect(session.currentStage.renderCompiled.children.length).toBe(4);
    expect(session.domain.files.size).toBe(2);
    expect(session.currentStage.domainCompiled.files.size).toBe(2);
    // expect(
    //   session.currentStage.renderCompiled.children[2].children[0].children
    //     .length
    // ).toBe(2);
    const file = session.domain.getFileFromFileId("/src/screens/Untitled1.js");
    const compiledFile = session.currentStage.domainCompiled.getFileFromFileId(
      "/src/screens/Untitled1.js"
    );
    expect(file).toBeDefined();
    expect(file.layer.children.length).toBe(2);
    expect(compiledFile).toBeDefined();
    expect(compiledFile.layer.children.length).toBe(2);
  });
};
export const DuplicateArtboardTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Duplicate Artboard", () => {
    const file: any = session.domain.files.get("/src/screens/Untitled.js");
    expect(file).toBeDefined();
    if (file) {
      session.commandManager.executeAndSkip(new SelectFile(session, file));
    }
    const selectedFile = session.getSelectedFile();
    expect(selectedFile).toBeDefined();
    if (selectedFile) {
      const originalFilePath = selectedFile.path;
      const duplicateArtboard = new DuplicateArtboard(session, selectedFile);
      commandManager.execute(duplicateArtboard);
      let currentSelectedFile: any = session.getSelectedFile();
      currentSelectedFile = currentSelectedFile as File;
      expect(currentSelectedFile).toBeDefined();
      if (currentSelectedFile) {
        const originalFile = session.domain.getFileFromFileId(originalFilePath);
        expect(session.domain.files.size).toBe(3);
        expect(session.currentStage.domainCompiled.files.size).toBe(3);
        // expect(session.currentStage.renderCompiled.children.length).toBe(6);
        expect(currentSelectedFile.layer.children.length).toEqual(
          originalFile.layer.children.length
        );
        expect(currentSelectedFile.path !== originalFilePath).toBeTruthy();
      }
    }
  });
};

export const UndoDuplicateArtboardTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Undo Duplicate Artboard", () => {
    commandManager.undo();
    expect(session.domain.files.size).toBe(2);
    expect(session.currentStage.domainCompiled.files.size).toBe(2);
    // expect(session.currentStage.renderCompiled.children.length).toBe(4);
    // expect(session.getSelectedFile()).toBeUndefined();
  });
};
