import { File } from "domain-x";
import SetAllProps from "../../lib/Commands/Prop/SetAllProps";
import { CommandManager } from "command-manager";
import { Session } from "../../lib/models/Session";
import { Layer as DomainLayer } from "domain-x";
import { SetAllPropsService } from "../../lib/Commands/CommandServices/SetAllPropsService";
export const SetAllPropsTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("SetAllProps Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    expect(file).toBeDefined();

    // SetAllPropsService(session, file.layer.children[0] as DomainLayer, {
    //   name: "BuilderX",
    //   style: {
    //     top: 10,
    //     left: 10,
    //     height: 200,
    //     width: 200
    //   }
    // });
    expect(file).toBeDefined();
    if (file) {
      // const newLayer = file.layer.children[0] as DomainLayer;
      // expect(newLayer).toBeDefined();
      // expect(newLayer.props.style.top).toBe(10);
      // expect(newLayer.props.style.left).toBe(10);
      // expect(newLayer.props.style.height).toBe(200);
      // expect(newLayer.props.style.width).toBe(200);
      // expect((newLayer.props as any).name).toBe("BuilderX");
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.top).toBe(10);
      expect(newLayer.domain.props.style.left).toBe(10);
      expect(newLayer.domain.props.style.height).toBe(200);
      expect(newLayer.domain.props.style.width).toBe(200);
      expect((newLayer.domain.props as any).name).toBe("BuilderX");
    }
  });
};
export const UndoSetAllPropsTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Undo setAllProps Command", () => {
    commandManager.undo();
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    expect(file).toBeDefined();
    if (file) {
      // const newLayer = file.layer.children[0] as DomainLayer;
      // expect(newLayer).toBeDefined();
      // expect(newLayer.props.style.top).toBe(90);
      // expect(newLayer.props.style.left).toBe(200);
      // expect(newLayer.props.style.height).toBe(200);
      // expect(newLayer.props.style.width).toBe(230);
      // expect((newLayer.props as any).name).toBeUndefined();
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.top).toBe(90);
      expect(newLayer.domain.props.style.left).toBe(200);
      expect(newLayer.domain.props.style.height).toBe(200);
      expect(newLayer.domain.props.style.width).toBe(230);
      expect((newLayer.domain.props as any).name).toBeUndefined();
    }
  });
};
