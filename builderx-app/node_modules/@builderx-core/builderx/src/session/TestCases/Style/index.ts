import { File } from "domain-x";
import SetStyleAttribute from "../../lib/Commands/Style/SetStyleAttribute";
import RemoveStyleAttribute from "../../lib/Commands/Style/RemoveStyleAttribute";
import { Session } from "../../lib/models/Session";
import { CommandManager } from "command-manager";
import { Layer as DomainLayer } from "domain-x";
import { SetAllStyleService } from "src/session/lib/Commands/CommandServices/SetAllStyleService";
export const SetStyleTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("SetStyle Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;

    // SetAllStyleService(session, file.layer.children[0] as DomainLayer, {
    //   top: 190,
    //   left: 0,
    //   height: 100,
    //   width: 110,
    //   position: "absolute"
    // });
    expect(file).toBeDefined();
    if (file) {
      const newLayer = file.layer.children[0] as DomainLayer;
      expect(newLayer).toBeDefined();
      expect(newLayer.props.style.get("top")).toBe(190);
      expect(newLayer.props.style.get("left")).toBe(0);
      expect(newLayer.props.style.get("height")).toBe(100);
      expect(newLayer.props.style.get("width")).toBe(110);
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.top).toBe(190);
      expect(newLayer.domain.props.style.left).toBe(0);
      expect(newLayer.domain.props.style.height).toBe(100);
      expect(newLayer.domain.props.style.width).toBe(110);
    }
  });
};
export const UndoSetStyleTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Undo setStyle Command", () => {
    commandManager.undo();
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    expect(file).toBeDefined();
    if (file) {
      const newLayer = file.layer.children[0] as DomainLayer;
      expect(newLayer).toBeDefined();
      expect(newLayer.props.style.get("top")).toBe(90);
      expect(newLayer.props.style.get("left")).toBe(200);
      expect(newLayer.props.style.get("height")).toBe(200);
      expect(newLayer.props.style.get("width")).toBe(230);
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.top).toBe(90);
      expect(newLayer.domain.props.style.left).toBe(200);
      expect(newLayer.domain.props.style.height).toBe(200);
      expect(newLayer.domain.props.style.width).toBe(230);
    }
  });
};
export const SetStyleAttributeTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("SetStyleAttribute Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    expect(file).toBeDefined();
    const setStyleAttribute = new SetStyleAttribute(
      session,
      file.layer.children[0] as DomainLayer,
      "top",
      90
    );
    commandManager.execute(setStyleAttribute);

    if (file) {
      const newLayer = file.layer.children[0] as DomainLayer;
      expect(newLayer).toBeDefined();
      expect(newLayer.props.style.get("top")).toBe(90);
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.top).toBe(90);
    }
    // const renderCompiledLayer = session.currentStage.renderCompiled.children[0];
    // expect(renderCompiledLayer).toBeDefined();
    // const renderCompiledNewLayer = renderCompiledLayer.children[0];
    // expect(renderCompiledNewLayer).toBeUndefined();
  });
};
export const RemoveStyleAttributeTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("RemoveStyleAttribute Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    expect(file).toBeDefined();
    const removeStyleAttribute = new RemoveStyleAttribute(
      session,
      file.layer.children[0] as DomainLayer,
      "top"
    );
    commandManager.execute(removeStyleAttribute);
    if (file) {
      const newLayer = file.layer.children[0] as DomainLayer;
      expect(newLayer).toBeDefined();
      expect(newLayer.props.style.get("top")).toBeUndefined();
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.top).toBeUndefined();
    }
  });
};
