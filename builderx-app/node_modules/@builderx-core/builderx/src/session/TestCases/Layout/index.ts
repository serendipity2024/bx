import { File } from "domain-x";
import { Session } from "../../lib/models/Session";
import { CommandManager } from "command-manager";
import ChangeToFlex from "../../lib/Commands/Layout/ChangeToFlex";
import FillLayer from "../../lib/Commands/Layout/FillLayer";
import FixLayer from "../../lib/Commands/Layout/FixLayer";
import SetPercent from "../../lib/Commands/Layout/SetPercent";
import ChangeToAbsolute from "../../lib/Commands/Layout/ChangeToAbsolute";
import SplitView from "../../lib/Commands/Layout/SplitView";
import { Layer as DomainLayer } from "domain-x";

export const ChangeToFlexTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Change To Flex Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    const changeToFlex = new ChangeToFlex(
      session,
      file.layer.children[0] as DomainLayer
    );
    commandManager.execute(changeToFlex);

    expect(file).toBeDefined();
    if (file) {
      const newLayer = (file.layer.children[0] as DomainLayer)
        .children[0] as DomainLayer;
      expect(newLayer).toBeDefined();
      expect(newLayer.props.style.get("top")).toBeUndefined();
      expect(newLayer.props.style.get("left")).toBeUndefined();
      expect(newLayer.props.style.get("height")).toBe(90);
      expect(newLayer.props.style.get("width")).toBe(90);
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0].children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.top).toBeUndefined();
      expect(newLayer.domain.props.style.left).toBeUndefined();
      expect(newLayer.domain.props.style.height).toBe(90);
      expect(newLayer.domain.props.style.width).toBe(90);
    }

    // var renderCompiledLayer = session.currentStage.renderCompiled;
    // expect(renderCompiledLayer).toBeDefined();
    // if (renderCompiledLayer) {
    //   const newLayer =
    //     renderCompiledLayer.children[0].children[0].children[0].children[0];
    //   expect(newLayer).toBeDefined();
    //   expect(newLayer.x).toBe(0);
    //   expect(newLayer.y).toBe(0);
    //   expect(newLayer.height).toBe(90);
    //   expect(newLayer.width).toBe(90);
    // }
  });
};
export const UndoChangeToFlexTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Undo Change To Flex Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    commandManager.undo();
    expect(file).toBeDefined();
    if (file) {
      const newLayer = (file.layer.children[0] as DomainLayer)
        .children[0] as DomainLayer;
      expect(newLayer).toBeDefined();
      expect(newLayer.props.style.get("top")).toBe(90);
      expect(newLayer.props.style.get("left")).toBe(90);
      expect(newLayer.props.style.get("height")).toBe(90);
      expect(newLayer.props.style.get("width")).toBe(90);
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0].children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.top).toBe(90);
      expect(newLayer.domain.props.style.left).toBe(90);
      expect(newLayer.domain.props.style.height).toBe(90);
      expect(newLayer.domain.props.style.width).toBe(90);
    }

    // var renderCompiledLayer = session.currentStage.renderCompiled;
    // expect(renderCompiledLayer).toBeDefined();
    // if (renderCompiledLayer) {
    //   const newLayer =
    //     renderCompiledLayer.children[0].children[0].children[0].children[0];
    //   expect(newLayer).toBeDefined();
    //   expect(newLayer.x).toBe(90);
    //   expect(newLayer.y).toBe(90);
    //   expect(newLayer.height).toBe(90);
    //   expect(newLayer.width).toBe(90);
    // }
  });
};
export const FillLayerWidthTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Fill Layer Width Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    const fillLayer = new FillLayer(
      session,
      file.layer.children[0] as DomainLayer,
      "width"
    );
    commandManager.execute(fillLayer);

    expect(file).toBeDefined();
    if (file) {
      const newLayer = file.layer.children[0] as DomainLayer;

      expect(newLayer).toBeDefined();
      expect(newLayer.props.style.get("top")).toBe(0);
      expect(newLayer.props.style.get("left")).toBe(0);
      expect(newLayer.props.style.get("right")).toBe(0);
      expect(newLayer.props.style.get("height")).toBe(90);
      expect(newLayer.props.style.get("width")).toBeUndefined();
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.top).toBe(0);
      expect(newLayer.domain.props.style.left).toBe(0);
      expect(newLayer.domain.props.style.right).toBe(0);
      expect(newLayer.domain.props.style.height).toBe(90);
      expect(newLayer.domain.props.style.width).toBeUndefined();
    }

    // var renderCompiledLayer = session.currentStage.renderCompiled;
    // expect(renderCompiledLayer).toBeDefined();
    // if (renderCompiledLayer) {
    //   const newLayer = renderCompiledLayer.children[0].children[0].children[0];
    //   const parentLayer = renderCompiledLayer.children[0].children[0];
    //   expect(newLayer).toBeDefined();
    //   expect(newLayer.x).toBe(0);
    //   expect(newLayer.y).toBe(0);
    //   expect(newLayer.height).toBe(90);
    //   expect(newLayer.width).toBe(parentLayer.width);
    // }
  });
};
export const UndoFillLayerTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Undo Fill Layer Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    commandManager.undo();

    expect(file).toBeDefined();
    if (file) {
      const newLayer = file.layer.children[0] as DomainLayer;
      expect(newLayer).toBeDefined();
      expect(newLayer.props.style.get("top")).toBe(0);
      expect(newLayer.props.style.get("left")).toBe(0);
      expect(newLayer.props.style.get("right")).toBeUndefined();
      expect(newLayer.props.style.get("height")).toBe(90);
      expect(newLayer.props.style.get("width")).toBe(90);
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.top).toBe(0);
      expect(newLayer.domain.props.style.left).toBe(0);
      expect(newLayer.domain.props.style.right).toBeUndefined();
      expect(newLayer.domain.props.style.height).toBe(90);
      expect(newLayer.domain.props.style.width).toBe(90);
    }

    // var renderCompiledLayer = session.currentStage.renderCompiled;
    // expect(renderCompiledLayer).toBeDefined();
    // if (renderCompiledLayer) {
    //   const newLayer = renderCompiledLayer.children[0].children[0].children[0];
    //   expect(newLayer).toBeDefined();
    //   expect(newLayer.x).toBe(0);
    //   expect(newLayer.y).toBe(0);
    //   expect(newLayer.height).toBe(90);
    //   expect(newLayer.width).toBe(90);
    // }
  });
};
export const FillLayerHeightTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Fill Layer Height Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    const fillLayer = new FillLayer(
      session,
      file.layer.children[0] as DomainLayer,
      "height"
    );
    commandManager.execute(fillLayer);

    expect(file).toBeDefined();
    if (file) {
      const newLayer = file.layer.children[0] as DomainLayer;

      expect(newLayer).toBeDefined();
      expect(newLayer.props.style.get("top")).toBe(0);
      expect(newLayer.props.style.get("left")).toBe(0);
      expect(newLayer.props.style.get("bottom")).toBe(0);
      expect(newLayer.props.style.get("width")).toBe(90);
      expect(newLayer.props.style.get("height")).toBeUndefined();
      expect(newLayer.props.style.get("right")).toBeUndefined();
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.top).toBe(0);
      expect(newLayer.domain.props.style.left).toBe(0);
      expect(newLayer.domain.props.style.bottom).toBe(0);
      expect(newLayer.domain.props.style.width).toBe(90);
      expect(newLayer.domain.props.style.height).toBeUndefined();
      expect(newLayer.domain.props.style.right).toBeUndefined();
    }

    // var renderCompiledLayer = session.currentStage.renderCompiled;
    // expect(renderCompiledLayer).toBeDefined();
    // if (renderCompiledLayer) {
    //   const newLayer = renderCompiledLayer.children[0].children[0].children[0];
    //   const parentLayer = renderCompiledLayer.children[0].children[0];
    //   expect(newLayer).toBeDefined();
    //   expect(newLayer.x).toBe(0);
    //   expect(newLayer.y).toBe(0);
    //   expect(newLayer.width).toBe(90);
    //   expect(newLayer.height).toBe(parentLayer.height);
    // }
  });
};
export const FixLayerHeightTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Fix Layer Height Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    const fixLayer = new FixLayer(
      session,
      file.layer.children[0] as DomainLayer,
      "height"
    );
    commandManager.execute(fixLayer);

    expect(file).toBeDefined();
    if (file) {
      const newLayer = file.layer.children[0] as DomainLayer;

      const parentLayer = file.layer as DomainLayer;
      expect(newLayer).toBeDefined();
      expect(newLayer.props.style.get("top")).toBe(0);
      expect(newLayer.props.style.get("left")).toBe(0);
      // expect(newLayer.props.style.height).toBe(parentLayer.props.style.height);
      expect(newLayer.props.style.get("width")).toBe(90);
      expect(newLayer.props.style.get("bottom")).toBeUndefined();
      expect(newLayer.props.style.get("right")).toBeUndefined();
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      const parentLayer = compiledFile.layer;
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.top).toBe(0);
      expect(newLayer.domain.props.style.left).toBe(0);
      // expect(newLayer.domain.props.style.height).toBe(
      //   parentLayer.domain.props.style.height
      // );
      expect(newLayer.domain.props.style.width).toBe(90);
      expect(newLayer.domain.props.style.bottom).toBeUndefined();
      expect(newLayer.domain.props.style.right).toBeUndefined();
    }

    // var renderCompiledLayer = session.currentStage.renderCompiled;
    // expect(renderCompiledLayer).toBeDefined();
    // if (renderCompiledLayer) {
    //   const newLayer = renderCompiledLayer.children[0].children[0].children[0];
    //   const parentLayer = renderCompiledLayer.children[0].children[0];
    //   expect(newLayer).toBeDefined();
    //   expect(newLayer.x).toBe(0);
    //   expect(newLayer.y).toBe(0);
    //   expect(newLayer.width).toBe(90);
    //   expect(newLayer.height).toBe(parentLayer.height);
    // }
  });
};
export const SetLayerHeightPercentTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Set Layer Height Percent Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    const fixLayer = new SetPercent(
      session,
      file.layer.children[0] as DomainLayer,
      "height"
    );
    commandManager.execute(fixLayer);

    expect(file).toBeDefined();
    if (file) {
      const newLayer = file.layer.children[0] as DomainLayer;

      expect(newLayer).toBeDefined();
      expect(newLayer.props.style.get("top")).toBe(0);
      expect(newLayer.props.style.get("left")).toBe(0);
      expect(newLayer.props.style.get("height")).toBe("100%");
      expect(newLayer.props.style.get("width")).toBe(90);
      expect(newLayer.props.style.get("bottom")).toBeUndefined();
      expect(newLayer.props.style.get("right")).toBeUndefined();
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.top).toBe(0);
      expect(newLayer.domain.props.style.left).toBe(0);
      expect(newLayer.domain.props.style.height).toBe("100%");
      expect(newLayer.domain.props.style.width).toBe(90);
      expect(newLayer.domain.props.style.bottom).toBeUndefined();
      expect(newLayer.domain.props.style.right).toBeUndefined();
    }

    // var renderCompiledLayer = session.currentStage.renderCompiled;
    // expect(renderCompiledLayer).toBeDefined();
    // if (renderCompiledLayer) {
    //   const newLayer = renderCompiledLayer.children[0].children[0].children[0];
    //   const parentLayer = renderCompiledLayer.children[0].children[0];
    //   expect(newLayer).toBeDefined();
    //   expect(newLayer.x).toBe(0);
    //   expect(newLayer.y).toBe(0);
    //   expect(newLayer.width).toBe(90);
    //   expect(newLayer.height).toBe(parentLayer.height);
    // }
  });
};
export const ChangeToAbsoluteTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Change To Absolute Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    const changeToAbsolute = new ChangeToAbsolute(
      session,
      file.layer.children[0] as DomainLayer
    );
    commandManager.execute(changeToAbsolute);
    expect(file).toBeDefined();
    if (file) {
      const newLayer = file.layer.children[0] as DomainLayer;
      expect(newLayer).toBeDefined();
      expect(newLayer.props.style.get("position")).toBe("absolute");
      expect(newLayer.props.style.get("top")).toBe(0);
      expect(newLayer.props.style.get("left")).toBe(0);
      expect(newLayer.props.style.get("height")).toBe(90);
      expect(newLayer.props.style.get("width")).toBe(90);
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.position).toBe("absolute");
      expect(newLayer.domain.props.style.top).toBe(0);
      expect(newLayer.domain.props.style.left).toBe(0);
      expect(newLayer.domain.props.style.height).toBe(90);
      expect(newLayer.domain.props.style.width).toBe(90);
    }

    // var renderCompiledLayer = session.currentStage.renderCompiled;
    // expect(renderCompiledLayer).toBeDefined();
    // if (renderCompiledLayer) {
    //   const newLayer = renderCompiledLayer.children[0].children[0].children[0];
    //   expect(newLayer).toBeDefined();
    //   expect(newLayer.x).toBe(0);
    //   expect(newLayer.y).toBe(0);
    //   expect(newLayer.height).toBe(90);
    //   expect(newLayer.width).toBe(90);
    // }
  });
};
export const SplitViewTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Split View Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    const splitView = new SplitView(session, file.layer, "Horizontal");
    commandManager.execute(splitView);
    expect(file).toBeDefined();
    if (file) {
      const newLayer1 = file.layer.children[0] as DomainLayer;
      const newLayer2 = file.layer.children[1] as DomainLayer;
      expect(newLayer1).toBeDefined();
      expect(newLayer2).toBeDefined();
      expect(newLayer1.props.style.get("position")).toBeUndefined();
      expect(newLayer2.props.style.get("position")).toBeUndefined();
      expect(newLayer1.props.style.get("flex")).toBe(0.5);
      expect(newLayer2.props.style.get("flex")).toBe(0.5);
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer1 = compiledFile.layer.children[0];
      const newLayer2 = compiledFile.layer.children[1];
      expect(newLayer1).toBeDefined();
      expect(newLayer2).toBeDefined();
      expect(newLayer1.domain.props.style.position).toBeUndefined();
      expect(newLayer2.domain.props.style.position).toBeUndefined();
      expect(newLayer1.domain.props.style.flex).toBe(0.5);
      expect(newLayer2.domain.props.style.flex).toBe(0.5);
    }

    // var renderCompiledLayer = session.currentStage.renderCompiled;
    // expect(renderCompiledLayer).toBeDefined();
    // if (renderCompiledLayer) {
    //   const newLayer1 = renderCompiledLayer.children[0].children[0].children[0];
    //   const newLayer2 = renderCompiledLayer.children[0].children[0].children[1];
    //   expect(newLayer1).toBeDefined();
    //   expect(newLayer2).toBeDefined();
    //   expect(newLayer1.width).toBe(375);
    //   expect(newLayer1.height).toBe(406);
    //   expect(newLayer1.x).toBe(0);
    //   expect(newLayer1.y).toBe(0);
    //   expect(newLayer2.width).toBe(375);
    //   expect(newLayer2.height).toBe(406);
    //   expect(newLayer2.x).toBe(0);
    //   expect(newLayer2.y).toBe(406);
    // }
  });
};
