import { Session } from "../../lib/models/Session";
import { CommandManager } from "command-manager";
import { Copy } from "../../lib/Commands/Clipboard/Copy";
import { Paste } from "../../lib/Commands/Clipboard/Paste";
import { Cut } from "../../lib/Commands/Clipboard/Cut";
import SelectLayers from "../../lib/Commands/Session/SelectLayers";
import SelectFile from "../../lib/Commands/Session/SelectFile";
import { Layer as DomainLayer } from "domain-x";

// import { omit } from "lodash";
// import SelectLayers from "../../lib/Commands/Session/SelectLayers";
// import SelectFile from "../../lib/Commands/Session/SelectFile";

export const CopyTest = (session: Session, commandManager: CommandManager) => {
  test("Copy Selected Layers", () => {
    const file = session.domain.files.get("/src/screens/Untitled1.js");
    expect(file).toBeDefined();
    if (file) {
      session.commandManager.executeAndSkip(
        new SelectLayers(session, [file.layer.children[0]])
      );
      const selectedLayers = session.selectedLayers;
      expect(selectedLayers).toBeDefined();
      commandManager.executeAndSkip(new Copy(session));
      const cliboard = session.drivers.clipboardService.get();
      expect(cliboard.type).toBe("layer");
      const layerJSON = selectedLayers[0].toJS();
      delete layerJSON["styleName"];
      delete layerJSON.children[0]["styleName"];
      expect(cliboard.data[0]).toEqual(layerJSON);
    }
  });
};
export const PasteTest = (session: Session, commandManager: CommandManager) => {
  test("Paste Layers", async () => {
    const file = session.domain.files.get("/src/screens/Untitled1.js");
    expect(file).toBeDefined();
    if (file) {
      session.commandManager.executeAndSkip(new SelectFile(session, file));
      await commandManager.execute(new Paste(session));
      const cliboard = session.drivers.clipboardService.get();
      expect(cliboard.type).toBe("layer");
      const layerJSON = (file.layer.children[2] as DomainLayer).toJS();
      expect(file.layer.children.length).toBe(3);
      removeProp(cliboard.data[0], "styleName");
      removeProp(layerJSON, "styleName");
      expect(cliboard.data[0]).toEqual(layerJSON);
    }
  });
};

function removeProp(obj: any, propToDelete: string) {
  for (var property in obj) {
    if (obj.hasOwnProperty(property)) {
      if (typeof obj[property] === "object") {
        removeProp(obj[property], propToDelete);
      } else {
        if (property === propToDelete) {
          delete obj[property];
        }
      }
    }
  }
}

export const UndoPasteTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Undo Paste Layers", () => {
    commandManager.undo();
    const file = session.domain.files.get("/src/screens/Untitled1.js");
    expect(file).toBeDefined();
    if (file) {
      expect(file.layer.children.length).toBe(2);
    }
  });
};
export const CutTest = (session: Session, commandManager: CommandManager) => {
  test("Cut Selected Layers", () => {
    const file = session.domain.files.get("/src/screens/Untitled1.js");
    expect(file).toBeDefined();
    if (file) {
      session.commandManager.executeAndSkip(
        new SelectLayers(session, [file.layer.children[1]])
      );
      const selectedLayers = session.selectedLayers;
      expect(selectedLayers).toBeDefined();
      commandManager.execute(new Cut(session));
      const cliboard = session.drivers.clipboardService.get();
      expect(cliboard.type).toBe("layer");
      const layerJSON = selectedLayers[0].toJS();
      delete layerJSON["styleName"];
      delete layerJSON.children[0]["styleName"];
      expect(cliboard.data[0]).toEqual(layerJSON);
      expect(file.layer.children.length).toBe(1);
    }
  });
};
export const UndoCutTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Undo Cut Layers", () => {
    commandManager.undo();
    const file = session.domain.files.get("/src/screens/Untitled1.js");
    expect(file).toBeDefined();
    if (file) {
      expect(file.layer.children.length).toBe(2);
    }
  });
};
