import { CommandManager } from "command-manager";
import { Session } from "../../lib/models/Session";
import SelectLayers from "../../lib/Commands/Session/SelectLayers";
import { AlignSelectedLayers, CreateSymbol } from "../../lib/Commands";
import { Layer, File } from "domain-x";
import { centerWrapperProps } from "../Templates/Layer";

export const SetCenterHorizontalTest1 = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Set Center Horizontal Command using Aligment Editor", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");

    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const domainLayer = (file.layer.children[0] as any).children[0];
    commandManager.executeAndSkip(new SelectLayers(session, [domainLayer]));
    commandManager.execute(
      new AlignSelectedLayers(session, domainLayer, "align-horizontally-center")
    );
    testCenterHorizontal(file, domainLayer);
  });
};
function testCenterHorizontal(file: any, domainLayer: any) {
  // const parentCompiledLayer = (file.layer.children[0] as any)
  //   .domainCompiledRefs[0];
  // expect(domainLayer.type).toBe("view");
  // expect(domainLayer.template.centerHorizontal).toBe(true);
  // const centerWrapperCompiledLayer = parentCompiledLayer.children[0];
  // expect(centerWrapperCompiledLayer.domain.type).toBe("view");
  // expect(centerWrapperCompiledLayer.domain.props.style.toJS()).toEqual({
  //   top: 0,
  //   left: 0,
  //   bottom: 0,
  //   right: 0,
  //   position: "absolute",
  //   alignItems: "center"
  // });
  // expect(centerWrapperCompiledLayer.children.length).toBe(1);
  // const compileLayer = centerWrapperCompiledLayer.children[0];
  // expect(domainLayer.props.toJS()).toEqual(compileLayer.domain.props.toJS());
}
function testCenterVertical(file: any, domainLayer: any) {
  // const parentCompiledLayer = (file.layer.children[0] as any)
  //   .domainCompiledRefs[0];
  // expect(domainLayer.type).toBe("view");
  // expect(domainLayer.template.centerVertical).toBe(true);
  // expect(domainLayer.template.centerHorizontal).toBe(true);
  // const centerWrapperCompiledLayer = parentCompiledLayer.children[0];
  // expect(centerWrapperCompiledLayer.domain.type).toBe("view");
  // expect(centerWrapperCompiledLayer.domain.props.style.toJS()).toEqual(
  //   centerWrapperProps.style
  // );
  // expect(centerWrapperCompiledLayer.children.length).toBe(1);
  // const compileLayer = centerWrapperCompiledLayer.children[0];
  // expect(domainLayer.props.toJS()).toEqual(compileLayer.domain.props.toJS());
}
export const SetCenterVerticalTest1 = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Set Center Vertical Command using Aligment Editor", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");

    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const domainLayer = (file.layer.children[0] as any).children[0];
    commandManager.executeAndSkip(new SelectLayers(session, [domainLayer]));
    commandManager.execute(
      new AlignSelectedLayers(session, domainLayer, "align-vertically-center")
    );
    testCenterVertical(file, domainLayer);
  });
};

export const SetCenterVerticalUndoTest1 = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Set Center Vertical Command Undo", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");

    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    // const parentCompiledLayer = (file.layer.children[0] as any)
    //   .domainCompiledRefs[0];
    // const domainLayer = (file.layer.children[0] as any).children[0];
    // commandManager.undo();
    // expect(domainLayer.type).toBe("view");
    // expect(domainLayer.template.centerVertical).toBe(false);
    // expect(domainLayer.template.centerHorizontal).toBe(true);
    // const centerWrapperCompiledLayer = parentCompiledLayer.children[0];
    // expect(centerWrapperCompiledLayer.domain.type).toBe("view");
    // expect(centerWrapperCompiledLayer.children.length).toBe(1);
    // const compiledLayer = centerWrapperCompiledLayer.children[0];
    // expect(domainLayer.props.toJS()).toEqual(compiledLayer.domain.props.toJS());
  });
};

export const SetCenterHorizontalUndoTest1 = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Set Center Horizontal Command Undo", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");

    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    // const parentCompiledLayer = (file.layer.children[0] as any)
    //   .domainCompiledRefs[0];
    // const domainLayer = (file.layer.children[0] as any).children[0];
    // commandManager.undo();
    // expect(domainLayer.type).toBe("view");
    // expect(domainLayer.template.centerHorizontal).toBe(false);
    // expect(domainLayer.template.centerVertical).toBe(false);
    // const compiledLayer = parentCompiledLayer.children[0];
    // expect(compiledLayer.domain.type).toBe("view");
    // expect(compiledLayer.children.length).toBe(0);
    // expect(domainLayer.props.toJS()).toEqual(compiledLayer.domain.props.toJS());
  });
};
export const SetCenterHorizontalRedoTest1 = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Set Center Horizontal Command Redo", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");

    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const domainLayer = (file.layer.children[0] as any).children[0];
    commandManager.redo();
    testCenterHorizontal(file, domainLayer);
  });
};
export const SetCenterVerticalRedoTest1 = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Set Center Vertical Command Redo", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");

    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const domainLayer = (file.layer.children[0] as any).children[0];
    commandManager.redo();
    testCenterVertical(file, domainLayer);
  });
};
export const SetCenterWrapper = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Set Center Wrapper to Text Layer using Aligment Editor inside View Layer", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const domainLayer = (file.layer.children[0] as any).children[0];
    commandManager.executeAndSkip(new SelectLayers(session, [domainLayer]));
    commandManager.execute(
      new AlignSelectedLayers(session, domainLayer, "align-horizontally-center")
    );
    commandManager.execute(
      new AlignSelectedLayers(session, domainLayer, "align-vertically-center")
    );
    textCenterWrapperForText(file);
  });
};
function textCenterWrapperForText(file: File) {
  // const parentLayer: Layer = file.layer.children[0] as any;
  // const parentDomainCompiled = parentLayer.domainCompiledRefs[0];
  // const centerWrapperDC: any = parentDomainCompiled.children[0];
  // expect(centerWrapperDC.domain.props.toJS()).toEqual(centerWrapperProps);
  // expect(centerWrapperDC.children.length).toBe(1);
  // const CWChild = centerWrapperDC.children[0];
  // expect(CWChild.domain.type).toBe("text");
  // const textDomainLayer = CWChild.domainRef;
  // expect(textDomainLayer.type).toBe("text");
  // expect(textDomainLayer.template.centerHorizontal).toBeTruthy();
  // expect(textDomainLayer.template.centerVertical).toBeTruthy();
  // const textParentLayer = textDomainLayer.parent;
  // expect(textParentLayer.type).toBe("view");
  // expect(textParentLayer === parentLayer).toBeTruthy();
}
export const CreateSymbolForCenterWrapperTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Create Symbol Command", async () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const oldFilesSize = session.domain.files.size;
    expect(file.layer.children.length).toBe(1);
    await commandManager.executeAndSkip(
      new CreateSymbol(session, [file.layer.children[0] as Layer])
    );
    expect(session.domain.files.size).toBe(oldFilesSize + 1);
    testCreateSymbol(session, file);
  });
};
function testCreateSymbol(session: Session, file: File) {
  // const symbolInstance: Layer = file.layer.children[0] as Layer;
  // expect(symbolInstance.type).toBe("symbol");
  // const symbolInstanceDC = symbolInstance.domainCompiledRefs[0];
  // expect(symbolInstanceDC.domain.type).toBe("root");
  // expect(symbolInstanceDC.children.length).toBe(1);
  // const symbolInstanceCW = symbolInstanceDC.children[0];
  // expect(symbolInstanceCW.domain.type).toBe("view");
  // expect(symbolInstanceCW.domain.props.toJS()).toEqual(centerWrapperProps);
  // const textLayerDC = symbolInstanceCW.children[0];
  // expect(textLayerDC.domain.type).toBe("text");
  // expect(textLayerDC.domain.props.style.left).toBeUndefined();
  // expect(textLayerDC.domain.props.style.top).toBeUndefined();
  // const symbolFilePath = "/src/components/UntitledComponent.js";
  // expect(symbolInstance.import.packageName).toBe(symbolFilePath);
  // const symbolFile = session.domain.files.get(symbolFilePath);
  // expect(symbolFile).toBeDefined();
  // if (!symbolFile) {
  //   return;
  // }
  // // RL --> Root Layer , TL --> Text Layer
  // const symbolFileRL = symbolFile.layer;
  // expect(symbolFileRL.type).toBe("root");
  // expect(symbolFileRL.import.layerName).toBe("View");
  // const symbolFileTL = symbolFileRL.children[0] as Layer;
  // expect(symbolFileTL.type).toBe("text");
  // expect(symbolFileTL.import.layerName).toBe("Text");
  // expect(symbolFileTL.template.centerHorizontal).toBeTruthy();
  // expect(symbolFileTL.template.centerVertical).toBeTruthy();
  // expect(symbolFileTL.props.style.get("left")).toBeUndefined();
  // expect(symbolFileTL.props.style.get("top")).toBeUndefined();
  // const symbolFileTLDC = symbolFileTL.domainCompiledRefs[0];
  // expect(symbolFileTLDC.domain.props.style.left).toBeUndefined();
  // expect(symbolFileTLDC.domain.props.style.top).toBeUndefined();
  // const parent = symbolFileTLDC.parent as any;
  // expect(parent.domain.type).toBe("view");
  // expect(parent.domain.props.toJS()).toEqual(centerWrapperProps);
}

export const CreateSymbolForCenterWrapperUndoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Create Symbol Command Undo", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const oldFilesSize = session.domain.files.size;
    commandManager.undo();
    expect(session.domain.files.size).toBe(oldFilesSize - 1);
    textCenterWrapperForText(file);
  });
};
export const CreateSymbolForCenterWrapperRedoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Create Symbol Command Redo", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const oldFilesSize = session.domain.files.size;
    commandManager.redo();
    expect(session.domain.files.size).toBe(oldFilesSize + 1);
    // testCreateSymbol(session, file);
  });
};
