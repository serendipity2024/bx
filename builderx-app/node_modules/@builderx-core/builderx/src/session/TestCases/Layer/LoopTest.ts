import { CommandManager } from "command-manager";
import { Session } from "../../lib/models/Session";
import CreateLoop from "../../lib/Commands/Layer/CreateLoop";
import RemoveLoop from "../../lib/Commands/Layer/RemoveLoop";
import SetRepetitions from "../../lib/Commands/Layer/SetRepetitions";

export const AddLoopTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Add Loop Command", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");

    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const domainLayer = (file.layer.children[0] as any).children[0];
    commandManager.execute(new CreateLoop(session, domainLayer));
    const loopLayer = (file.layer.children[0] as any).children[0];
    const loopLayerChild = loopLayer.children[0];
    const loopCompiledLayer = loopLayer.getOwnCanvasRef();
    const loopRenderCompiledLayer = loopLayer
      .getOwnCanvasRef()
      .getBoundingClientRect();
    expect(loopLayer.type).toBe("loop");
    expect(loopLayerChild === domainLayer).toBe(false);
    expect(loopCompiledLayer.children.length).toBe(5);
    expect(loopRenderCompiledLayer.children.length).toBe(5);
    expect(domainLayer.props.toJS()).toEqual(loopLayerChild.props.toJS());
  });
};

export const AddLoopUndoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Add Loop Command Undo", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");

    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    commandManager.undo();
    const domainLayer = (file.layer.children[0] as any).children[0];
    const domainCompiledLayer = domainLayer.getOwnCanvasRef();
    const domainRenderCompiledLayer = domainLayer
      .getOwnCanvasRef()
      .getBoundingClientRect();
    const parentLayer = file.layer.children[0] as any;
    expect(parentLayer.type).toBe("view");
    expect(domainLayer.type).toBe("view");
    expect(domainCompiledLayer.domain.type).toBe("view");
    expect(domainRenderCompiledLayer.type).toBe("view");
  });
};

export const AddLoopRedoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Add Loop Command Redo", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");

    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    commandManager.redo();

    const loopLayer = (file.layer.children[0] as any).children[0];
    const loopLayerChild = loopLayer.children[0];
    const loopCompiledLayer = loopLayer.getOwnCanvasRef();
    const loopRenderCompiledLayer = loopLayer
      .getOwnCanvasRef()
      .getBoundingClientRect();
    expect(loopLayer.type).toBe("loop");
    expect(loopCompiledLayer.children.length).toBe(5);
    expect(loopRenderCompiledLayer.children.length).toBe(5);
    expect(loopLayerChild.type).toBe("view");
  });
};

export const LoopRepititionTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Set Repitition Command", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");

    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const loopLayer = (file.layer.children[0] as any).children[0];
    commandManager.execute(new SetRepetitions(session, loopLayer, 10));
    expect(loopLayer.type).toBe("loop");
    expect(loopLayer.template.repetitions).toBe(10);
    const loopCompiledLayer = loopLayer.getOwnCanvasRef();
    const loopRenderCompiledLayer = loopLayer
      .getOwnCanvasRef()
      .getBoundingClientRect();
    expect(loopCompiledLayer.children.length).toBe(10);
    expect(loopRenderCompiledLayer.children.length).toBe(10);
  });
};
export const LoopRepititionUndoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Set Repitition Command Undo", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");

    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const loopLayer = (file.layer.children[0] as any).children[0];
    commandManager.undo();
    expect(loopLayer.type).toBe("loop");
    expect(loopLayer.template.repetitions).toBe(5);
    const loopCompiledLayer = loopLayer.getOwnCanvasRef();
    const loopRenderCompiledLayer = loopLayer
      .getOwnCanvasRef()
      .getBoundingClientRect();
    expect(loopCompiledLayer.children.length).toBe(5);
    expect(loopRenderCompiledLayer.children.length).toBe(5);
  });
};

export const LoopRepititionRedoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Set Repitition Command Redo", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");

    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const loopLayer = (file.layer.children[0] as any).children[0];
    commandManager.redo();
    expect(loopLayer.type).toBe("loop");
    expect(loopLayer.template.repetitions).toBe(10);
    const loopCompiledLayer = loopLayer.getOwnCanvasRef();
    const loopRenderCompiledLayer = loopLayer
      .getOwnCanvasRef()
      .getBoundingClientRect();
    expect(loopCompiledLayer.children.length).toBe(10);
    expect(loopRenderCompiledLayer.children.length).toBe(10);
  });
};

export const RemoveLoopTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Remove Loop Command", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");

    expect(file).toBeDefined();
    if (!file) {
      return;
    }

    const loopLayerChild = (file.layer.children[0] as any).children[0]
      .children[0];
    commandManager.execute(new RemoveLoop(session, loopLayerChild));
    const domainLayer = (file.layer.children[0] as any).children[0];
    const domainCompiledLayer = domainLayer.getOwnCanvasRef();
    const domainRenderCompiledLayer = domainLayer
      .getOwnCanvasRef()
      .getBoundingClientRect();
    expect(domainLayer.type).toBe("view");
    expect(domainCompiledLayer.domain.type).toBe("view");
    expect(domainRenderCompiledLayer.type).toBe("view");
    expect(domainLayer.children.length).toBe(0);
    expect(domainCompiledLayer.children.length).toBe(0);
    expect(domainRenderCompiledLayer.children.length).toBe(0);
  });
};

export const RemoveLoopUndoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Remove Loop Command Undo", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");

    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    commandManager.undo();
    const domainLayer = (file.layer.children[0] as any).children[0];
    const domainCompiledLayer = domainLayer.getOwnCanvasRef();
    const domainRenderCompiledLayer = domainLayer
      .getOwnCanvasRef()
      .getBoundingClientRect();
    expect(domainLayer.type).toBe("loop");
    expect(domainCompiledLayer.domain.type).toBe("loop");
    expect(domainRenderCompiledLayer.type).toBe("loop");
    expect(domainLayer.children.length).toBe(1);
    expect(domainLayer.children[0].type).toBe("view");
    // expect(domainCompiledLayer.children.length).toBe(10);
    // expect(domainRenderCompiledLayer.children.length).toBe(10);
  });
};

export const RemoveLoopRedoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Remove Loop Command Redo", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");

    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const loopChild = (file.layer.children[0] as any).children[0].children[0];
    commandManager.redo();
    const domainLayer = (file.layer.children[0] as any).children[0];
    const domainCompiledLayer = domainLayer.getOwnCanvasRef();
    const domainRenderCompiledLayer = domainLayer
      .getOwnCanvasRef()
      .getBoundingClientRect();
    expect(domainLayer.type).toBe("view");
    expect(domainCompiledLayer.domain.type).toBe("view");
    expect(domainRenderCompiledLayer.type).toBe("view");
    expect(domainLayer.children.length).toBe(0);
    expect(domainCompiledLayer.children.length).toBe(0);
    expect(domainRenderCompiledLayer.children.length).toBe(0);
    expect(domainLayer.props.toJS()).toEqual(loopChild.props.toJS());
  });
};
