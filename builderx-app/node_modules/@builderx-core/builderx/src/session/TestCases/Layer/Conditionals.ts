import { Session } from "session";
import { Layer, File } from "domain-x";
import { SetProp, SetStyleAttribute } from "../../lib/Commands";
import UpdateRecordingConditions from "../../lib/Commands/Conditionals/UpdateRecordingConditions";
import {
  placeholderConditionalJSON,
  leftConditionalJSON
} from "../Templates/Layer";
import UpdateFileScopeVariables from "../../lib/Commands/File/UpdateFileScopeVariables";
export const SetConditionalPropTest = (session: Session) => {
  test("Set Prop for Recording Condition", () => {
    session.commandManager.executeAndSkip(
      new UpdateRecordingConditions(session, "platform", "Android")
    );
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const domainLayer = file.layer.children[0] as any;
    session.commandManager.execute(
      new SetProp(session, domainLayer, "placeholder", "conditional Text")
    );
    session.commandManager.executeAndSkip(
      new UpdateRecordingConditions(session, "platform", undefined)
    );
    expect(domainLayer.props.toJS().placeholder).toEqual(
      placeholderConditionalJSON
    );
    const props = domainLayer.props;
    // expect(props.placeholder.domainCompiledRefs[0].value).toBe("Text Added");
    // expect(
    //   props.placeholder.domainCompiledRefs[0].renderCompiledRef.value
    // ).toBe("Text Added");
    // expect(props.placeholder.domainCompiledRefs[0].type).toBe("literal");
    // expect(props.placeholder.domainCompiledRefs[0].renderCompiledRef.type).toBe(
    //   "literal"
    // );
  });
};
export const SetConditionalPropUndoTest = (session: Session) => {
  test("Set Prop for Recording Condition Undo", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const domainLayer = file.layer.children[0] as any;
    session.commandManager.undo();

    // const domainCompiledLayer = domainLayer.domainCompiledRefs[0];
    // expect(domainLayer.props.toJS().placeholder).toEqual("Text Added");
    // expect(domainCompiledLayer.domain.props.placeholder).toBe("Text Added");
    // expect(domainCompiledLayer.renderCompiledRef.props.placeholder).toBe(
    //   "Text Added"
    // );
  });
};
export const SetConditionalPropRedoTest = (session: Session) => {
  test("Set Prop for Recording Condition Redo", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const domainLayer = file.layer.children[0] as any;
    session.commandManager.redo();
    expect(domainLayer.props.toJS().placeholder).toEqual(
      placeholderConditionalJSON
    );
    const props = domainLayer.props;
    // expect(props.placeholder.domainCompiledRefs[0].value).toBe("Text Added");
    // expect(
    //   props.placeholder.domainCompiledRefs[0].renderCompiledRef.value
    // ).toBe("Text Added");
    // expect(props.placeholder.domainCompiledRefs[0].type).toBe("literal");
    // expect(props.placeholder.domainCompiledRefs[0].renderCompiledRef.type).toBe(
    //   "literal"
    // );
  });
};
export const SetConditionalStyleTest = (session: Session) => {
  test("Set Style Attribute for Recording Condition", () => {
    session.commandManager.executeAndSkip(
      new UpdateRecordingConditions(session, "platform", "Android")
    );
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const domainLayer = file.layer.children[0] as any;
    session.commandManager.execute(
      new SetStyleAttribute(session, domainLayer, "left", 70)
    );
    session.commandManager.executeAndSkip(
      new UpdateRecordingConditions(session, "platform", undefined)
    );
    expect(domainLayer.props.style.toJS().left).toEqual(leftConditionalJSON);
    const style = domainLayer.props.style;
    // expect(style.left.domainCompiledRefs[0].value).toBe(0);
    // expect(style.left.domainCompiledRefs[0].renderCompiledRef.value).toBe(0);
    // expect(style.left.domainCompiledRefs[0].type).toBe("literal");
    // expect(style.left.domainCompiledRefs[0].renderCompiledRef.type).toBe(
    //   "literal"
    // );
  });
};
export const SetConditionalStyleUndoTest = (session: Session) => {
  test("Set Style Attribute for Recording Condition Undo", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const domainLayer = file.layer.children[0] as any;
    session.commandManager.undo();

    // const domainCompiledLayer = domainLayer.domainCompiledRefs[0];
    // expect(domainLayer.props.style.toJS().left).toEqual(0);
    // expect(domainCompiledLayer.domain.props.style.left).toBe(0);
    // expect(domainCompiledLayer.renderCompiledRef.props.style.left).toBe(0);
  });
};
export const SetConditionalStyleRedoTest = (session: Session) => {
  test("Set Style Attribute for Recording Condition Redo", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const domainLayer = file.layer.children[0] as any;
    session.commandManager.redo();
    expect(domainLayer.props.style.toJS().left).toEqual(leftConditionalJSON);
    const style = domainLayer.props.style;
    // expect(style.left.domainCompiledRefs[0].value).toBe(0);
    // expect(style.left.domainCompiledRefs[0].renderCompiledRef.value).toBe(0);
    // expect(style.left.domainCompiledRefs[0].type).toBe("literal");
    // expect(style.left.domainCompiledRefs[0].renderCompiledRef.type).toBe(
    //   "literal"
    // );
  });
};
export const SetExpressionValueTest = (session: Session) => {
  test("Set Expression Value Command", () => {
    // const domainFiles = session.domain.files;
    // var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    // expect(file).toBeDefined();
    // if (!file) {
    //   return;
    // }
    // session.commandManager.execute(
    //   new UpdateFileScopeVariables(session, { platform: "Android" }, file)
    // );
    // const domainLayer = file.layer.children[0] as any;
    // const domainCompiledLayer = domainLayer.domainCompiledRefs[0];
    // const domainCompiledProps = domainCompiledLayer.domain.props;
    // expect(domainCompiledProps.placeholder.value).toBe("conditional Text");
    // expect(domainCompiledProps.style.left.value).toBe(70);
    // const renderCompiledLayer =
    //   domainLayer.domainCompiledRefs[0].renderCompiledRef;
    // const renderCompiledProps = renderCompiledLayer.props;
    // expect(renderCompiledProps.placeholder.value).toBe("conditional Text");
    // expect(renderCompiledProps.style.left.value).toBe(70);
  });
};
