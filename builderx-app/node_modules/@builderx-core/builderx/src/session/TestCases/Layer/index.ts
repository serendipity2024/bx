import { File, Layer } from "domain-x";
import RemoveLayer from "../../lib/Commands/Layer/RemoveLayer";
import AddLayer from "../../lib/Commands/Layer/AddLayer";
// import ResizeLayer from "../../lib/Commands/Layer/ResizeLayer";
import CreateGroup from "../../lib/Commands/Layer/CreateGroup";
import CreateSymbol from "../../lib/Commands/Symbols/CreateSymbol";
import { CommandManager } from "command-manager";
import { Session } from "../../lib/models/Session";
import Ungroup from "../../lib/Commands/Layer/Ungroup";
import SetLayerDimensions from "../../lib/Commands/Layer/SetLayerDimensions";
import ChangeToTouchableOpacity from "../../lib/Commands/Layer/ChangeToTouchableOpacity";
import ChangeToTextInput from "../../lib/Commands/Layer/ChangeToTextInput";
import ChangeToScrollView from "../../lib/Commands/Layer/ChangeToScrollView";

export const AddLayerTest = (
  session: Session,
  commandManager: CommandManager,
  layerJSON: any
) => {
  test("Addlayer Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;

    const addlayer = new AddLayer(session, file.layer, layerJSON);
    commandManager.execute(addlayer);

    expect(file).toBeDefined();
    if (file) {
      const newLayer = file.layer.children[0] as Layer;
      expect(newLayer).toBeDefined();
      // expect(newLayer.props.style.top).toBe(0);
      // expect(newLayer.props.style.left).toBe(0);
      // expect(newLayer.props.style.width).toBe(100);
      // expect(newLayer.props.style.height).toBe(100);
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.get("top")).toBe(0);
      expect(newLayer.domain.props.style.get("left")).toBe(0);
      expect(newLayer.domain.props.style.get("width")).toBe(100);
      expect(newLayer.domain.props.style.get("height")).toBe(100);
    }
    // const renderCompiledLayer =
    //   session.currentStage.renderCompiled.children[0].children[0];
    // expect(renderCompiledLayer).toBeDefined();
    // const renderCompiledNewLayer = renderCompiledLayer.children[0];
    // expect(renderCompiledNewLayer).toBeDefined();
    // expect(renderCompiledNewLayer.x).toBe(0);
    // expect(renderCompiledNewLayer.y).toBe(0);
    // expect(renderCompiledNewLayer.width).toBe(100);
    // expect(renderCompiledNewLayer.height).toBe(100);
  });
};
export const DragLayerTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Draglayer Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    expect(file).toBeDefined();
    // const Draglayer = new DragLayer(session, file.layer.children[0] as Layer, {
    //   x: 200,
    //   y: 230
    // });
    // commandManager.execute(Draglayer);

    if (file) {
      const newLayer = file.layer.children[0] as Layer;
      expect(newLayer).toBeDefined();
      // expect(newLayer.props.style.left).toBe(200);
      // expect(newLayer.props.style.top).toBe(230);
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.left).toBe(200);
      expect(newLayer.domain.props.style.top).toBe(230);
    }
    // const renderCompiledLayer =
    //   session.currentStage.renderCompiled.children[0].children[0];
    // expect(renderCompiledLayer).toBeDefined();
    // const renderCompiledNewLayer = renderCompiledLayer.children[0];
    // expect(renderCompiledNewLayer).toBeDefined();
    // expect(renderCompiledNewLayer.x).toBe(200);
    // expect(renderCompiledNewLayer.y).toBe(230);
  });
};
export const ResizeLayerTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Resizelayer Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    expect(file).toBeDefined();
    // const Movelayer = new ResizeLayer(
    //   session,
    //   file.layer.children[0] as Layer,
    //   {
    //     height: 200,
    //     width: 230
    //   }
    // );
    // commandManager.execute(Movelayer);

    if (file) {
      const newLayer = file.layer.children[0] as Layer;
      expect(newLayer).toBeDefined();
      // expect(newLayer.props.style.height).toBe(200);
      // expect(newLayer.props.style.width).toBe(230);
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.height).toBe(200);
      expect(newLayer.domain.props.style.width).toBe(230);
    }
    // const renderCompiledLayer =
    //   session.currentStage.renderCompiled.children[0].children[0];
    // expect(renderCompiledLayer).toBeDefined();
    // const renderCompiledNewLayer = renderCompiledLayer.children[0];
    // expect(renderCompiledNewLayer).toBeDefined();
    // expect(renderCompiledNewLayer.height).toBe(200);
    // expect(renderCompiledNewLayer.width).toBe(230);
  });
};
export const SetLayerDimensionTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("SetLayerDimension Command", () => {
    commandManager.undo();
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    expect(file).toBeDefined();

    const Movelayer = new SetLayerDimensions(
      session,
      file.layer.children[0] as Layer,
      {
        x: 20,
        y: 20,
        height: 200,
        width: 230
      }
    );
    commandManager.execute(Movelayer);

    if (file) {
      const newLayer = file.layer.children[0] as Layer;
      expect(newLayer).toBeDefined();
      // expect(newLayer.props.style.height).toBe(200);
      // expect(newLayer.props.style.width).toBe(230);
      // expect(newLayer.props.style.top).toBe(20);
      // expect(newLayer.props.style.left).toBe(20);
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.get("height")).toBe(200);
      expect(newLayer.domain.props.style.get("width")).toBe(230);
      expect(newLayer.domain.props.style.get("top")).toBe(20);
      expect(newLayer.domain.props.style.get("left")).toBe(20);
    }
    // const renderCompiledLayer =
    //   session.currentStage.renderCompiled.children[0].children[0];
    // expect(renderCompiledLayer).toBeDefined();
    // const renderCompiledNewLayer = renderCompiledLayer.children[0];
    // expect(renderCompiledNewLayer).toBeDefined();
    // expect(renderCompiledNewLayer.height).toBe(200);
    // expect(renderCompiledNewLayer.width).toBe(230);
    // expect(renderCompiledNewLayer.y).toBe(20);
    // expect(renderCompiledNewLayer.x).toBe(20);
  });
};
export const RemoveLayerTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Removelayer Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled.js") as any;
    expect(file).toBeDefined();
    const removelayer = new RemoveLayer(
      session,
      file.layer.children[0] as Layer
    );
    commandManager.execute(removelayer);

    if (file) {
      const newLayer = file.layer.children[0];
      expect(newLayer).toBeUndefined();
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeUndefined();
    }
    // const renderCompiledLayer =
    //   session.currentStage.renderCompiled.children[0].children[0];
    // expect(renderCompiledLayer).toBeDefined();
    // const renderCompiledNewLayer = renderCompiledLayer.children[0];
    // expect(renderCompiledNewLayer).toBeUndefined();
  });
};
export const CreateGroupTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("CreateGroup Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled1.js") as any;
    expect(file).toBeDefined();
    const domainLayers = [file.layer.children[0], file.layer.children[1]];

    const createGroup = new CreateGroup(session, domainLayers as Layer[]);
    commandManager.execute(createGroup);
    if (file) {
      // const newLayer = file.layer.children[0] as Layer;
      // expect(newLayer).toBeDefined();
      // expect(newLayer.props.style.top).toBe(90);
      // expect(newLayer.props.style.left).toBe(90);
      // expect(newLayer.props.style.width).toBe(290);
      // expect(newLayer.props.style.height).toBe(290);
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled1.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.top).toBe(90);
      expect(newLayer.domain.props.style.left).toBe(90);
      expect(newLayer.domain.props.style.width).toBe(290);
      expect(newLayer.domain.props.style.height).toBe(290);
    }
    // const renderCompiledLayer =
    //   session.currentStage.renderCompiled.children[2].children[0];
    // const renderCompiledHeader =
    //   session.currentStage.renderCompiled.children[1];
    // expect(renderCompiledHeader.domainCompiledRef.domainRef.type).toBe(
    //   "fileHeader"
    // );
    // expect(renderCompiledLayer).toBeDefined();
    // const renderCompiledNewLayer = renderCompiledLayer.children[0];
    // expect(renderCompiledNewLayer).toBeDefined();
    // expect(renderCompiledNewLayer.x).toBe(90);
    // expect(renderCompiledNewLayer.y).toBe(90);
    // expect(renderCompiledNewLayer.width).toBe(290);
    // expect(renderCompiledNewLayer.height).toBe(290);
  });
};
export const UndoCreateGroupTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Undo CreateGroup Command", () => {
    commandManager.undo();
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled1.js") as any;
    expect(file).toBeDefined();
    if (file) {
      const newLayer = file.layer.children[0] as Layer;
      expect(newLayer).toBeDefined();
      // expect(newLayer.props.style.top).toBe(190);
      // expect(newLayer.props.style.left).toBe(190);
      // expect(newLayer.props.style.width).toBe(190);
      // expect(newLayer.props.style.height).toBe(190);
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled1.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.top).toBe(190);
      expect(newLayer.domain.props.style.left).toBe(190);
      expect(newLayer.domain.props.style.width).toBe(190);
      expect(newLayer.domain.props.style.height).toBe(190);
    }
    // const renderCompiledLayer =
    //   session.currentStage.renderCompiled.children[1].children[0];
    // expect(renderCompiledLayer).toBeDefined();
    // const renderCompiledNewLayer = renderCompiledLayer.children[0];
    // expect(renderCompiledNewLayer).toBeDefined();
    // expect(renderCompiledNewLayer.x).toBe(190);
    // expect(renderCompiledNewLayer.y).toBe(190);
    // expect(renderCompiledNewLayer.width).toBe(190);
    // expect(renderCompiledNewLayer.height).toBe(190);
  });
};
export const UngroupTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Ungroup Command", () => {
    const domainFiles = session.domain.files;
    var file: File = domainFiles.get("/src/screens/Untitled1.js") as any;
    expect(file).toBeDefined();
    const domainWrapperLayer = file.layer.children[0];
    const ungroup = new Ungroup(session, domainWrapperLayer as Layer);
    commandManager.execute(ungroup);
    if (file) {
      const newLayer = file.layer.children[0] as Layer;
      expect(newLayer).toBeDefined();
      // expect(newLayer.props.style.top).toBe(190);
      // expect(newLayer.props.style.left).toBe(190);
      // expect(newLayer.props.style.width).toBe(190);
      // expect(newLayer.props.style.height).toBe(190);
    }
    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled1.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      const newLayer = compiledFile.layer.children[0];
      expect(newLayer).toBeDefined();
      expect(newLayer.domain.props.style.top).toBe(190);
      expect(newLayer.domain.props.style.left).toBe(190);
      expect(newLayer.domain.props.style.width).toBe(190);
      expect(newLayer.domain.props.style.height).toBe(190);
    }
    // const renderCompiledLayer =
    //   session.currentStage.renderCompiled.children[2].children[0];
    // const renderCompiledHeader =
    //   session.currentStage.renderCompiled.children[1];
    // expect(renderCompiledHeader.domainCompiledRef.domainRef.type).toBe(
    //   "fileHeader"
    // );
    // expect(renderCompiledLayer).toBeDefined();
    // const renderCompiledNewLayer = renderCompiledLayer.children[0];
    // expect(renderCompiledNewLayer).toBeDefined();
    // expect(renderCompiledNewLayer.x).toBe(190);
    // expect(renderCompiledNewLayer.y).toBe(190);
    // expect(renderCompiledNewLayer.width).toBe(190);
    // expect(renderCompiledNewLayer.height).toBe(190);
  });
};
export const MovelayerTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Move Layer Command", () => {
    const file = session.domain.files.get("/src/screens/Untitled1.js");
    expect(file).toBeDefined();
    if (file) {
      const layer = (file.layer.children[0] as Layer).children[0] as Layer;
      const fromParent = file.layer.children[0] as Layer;
      const toParent = file.layer;
      const fromIndex = 0;
      const toIndex = 2;
      // commandManager.execute(
      //   new MoveLayer(session, fromParent, toParent, fromIndex, toIndex)
      // );
      expect(fromParent.children.length).toBe(0);
      expect(toParent.children.length).toBe(3);
      expect(toParent.children[2]).toEqual(layer);
      // expect((toParent.children[2] as Layer).domainCompiledRefs).toBeDefined();
      // expect(
      //   (toParent.children[2] as Layer).getBoundingClientRect()
      // ).toBeDefined();
    }

    const domainCompiledFiles = session.currentStage.domainCompiled.files;
    var compiledFile: any = domainCompiledFiles.get(
      "/src/screens/Untitled1.js"
    ) as any;
    expect(compiledFile).toBeDefined();
    if (compiledFile) {
      expect(compiledFile.layer.children[0].children.length).toBe(0);
      expect(compiledFile.layer.children.length).toBe(3);
      expect(compiledFile.layer.children[2]).toBeDefined();
    }
    // const renderCompiledLayer =
    //   session.currentStage.renderCompiled.children[2].children[0];
    // const renderCompiledHeader =
    //   session.currentStage.renderCompiled.children[1];
    // expect(renderCompiledHeader.domainCompiledRef.domainRef.type).toBe(
    //   "fileHeader"
    // );
    // expect(renderCompiledLayer).toBeDefined();
    // expect(renderCompiledLayer.children[0].children.length).toBe(0);
    // expect(renderCompiledLayer.children.length).toBe(3);
    // expect(renderCompiledLayer.children[2]).toBeDefined();
  });
};

const testSymbol = (session: Session, commandManager: CommandManager) => {
  const file = session.domain.files.get("/src/screens/Untitled1.js");

  if (!file) {
    return;
  }
  expect(file.layer.children.length).toBe(2);

  const symbolFile = session.domain.files.get(
    "/src/components/UntitledComponent.js"
  );
  expect(symbolFile).toBeDefined();
  expect(symbolFile!.isSymbol()).toBe(true);
  const symbolLayer = file.layer.children[0] as Layer;
  expect(symbolLayer.type).toBe("symbol");
  // expect(symbolLayer.domainCompiledRefs).toBeDefined();

  // const symbolCompiledLayer = symbolLayer.getOwnCanvasRef();

  // expect(symbolCompiledLayer).toBeDefined();
  // expect(symbolCompiledLayer.domainRef).toBe(symbolLayer);
  // expect(symbolRenderLayer.domainCompiledRef).toBe(symbolCompiledLayer);

  // TODO: expect symbol stage to be created

  // expect(symbolFile!.domainCompiledRefs).toBeUndefined();
  // expect(symbolCompiledLayer).toBe(symbolFile!.layer.domainCompiledRefs[0]);
};
export const CreateSymbolTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Create Symbol Command 1", async () => {
    const file = session.domain.files.get("/src/screens/Untitled1.js");

    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const oldFilesSize = session.domain.files.size;
    expect(file.layer.children.length).toBe(3);
    await commandManager.executeAndSkip(
      new CreateSymbol(session, [
        file.layer.children[0] as Layer,
        file.layer.children[1] as Layer
      ])
    );
    expect(session.domain.files.size).toBe(oldFilesSize + 1);
    testSymbol(session, commandManager);
  });
};

export const CreateSymbolUndoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Create Symbol Command Undo 1", () => {
    const file = session.domain.files.get("/src/screens/Untitled1.js");
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const oldFilesSize = session.domain.files.size;
    commandManager.undo();
    expect(session.domain.files.size).toBe(oldFilesSize - 1);
    const symbolFile = session.domain.files.get(
      "/src/components/UntitledComponent.js"
    );
    expect(symbolFile).toBeUndefined();
    expect(file.layer.children.length).toBe(3);
    file.layer.children.forEach((child: Layer) => {
      // expect(child.domainCompiledRefs[0]).toBeDefined();
      expect(child.getBoundingClientRect()).toBeDefined();
    });
  });
};

export const CreateSymbolRedoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Create Symbol Command Redo 1", () => {
    const file = session.domain.files.get("/src/screens/Untitled1.js");
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    const oldFilesSize = session.domain.files.size;
    expect(file.layer.children.length).toBe(3);
    commandManager.redo();
    expect(session.domain.files.size).toBe(oldFilesSize + 1);
    testSymbol(session, commandManager);
  });
};
export const ChangeToTouchableOpacityTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Change To Touchable Opacity", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    let domainLayer = file.layer.children[0] as Layer;
    const oldProps = domainLayer.props.toJS();
    commandManager.execute(
      new ChangeToTouchableOpacity(session, domainLayer, true)
    );
    domainLayer = file.layer.children[0] as Layer;
    expect(domainLayer.type).toBe("touchableOpacity");
    expect(domainLayer.import.layerName).toBe("TouchableOpacity");
    expect(domainLayer.props.toJS()).toEqual(oldProps);
  });
};
export const ChangeToTouchableOpacityUndoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Change To Touchable Opacity Undo", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    let domainLayer = file.layer.children[0] as Layer;
    const oldProps = domainLayer.props.toJS();
    commandManager.undo();
    domainLayer = file.layer.children[0] as Layer;
    expect(domainLayer.type).toBe("view");
    expect(domainLayer.import.layerName).toBe("View");
    expect(domainLayer.props.toJS()).toEqual(oldProps);
  });
};
export const ChangeToTouchableOpacityRedoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Change To Touchable Opacity Redo", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    let domainLayer = file.layer.children[0] as Layer;
    const oldProps = domainLayer.props.toJS();
    commandManager.redo();
    domainLayer = file.layer.children[0] as Layer;
    expect(domainLayer.type).toBe("touchableOpacity");
    expect(domainLayer.import.layerName).toBe("TouchableOpacity");
    expect(domainLayer.props.toJS()).toEqual(oldProps);
  });
};
export const ChangeTouchableOpacityToViewTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Change Touchable Opacity To View", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    let domainLayer = file.layer.children[0] as Layer;
    const oldProps = domainLayer.props.toJS();
    commandManager.execute(
      new ChangeToTouchableOpacity(session, domainLayer, false)
    );
    domainLayer = file.layer.children[0] as Layer;
    expect(domainLayer.type).toBe("view");
    expect(domainLayer.import.layerName).toBe("View");
    expect(domainLayer.props.toJS()).toEqual(oldProps);
  });
};
export const ChangeTouchableOpacityToViewUndoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Change Touchable Opacity To View Undo", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    let domainLayer = file.layer.children[0] as Layer;
    const oldProps = domainLayer.props.toJS();
    commandManager.undo();
    domainLayer = file.layer.children[0] as Layer;
    expect(domainLayer.type).toBe("touchableOpacity");
    expect(domainLayer.import.layerName).toBe("TouchableOpacity");
    expect(domainLayer.props.toJS()).toEqual(oldProps);
  });
};
export const ChangeTouchableOpacityToViewRedoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Change Touchable Opacity To View Redo", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    let domainLayer = file.layer.children[0] as Layer;
    const oldProps = domainLayer.props.toJS();
    commandManager.redo();
    domainLayer = file.layer.children[0] as Layer;
    expect(domainLayer.type).toBe("view");
    expect(domainLayer.import.layerName).toBe("View");
    expect(domainLayer.props.toJS()).toEqual(oldProps);
  });
};
export const ChangeToScrollViewTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Change To ScrollView", () => {
    // const file = session.domain.files.get("/src/screens/Untitled.js");
    // expect(file).toBeDefined();
    // if (!file) {
    //   return;
    // }
    // let domainLayer = file.layer.children[0] as Layer;
    // const oldStyle = domainLayer.props.style.toJS();
    // commandManager.execute(new ChangeToScrollView(session, domainLayer, true));
    // domainLayer = file.layer.children[0] as Layer;
    // expect(domainLayer.type).toBe("scrollView");
    // expect(domainLayer.import.layerName).toBe("ScrollView");
    // expect(domainLayer.props.style.toJS()).toEqual(oldStyle);
    // expect(domainLayer.props["horizontal"]).toBe(false);
    // expect(domainLayer.props["contentContainerStyle"].toJS()).toEqual({
    //   height: 100,
    //   width: 100
    // });
  });
};
export const ChangeToScrollViewUndoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Change To ScrollView Undo", () => {
    // const file = session.domain.files.get("/src/screens/Untitled.js");
    // expect(file).toBeDefined();
    // if (!file) {
    //   return;
    // }
    // let domainLayer = file.layer.children[0] as Layer;
    // const oldStyle = domainLayer.props.style.toJS();
    // commandManager.undo();
    // domainLayer = file.layer.children[0] as Layer;
    // expect(domainLayer.type).toBe("view");
    // expect(domainLayer.import.layerName).toBe("View");
    // expect(domainLayer.props.style.toJS()).toEqual(oldStyle);
    // expect(domainLayer.props["contentContainerStyle"]).toBeUndefined();
    // expect(domainLayer.props["horizontal"]).toBeUndefined();
  });
};
export const ChangeToScrollViewRedoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Change To ScrollView Redo", () => {
    // const file = session.domain.files.get("/src/screens/Untitled.js");
    // expect(file).toBeDefined();
    // if (!file) {
    //   return;
    // }
    // let domainLayer = file.layer.children[0] as Layer;
    // const oldStyle = domainLayer.props.style.toJS();
    // commandManager.redo();
    // domainLayer = file.layer.children[0] as Layer;
    // expect(domainLayer.type).toBe("scrollView");
    // expect(domainLayer.import.layerName).toBe("ScrollView");
    // expect(domainLayer.props["contentContainerStyle"].toJS()).toEqual({
    //   height: 100,
    //   width: 100
    // });
    // expect(domainLayer.props["horizontal"]).toBe(false);
  });
};
export const ChangeScrollViewToViewTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Change ScrollView To View", () => {
    // const file = session.domain.files.get("/src/screens/Untitled.js");
    // expect(file).toBeDefined();
    // if (!file) {
    //   return;
    // }
    // let domainLayer = file.layer.children[0] as Layer;
    // const oldStyle = domainLayer.props.style.toJS();
    // commandManager.execute(new ChangeToScrollView(session, domainLayer, false));
    // domainLayer = file.layer.children[0] as Layer;
    // expect(domainLayer.type).toBe("view");
    // expect(domainLayer.import.layerName).toBe("View");
    // expect(domainLayer.props.style.toJS()).toEqual(oldStyle);
    // expect(domainLayer.props["horizontal"]).toBeUndefined();
    // expect(domainLayer.props["contentContainerStyle"]).toBeUndefined();
  });
};
export const ChangeScrollViewToViewUndoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Change ScrollView To View Undo", () => {
    // const file = session.domain.files.get("/src/screens/Untitled.js");
    // expect(file).toBeDefined();
    // if (!file) {
    //   return;
    // }
    // let domainLayer = file.layer.children[0] as Layer;
    // const oldStyle = domainLayer.props.style.toJS();
    // commandManager.undo();
    // domainLayer = file.layer.children[0] as Layer;
    // expect(domainLayer.type).toBe("scrollView");
    // expect(domainLayer.import.layerName).toBe("ScrollView");
    // expect(domainLayer.props.style.toJS()).toEqual(oldStyle);
    // expect(domainLayer.props["contentContainerStyle"].toJS()).toEqual({
    //   height: 100,
    //   width: 100
    // });
    // expect(domainLayer.props["horizontal"]).toBe(false);
  });
};
export const ChangeScrollViewToViewRedoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Change ScrollView To View Redo", () => {
    const file = session.domain.files.get("/src/screens/Untitled.js");
    expect(file).toBeDefined();
    if (!file) {
      return;
    }
    let domainLayer = file.layer.children[0] as Layer;
    commandManager.redo();
    domainLayer = file.layer.children[0] as Layer;
    expect(domainLayer.type).toBe("view");
    expect(domainLayer.import.layerName).toBe("View");
    expect(domainLayer.props["contentContainerStyle"]).toBeUndefined();
    expect(domainLayer.props["horizontal"]).toBeUndefined();
  });
};
export const ChangeToTextInputTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Change To TextInput", () => {
    // const file = session.domain.files.get("/src/screens/Untitled.js");
    // expect(file).toBeDefined();
    // if (!file) {
    //   return;
    // }
    // let domainLayer = file.layer.children[0] as Layer;
    // const oldStyle = domainLayer.props.style.toJS();
    // commandManager.execute(new ChangeToTextInput(session, domainLayer, true));
    // domainLayer = file.layer.children[0] as Layer;
    // expect(domainLayer.type).toBe("textInput");
    // expect(domainLayer.import.layerName).toBe("TextInput");
    // expect(domainLayer.props.style.toJS()).toEqual(oldStyle);
    // expect(domainLayer.props["placeholder"]).toBe("Text Added");
    // expect(domainLayer.children.length).toBe(0);
  });
};
export const ChangeToTextInputUndoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Change To TextInput Undo", () => {
    // const file = session.domain.files.get("/src/screens/Untitled.js");
    // expect(file).toBeDefined();
    // if (!file) {
    //   return;
    // }
    // let domainLayer = file.layer.children[0] as Layer;
    // const oldStyle = domainLayer.props.style.toJS();
    // commandManager.undo();
    // domainLayer = file.layer.children[0] as Layer;
    // expect(domainLayer.type).toBe("text");
    // expect(domainLayer.import.layerName).toBe("Text");
    // expect(domainLayer.props.style.toJS()).toEqual(oldStyle);
    // expect(domainLayer.props["placeholder"]).toBeUndefined();
    // expect(domainLayer.children.length).toEqual(1);
    // expect(domainLayer.children[0].type).toBe("literal");
    // expect(domainLayer.children[0]["value"]).toBe("Text Added");
  });
};
export const ChangeToTextInputRedoTest = (
  session: Session,
  commandManager: CommandManager
) => {
  test("Change To TextInput Redo", () => {
    // const file = session.domain.files.get("/src/screens/Untitled.js");
    // expect(file).toBeDefined();
    // if (!file) {
    //   return;
    // }
    // let domainLayer = file.layer.children[0] as Layer;
    // const oldStyle = domainLayer.props.style.toJS();
    // commandManager.redo();
    // domainLayer = file.layer.children[0] as Layer;
    // expect(domainLayer.type).toBe("textInput");
    // expect(domainLayer.import.layerName).toBe("TextInput");
    // expect(domainLayer.props.style.toJS()).toEqual(oldStyle);
    // expect(domainLayer.props["placeholder"]).toBe("Text Added");
    // expect(domainLayer.children.length).toBe(0);
  });
};
