import Worker from "../__mocks__/worker";

global["Worker"] = Worker;
jest.mock("robotjs");

HTMLCanvasElement.prototype.getContext = (() => {
  // return whatever getContext has to return
}) as any;

import { Session } from "../lib/models/Session";
import {
  RemoveLayerTest,
  AddLayerTest,
  DragLayerTest,
  ResizeLayerTest,
  CreateGroupTest,
  UngroupTest,
  SetLayerDimensionTest,
  MovelayerTest,
  CreateSymbolTest,
  CreateSymbolUndoTest,
  CreateSymbolRedoTest,
  ChangeToTouchableOpacityTest,
  ChangeToTouchableOpacityUndoTest,
  ChangeToTouchableOpacityRedoTest,
  ChangeToTextInputUndoTest,
  ChangeToTextInputRedoTest,
  ChangeToTextInputTest,
  ChangeToScrollViewTest,
  ChangeToScrollViewUndoTest,
  ChangeToScrollViewRedoTest,
  ChangeTouchableOpacityToViewTest,
  ChangeTouchableOpacityToViewUndoTest,
  ChangeTouchableOpacityToViewRedoTest,
  ChangeScrollViewToViewTest,
  ChangeScrollViewToViewUndoTest,
  ChangeScrollViewToViewRedoTest
} from "../TestCases/Layer";
// import {
//   GradientTypeTest,
//   SetGradientTest,
//   SetGradientUndoTest,
//   SetGradientRedoTest,
//   GradientTypeUndoTest,
//   GradientTypeRedoTest,
//   RotateGradientTest,
//   RotateGradientUndoTest,
//   RotateGradientRedoTest
// } from "../TestCases/Layer/Gradient";
import {
  AddLoopTest,
  AddLoopUndoTest,
  AddLoopRedoTest,
  RemoveLoopTest,
  RemoveLoopUndoTest,
  RemoveLoopRedoTest,
  LoopRepititionTest,
  LoopRepititionUndoTest,
  LoopRepititionRedoTest
} from "../TestCases/Layer/LoopTest";
import {
  SetStyleTest,
  UndoSetStyleTest,
  SetStyleAttributeTest,
  RemoveStyleAttributeTest
} from "../TestCases/Style";
import { SetAllPropsTest, UndoSetAllPropsTest } from "../TestCases/Props";
import {
  AddNewArtboardTest,
  RemoveFileTest,
  UndoRemoveFileTest,
  AddArtboardFromJSTest,
  DuplicateArtboardTest,
  UndoDuplicateArtboardTest
} from "../TestCases/File";
import KeyboardService from "../lib/services/KeyboardService";
import {
  layerJSONForAddLayer,
  viewLayerJSON,
  textLayerJSON
} from "../TestCases/Templates/Layer";
import { apiSdk } from "@builderx-core/api-sdk";
jest.mock("paper");
jest.mock("path-editor");
global["Worker"] = Worker;
jest.mock("js-cookie");
jest.mock("react-joyride");
jest.mock("@builderx/icons");

const config = {
  serverUrl: "http://localhost:9080/",
  bxApiUrl: "http://release.builderx.io/api",
  env: "development",
  runningContext: "testing",
  isSharedComponentInstance: false
};

// document.body.innerHTML =
//   '<div id="test"><div class="panel-block"></div>....</div>';

const session = new Session(config, apiSdk, {
  WEBSITE_URL: "",
  SUPPORT_URL: "",
  APP_PORT_START: "",
  APP_PORT_END: "",
  APP_URL: "",
  APP_STATIC_URL: "",
  BUILDERX_ASSETS_URL: "",
  APP_ENVIRONMENT: "",
  BUILDERX_FONT_API_KEY: "",
  BUILDERX_API: "",
  GA_TRACKING_ID: "",
  SENTRY_URL: "",
  BUILDERX_URL: "",
  BACKEND_API_URL: ""
}); // TODO: fix for text cases
// window["session"] = session;
// const renderCompiled = new RenderCompiled();

// console.log(session);
// const x = new Array();
const renderCompiledData = {
  x: 0,
  y: 0,
  width: 1000,
  height: 1000,
  children: []
};
// test("t", () => {
//   expect(1).toBe(1);
// });
session.keyboardService = new KeyboardService();
AddNewArtboardTest(session, session.commandManager);
AddLayerTest(session, session.commandManager, layerJSONForAddLayer);
DragLayerTest(session, session.commandManager);
ResizeLayerTest(session, session.commandManager);
SetStyleAttributeTest(session, session.commandManager);
SetStyleTest(session, session.commandManager);
UndoSetStyleTest(session, session.commandManager);
SetAllPropsTest(session, session.commandManager);
UndoSetAllPropsTest(session, session.commandManager);
RemoveStyleAttributeTest(session, session.commandManager);
SetLayerDimensionTest(session, session.commandManager);
RemoveLayerTest(session, session.commandManager);
RemoveFileTest(session, session.commandManager);
UndoRemoveFileTest(session, session.commandManager);
AddArtboardFromJSTest(session, session.commandManager);
DuplicateArtboardTest(session, session.commandManager);
UndoDuplicateArtboardTest(session, session.commandManager);
CreateGroupTest(session, session.commandManager);
UngroupTest(session, session.commandManager);
MovelayerTest(session, session.commandManager);
CreateSymbolTest(session, session.commandManager);
CreateSymbolUndoTest(session, session.commandManager);
CreateSymbolRedoTest(session, session.commandManager);
AddLayerTest(session, session.commandManager, layerJSONForAddLayer);
AddLoopTest(session, session.commandManager);
AddLoopUndoTest(session, session.commandManager);
AddLoopRedoTest(session, session.commandManager);
LoopRepititionTest(session, session.commandManager);
LoopRepititionUndoTest(session, session.commandManager);
LoopRepititionRedoTest(session, session.commandManager);
RemoveLoopTest(session, session.commandManager);
RemoveLoopUndoTest(session, session.commandManager);
RemoveLoopRedoTest(session, session.commandManager);
// GradientTypeTest(session, session.commandManager);
// GradientTypeUndoTest(session, session.commandManager);
// GradientTypeRedoTest(session, session.commandManager);
// SetGradientTest(session, session.commandManager);
// SetGradientUndoTest(session, session.commandManager);
// SetGradientRedoTest(session, session.commandManager);
// RotateGradientTest(session, session.commandManager);
// RotateGradientUndoTest(session, session.commandManager);
// RotateGradientRedoTest(session, session.commandManager);
RemoveLayerTest(session, session.commandManager);
AddLayerTest(session, session.commandManager, viewLayerJSON);
ChangeToTouchableOpacityTest(session, session.commandManager);
ChangeToTouchableOpacityUndoTest(session, session.commandManager);
ChangeToTouchableOpacityRedoTest(session, session.commandManager);
ChangeTouchableOpacityToViewTest(session, session.commandManager);
ChangeTouchableOpacityToViewUndoTest(session, session.commandManager);
ChangeTouchableOpacityToViewRedoTest(session, session.commandManager);
ChangeToScrollViewTest(session, session.commandManager);
ChangeToScrollViewUndoTest(session, session.commandManager);
ChangeToScrollViewRedoTest(session, session.commandManager);
ChangeScrollViewToViewTest(session, session.commandManager);
ChangeScrollViewToViewUndoTest(session, session.commandManager);
ChangeScrollViewToViewRedoTest(session, session.commandManager);
RemoveLayerTest(session, session.commandManager);
AddLayerTest(session, session.commandManager, textLayerJSON);
ChangeToTextInputTest(session, session.commandManager);
ChangeToTextInputUndoTest(session, session.commandManager);
ChangeToTextInputRedoTest(session, session.commandManager);
