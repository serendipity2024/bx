import * as React from "react";
import {
  Layer,
  LayerBar,
  LayerLeft,
  Button,
  Icon,
  LayerBody,
  LayerRight,
  LayerChildren,
  LayerBefore,
  LayerAfter,
  Text
} from "components-x";
import * as _ from "lodash";
import DragDropTree from "./DragDropTree";
// import DragDropTree from "../DragDropTree";

class LayerPanel extends React.PureComponent<any, any> {
  hasChildren = (layer: any) => {
    return true;
  };

  renderNode = (props: any, children: any, getRef: any) => {
    let layerSelected: boolean = true;
    let layerHovered: boolean = false;

    let dragHoverInside: boolean = false;
    let layerCollapsed: boolean = false;
    let layerLocked: boolean = false;

    let iconName: string = "folder";

    const layerStyleName = "Node 1";
    let displayLayer = false;

    let isRootView = false; // this.builderX.workspace.persist.domain.isRootView(layerId);

    let level = 2;

    const onDoubleClick = props.onDoubleClick;
    delete props.onDoubleClick;

    return (
      <Layer borderBottom={!isRootView} open={!layerCollapsed}>
        {!isRootView && (
          <LayerBar
            sublayer={true}
            selected={layerSelected}
            hover={!layerLocked && layerHovered}
            dragHoverInside={dragHoverInside}
            level={level}
            {...props}
          >
            <LayerLeft style={{ display: "flex" }}>
              {true && (
                <Button
                  transparent={true}
                  style={{ paddingLeft: 0, paddingRight: 4, top: -2 }}
                  icon={
                    <Icon
                      name={layerCollapsed ? "right2" : "right"}
                      size={10}
                    />
                  }
                  uiSize="xs"
                />
              )}
              <Icon name={iconName} size={16} />
            </LayerLeft>
            <LayerBody onDoubleClick={onDoubleClick}>
              <Text>Layer StyleName</Text>
            </LayerBody>

            <LayerRight style={{ display: "flex" }}>
              {layerHovered || layerLocked ? (
                <Button
                  transparent={true}
                  icon={<Icon name="lock" size={16} />}
                  uiSize="xs"
                />
              ) : null}
              {!layerLocked && layerHovered ? (
                <Button
                  transparent={true}
                  icon={<Icon name={"show_layer"} size={16} />}
                  uiSize="xs"
                />
              ) : null}
            </LayerRight>
          </LayerBar>
        )}
        <LayerChildren>{children}</LayerChildren>
      </Layer>
    );

    //
  };

  renderDivider = (props: any) => {
    let layerSelected: boolean = true;
    let layerHovered: boolean = false;

    let dragHoverInside: boolean = false;
    let layerCollapsed: boolean = false;
    let layerLocked: boolean = false;

    let iconName: string = "folder";
    let isFirstItem = false;

    let dragHoverBefore: boolean = false;
    let dragHoverAfter: boolean = false;

    let open: boolean = true;

    let position = props["data-position"].split("_")[1];
    let isRootView = false;

    if (position === "before") {
      return (
        !isRootView && (
          <LayerBefore
            {...props}
            hover={layerHovered}
            selected={layerSelected}
            dragHoverInside={dragHoverInside}
            dragHoverBefore={dragHoverBefore}
            dragHoverAfter={dragHoverAfter}
          />
        )
      );
    } else if (position === "after") {
      return (
        !isRootView &&
        (!open || isFirstItem) && (
          <LayerAfter
            {...props}
            hover={layerHovered}
            selected={layerSelected}
            dragHoverInside={dragHoverInside}
            dragHoverBefore={dragHoverBefore}
            dragHoverAfter={dragHoverAfter}
            isFirstItem={isFirstItem}
            open={open}
          />
        )
      );
    } else {
      return null;
    }
  };
  renderWrapper(node: any) {
    return <div>{node}</div>;
  }

  render() {
    return (
      <div>
        <DragDropTree
          renderWrapper={this.renderWrapper}
          renderDivider={this.renderDivider}
          renderNode={this.renderNode}
        />
      </div>
    );
  }
}

export default LayerPanel;
