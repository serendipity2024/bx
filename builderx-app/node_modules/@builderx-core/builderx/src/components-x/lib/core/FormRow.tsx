import COLORS from "./constants/COLORS";
import { spaceMagnitudes } from "./constants/SPACER";

import Background from "./types/BackgroundPropType";
import createComponent from "../createComponent";
import * as classNames from "classnames";
import * as React from "react";

interface PropType extends Background {
  alignTop?: boolean;
  center?: boolean;
  noPadding?: boolean;
  onHover?: boolean;
  noTopPadding?: boolean;
  wrapContent?: boolean;
  paddingBottom?: number;
  marginTop?: number;
  marginLeft?: number;
  horizontalPadding?: boolean;
}
export default createComponent(
  `
  .formRowX {
    display: flex;
    padding: ${spaceMagnitudes[1]}px 0px;
    width: 100%;
    align-items: center;
  }


  .formRowX.alignTop{
    align-items: flex-start;
  }

  .formRowX.center{
    justify-content: center;
  }

  .formRowX.wrapContent{
    flex-wrap: wrap;
  }

  .formRowX.noPadding{
    padding-bottom: 0px;
  }

  .formRowX.onHover:hover{
    background-color: white!important;
  }

  .formRowX.noTopPadding{
    padding-top: 0px;
  }

  .formRowX.horizontalPadding{
    padding: ${spaceMagnitudes[1]}px ${spaceMagnitudes[2]}px;
  }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      alignTop,
      center,
      onHover,
      noPadding,
      noTopPadding,
      paddingBottom,
      marginTop,
      marginLeft,
      wrapContent,
      horizontalPadding,
      uiBackground,
      ...remainingProps
    } = props;

    const className = classNames({
      formRowX: true,
      alignTop: alignTop ? true : false,
      center: center ? true : false,
      noPadding: noPadding ? true : false,
      onHover: onHover ? true : false,
      noTopPadding: noTopPadding ? true : false,
      wrapContent: wrapContent ? true : false,
      horizontalPadding: horizontalPadding ? true : false
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          background: uiBackground ? COLORS[uiBackground] : "transparent",
          paddingBottom: noPadding ? 0 : paddingBottom,
          marginTop: marginTop ? marginTop : 0,
          marginLeft: marginLeft ? marginLeft : 0
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
