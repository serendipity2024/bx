import * as React from "react";
import Downshift from "downshift";
import {
  DropdownExpanded,
  InputDropdown,
  Scrollbars,
  DropdownItem
} from "components-x";
import { Utils } from "utils";
import LazyLoad, { forceCheck } from "react-lazyload";
import { isNil } from "lodash";
const sizes = { xxl: 234, xl: 400, l: 300, m: 70, s: 70 };
type propType = {
  options: Array<any>;
  value: any;
  renderOption: (option: any) => any;
  onChange: any;
  placeholder: string;
  tooltip: string;
  extractValue: (option: any) => any;
  renderValue: (option: any) => any;
  filter: (input: string) => Array<any>;
  renderPrefix?: (option: any) => any;
  onOpenStateChange?: (open: boolean) => any;
  onTextChange?: (input: string) => any;
  onHoverOption?: (input: string) => any;
  onOpen?: any;
  onClose?: any;
  size?: "xxl" | "xl" | "l" | "m" | "s";
  disabled?: boolean;
  readOnly?: boolean;
  optionStyle?: any;
  typeface?: any;
};
export default class SelectX extends React.PureComponent<propType, any> {
  inputRef: any;
  handleScroll() {
    forceCheck();
  }
  blur = () => {
    if (this.inputRef) {
      this.inputRef.blur();
    }
  };
  render() {
    return (
      <Downshift
        data-tip={this.props.tooltip}
        selectedItem={this.props.extractValue(this.props.value)}
        itemToString={(item: any) => {
          return item ? this.props.extractValue(this.props.value) : "";
        }}
        onChange={(e: any) => {
          if (e !== null) {
            this.props.onChange(e);
            this.blur();
          }
        }}
        onInputValueChange={(input: any) => {
          if (this.props.onTextChange) {
            this.props.onTextChange(input);
          }
        }}
        onStateChange={(changes: any) => {
          if (!isNil(changes.highlightedIndex) && this.props.onHoverOption) {
            return this.props.onHoverOption(
              this.props.filter(changes.inputValue)[changes.highlightedIndex]
            );
          }
          if (!isNil(changes.isOpen) && this.props.onOpenStateChange) {
            this.props.onOpenStateChange(changes.isOpen);
          }
        }}
      >
        {({
          getInputProps,
          selectItem,
          openMenu,
          closeMenu,
          getItemProps,
          isOpen,
          selectedItem,
          inputValue,
          clearSelection,
          highlightedIndex
        }: any) => {
          let val = getInputProps().value;
          if (
            val === "" &&
            (!isOpen || (isOpen && this.props.readOnly)) &&
            selectedItem
          ) {
            val = selectedItem;
          }
          return (
            <div
              style={{
                width: this.props.size ? sizes[this.props.size] : undefined
              }}
            >
              <InputDropdown
                uiBackground={this.props.readOnly ? "transparent" : undefined}
                noCursor={this.props.readOnly}
                onFocus={() => {
                  if (this.inputRef && !this.props.readOnly) {
                    this.inputRef.select();
                  }
                }}
                onClick={() => {
                  if (isOpen) {
                    selectItem(selectedItem);
                    closeMenu();
                  } else {
                    if (!this.props.readOnly) {
                      clearSelection();
                    }
                    openMenu();
                  }
                }}
                uiSize={this.props.size}
                inputProps={...getInputProps({
                  placeholder: this.props.placeholder,
                  value:
                    this.props.renderValue &&
                    !isNil(this.props.renderValue(val))
                      ? this.props.renderValue(val)
                      : val
                })}
                disabled={this.props.disabled}
                readOnly={this.props.readOnly}
                setParentRef={(ref: any) => {
                  this.inputRef = ref;
                }}
              />
              {isOpen ? (
                <DropdownExpanded
                  isOpen={isOpen}
                  width={
                    this.props.size
                      ? (sizes[this.props.size] * 0.95).toString() + "px"
                      : "95%"
                  }
                >
                  <Scrollbars autoHeight onScroll={this.handleScroll}>
                    {this.props
                      .filter(inputValue)
                      .map((option: any, index: number) => {
                        return (
                          <LazyLoad
                            height={24}
                            scroll
                            once
                            key={`select-x-dropdown-${this.props.placeholder}-${index}`}
                          >
                            <DropdownItemHOC
                              extractValue={this.props.extractValue}
                              optionStyle={this.props.optionStyle}
                              renderPrefix={this.props.renderPrefix}
                              renderOption={this.props.renderOption}
                              renderValue={this.props.renderValue}
                              getItemProps={getItemProps}
                              option={option}
                              highlightedIndex={highlightedIndex}
                              index={index}
                              selectedItem={selectedItem}
                              typeface={this.props.typeface}
                            />
                          </LazyLoad>
                        );
                      })}
                  </Scrollbars>
                </DropdownExpanded>
              ) : null}
            </div>
          );
        }}
      </Downshift>
    );
  }
}

class DropdownItemHOC extends React.Component<any, any> {
  constructor(props: any) {
    super(props);
    this.state = {
      loaded: false
    };
  }
  componentDidMount() {
    if (this.props.typeface) {
      let typeFace = this.props.renderValue
        ? this.props.typeface(
            this.props.renderValue(this.props.renderOption(this.props.option))
          )
        : this.props.typeface(this.props.renderOption(this.props.option));
      if (typeFace) {
        Utils.loadFont(typeFace, () => {
          this.setState({ loaded: true });
        });
      }
    }
  }
  render() {
    const {
      getItemProps,
      option,
      highlightedIndex,
      index,
      selectedItem,
      typeface,
      renderPrefix,
      renderOption,
      renderValue,
      extractValue,
      optionStyle
    } = this.props;
    return (
      <DropdownItem
        {...getItemProps({
          item: extractValue(option)
        })}
        selected={extractValue(option) === selectedItem}
        style={optionStyle ? optionStyle(option) : undefined}
        fontFamily={
          typeface
            ? renderValue
              ? renderValue(renderOption(option))
              : renderOption(option)
            : undefined
        }
        fontStyle={typeface ? "normal" : undefined}
        highlighted={highlightedIndex === index}
      >
        {renderPrefix && renderPrefix(option)}
        {renderValue ? renderValue(renderOption(option)) : renderOption(option)}
      </DropdownItem>
    );
  }
}
