import * as React from "react";
import * as ReactDOM from "react-dom";
import { Component } from "react";
import "./index.scss";
import GradientEditor from "./GradientEditor";
import { ColorPickerBox, ColorPickerContainer } from "../ColorPickerBox";
import { IEvent } from "common-interfaces";
import { Utils } from "utils";

type propType = {
  isGradient?: boolean;
  onChangeColor: any;
  onChangeGradient?: any;
  rotateGradient?: any;
  removeGradient?: any;
  setGradient?: any;
  disabled?: boolean;
  value?: string;
  gradientValue?: string;
  alignRight?: boolean;
  defaultColor?: string;
  enableAlpha?: boolean;
  showGradient?: boolean;
  palette?: any;
  activeId?: number;
  onPickerOpen?: () => void;
  onPickerClose?: (closeGradientEditor?: boolean) => void;
  isPickerCloseDisabled?: () => any;
  onChangeIndex?: (activeIndex: number) => void;
  setGradientEditor?: (value: "open" | "close") => void;
  renderType?: string;
  robot: any;
  onEvent?: (event: IEvent) => void;
  openGradientEditor?: () => void;
  to?: any;
  from?: any;
  hidePicker?: boolean;
};

class ColorPicker extends Component<propType, any> {
  componentRef: any;
  constructor(props: any) {
    super(props);
    this.state = {
      showPicker: false,
      showGradientTile:
        this.props.renderType === "LinearGradient" ||
        this.props.renderType === "RadialGradient"
      // showColor: true,
      // showGradient: false
    };
  }
  componentWillReceiveProps(nextProps: propType) {
    if (nextProps.hidePicker && this.state.showPicker) {
      this.setState({ showPicker: false });
      if (this.props.onPickerClose) {
        this.props.onPickerClose();
      }
    }
  }
  componentDidMount() {
    if (this.componentRef) {
      document.addEventListener("click", this.outsideClickListener);
    }
  }
  componentWillUnmount() {
    if (this.componentRef) {
      document.removeEventListener("click", this.outsideClickListener);
    }
  }
  outsideClickListener = (event: any) => {
    if (this.state.showPicker) {
      const domElement = ReactDOM.findDOMNode(this.componentRef);
      if (Utils.isClickedOutside(event, domElement)) {
        this.handleClickOutside(event);
      }
    }
  };
  handleClickOutside = (evt: any) => {
    if (!this.state.showPicker) {
      return;
    }
    if (this.props.isGradient) {
      const rightPanelDomElement = document.querySelector(
        `[hotspot-area-id="right-panel-area"]`
      );
      const canvasDomElement = document.querySelector(
        `[hotspot-area-id="canvas"]`
      );
      const domElement = ReactDOM.findDOMNode(this.componentRef);
      if (
        Utils.isClickedOutside(event, canvasDomElement) &&
        !Utils.isClickedOutside(event, rightPanelDomElement) &&
        Utils.isClickedOutside(event, domElement)
      ) {
        this.setState({ showPicker: false });
        if (this.props.onPickerClose) {
          this.props.onPickerClose(true);
        }
      }
    } else {
      if (
        this.props.isPickerCloseDisabled &&
        this.props.isPickerCloseDisabled()
      ) {
        return;
      }
      this.setState({ showPicker: false });
      if (this.props.onPickerClose) {
        this.props.onPickerClose();
      }
    }
  };

  handleChangeColor = (color: any) => {
    if (color !== undefined) {
      if (color.rgb) {
        this.props.onChangeColor(
          `rgba(${color.rgb.r},${color.rgb.g},${color.rgb.b},${color.rgb.a})`
        );
      } else {
        this.props.onChangeColor(color);
      }
    }
  };

  handleColorClick = (e: any) => {
    e.stopPropagation();
    if (window.innerWidth - e.clientX < 150) {
      this.setState({ display: "right" });
    } else {
      this.setState({ display: "left" });
    }
    this.setState(
      {
        showPicker: !this.state.showPicker
      },
      () => {
        if (!this.state.showPicker && this.props.onPickerClose) {
          this.props.onPickerClose(true);
        } else if (this.state.showPicker && this.props.onPickerOpen) {
          this.props.onPickerOpen();
        }
      }
    );
    if (this.props.openGradientEditor) {
      this.props.openGradientEditor();
    }
  };
  handleTabClick = (value: string) => {
    if (value === "colorTab") {
      this.setState({
        showColor: true,
        showGradient: false
      });
    } else {
      this.setState({
        showColor: false,
        showGradient: true
      });
    }
  };

  render() {
    let colorRGBA = { r: 0, g: 0, b: 0, a: 1 };
    let value = this.props.value;
    if (!value) {
      if (this.props.defaultColor) {
        value = this.props.defaultColor;
      } else {
        value = "#000000";
      }
    }
    if (value && typeof value === "string" && value.includes("rgba")) {
      let colorString = value.slice(5, -1);
      let colorArray = colorString.split(",");
      colorRGBA.r = parseInt(colorArray[0], 10);
      colorRGBA.g = parseInt(colorArray[1], 10);
      colorRGBA.b = parseInt(colorArray[2], 10);
      colorRGBA.a = parseFloat(colorArray[3]);
    }
    return (
      <ColorPickerBox
        alignRight={this.props.alignRight}
        ref={(c: any) => {
          this.componentRef = c;
        }}
      >
        <div
          style={{
            padding: 1,
            height: "100%",
            cursor: this.props.disabled ? "not-allowed" : "default"
          }}
        >
          <div
            onClick={e => this.handleColorClick(e)}
            style={{
              height: "100%",
              background: value,
              pointerEvents: this.props.disabled ? "none" : "auto"
            }}
          />
        </div>
        {!this.state.showPicker ? null : (
          <ColorPickerContainer width={195} position={this.state.display}>
            <div
              style={{
                color: "#fff",
                width: "100%",
                textAlign: "center",
                backgroundColor: "#353940"
              }}
            >
              <GradientEditor
                onChangeColor={this.handleChangeColor}
                onChangeGradient={this.props.onChangeGradient}
                rotateGradient={this.props.rotateGradient}
                setGradient={this.props.setGradient}
                removeGradient={this.props.removeGradient}
                showGradient={this.props.showGradient}
                onChangeIndex={this.props.onChangeIndex}
                color={
                  this.props.value
                    ? this.props.value.includes &&
                      this.props.value.includes("rgba")
                      ? colorRGBA
                      : this.props.value
                    : "#000000"
                }
                palette={this.props.palette}
                to={this.props.to}
                from={this.props.from}
                activeId={this.props.activeId}
                enableAlpha
                renderType={this.props.renderType}
                robot={this.props.robot}
              />
            </div>
          </ColorPickerContainer>
        )}
      </ColorPickerBox>
    );
  }
}

export default ColorPicker;
