import * as React from "react";

import COLORS from "./constants/COLORS";
import Background from "./types/BackgroundPropType";

import createComponent from "../createComponent";
import * as classNames from "classnames";
import styled from "styled-components";

interface PropType extends Background {
  selected?: boolean;
  locked?: boolean;
  position?: string;
  noPadding?: boolean;
}

const ResizingButton = createComponent(
  `
    .resizingButtonX {
      z-index: 1;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      align-self: flex-end;
      position: relative;
      display: flex;
    }

    .resizingButtonX.posL {
      transform: rotate(270deg);
      margin-right: 6px;
    }

    .resizingButtonX.posR {
      transform: rotate(90deg);
    }

    .resizingButtonX.posT {

    }

    .resizingButtonX.posD {
      transform: rotate(180deg)
    }

    `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      uiBackground,
      selected,
      locked,
      position,
      noPadding,
      style,
      ...remainingProps
    } = props;

    const className = classNames({
      resizingButtonX: true,
      posL: position === "left" ? true : false,
      posR: position === "right" ? true : false,
      posT: position === "top" ? true : false,
      posD:
        position !== "left" && position !== "right" && position !== "top"
          ? true
          : false
    });

    return (
      <div
        {...remainingProps}
        style={{ ...style }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const TopBorderWidth = createComponent(
  `
    .topBorderWidthX {
      height: 1px;
      width: 21px;
      align-self: center;
      background:${COLORS[400]}
     }
     .topBorderWidthX.selected{
       background:${COLORS[100]}
     }
    `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      uiBackground,
      selected,
      locked,
      position,
      style,
      ...remainingProps
    } = props;

    const className = classNames({
      topBorderWidthX: true,
      selected: selected ? true : false
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
const TopBorderLine = createComponent(
  `
    .topBorderLineX {
      align-self: center;
      height: 10px;
      width: 1px;
      background: ${COLORS[400]};
    }

    .topBorderLineX.selected{
      background: ${COLORS[100]};
    }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      uiBackground,
      selected,
      locked,
      position,
      noPadding,
      style,
      ...remainingProps
    } = props;

    const className = classNames({
      topBorderLineX: true,
      selected: selected ? true : false
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

export default class extends React.Component<any, any> {
  render() {
    const { selected, position, ...otherProps } = this.props;
    return (
      <ResizingButton position={position} {...otherProps}>
        <TopBorderWidth selected={selected} />
        <TopBorderLine selected={selected} />
      </ResizingButton>
    );
  }
}

interface PropType extends Background {
  selected?: boolean;
  locked?: boolean;
  position?: string;
}

const ResizingButton2 = styled.div<PropType & React.HTMLProps<HTMLDivElement>>`
  // height: 10px;
  // width: 40px;
  z-index: 1;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  align-self: flex-end;
  position: relative;
  display: flex;
  ${(props: PropType) => {
    if (props.position === "left") {
      return "transform: rotate(270deg); margin-right:6px; ";
    } else if (props.position === "right") {
      return "transform: rotate(90deg); ";
    } else if (props.position === "top") {
      return "";
    } else {
      return "transform: rotate(180deg);";
    }
  }}
`;

const TopBorderWidth2 = styled.div<PropType & React.HTMLProps<HTMLDivElement>>`
  height: 1px;
  width: 21px;
  align-self: center;
  background: ${(props: PropType) =>
    props.selected ? COLORS[100] : COLORS[400]};
`;
const TopBorderLine2 = styled.div<PropType & React.HTMLProps<HTMLDivElement>>`
  align-self: center;
  height: 10px;
  width: 1px;
  background: ${(props: PropType) =>
    props.selected ? COLORS[100] : COLORS[400]};
`;
