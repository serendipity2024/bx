import * as React from "react";
import styled from "styled-components";
import COLORS from "./constants/COLORS";
import Icon from "./Icon";
import Background from "./types/BackgroundPropType";
import Size from "./types/SizePropType";
import * as classNames from "classnames";
import createComponent from "../createComponent";

interface PropType extends Background, Size {
  centered?: boolean;
  marginInput?: boolean;
  placeholder?: string;
  value?: any;
  onChange?: any;
  onBlur?: any;
  wrapperStyle?: any;
}
const uiSizes = {
  l: 35,
  s: 22
};
const Search = createComponent(
  `
  .searchX {

    display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      border-radius: 2px;
      border-bottom: 1px solid ${COLORS[400]};
   }

  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      uiBackground,
      centered,
      marginInput,
      placeholder,
      value,
      onChange,
      onBlur,
      wrapperStyle,
      uiSize,
      ...remainingProps
    } = props;

    const className = classNames({
      searchX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          background: uiBackground ? COLORS[uiBackground] : "transparent"
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

// const Search = styled.div<PropType & React.HTMLProps<HTMLDivElement>>`
//   background: ${(props: PropType) =>
//     props.uiBackground ? COLORS[props.uiBackground] : "transparent"};
//   display: flex;
//   align-items: center;
//   justify-content: center;
//   width: 100%;
//   border-radius: 2px;
//   border-bottom: 1px solid ${COLORS[400]};
// `;
const SearchInput = createComponent(
  `
  .searchInputX {
    background: transparent;
    color: ${COLORS[300]};
    border: none;
    border-radius: 2px;
    width:90%;
    padding: 5px 5px 5px 0;
    outline: none;
    text-align:none;
    font-size:11px;
    margin-left: -5px;
    margin-top:0px;


  }
  .searchInputX::-webkit-input-placeholder {
    color: ${COLORS[400]};
    font-size:11;

  }
  .searchInputX::-webkit-input-placeholder.uiSize {
    font-size:12;

  }
  .searchInputX::-webkit-outer-spin-button,
  .searchInputX::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;

  };
  .searchInputX.centered {
   text-align:center;
  };

  .searchInputX.marginInput{
    margin-top:20px
  }
  .searchInputX.uiSize{
    font-size:12px;
  }

  `,
  (props: PropType & React.HTMLProps<HTMLInputElement>) => {
    const {
      uiBackground,
      centered,
      marginInput,
      placeholder,
      value,
      onChange,
      onBlur,
      wrapperStyle,
      uiSize,
      ...remainingProps
    } = props;

    const className = classNames({
      searchInputX: true,
      uiSize: uiSize === "l" ? true : false,
      height: uiSize ? uiSizes[uiSize] : uiSizes["s"],
      centered: centered ? true : false,
      marginInput: marginInput ? true : false
    });

    return (
      <input
        {...remainingProps}
        style={{
          ...remainingProps.style,
          height: uiSize ? uiSizes[uiSize] + "px" : uiSizes["s"] + "px"
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
        onChange={onChange}
        placeholder={"Search"}
      />
    );
  }
);

export default class extends React.Component<PropType, any> {
  render() {
    const { children, ...otherProps } = this.props;
    return (
      <Search style={this.props.wrapperStyle}>
        <SearchInput {...otherProps} />
        <Icon name="zoom" size={14} />
      </Search>
    );
  }
}
