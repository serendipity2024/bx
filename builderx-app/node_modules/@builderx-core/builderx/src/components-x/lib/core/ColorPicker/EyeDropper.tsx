import * as React from "react";
import { toUpper } from "lodash";

// const robot = window["require"]("robotjs");

export default class EyeDropper extends React.Component<any, any> {
  hoverBox: any;
  hoverBoxRing: any;

  constructor(props: any) {
    super(props);
    this.state = {
      hoverBoxX: 0,
      hoverBoxY: 0
    };
  }

  colorPickMouseMove = (event: any) => {
    let mouse = this.props.robot.getMousePos();
    try {
      let color = this.props.robot.getPixelColor(mouse.x, mouse.y);
      if (event.clientX !== null && event.clientX !== null) {
        this.setState({
          hoverBoxX: event.clientX,
          hoverBoxY: event.clientY,
          hoverBoxColor: "#" + color
        });
      }
    } catch (err) {
      // mouse outside screen dimensions
      console.log(err, "outside screen dimensions");
    }
  };

  hexToRgb = (hex: any) => {
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
      ? {
          r: parseInt(result[1], 16),
          g: parseInt(result[2], 16),
          b: parseInt(result[3], 16),
          a: 1
        }
      : null;
  };

  getColor = () => {
    try {
      let mouse = this.props.robot.getMousePos();
      let hex = "#" + this.props.robot.getPixelColor(mouse.x, mouse.y);
      let color = { rgb: this.hexToRgb(hex) };
      if (color) {
        this.props.handlePickColor(color);
      }
    } catch (err) {
      console.log(err, "outside screen dimensions");

      // mouse outside screen dimensions
    }

    //   // let size = robot.getScreenSize();
    //   // let screenCapture = robot.screen.capture();
    //   // let image = screenCapture.image.toString("base64");
    //   // let image = nativeImage.createFromBuffer(screenCapture.image);
    //   // let color = screenCapture.colorAt(12, 12);
    //   ipcRenderer.send("framelesswindow");
    //   // let win = new BrowserWindow2({ transparent: true, frame: false });
    //   // win.show();
  };

  render() {
    const color = this.hexToRgb(this.state.hoverBoxColor);
    return (
      <div
        onMouseMove={this.colorPickMouseMove}
        onMouseEnter={this.colorPickMouseMove}
        onClick={this.getColor}
        style={{
          position: "fixed",
          left: 0,
          top: 0,
          height: "100vh",
          width: "100vw",
          zIndex: 2,
          backgroundColor: "transparent",
          cursor: "crosshair"
        }}
      >
        <svg
          width="120"
          height="120"
          viewBox="0 0 100 100"
          style={{
            marginLeft: -60,
            marginTop: -60,
            top: this.state.hoverBoxY,
            left: this.state.hoverBoxX,
            position: "absolute"
          }}
        >
          <circle
            stroke="gray"
            stroke-width="10"
            fill="transparent"
            r="45"
            cx="50"
            cy="50"
          />
          <circle
            stroke={this.state.hoverBoxColor}
            stroke-width="8"
            fill="transparent"
            r="45"
            cx="50"
            cy="50"
          />
        </svg>
        <div
          style={{
            position: "absolute",
            top: this.state.hoverBoxY + 66,
            left: this.state.hoverBoxX - 76,
            width: 160,
            borderRadius: 5,
            backgroundColor: "rgba(0,0,0,0.8)",
            color: "white",
            fontSize: 11,
            fontFamily: "arial",
            padding: 4
          }}
        >
          R:{color && color.r} G:{color && color.g} B:{color && color.b}{" "}
          {toUpper(this.state.hoverBoxColor)}
        </div>
      </div>
    );
  }
}
