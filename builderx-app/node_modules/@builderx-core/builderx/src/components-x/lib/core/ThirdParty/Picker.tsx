import * as React from "react";
import styled from "styled-components";
import createComponent from "../../createComponent";
import * as classNames from "classnames";
interface PropType {
  height?: string | number;
  color?: string;
  computedHeight?: string | number;
}
export const PickerItemBelow = createComponent(
  `
  .pickerItemBelowX {
    position: absolute;

  width: 100%;

  height: 100px;
  opacity: 0.3;
  pointer-events: none;
  transform: rotateX(-30deg);
  text-align: center;
  -webkit-font-smoothing: antialiased;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;

   }

  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { height, color, computedHeight, ...remainingProps } = props;

    const className = classNames({
      pickerItemBelowX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          top: height ? `${(height as any) / 2 + 26}px` : "",
          color: color ? color : ""
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
// export const PickerItemBelow = styled.div<
//   PropType & React.HTMLProps<HTMLDivElement>
// >`
//   position: absolute;
//   top: ${(props: any) => props.height / 2 + 26}px;
//   width: 100%;
//   color: ${(props: any) => props.color};
//   height: 100px;
//   opacity: 0.3;
//   pointer-events: none;
//   transform: rotateX(-30deg);
//   text-align: center;
//   -webkit-font-smoothing: antialiased;
//   white-space: nowrap;
//   overflow: hidden;
//   text-overflow: ellipsis;
// `;

export const PickerItemAbove = createComponent(
  `
  .pickerItemAboveX {
    position: absolute;

  width: 100%;

  height: 100px;
  opacity: 0.3;
  pointer-events: none;
  transform: rotateX(30deg);
  text-align: center;
  -webkit-font-smoothing: antialiased;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;

   }

  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      height,
      color,
      computedHeight,

      ...remainingProps
    } = props;

    const className = classNames({
      pickerItemAboveX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          top: height ? `${(height as any) / 2 - 54}px` : "",
          color: color ? color : ""
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
// export const PickerItemAbove = styled.div<
//   PropType & React.HTMLProps<HTMLDivElement>
// >`
//   position: absolute;
//   top: ${(props: any) => props.height / 2 - 54}px;
//   width: 100%;
//   color: ${(props: any) => props.color};
//   height: 100px;
//   opacity: 0.3;
//   pointer-events: none;
//   transform: rotateX(30deg);
//   text-align: center;
//   -webkit-font-smoothing: antialiased;
//   white-space: nowrap;
//   overflow: hidden;
//   text-overflow: ellipsis;
// `;

export const PickerItemIOS = createComponent(
  `
  .pickerItemIOSX {

  width: 100%;
  position: absolute;

  pointer-events: none;
  border-top: 1px solid #f2f2f2;
  border-bottom: 1px solid #f2f2f2;
  text-align: center;
  line-height: 40px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
   }

  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { height, color, computedHeight, ...remainingProps } = props;

    const className = classNames({
      pickerItemIOSX: true
    });
    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          height: computedHeight + "px",
          color: color ? color : "",
          top: height ? `${((height as any) - 40) / 2}` + "px" : ""
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
// export const PickerItemIOS = styled.div<
//   PropType & React.HTMLProps<HTMLDivElement>
// >`
//   height: ${(props: any) => props.computedHeight}px;
//   color: ${(props: any) => props.color};
//   width: 100%;
//   position: absolute;
//   top: ${(props: any) => (props.height - 40) / 2}px;
//   pointer-events: none;
//   border-top: 1px solid #f2f2f2;
//   border-bottom: 1px solid #f2f2f2;
//   text-align: center;
//   line-height: 40px;
//   white-space: nowrap;
//   overflow: hidden;
//   text-overflow: ellipsis;
// `;

export const PickerItemAndroid = createComponent(
  `
  .pickerItemAndroidX {


      color: black;
      width: 100%;
      position: absolute;

      pointe-events: none;
      text-align: left;
      line-height: 40px;
      display: inline;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-left: 9px;
      padding-right: 50px;

   }

  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      height,
      color,
      computedHeight,

      ...remainingProps
    } = props;

    const className = classNames({
      pickerItemAndroidX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          height: computedHeight + "px",

          top: height ? `${((height as any) - 40) / 2}` + "px" : ""
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
// export const PickerItemAndroid = styled.div<
//   PropType & React.HTMLProps<HTMLDivElement>
// >`
//   height: ${(props: any) => props.computedHeight}px;
//   color: black;
//   width: 100%;
//   position: absolute;
//   top: ${(props: any) => (props.height - 40) / 2}px;
//   pointe-events: none;
//   text-align: left;
//   line-height: 40px;
//   display: inline;
//   white-space: nowrap;
//   overflow: hidden;
//   text-overflow: ellipsis;
//   padding-left: 9px;
//   padding-right: 50px;
// `;

export const PickerItemAndroidDownArrow = createComponent(
  `
  .pickerItemAndroidDownArrowX {
    margin-left: 25px;
      position: absolute;
      top: 18px;
      right: 18px;
      border-left: 5px solid transparent;
      border-right: 5px solid transparent;
      border-top: 5px solid grey;
   }

  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      height,
      color,
      computedHeight,

      ...remainingProps
    } = props;

    const className = classNames({
      pickerItemAndroidDownArrowX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          height: computedHeight + "px",

          top: height ? `${((height as any) - 40) / 2}` + "px" : ""
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
// export const PickerItemAndroidDownArrow = styled.div<
//   PropType & React.HTMLProps<HTMLDivElement>
// >`
//   margin-left: 25px;
//   position: absolute;
//   top: 18px;
//   right: 18px;
//   border-left: 5px solid transparent;
//   border-right: 5px solid transparent;
//   border-top: 5px solid grey;
// `;
