import { isNil } from "lodash";
import styled from "styled-components";
import COLORS from "./constants/COLORS";
import Background from "./types/BackgroundPropType";
import Size from "./types/SizePropType";
import * as React from "react";
import createComponent from "../createComponent";
import * as classNames from "classnames";
import { spaceMagnitudes } from "./constants/SPACER";

interface PropType extends Background, Size {
  sublayer?: boolean;
  header?: boolean;
  open?: boolean;
  hover?: boolean;
  transparent?: boolean;
  onClick?: any;
  paddingLeft?: number;
  noPaddingLeft?: boolean;
  bordered?: boolean;
}

const uiSizes = {
  l: 40,
  m: 35,
  s: 30,
  xs: 27,
  xl: "auto",
  auto: "auto"
};

export default createComponent(
  `
  .propertyHeaderX{
    display: flex;
    align-items: center;
    padding: 18px ${spaceMagnitudes[2]}px;
    justify-content: space-between;
    cursor: pointer;
  }
  .propertyHeaderX.open{
    padding-bottom: 7px;
  }
  .propertyHeaderX.bordered{
    border-bottom: 1px solid #252931
  }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      open,
      uiSize,
      hover,
      uiBackground,
      noPaddingLeft,
      paddingLeft,
      bordered,
      ...remainingProps
    } = props;

    const className = classNames({
      propertyHeaderX: true,
      bordered: bordered ? true : false,
      open: open ? true : false
    });

    return (
      <div
        {...remainingProps}
        style={{
          height: uiSize ? uiSizes[uiSize] : uiSizes["s"],
          paddingLeft: noPaddingLeft
            ? 0
            : isNil(paddingLeft)
            ? spaceMagnitudes[2]
            : paddingLeft,
          background: hover
            ? COLORS[900]
            : uiBackground
            ? COLORS[uiBackground]
            : COLORS[800],
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
