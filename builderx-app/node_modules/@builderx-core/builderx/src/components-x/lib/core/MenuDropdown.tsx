import * as React from "react";
import styled from "styled-components";
import COLORS from "./constants/COLORS";
import Background from "./types/BackgroundPropType";
import Size from "./types/SizePropType";

interface PropType extends Background, Size {
  alignRight?: boolean;
  alignTop?: boolean;
  transparent?: boolean;
  last?: boolean;
  direction?: string;
  noPaddingLeft?: boolean;
}

const Dropdown = styled.ul<PropType & React.HTMLProps<HTMLUListElement>>`
  position: relative;
  z-index: 9;
  list-style: none;
  opacity: 1;
  .dd {
    left: -9999px;
    position: absolute;
    top: 24px;
    z-index: 10;
    width: ${(props: PropType) => (props.uiSize ? props.uiSize : "152")}px;
    border: 1px solid ${COLORS[900]};
    margin-left: 14.5%;
  }
  ul {
    list-style: none;
    width: ${(props: PropType) => (props.uiSize ? props.uiSize : "152")}px;
    left: -9999px;
    position: absolute;
    top: 24px;
    border: 1px solid ${COLORS[900]};
    box-shadow: 0px 0px 10px 0px rgba(1, 2, 2, 0.3);
    background: ${(props: PropType) =>
      props.transparent ? "transparent" : COLORS[600]};
    border-radius: 3px;
    -webkit-padding-start: 0;
  }
  li {
    float: left;
    position: relative;
    width: 100%;
  }
  li a {
    color: ${COLORS[300]};
    letter-spacing: -0.27px;
    font-weight: 400;
    display: block;
    float: left;
    font-size: 13px;
    padding: 4px;
    text-decoration: none;
  }
  > li > a {
    overflow: hidden;
    width: 100%;
  }

  li:hover > a {
    background: ${(props: PropType) =>
      props.transparent ? "transparent" : COLORS[800]};
    color: ${COLORS[50]};
  }
  li a:focus {
    background: ${(props: PropType) =>
      props.transparent ? "transparent" : COLORS[800]};
    outline-width: 0;
  }
  li a:active + ul.dd,
  li a:focus + ul.dd,
  li ul.dd:hover {
    ${(props: PropType) =>
      props.alignRight
        ? `left: auto;
    right: 0;`
        : `left: 0;`}
    top: 24px;
    ${(props: PropType) =>
      props.alignTop
        ? `top: auto;
    bottom: 34px;`
        : ``}
  }
  .dd li {
  }
  .dd li a {
    /* width: ${(props: PropType) =>
      props.uiSize ? props.uiSize : "150"}px; */
    margin-top: 0px;
    padding: 8px;
  }
  ul.dd li a:active + ul,
  ul.dd li a:focus + ul,
  ul.dd li ul:hover {
    left: ${(props: PropType) =>
      props.direction === "left" ? "-100%" : "100%"};
    top: 0;
  }
`;

const Option = styled.li<PropType & React.HTMLProps<HTMLDivElement>>`
  opacity: ${(props: any) =>
    props.disabled !== undefined && props.disabled ? 0.5 : 1};
  pointer-events: ${(props: any) =>
    props.disabled !== undefined && props.disabled ? "none" : ""};
`;

const Link = styled.a<PropType & React.HTMLProps<HTMLDivElement>>`
  flex: 1;
  display: flex;
  opacity: ${(props: any) => (props.disabled ? 0.5 : 1)};
  ${(props: any) => {
    if (props.disabled) {
      return "pointer-events: none; cursor: not-allowed;";
    } else {
      return "";
    }
  }}
`;

interface WrapperPropType extends PropType {
  alignRight?: boolean;
  disabled?: boolean;
  toggleState?: boolean;
  onClick?: any;
  onBlur?: any;
  showChildren?: boolean;
}

class OptionMenu extends React.Component<WrapperPropType, any> {
  render() {
    return (
      <Link
        href="javascript:void(0)"
        {...this.props}
        style={{
          ...this.props.style,
          display: "flex",
          flex: 1,
          justifyContent: "space-between"
        }}
      >
        {this.props.children}
      </Link>
    );
  }
}

const OptionMenuLeft = styled.span<PropType & React.HTMLProps<HTMLSpanElement>>`
  padding-top: 1px;
  white-space: nowrap;
`;

const OptionMenuRight = styled.span<
  PropType & React.HTMLProps<HTMLSpanElement>
>`
  align-items: flex-end;
  padding-top: 2px;
  padding-right: 4px;
  white-space: nowrap;
`;

const OptionMenuTitle = styled.span<
  PropType & React.HTMLProps<HTMLSpanElement>
>`
  flex: 1;
  align-items: center;
  display: flex;
  padding: 0 4px;
  font-size: 14px;
  color: ${COLORS[300]};
  letter-spacing: -0.27px;
  font-weight: 400;
  white-space: nowrap;
  ${(props: any) => {
    if (props.noPaddingLeft) {
      return "padding-left: 0px";
    } else {
      return "";
    }
  }}
`;

interface WrapperPropType extends PropType {
  child?: boolean;
  disabled?: boolean;
  style?: any;
  direction?: string;
  className?: any;
}

class MenuDropdown extends React.Component<WrapperPropType, any> {
  render() {
    return (
      <Dropdown
        className={this.props.child ? "dd" : ""}
        {...this.props}
        style={this.props.style}
        direction={this.props.direction}
      >
        {this.props.children}
      </Dropdown>
    );
  }
}

export {
  MenuDropdown,
  Option,
  OptionMenu,
  OptionMenuLeft,
  OptionMenuRight,
  OptionMenuTitle
};
