import * as React from "react";
import * as classNames from "classnames";
import createComponent from "../createComponent";
import Background from "./types/BackgroundPropType";
import Size from "./types/SizePropType";
import COLORS from "./constants/COLORS";
import { Utils } from "utils";
import Scrollbars from "./Scrollbars";
import Pane from "./Pane";

interface PropType extends Background, Size {
  open?: boolean;
  hover?: boolean;
  alignRight?: boolean;
  alignTop?: boolean;
  transparent?: boolean;
  direction?: string;
  noPaddingLeft?: boolean;
  child?: boolean;
  setMenuRendererOpen?: any;
  autoWrap?: boolean;
}

const OptionMenu = createComponent(
  `
  .optionMenuX {
    flex: 1;
    display: flex;
    appearance: none;
    border: none;
    color: ${COLORS[300]};
    letter-spacing: -0.27px;
    font-weight: 400;
    display: block;
    float: left;
    font-size: 13px;
    padding: 8px;
    text-decoration: none;
    overflow: hidden;
    width: 100%;
    border-radius: 3px;
    justify-content: space-between;
  }
  .disabledX {
    opacity: 0.5;
    pointer-events: none;
    cursor: not-allowed;
  }
  `,
  (props: PropType & React.HTMLProps<HTMLButtonElement>) => {
    const {
      uiBackground,
      disabled,
      hover,
      transparent,
      ...remainingProps
    } = props;
    const className = classNames({
      optionMenuX: true,
      disabledX: disabled
    });
    return (
      <button
        {...remainingProps}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
        style={{
          ...remainingProps.style,
          display: "flex",
          flex: 1,
          background: hover
            ? COLORS[800]
            : transparent
            ? "transparent"
            : COLORS[600]
        }}
      />
    );
  }
);

const OptionMenuLeft = createComponent(
  `
  .optionMenuLeftX {
    padding-top: 1px;
    white-space: nowrap;
  }
`,
  (props: PropType & React.HTMLProps<HTMLSpanElement>) => {
    const className = classNames({
      optionMenuLeftX: true
    });
    return (
      <span
        {...props}
        className={className + (props.className ? " " + props.className : "")}
      />
    );
  }
);
const OptionMenuRight = createComponent(
  `
  .optionMenuRightX {
    align-items: flex-end;
    padding-top: 2px;
    padding-right: 4px;
    white-space: nowrap;
  }
`,
  (props: PropType & React.HTMLProps<HTMLSpanElement>) => {
    const className = classNames({
      optionMenuRightX: true
    });
    return (
      <span
        {...props}
        className={className + (props.className ? " " + props.className : "")}
      />
    );
  }
);

const OptionMenuTitle = createComponent(
  `
  .optionMenuTitleX {
    flex: 1;
    align-items: center;
    display: flex;
    padding: 0 4px;
    font-size: 14px;
    letter-spacing: -0.27px;
    color: ${COLORS[300]};
    font-weight: 400;
    white-space: nowrap;
  }
  .noPaddingLeftX {
    padding-left: 0px;
  }
`,
  (props: PropType & React.HTMLProps<HTMLSpanElement>) => {
    const { disabled, noPaddingLeft, ...remainingProps } = props;
    const className = classNames({
      optionMenuTitleX: true,
      noPaddingLeftX: noPaddingLeft
    });
    return (
      <span
        {...props}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
const MenuDropdown = {};
// const MenuDropdown = createComponent(
//   `
//     .menuX {
//       position: absolute;
//       z-index: 9;
//       list-style: none;
//       opacity: 1;
//       border: 1px solid ${COLORS[900]};
//       box-shadow: 0px 0px 10px 0px rgba(1, 2, 2, 0.3);
//       border-radius: 3px;
//       -webkit-padding-start: 0;
//     }
//     .menuChildX {
//       display: none;
//       z-index: 10;
//       border: 1px solid ${COLORS[900]};
//       left: 100%;
//       position: absolute;
//     }
//     .autoWrapX {
//       overflow: scroll;
//     }
//     .menuX li {
//       float: left;
//       position: relative;
//       width: 100%;
//     }
//     .openX {
//       display: block;
//     }
//     .menuChildX li button {
//       margin-top: 0px;
//     }
//     .menuChildX li button ul {
//       position: absolute;
//       left: 0;
//     }
//     .alignRightX {
//       left: auto;
//       right: 0;
//     }
//     .alignTopX {
//       top: auto;
//       bottom: 34px;
//     }
//     .leftDirX {
//       left: -100%;
//     }
// `,
//   React.forwardRef(
//     (props: PropType & React.HTMLProps<HTMLUListElement>, ref: any) => {
//       const {
//         open,
//         child,
//         alignRight,
//         alignTop,
//         direction,
//         children,
//         uiSize,
//         autoWrap,
//         setMenuRendererOpen,
//         ...remainingProps
//       } = props;
//       const className = classNames({
//         menuX: true,
//         menuChildX: child ? true : false,
//         openX: open ? true : false,
//         alignTop: alignTop ? true : false,
//         alignRightX: alignRight ? true : false,
//         leftDirX: props.direction === "left" ? true : false,
//         autoWrapX: autoWrap ? true : false
//       });
//       const [hoveredIndex, setHoveredIndex] = React.useState(-1);
//       const [openIndex, setOpenIndex] = React.useState(-1);
//       const newChildren = React.Children.map(
//         children,
//         (menuChild, index: number) => {
//           if (
//             menuChild &&
//             typeof menuChild !== "string" &&
//             typeof menuChild !== "number"
//           ) {
//             switch (menuChild.type) {
//               case Option:
//                 return React.cloneElement(menuChild, {
//                   open: index === openIndex,
//                   onClick: (e: any) => {
//                     e.stopPropagation();
//                     if (menuChild.props.onClick) {
//                       let childCount = React.Children.toArray(
//                         menuChild.props.children
//                       ).length;
//                       if (childCount > 1) {
//                         setOpenIndex(index === openIndex ? -1 : index);
//                       } else if (setMenuRendererOpen) {
//                         setMenuRendererOpen(false);
//                       }
//                       menuChild.props.onClick(e);
//                     } else {
//                       setOpenIndex(index === openIndex ? -1 : index);
//                     }
//                   },
//                   hover: index === hoveredIndex,
//                   onMouseEnter: (e: any) => {
//                     setHoveredIndex(index === hoveredIndex ? -1 : index);
//                     if (menuChild.props.onMouseEnter) {
//                       menuChild.props.onMouseEnter(e);
//                     }
//                   },
//                   onMouseLeave: (e: any) => {
//                     setHoveredIndex(-1);
//                     if (menuChild.props.onMouseLeave) {
//                       menuChild.props.onMouseLeave(e);
//                     }
//                   },
//                   setMenuRendererOpen
//                 });
//                 break;
//               default:
//                 const newNestedChildren = React.Children.map(
//                   menuChild.props.children,
//                   (nestedMenuChild: any, nestedIndex: number) => {
//                     switch (nestedMenuChild.type) {
//                       case Option:
//                         return React.cloneElement(nestedMenuChild, {
//                           open: index + nestedIndex === openIndex,
//                           onClick: (e: any) => {
//                             e.stopPropagation();
//                             let childCount = React.Children.toArray(
//                               menuChild.props.children
//                             ).length;
//                             if (childCount === 1) {
//                               if (setMenuRendererOpen) {
//                                 setMenuRendererOpen(false);
//                               }
//                             }
//                             if (nestedMenuChild.props.onClick) {
//                               if (setMenuRendererOpen) {
//                                 setMenuRendererOpen(false);
//                               }
//                               nestedMenuChild.props.onClick(e);
//                             } else {
//                               setOpenIndex(
//                                 index + nestedIndex === openIndex
//                                   ? -1
//                                   : index + nestedIndex
//                               );
//                             }
//                           },
//                           hover: index + nestedIndex === hoveredIndex,
//                           onMouseEnter: (e: any) => {
//                             setHoveredIndex(
//                               index + nestedIndex === hoveredIndex
//                                 ? -1
//                                 : index + nestedIndex
//                             );
//                             if (nestedMenuChild.props.onMouseEnter) {
//                               nestedMenuChild.props.onMouseEnter(e);
//                             }
//                           },
//                           onMouseLeave: (e: any) => {
//                             setHoveredIndex(-1);
//                             if (nestedMenuChild.props.onMouseLeave) {
//                               nestedMenuChild.props.onMouseLeave(e);
//                             }
//                           },
//                           setMenuRendererOpen
//                         });
//                         break;
//                       default:
//                         return nestedMenuChild;
//                     }
//                   }
//                 );
//                 return React.cloneElement(menuChild, {}, newNestedChildren);
//             }
//           } else {
//             return menuChild;
//           }
//         }
//       );
//       return (
//         <ul
//           {...remainingProps}
//           ref={ref}
//           aria-label={"menu"}
//           style={{
//             width: uiSize ? uiSize : 152,
//             background: props.transparent ? "transparent" : COLORS[600],
//             ...remainingProps.style
//           }}
//           className={
//             className +
//             (remainingProps.className ? " " + remainingProps.className : "")
//           }
//         >
//           {autoWrap ? (
//             <Scrollbars autoHide autoHeight>
//               <Pane uiBackground={600}>{newChildren}</Pane>
//             </Scrollbars>
//           ) : (
//             newChildren
//           )}
//         </ul>
//       );
//     }
//   )
// );
const Option = createComponent(
  `
  .disabledX {
    opacity: 0.5;
    pointer-events: none;
    cursor: not-allowed;
  }
  `,
  (props: PropType & React.HTMLProps<HTMLLIElement>) => {
    const {
      uiBackground,
      children,
      disabled,
      open,
      hover,
      setMenuRendererOpen,
      ...remainingProps
    } = props;
    const className = classNames({
      disabledX: disabled
    });
    const newChildren = React.Children.map(children, child => {
      if (child && typeof child !== "string" && typeof child !== "number") {
        switch (child.type) {
          case OptionMenu:
            return React.cloneElement(child, {
              hover
            });
            break;
          case MenuDropdown:
            return React.cloneElement(child, {
              open,
              setMenuRendererOpen
            });
            break;
          default:
            return child;
        }
      } else {
        return child;
      }
    });
    return (
      <li
        {...remainingProps}
        aria-label={"menuitem"}
        children={newChildren}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
        style={{
          ...remainingProps.style
        }}
      />
    );
  }
);

const MenuRenderer = createComponent(
  ``,
  (
    props: { trigger: (triggerProps: any) => JSX.Element } & React.HTMLProps<
      HTMLDivElement
    >
  ) => {
    // let childrenRef = React.useRef(null);
    // const [open, setMenuRendererOpen] = React.useState(false);
    // const outsideClickListener = (event: any) => {
    //   if (
    //     childrenRef.current &&
    //     Utils.isClickedOutside(event, childrenRef.current)
    //   ) {
    //     setMenuRendererOpen(false);
    //   }
    // };
    // React.useEffect(() => {
    //   if (childrenRef.current) {
    //     document.addEventListener("click", outsideClickListener);
    //     return () => {
    //       document.removeEventListener("click", outsideClickListener);
    //     };
    //   }
    //   return;
    // }, [outsideClickListener]);
    // let triggerElement: any = props.trigger({
    //   onClick: () => setMenuRendererOpen(!open)
    // });
    return (
      <div />
      // <div style={{ cursor: "pointer" }}>
      //   {triggerElement}
      //   {open
      //     ? React.Children.map(props.children, (element: any, idx) => {
      //         return React.cloneElement(element, {
      //           ref: childrenRef,
      //           setMenuRendererOpen
      //         });
      //       })
      //     : null}
      // </div>
    );
  }
);
export {
  MenuDropdown as MenuDropdownNew,
  Option as OptionNew,
  OptionMenu as OptionMenuNew,
  OptionMenuLeft as OptionMenuLeftNew,
  OptionMenuRight as OptionMenuRightNew,
  OptionMenuTitle as OptionMenuTitleNew,
  MenuRenderer
};
