import * as React from "react";
import styled from "styled-components";
import COLORS from "./constants/COLORS";
import Icon from "./Icon";
import Background from "./types/BackgroundPropType";
import Color from "./types/ColorPropType";
import Size from "./types/SizePropType";
import createComponent from "../createComponent";
import * as classNames from "classnames";

interface PropType extends Background, Color, Size {
  transparent?: boolean;
  flexible?: boolean;
  barButton?: boolean;
}

const uiSizes = {
  l: 40,
  m: 35,
  s: 30,
  xs: 20
};
const InputButton = createComponent(
  `
  .inputButtonX {

   }
   .inputButtonX.transparent {
     border:none;
   }
   .inputButtonX.barButton
   {
     border-right:1px solid ${COLORS[900]}
   }
  `,
  (props: PropType & React.HTMLProps<HTMLButtonElement>) => {
    const {
      transparent,
      uiBackground,
      flexible,
      uiColor,
      uiSize,
      barButton,
      ...remainingProps
    } = props;

    const className = classNames({
      inputButtonX: true,
      transparent: transparent ? true : false,
      flexible: flexible ? true : false,
      barButton: barButton ? true : false
    });

    return (
      <button
        {...remainingProps}
        style={{
          ...remainingProps.style,
          background: transparent
            ? "transparent"
            : uiBackground
            ? COLORS[uiBackground]
            : COLORS[500],

          color: uiColor ? COLORS[uiColor] : COLORS[50],
          width: flexible ? "100%" : barButton ? "40px" : "auto",
          height: uiSize ? uiSizes[uiSize] : barButton ? "35px" : "auto"
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

interface WrapperPropType extends PropType {
  caption?: string;
  icon?: any;
}

export default class extends React.Component<WrapperPropType, any> {
  render() {
    const { caption, icon, children, ...otherProps } = this.props;
    return (
      <InputButton {...otherProps}>
        {icon && typeof icon === "string" ? (
          <Icon name={icon} size={16} style={{ marginRight: 5 }} />
        ) : icon && typeof icon !== "string" ? (
          icon
        ) : (
          ""
        )}
        {caption ? caption : ""}
      </InputButton>
    );
  }
}
