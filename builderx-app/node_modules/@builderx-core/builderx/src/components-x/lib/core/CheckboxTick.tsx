import styled from "styled-components";
import COLORS, { secondary } from "./constants/COLORS";
import Color from "./types/ColorPropType";
import Size from "./types/SizePropType";
import * as React from "react";
import ReactDOM from "react-dom";

interface PropType extends Size, Color {
  transparent?: boolean;
  flexible?: boolean;
  barButton?: boolean;
  noMargin?: boolean;
  noBorder?: boolean;
  disabled?: boolean;
}
const uiSizes = {
  l: 16,
  m: 13,
  s: 12,
  xs: 11
};
// const Checkbox = createComponent(
//   `
//   .checkboxX {
//   position: relative;
//         left: 0;
//         top: 0;
//         margin:0px 0px 0px 5px;
//         border:2px solid ${COLORS[500]};
//         border-radius: 2px;
//         cursor:pointer;
//         outline:none;
//         -webkit-appearance: none;

// }
// .checkboxX :checked:after {
//   font-size: 11px;
//   content: '✔';
//   position: absolute;

//   line-height: 1.1;
//   margin-top: -2px;
//   // background-color: ${COLORS["A400"]}
// .checkboxX.noMargin{
//   margin:0px;

// }
// .checkboxX.noBorder{
//   margin:0px;
//   border:2px solid transparent;
// }

//   `,
//   (props: PropType & React.HTMLProps<HTMLDivElement>) => {
//     const {
//       uiSize,
//       transparent,
//       flexible,
//       barButton,

//       noBorder,
//       disabled,
//       noMargin,
//       uiColor,
//       ...remainingProps
//     } = props;

//     const className = classNames({
//       checkboxX: true,
//       transparent: transparent ? true : false,
//       flexible: flexible ? true : false,
//       barButton: barButton ? true : false,
//       noMargin: noMargin ? true : false,
//       noBorder: noBorder ? true : false,
//       disabled: disabled ? true : false
//     });

//     return (
//       <input
//         {...remainingProps}
//         style={{
//           ...remainingProps.style,
//           width: uiSize ? uiSizes[uiSize] + "px" : "12px",
//           height: uiSize ? uiSizes[uiSize] + "px" : "12px",
//           // @ts-ignore
//           ":checked:after": {
//             width: uiSize ? uiSizes[uiSize] - 3 + "px" : "11px",
//             height: uiSize ? uiSize[uiSize] - 3 + "px" : "10px",
//             cursor:
//               disabled !== undefined && disabled ? "not-allowed" : "pointer",
//             opacity: disabled !== undefined && disabled ? 0.5 : 1,

//             // background-color: ${COLORS["A400"]};
//             color: uiColor ? COLORS[uiColor] : secondary[800]
//           }
//         }}
//         className={className}
//       />
//     );
//   }
// );
const Checkbox = styled.input<PropType & React.HTMLProps<HTMLInputElement>>`
        position: relative;
        left: 0;
        top: 0;
        margin:${(props: PropType) =>
          props.noMargin ? "0" : "0px 0px 0px 5px "};
        width: ${(props: PropType) =>
          props.uiSize ? uiSizes[props.uiSize] : 12}px;
        height: ${(props: PropType) =>
          props.uiSize ? uiSizes[props.uiSize] : 12}px;
        border-radius: 2px;
        // border: 2px solid ${COLORS["500"]};
        border: ${(props: any) =>
          props.noBorder ? "2px solid transparent" : "2px solid" + COLORS[500]};
        cursor: ${(props: any) =>
          props.disabled !== undefined && props.disabled
            ? "not-allowed"
            : "pointer"};
        outline:none;
        -webkit-appearance: none;
        opacity: ${(props: any) =>
          props.disabled !== undefined && props.disabled ? 0.5 : 1};
        :checked:after {
          font-size: ${(props: PropType) =>
            props.uiSize ? uiSizes[props.uiSize] - 3 : 11}px;
          content: '✔';
          position: absolute;
          width: ${(props: PropType) =>
            props.uiSize ? uiSizes[props.uiSize] - 3 : 11}px;
          height: ${(props: PropType) =>
            props.uiSize ? uiSizes[props.uiSize] - 3 : 10}px;
          line-height: 1.1;
          margin-top: -2px;
          // background-color: ${COLORS["A400"]};
          color: ${(props: PropType) =>
            props.uiColor ? COLORS[props.uiColor] : secondary[800]};
        }
    `;

interface WrapperPropType extends PropType {
  checked?: boolean;
  onBlur?: (e: any) => void;
  onClick?: (e: any) => void;
  onChange?: (e: any) => void;
  disabled?: boolean;
  className?: string;
  id?: string;
  name?: string;
}
export default class extends React.Component<WrapperPropType, any> {
  componentDidMount() {
    const x = ReactDOM.findDOMNode(this);
    (x as HTMLInputElement).onfocus = () => {
      // @ts-ignore
      x.blur();
    };
  }

  render() {
    const { checked } = this.props;
    return <Checkbox type="checkbox" checked={checked} {...this.props} />;
  }
}
