import * as React from "react";
import styled from "styled-components";
import COLORS from "./constants/COLORS";
import Background from "./types/BackgroundPropType";
import * as classNames from "classnames";
import createComponent from "../createComponent";

interface PropType extends Background {
  selected?: boolean;
  locked?: boolean;
}

const BorderRadius = createComponent(
  `
  .borderRadiusX {
    height: 44px;
    width: 46px;
    border-radius: 10px;
    padding: 0;
    display: flex;
    flex-wrap: wrap;
  }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { selected, ...remainingProps } = props;
    const className = classNames({
      borderRadiusX: true,
      selected: selected ? true : false
    });

    return (
      <div
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
        {...props}
      />
    );
  }
);

const TopLeftRadius = createComponent(
  `
  .topLeftRadiusX {
    height: 18px;
    width: 18px;
    border-top-left-radius: 10px;
    position: relative;
    margin: 0 3px 1px 0;
    cursor: pointer;
    border-left: 2px solid ${COLORS[400]};
    border-top: 2px solid ${COLORS[400]};
  }
  .topLeftRadiusX.selected {
    border-left: 2px solid ${COLORS[300]};
    border-top: 2px solid ${COLORS[300]};
  }
  `,
  (props: PropType & React.HTMLProps<HTMLSpanElement>) => {
    const { selected, ...remainingProps } = props;

    const className = classNames({
      topLeftRadiusX: true,
      selected: selected ? true : false
    });

    return (
      <span
        {...remainingProps}
        style={remainingProps.style}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const BottomRightRadius = createComponent(
  `
  .bottomRightRadiusX {
    height: 18px;
    width: 18px;
    border-bottom-right-radius: 10px;
    position: relative;
    margin: 1px 0 0 1px;
    cursor: pointer;
    border-right: 2px solid ${COLORS[400]};
    border-bottom: 2px solid ${COLORS[400]};
  }
  .bottomRightRadiusX.selected {
    border-right: 2px solid ${COLORS[300]};
    border-bottom: 2px solid ${COLORS[300]};
  }
  `,
  (props: PropType & React.HTMLProps<HTMLSpanElement>) => {
    const { selected, ...remainingProps } = props;

    const className = classNames({
      bottomRightRadiusX: true,
      selected: selected ? true : false
    });

    return (
      <span
        {...remainingProps}
        style={remainingProps.style}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const BottomLeftRadius = createComponent(
  `
  .bottomLeftRadiusX {
    height: 18px;
    width: 18px;
    border-bottom-left-radius: 10px;
    position: relative;
    margin: 1px 3px 0 0;
    cursor: pointer;
    border-left: 2px solid ${COLORS[400]};
    border-bottom: 2px solid ${COLORS[400]};
  }
  .bottomLeftRadiusX.selected {
    border-left: 2px solid ${COLORS[300]};
    border-bottom: 2px solid ${COLORS[300]};
  }
  `,
  (props: PropType & React.HTMLProps<HTMLSpanElement>) => {
    const { selected, ...remainingProps } = props;

    const className = classNames({
      bottomLeftRadiusX: true,
      selected: selected ? true : false
    });

    return (
      <span
        {...remainingProps}
        style={remainingProps.style}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const TopRightRadius = createComponent(
  `
  .topRightRadiusX {
    height: 18px;
    width: 18px;
    border-top-right-radius: 10px;
    position: relative;
    margin: 0 0 1px 1px;
    cursor: pointer;
    border-right: 2px solid ${COLORS[400]};
    border-top: 2px solid ${COLORS[400]};
  }
  .topRightRadiusX.selected {
    border-right: 2px solid ${COLORS[300]};
    border-top: 2px solid ${COLORS[300]};
  }
  `,
  (props: PropType & React.HTMLProps<HTMLSpanElement>) => {
    const { selected, ...remainingProps } = props;

    const className = classNames({
      topRightRadiusX: true,
      selected: selected ? true : false
    });

    return (
      <span
        {...remainingProps}
        style={remainingProps.style}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const BorderRadiusLock = createComponent(
  `
  .borderRadiusLockX {
    height: 19px;
    width: 19px;
    display: inline-flex;
    left: 10px;
    top: -30px;
    position: relative;
    justify-content: center;
    align-items: center;
    cursor: pointer;
  }
  `,
  (props: PropType & React.HTMLProps<HTMLSpanElement>) => {
    const className = classNames({
      borderRadiusLockX: true
    });

    return <span className={className} {...props} />;
  }
);

export {
  BorderRadius,
  BorderRadiusLock,
  BottomLeftRadius,
  TopLeftRadius,
  TopRightRadius,
  BottomRightRadius
};
