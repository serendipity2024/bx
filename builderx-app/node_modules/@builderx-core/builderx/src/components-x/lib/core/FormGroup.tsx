import styled from "styled-components";
import createComponent from "../createComponent";
import * as classNames from "classnames";
import * as React from "react";
import { spaceMagnitudes } from "./constants/SPACER";

interface PropType {
  noPadding?: boolean;
  paddingTop?: boolean;
  paddingBottom?: boolean;
  noPaddingTop?: boolean;
  noPaddingBottom?: boolean;
  noPaddingVertical?: boolean;
  noPaddingHorizontal?: boolean;
  flexDirection?: "row" | "column" | undefined;
  flexWrap?: string;
  width?: number;
  onKeyPress?: any;
}
export default createComponent(
  `
  .formGroupX {
    display: flex;
    padding:12px;
    padding-horizontal:12px;
    flex:1;

}
  .formGroupX.noPadding{
    padding:5px 1px;
  }
  .formGroupX.paddingTop{
    padding-top:0px;

  }
  .formGroupX.paddingBottom{

  }
  .formGroupX.noPaddingTop{

  }
  .formGroupX.noPaddingBottom{

  }
  .formGroupX.noPaddingVertical{

  }
  .formGroupX.noPaddingHorizontal{

  }

  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      noPadding,
      paddingTop,
      paddingBottom,
      noPaddingTop,
      noPaddingBottom,
      noPaddingVertical,
      noPaddingHorizontal,
      flexDirection,
      flexWrap,
      width,
      ...remainingProps
    } = props;

    const className = classNames({
      formGroupX: true,
      noPadding: noPadding ? true : false,
      paddingTop: paddingTop ? true : false,
      paddingBottom: paddingBottom ? true : false,
      noPaddingTop: noPaddingTop ? true : false,
      noPaddingBottom: noPaddingBottom ? true : false,
      noPaddingVertical: noPaddingVertical ? true : false,
      noPaddingHorizontal: noPaddingHorizontal ? true : false
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          flexDirection: flexDirection ? flexDirection : "column",
          width: width ? width : "",
          flexWrap: flexWrap ? (flexWrap as any) : "noWrap",
          paddingTop:
            noPaddingTop || noPaddingVertical
              ? "0px"
              : paddingTop
              ? spaceMagnitudes[2] + "px"
              : "auto",
          paddingBottom:
            noPaddingBottom || noPaddingVertical
              ? "0px"
              : paddingBottom
              ? spaceMagnitudes[2] + "px"
              : "auto"
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
