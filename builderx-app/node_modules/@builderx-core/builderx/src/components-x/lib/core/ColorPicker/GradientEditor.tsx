import * as React from "react";
import { CustomPicker, SketchPicker } from "react-color";
import "./index.scss";
import { FormRow, FormCol, Button, Icon } from "../index";
import GradientBuilder from "./GradientBuilder/GradientBuilder";
import { get } from "lodash";

const WrappedSketchPicker = ({ onSelect, ...rest }: any) => {
  return (
    <SketchPicker
      {...rest}
      onChange={c => {
        onSelect(`rgba(${c.rgb.r},${c.rgb.g},${c.rgb.b},${c.rgb.a})`);
      }}
    />
  );
};

class HueAndSaturation extends React.Component<any, any> {
  onChange: any;
  clickCount: number = 0;
  hoverBox: any;
  pickerComponent: any;
  constructor(props: any) {
    super(props);
    this.state = {
      smoothOpacity: false,
      isGradient:
        this.props.renderType === "LinearGradient" ||
        this.props.renderType === "RadialGradient",
      linearGradient: this.props.renderType === "LinearGradient",
      radialGradient: this.props.renderType === "RadialGradient",
      angularGradient: this.props.renderType === "AngularGradient",
      pickColor: false
    };
  }
  handleGradientIconClick = (value: any) => {
    switch (value) {
      case "LinearGradient":
        this.setState({
          isGradient: true,
          linearGradient: true,
          radialGradient: false,
          angularGradient: false
        });
        if (this.props.setGradient) {
          this.props.setGradient("LinearGradient");
        }
        break;
      case "RadialGradient":
        this.setState({
          isGradient: true,
          linearGradient: false,
          radialGradient: true,
          angularGradient: false
        });
        if (this.props.setGradient) {
          this.props.setGradient("RadialGradient");
        }
        break;
      case "AngularGradient":
        this.setState({
          isGradient: true,
          linearGradient: false,
          radialGradient: false,
          angularGradient: true
        });
        if (this.props.setGradient) {
          this.props.setGradient("AngularGradient");
        }
        break;
      case "none":
        this.setState({
          isGradient: false,
          linearGradient: false,
          radialGradient: false,
          angularGradient: false
        });
        if (this.props.removeGradient) {
          this.props.removeGradient();
        }
        break;
      default:
        break;
    }
  };
  handleClickRotationGradient = (type: string) => {
    if (type === "rotate-left") {
      this.props.rotateGradient(90);
    } else if (type === "rotate-right") {
      this.props.rotateGradient(-90);
    }
  };
  hexToRgb = (hex: any) => {
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
      ? {
          r: parseInt(result[1], 16),
          g: parseInt(result[2], 16),
          b: parseInt(result[3], 16),
          a: 1
        }
      : null;
  };

  handlePickColor = (color: any) => {
    if (color) {
      this.handleGradientIconClick("none");
      this.props.onChangeColor(color);
    }
    this.setState({ pickColor: false });
  };
  componentDidMount() {
    const colorPicker = document.createElement("input");
    colorPicker.setAttribute("type", "color");
    colorPicker.setAttribute("name", "color-picker-component");
    colorPicker.setAttribute("value", this.props.color);
    colorPicker.onchange = (e: any) => {
      if (e.target.value) {
        this.props.onChangeColor(e.target.value);
      }
    };
    this.pickerComponent = colorPicker;

    const sketchPickerDiv = document.getElementsByClassName("sketch-picker")[0];
    const hexInput: HTMLInputElement = get(
      sketchPickerDiv,
      "children.2.children.0.children.0.children.0"
    );
    if (hexInput) {
      hexInput.focus();
      hexInput.select();
    }
  }
  blurInput = () => {
    const sketchPickerDiv = document.getElementsByClassName("sketch-picker")[0];
    const hexInput: HTMLInputElement = get(
      sketchPickerDiv,
      "children.2.children.0.children.0.children.0"
    );
    if (hexInput) {
      hexInput.blur();
    }
  };
  render() {
    return (
      <div>
        <div
          style={{
            zIndex: 1
          }}
        >
          <FormRow noPadding horizontalPadding>
            <FormCol first uiSize={1}>
              <Button
                disabled={false}
                borderTopRadius
                active={this.state.pickColor}
                uiBackground={700}
                flexible
                onClick={() => {
                  this.pickerComponent.click();
                }}
                icon={<Icon name="icon-colorpicker" size={16} />}
                data-tip="Color Picker"
              />
            </FormCol>
            <FormCol uiSize={1}>
              <Button
                disabled={false}
                borderTopRadius
                active={!this.state.pickColor && !this.state.isGradient}
                uiBackground={700}
                flexible
                onClick={(e: any) => {
                  this.handleGradientIconClick("none");
                }}
                icon={<Icon name="icon-blank" size={16} />}
                data-tip="Solid"
              />
            </FormCol>
            {this.props.showGradient ? (
              <React.Fragment>
                <FormCol uiSize={1}>
                  <Button
                    disabled={false}
                    borderTopRadius
                    active={
                      !this.state.pickColor &&
                      this.state.isGradient &&
                      this.state.linearGradient
                    }
                    uiBackground={700}
                    flexible
                    onClick={(e: any) => {
                      this.handleGradientIconClick("LinearGradient");
                    }}
                    icon={<Icon name="icon-gradient-linear" size={16} />}
                    data-tip="Linear Gradient"
                  />
                </FormCol>
                <FormCol uiSize={1}>
                  <Button
                    disabled={false}
                    borderTopRadius
                    active={
                      !this.state.pickColor &&
                      this.state.isGradient &&
                      this.state.radialGradient
                    }
                    uiBackground={700}
                    flexible
                    onClick={(e: any) => {
                      this.handleGradientIconClick("RadialGradient");
                    }}
                    icon={<Icon name="icon-gradient-radial" size={16} />}
                    data-tip="Radial Gradient"
                  />
                </FormCol>
              </React.Fragment>
            ) : null}
          </FormRow>
          {!this.state.isGradient && (
            <SketchPicker
              width="160"
              onChangeComplete={(color: any) => {
                this.props.onChangeColor(color);
              }}
              color={this.props.color}
              disableAlpha={!this.props.enableAlpha}
            />
          )}
          {this.state.isGradient && (
            <React.Fragment>
              {this.state.linearGradient ? (
                <FormRow>
                  <FormCol first uiSize={1}>
                    <Button
                      transparent
                      onClick={() =>
                        this.handleClickRotationGradient("rotate-left")
                      }
                      icon={<Icon name={"icon-rotate-left"} size={12} />}
                      data-tip="Rotate Left"
                    />
                  </FormCol>
                  <FormCol first uiSize={1}>
                    <Button
                      transparent
                      onClick={() =>
                        this.handleClickRotationGradient("rotate-right")
                      }
                      icon={<Icon name={"icon-rotate-right"} size={12} />}
                      data-tip="Rotate Right"
                    />
                  </FormCol>
                </FormRow>
              ) : (
                <FormRow />
              )}

              <GradientBuilder
                width={170}
                height={14}
                palette={this.props.palette}
                to={this.props.to}
                from={this.props.from}
                onPaletteChange={(
                  e: any,
                  activeId: number,
                  from: any,
                  to: any
                ) => {
                  this.props.onChangeGradient(
                    e,
                    {
                      ...this.state,
                      activeIndex: activeId
                    },
                    from,
                    to
                  );
                  this.blurInput();
                }}
                onChangeIndex={(id: any) => {
                  this.blurInput();
                  this.props.onChangeIndex(id);
                }}
                activeId={this.props.activeId}
              >
                <WrappedSketchPicker width={170} />
              </GradientBuilder>
            </React.Fragment>
          )}
        </div>
      </div>
    );
  }
}

export default CustomPicker(HueAndSaturation);
