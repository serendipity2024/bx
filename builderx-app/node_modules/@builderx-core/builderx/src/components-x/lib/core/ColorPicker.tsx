import COLORS from "./constants/COLORS";
import Background from "./types/BackgroundPropType";
import Size from "./types/SizePropType";
import createComponent from "../createComponent";
import * as classNames from "classnames";
import * as React from "react";

interface PropType extends Background {}
const ColorArea = createComponent(
  `
  .colorAreaX {
    height: 215px;
    background: #000;
    width: 100%;
  }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { uiBackground, ...remainingProps } = props;

    const className = classNames({
      colorAreaX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const ColorBox = createComponent(
  `
  .colorBoxX {
    height: 25px;
    width: 25px;
  }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { uiBackground, ...remainingProps } = props;

    const className = classNames({
      colorBoxX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          background: uiBackground ? uiBackground : COLORS["A100"]
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const ColorBoxGroup = createComponent(
  `
  .colorBoxGroupX {
    display: flex;
    justify-content: space-between;
    padding: 10px 10px;
    border-top: 1px solid ${COLORS[900]};
  }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { uiBackground, ...remainingProps } = props;

    const className = classNames({
      colorBoxGroupX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const ColorGradiantPicker = createComponent(
  `
  .colorGradiantPickerX {
    height: 215px;
    background: red;
    width: 5%;
    margin-left: 8px;
  }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { uiBackground, ...remainingProps } = props;

    const className = classNames({
      colorGradiantPickerX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

interface WrapperPropType extends Background, Size {
  centered?: boolean;
}
const uiSizes = {
  l: 35,
  s: 22
};
const ColorInput = createComponent(
  `
  .colorInputX {
    color: ${COLORS[300]};
    border: 1px solid ${COLORS[900]};
    border-radius: 2px;
    width: 100%;
    font-size: 10px;
    padding: 5px;
    outline: none;
    margin-bottom: 5px;
  }
  .colorInputX::-webkit-outer-spin-button,.colorInputX::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  .colorInputX.centered{
    text-align:center;
  }
  .colorInputX.textarea {
    padding-left: 0;
  }
  `,
  (props: WrapperPropType & React.HTMLProps<HTMLInputElement>) => {
    const { uiBackground, uiSize, centered, ...remainingProps } = props;

    const className = classNames({
      colorInputX: true,
      centered: centered ? true : false
    });

    return (
      <input
        {...remainingProps}
        style={{
          ...remainingProps.style,
          background: uiBackground ? COLORS[uiBackground] : COLORS[600],
          height: uiSize ? uiSizes[uiSize] : uiSizes["s"]
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

interface OtherPropType extends Size {}
const ColorInputGroup = createComponent(
  `
  .colorInputGroupX {
    display: flex;
    flex-direction: column;
    padding: 10px 3px;
  }
  `,
  (props: OtherPropType & React.HTMLProps<HTMLInputElement>) => {
    const { uiSize, ...remainingProps } = props;

    const className = classNames({
      colorInputGroupX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          flex: uiSize ? uiSize : 2
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const ColorPickerArea = createComponent(
  `
  .colorPickerAreaX {
    display: flex;
    align-items: center;
    padding: 10px 10px 0 10px;
  }
  `,
  (props: OtherPropType & React.HTMLProps<HTMLInputElement>) => {
    const { uiSize, ...remainingProps } = props;

    const className = classNames({
      colorPickerAreaX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const ColorPickerDropdown = createComponent(
  `
  .colorPickerDropdownX {
    width: 100%;
    background: ${COLORS[600]};
    color: ${COLORS[300]};
    height: 22px;
    border: 1px solid ${COLORS[900]};
    border-radius: 2px;
    font-size: 11px;
    outline: none;
    letter-spacing: -0.27px;
    font-weight: 400;
    margin-bottom: 5px;
  }
  `,
  (props: OtherPropType & React.HTMLProps<HTMLInputElement>) => {
    const { uiSize, ...remainingProps } = props;

    const className = classNames({
      colorPickerDropdownX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const ColorPickerGroup = createComponent(
  `
  .colorPickerGroupX {
    display: flex;
    justify-content: space-between;
    padding: 0 7px;
  }
  `,
  (props: OtherPropType & React.HTMLProps<HTMLInputElement>) => {
    const { uiSize, ...remainingProps } = props;

    const className = classNames({
      colorPickerGroupX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

export {
  ColorArea,
  ColorBox,
  ColorBoxGroup,
  ColorGradiantPicker,
  ColorInput,
  ColorInputGroup,
  ColorPickerArea,
  ColorPickerDropdown,
  ColorPickerGroup
};
