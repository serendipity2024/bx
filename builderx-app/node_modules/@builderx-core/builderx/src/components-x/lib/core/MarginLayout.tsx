import COLORS from "./constants/COLORS";
import Background from "./types/BackgroundPropType";
import * as React from "react";
import createComponent from "../createComponent";
import * as classNames from "classnames";

interface PropType extends Background {
  selected?: boolean;
  locked?: boolean;
}

const MarginLayout = createComponent(
  `
  .marginLayoutX {
    background: ${COLORS[700]}
    height: 75px;
    width: 75px;
    padding: 4px;
    border-radius: 2px;
  }
  .marginLayoutX.selected{
    background: ${COLORS[300]}
  }
`,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { selected, ...remainingProps } = props;
    const className = classNames({
      marginLayoutX: true,
      selected: selected ? true : false
    });
    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const MarginLeftSelector = createComponent(
  `
  .marginLeftSelectorX {
    top: 25.5px;
    left: -17.5px;
    display: inline-block;
    padding: 5px;
    border: solid ${COLORS[400]};
    border-width: 0 2px 2px 0;
    position: relative;
    cursor: pointer;
    transform: rotate(135deg);
    -webkit-transform: rotate(135deg);
  }
  .marginLeftSelectorX.selected{
    border-color: ${COLORS[300]};
  }
`,
  (props: PropType & React.HTMLProps<HTMLSpanElement>) => {
    const { selected, ...remainingProps } = props;
    const className = classNames({
      marginLeftSelectorX: true,
      selected: selected ? true : false
    });
    return (
      <span
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const MarginTopSelector = createComponent(
  `
  .marginTopSelectorX {
    left: 27.5px;
    top: -7.5px;
    display: inline-block;
    padding: 5px;
    border: solid ${COLORS[400]};
    border-width: 0 2px 2px 0;
    position: relative;
    cursor: pointer;
    transform: rotate(-135deg);
    -webkit-transform: rotate(-135deg);
  }
  .marginTopSelectorX.selected{
    border-color: ${COLORS[300]};
  }
`,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { selected, ...remainingProps } = props;
    const className = classNames({
      marginTopSelectorX: true,
      selected: selected ? true : false
    });
    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
const MarginBottomSelector = createComponent(
  `
  .marginBottomSelectorX {
    top: 58px;
    left: -8.5px;
    display: inline-block;
    padding: 5px;
    border: solid ${COLORS[400]};
    border-width: 0 2px 2px 0;
    position: relative;
    cursor: pointer;
    transform: rotate(45deg);
    -webkit-transform: rotate(45deg);
  }
  .marginBottomSelectorX.selected{
    border-color: ${COLORS[300]};
  }
`,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { selected, ...remainingProps } = props;
    const className = classNames({
      marginBottomSelectorX: true,
      selected: selected ? true : false
    });
    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const MarginRightSelector = createComponent(
  `
  .marginRightSelectorX {
    left: 36px;
    top: 25.5px;
    display: inline-block;
    padding: 5px;
    border:solid ${COLORS[400]};
    border-width: 0 2px 2px 0;
    position: relative;
    cursor: pointer;
    transform: rotate(-45deg);
    -webkit-transform: rotate(-45deg);
  }
  .marginRightSelectorX.selected{
    border-color: ${COLORS[300]};
  }
`,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { selected, ...remainingProps } = props;
    const className = classNames({
      marginRightSelectorX: true,
      selected: selected ? true : false
    });
    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const MarginLock = createComponent(
  `
  .marginLockX {
    left: 9px;
    top: -8px;
    border: 1px solid ${COLORS[400]};
    border-radius: 3px;
    height: 50px;
    width: 50px;
    display: inline-flex;
    position: relative;
    justify-content: center;
    align-items: center;
    cursor: pointer;
  }
`,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { selected, ...remainingProps } = props;
    const className = classNames({
      marginLockX: true
    });
    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

export {
  MarginLayout,
  MarginLock,
  MarginTopSelector,
  MarginLeftSelector,
  MarginRightSelector,
  MarginBottomSelector
};
