import * as React from "react";
import * as classNames from "classnames";
import COLORS, { secondary } from "./constants/COLORS";
import Background from "./types/BackgroundPropType";
import createComponent from "../createComponent";
import { isNil } from "lodash";
import ReactDOM from "react-dom";

interface PropType extends Background {
  min?: number;
  max?: number;
  value?: number;
  onMouseUp?: (e: any) => void;
  onMouseDown?: (e: any) => void;
  onMouseMove?: (e: any) => void;
  onChange?: any;
  step?: number;
  style?: any;
}

const Slider = createComponent(
  `
  .slider {
    -webkit-appearance: none;
    width: 95%;
    margin-top: -1px;
    height: 3px;
    border-radius: 3px;
    outline: none;
  }
  .slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: ${COLORS[300]};
    cursor: pointer;
  }
  .slider::-webkit-slider-thumb:active{ background: ${COLORS[200]};}
  .slider::-moz-range-thumb:active{ background: ${COLORS[200]};}
  .slider::-moz-range-thumb {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: ${COLORS[300]};
    cursor: pointer;
  }
  `,
  (props: PropType & React.HTMLProps<HTMLInputElement>) => {
    const className = classNames({
      slider: true
    });
    let range =
      !isNil(props.max) && !isNil(props.min) ? props.max - props.min : 100;
    return (
      <input
        type="range"
        {...props}
        className={className + (props.className ? " " + props.className : "")}
        style={{
          position: "absolute",
          opacity: props.disabled ? 0.5 : 1,
          backgroundImage: `-webkit-gradient(linear, left top, right top, color-stop(${(props.value ||
            0) / range}, ${secondary[900]}), color-stop(${(props.value || 0) /
            range}, ${COLORS[400]}))`
        }}
      />
    );
  }
);

// export default Slider;

export default class SliderComponent extends React.Component<
  PropType & React.HTMLProps<HTMLInputElement>,
  any
> {
  componentDidMount() {
    const x = ReactDOM.findDOMNode(this);
    (x as HTMLInputElement).onfocus = () => {
      // @ts-ignore
      x.blur();
    };
  }

  render() {
    return <Slider {...this.props} />;
  }
}
