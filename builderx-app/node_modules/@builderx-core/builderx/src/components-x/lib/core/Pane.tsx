import COLORS from "./constants/COLORS";
import Background from "./types/BackgroundPropType";
import Color from "./types/ColorPropType";
import Size from "./types/SizePropType";
import createComponent from "../createComponent";
import * as classNames from "classnames";
import * as React from "react";

interface PropType extends Background, Color, Size {
  contentCenter?: boolean;
  scrollable?: boolean;
  scrollableHorizontally?: boolean;
  scrollableVertically?: boolean;
  padder?: string;
  draggable?: boolean;
  height?: number | string;
  overflowNone?: boolean;
  paddingLeft?: number;
  paddingRight?: number;
  padding?: number;
  onKeyPress?: any;
  noBackground?: boolean;
}

const padders = {
  xl: "100px 60px",
  l: "30px 100px",
  m: "50px",
  s: "40px",
  xs: "15px"
};

/////////////////////////////////////

export default createComponent(
  `
.paneX {
  flex-grow: 1;
  user-select: none;
  text-align: left;
  -webkit-app-region: no-drag;
  overflow-y: hidden;
  overflow-x: hidden;
}

.paneX input[type="button"],
.paneX input[type="text"],
.paneX button,
.paneX textarea {
  -webkit-app-region: no-drag;
}

.paneX.contentCenter{
  text-align: center;
}

.paneX.draggable{
  -webkit-app-region: drag;
}

.paneX.scrollable {
  overflow-y: scroll;
}

.paneX.overflowNone {
  overflow-y: visible;
  overflow-x: visible;
}

.paneX.scrollableHorizontally {
  overflow-x: scroll;
}
`,
  React.forwardRef(
    (props: PropType & React.HTMLProps<HTMLDivElement>, ref: any) => {
      const {
        uiBackground,
        paddingLeft,
        paddingRight,
        padding,
        uiColor,
        scrollable,
        padder,
        overflowNone,
        height,
        contentCenter,
        draggable,
        scrollableHorizontally,
        className,
        noBackground,
        ...remainingProps
      } = props;
      const className2 = classNames({
        paneX: true,
        contentCenter: contentCenter ? true : false,
        draggable: draggable ? true : false,
        scrollable: scrollable ? true : false,
        overflowNone: overflowNone ? true : false,
        scrollableHorizontally: scrollableHorizontally ? true : false
      });
      return (
        <div
          ref={ref}
          {...remainingProps}
          style={{
            ...remainingProps.style,
            ...(noBackground
              ? {}
              : {
                  background: uiBackground ? COLORS[uiBackground] : COLORS[500]
                }),
            color: uiColor ? COLORS[uiColor] : COLORS[50],
            height: height ? height : "100%",
            padding: padder ? padders[padder] : 0,
            paddingLeft: paddingLeft ? paddingLeft : "",
            paddingRight: paddingRight ? paddingRight : ""
          }}
          className={className2 + " " + className}
        />
      );
    }
  )
);
