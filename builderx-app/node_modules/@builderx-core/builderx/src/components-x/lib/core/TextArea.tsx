import styled from "styled-components";
import COLORS from "./constants/COLORS";
import Background from "./types/BackgroundPropType";
import Size from "./types/SizePropType";
import createComponent from "../createComponent";
import * as classNames from "classnames";
import * as React from "react";

interface PropType extends Background, Size {
  centered?: boolean;
  marginInput?: boolean;
  rows?: any;
  cols?: any;
  scroll?: boolean;
  fontFamily?: string;
  padding?: any;
}
const uiSizes = {
  xxl: 95,
  xl: 70,
  l: 35,
  s: 22
};

// export default styled.textarea<PropType & React.HTMLProps<HTMLTextAreaElement>>`
//   background: ${(props: PropType) =>
//     props.uiBackground ? COLORS[props.uiBackground] : COLORS[600]};
//   color: ${COLORS[300]};
//   border: none;
//   border-radius: 2px;
//   height: ${(props: any) => (props.uiSize ? uiSizes[props.uiSize] : "")}px;
//   width: 100%;
//   font-size: 14px;
//   padding: ${(props: any) => (props.padding ? props.padding : "8px 5px")};
//   outline: none;
//   ::-webkit-outer-spin-button,
//   ::-webkit-inner-spin-button {
//     -webkit-appearance: none;
//     margin: 0;
//   }
//   font-family: ${(props: any) => (props.fontFamily ? props.fontFamily : "")};
//   resize: none;
//   overflow: ${(props: any) => (props.scroll ? "scroll" : "hidden")};
//   text-align: ${(props: PropType) => (props.centered ? "center" : "none")};
//   margin: ${(props: PropType) => (props.marginInput ? "15px 0px" : "0px")};
//   ::-webkit-input-placeholder {
//     color: ${COLORS[400]};
//     font-size: 12px;
//   }
// `;

export default createComponent(
  `
  .textAreaX {
    border: none;
    border-radius: 2px;
    width: 100%;
    font-size: 14px;
    outline: none;
    resize: none;
    oveflow: hidden;
    text-align: none;
    color: ${COLORS[300]};
    margin: 0px;


  }
  .textAreaX::-webkit-outer-spin-button,
  .textAreaX::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0px;
  }
  .textAreaX::-webkit-input-placeholder {
    font-size: 12px;
    color: ${COLORS[400]};
  }
  .textAreaX.marginInput {
    margin: 15px 0px;
  }
  .textAreaX.scroll {
    overflow: scroll;
  }
  .textAreaX.centered {
    text-align: center;
  }

}
`,

  React.forwardRef(
    (props: PropType & React.HTMLProps<HTMLTextAreaElement>, ref: any) => {
      const {
        uiSize,
        uiBackground,
        centered,
        marginInput,
        scroll,
        fontFamily,
        padding,
        ...remainingProps
      } = props;

      const className = classNames({
        textAreaX: true,
        centered: centered ? true : false,
        marginInput: marginInput ? true : false,
        scroll: scroll ? true : false
      });

      return (
        <textarea
          {...remainingProps}
          style={{
            ...remainingProps.style,
            background: uiBackground ? COLORS[uiBackground] : COLORS[600],
            height: uiSize ? uiSizes[uiSize] : "auto",
            padding: padding ? padding : "8px 5px",
            fontFamily: fontFamily
          }}
          className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
          ref={ref}
        />
      );
    }
  )
);
