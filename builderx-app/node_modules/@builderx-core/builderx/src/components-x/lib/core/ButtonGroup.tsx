import styled from "styled-components";
import COLORS from "./constants/COLORS";
import Size from "./types/SizePropType";
import createComponent from "../createComponent";
import * as classNames from "classnames";
import * as React from "react";

interface PropType extends Size {
  contentRight?: boolean;
  flexWrap?: boolean;
  paddingRight?: number;
  bordered?: boolean;
}

const uiSizes = {
  l: 40,
  m: 35,
  s: 30,
  xs: 23,
  xl: "auto"
};
export default createComponent(
  `
  .buttonGroupX {
    display:flex;
    justify-content:flex-start;
    align-items: center;
    width: 100%;
    flex: 1;
  }
  .buttonGroupX.flexWrap{
    flex-wrap:"wrap";
  }
  .buttonGroupX.contentRight{
    justify-content:flex-end;
  }
  .buttonGroupX.bordered{
    border:1px solid ${COLORS[800]};
    border-radius: 2px;
  }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      uiSize,
      contentRight,
      flexWrap,
      paddingRight,
      bordered,
      ...remainingProps
    } = props;

    const className = classNames({
      buttonGroupX: true,
      contentRight: contentRight ? true : false,
      flexWrap: flexWrap ? true : false,
      bordered: bordered ? true : false
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          height: uiSize
            ? uiSize === "xl"
              ? uiSizes[uiSize]
              : uiSizes[uiSize]
            : uiSizes["m"],
          paddingRight: paddingRight ? paddingRight : ""
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
