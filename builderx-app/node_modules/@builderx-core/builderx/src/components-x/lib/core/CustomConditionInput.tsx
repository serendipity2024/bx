import Icon from "./Icon";
import InputGroupInput from "./InputGroupInput";
import InputGroup from "./InputGroup";
import InputGroupRight from "./InputGroupRight";
import InputGroupLeft from "./InputGroupLeft";
import * as React from "react";

export default class CustomConditionInput extends React.Component<
  {
    inputProps?: any;
    onViewClick?: () => void;
    onDeleteClick?: () => void;
    disabled?: boolean;
    isActive?: boolean;
  },
  any
> {
  render() {
    return (
      <InputGroup uiBackground={700} disabled={this.props.disabled}>
        <InputGroupLeft
          paddingLeft
          width="15%"
          onClick={
            this.props.disabled
              ? () => {
                  return;
                }
              : this.props.onViewClick
          }
        >
          <Icon
            name={this.props.isActive ? "show_layer" : "hide_layer"}
            size={14}
          />
        </InputGroupLeft>
        /* TODO: replace these with actual undo/redo functions */
        <InputGroupInput
          undo={() => {}}
          redo={() => {}}
          {...this.props.inputProps}
          disabled={this.props.disabled}
        />
        {/* <InputGroupRight
          width="auto"
          paddingRight
          onClick={
            this.props.disabled
              ? () => {
                  return;
                }
              : this.props.onDeleteClick
          }
        >
          <Icon
            // onClick={this.props.onClick}
            name="delete-record"
            size={10}
          />
        </InputGroupRight> */}
      </InputGroup>
    );
  }
}
{
  /* <InputGroup uiBackground={600} disabled={this.props.disabled}>
        <InputGroupLeft
          paddingLeft
          width="15%"
          onClick={
            this.props.disabled ? (
              () => {
                return;
              }
            ) : (
                this.props.onViewClick
              )
          }
        >
          <Icon
            name={this.props.isActive ? "show_layer" : "hide_layer"}
            size={14}
          />
        </InputGroupLeft>
        <InputGroupInput undo={this.props.session.commandManager.undo} redo={this.props.session.commandManager.redo}
          {...this.props.inputProps}
          disabled={this.props.disabled}
        />
        <InputGroupRight
          width="auto"
          paddingRight
        >
          <FormRow>
            <Button
              transparent
              onClick={() => {
                this.props.onRecordClick;
              }}
              tooltip={
                <TooltipText uiSize="m" position="right">
                  {!this.props.disabled ? (
                    `Record for ${this.props.inputProps.value}`
                  ) : (
                      "Stop Recording"
                    )}
                </TooltipText>
              }
            >
              <Icon
                name={this.props.disabled ? "pause-record" : "record"}
                size={10}
              />
            </Button>
            <Icon
              onClick={
                this.props.disabled ? (
                  () => {
                    return;
                  }
                ) : (
                    this.props.onDeleteClick
                  )
              }
              name="delete-record"
              size={10}
            />
          </FormRow>
        </InputGroupRight>
      </InputGroup> */
}
