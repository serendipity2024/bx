import styled from "styled-components";
import COLORS from "./constants/COLORS";
import Color from "./types/ColorPropType";
import Size from "./types/SizePropType";
import * as React from "react";
import createComponent from "../createComponent";
import * as classNames from "classnames";
interface PropType extends Size, Color {
  paddingTop?: number;
  uiSpace?: string;
  textAlign?: string;
}
const uiSize = {
  l: 16,
  m: 13,
  s: 12,
  xs: 11
};
export default createComponent(
  `
  .paragraphX{
   font-size: 12px;
   letter-spacing: -0.27px;
  font-family: Roboto, -apple-system, BlinkMacSystemFont, sans-serif;
  font-weight: 400;
  line-height: 1.7em;
  align-self: center;
  text-overflow: ellipsis;
  white-spacing: no-wrap;

  }
  `,
  (
    props: PropType &
      React.DetailedHTMLProps<
        React.HTMLAttributes<HTMLDivElement>,
        HTMLDivElement
      >
  ) => {
    const { uiColor, ...remainingProps } = props;

    const className = classNames({
      paragraphX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          color: uiColor ? COLORS[uiColor] : COLORS[300],
          // TODO: revisit this
          textAlign: props.textAlign ? (props.textAlign as any) : ""
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

///////////////////////////////////////////
// export default styled.div<PropType & React.HTMLProps<HTMLDivElement>>`
//   font-size: 12px;
//   color: ${(props: any) =>
//     props.uiColor ? COLORS[props.uiColor] : COLORS[300]};

//   letter-spacing: -0.27px;
//   font-family: -apple-system, BlinkMacSystemFont, sans-serif;
//   font-weight: 400;
//   line-height: 1.7em;
//   align-self: center;
//   text-overflow: ellipsis;
//   white-spacing: no-wrap;
//   text-align: ${(props: any) => (props.textAlign ? props.textAlign : "")};
// `;

////////////////////////////////////////////
