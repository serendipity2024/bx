import COLORS from "./constants/COLORS";
import BackgroundPropType from "./types/BackgroundPropType";
import Size from "./types/SizePropType";
import Colors from "./types/ColorPropType";
import * as React from "react";
import ReactTooltip from "react-tooltip";

import createComponent from "../createComponent";

interface PropType extends Size, Colors, BackgroundPropType {
  fontSize?: number;
  position?: string;
  dependant?: boolean;
  disabled?: boolean;
  inButton?: boolean;
}
const TooltipText = createComponent(
  `
  .tooltipX {
    width: 120px;
    letter-spacing: -0.27px;
    font-family: Roboto, -apple-system, BlinkMacSystemFont, sans-serif;
    font-weight: 700;
    line-height: 1.4;
    word-spacing: 0.5px;
    align-self: center;
    color: ${COLORS[300]};
    text-align: center;
    border-radius: 6px;
    white-spacing: no-wrap;
    padding: 8px;
    background-color: #000 !important;
  }
  .tooltipX.place-bottom::after{
    border-bottom-color: #000 !important;
  }
  .tooltipX.place-top::after{
    border-top-color: #000 !important;
  }
  .tooltipX.place-left::after{
    border-left-color: #000 !important;
  }
  .tooltipX.place-right::after{
    border-right-color: #000 !important;
  }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      uiSize,
      uiBackground,
      disabled,
      children,
      ...remainingProps
    } = props;

    // if (!disabled) {
    //   let child;
    //   let childCount = React.Children.count(children);
    //   if (children && childCount > 0) {
    //     if (childCount === 1) {
    //       child = React.cloneElement(
    //         <div />,
    //         { className: "tooltipX" },
    //         children[0]
    //       );
    //     } else {
    //       if (children[0].type && children[0].type.name === "Icon") {
    //         child = React.createElement(
    //           "div",
    //           { className: "tooltipX" },
    //           ...children[0],
    //           ...children[childCount - 1]
    //         );
    //       } else {
    //         child = React.cloneElement(
    //           children[0],
    //           { className: "tooltipX" },
    //           ...children[0].props.children,
    //           ...children[childCount - 1]
    //         );
    //       }
    //     }
    //     return child;
    //   }
    // }
    return null;
  }
);

class Tooltip extends React.Component<{}, {}> {
  render() {
    return (
      <>
        <ReactTooltip
          effect="solid"
          place="bottom"
          multiline
          className="tooltipX"
        />
        <ReactTooltip
          effect="solid"
          place="top"
          id="tooltip-top"
          multiline
          className="tooltipX"
        />
        <ReactTooltip
          effect="solid"
          place="right"
          id="tooltip-right"
          multiline
          className="tooltipX"
        />
        <ReactTooltip
          effect="solid"
          place="bottom"
          id="tooltip-bottom"
          multiline
          className="tooltipX"
        />
        <ReactTooltip
          effect="solid"
          place="left"
          id="tooltip-left"
          multiline
          className="tooltipX"
        />
      </>
    );
  }
}

export { Tooltip, TooltipText };
