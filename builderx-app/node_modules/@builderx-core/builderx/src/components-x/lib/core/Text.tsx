import COLORS, { DANGER } from "./constants/COLORS";
import Color from "./types/ColorPropType";
import Size from "./types/SizePropType";
import createComponent from "../createComponent";
import * as classNames from "classnames";
import * as React from "react";

interface PropType extends Size, Color {
  paddingTop?: number;
  paddingLeft?: number;
  uiSpace?: string;
  textAlign?: string;
  bold?: boolean;
  inline?: boolean;
  inactive?: boolean;
  smooth?: boolean;
  uppercase?: boolean;
  letterSpacing?: boolean;
  fontWeight?: any;
  danger?: boolean;
}

const uiSizes = {
  xl: 20,
  xxl: 24,
  l: 18,
  m: 16,
  s: 14,
  xs: 12
};

export default createComponent(
  `
  .textX {
    font-family: Roboto, -apple-system, BlinkMacSystemFont, sans-serif;
    font-weight: 400;
    align-self: center;
    text-overflow: ellipsis;
    letter-spacing: -0.27px;
    opacity: 1;
  }
  .textX.bold {
    font-weight: bold;
  }
  .textX.inline {
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: no-wrap;
  }
  .textX.inactive {
    opacity: 0.6;
  }
  .textX.smooth {
    -webkit-font-smoothing: antialiased;
  }
  .textX.uppercase {
    text-transform: uppercase;
  }
  .textX.letterSpacing {
    letter-spacing: 0.05em;
  }
`,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      uiSize,
      uiColor,
      paddingTop,
      paddingLeft,
      uiSpace,
      textAlign,
      bold,
      inline,
      inactive,
      smooth,
      uppercase,
      letterSpacing,
      fontWeight,
      danger,
      ...remainingProps
    } = props;

    const className = classNames({
      textX: true,
      bold: bold ? true : false,
      inline: inline ? true : false,
      inactive: inactive ? true : false,
      smooth: smooth ? true : false,
      uppercase: uppercase ? true : false,
      letterSpacing: letterSpacing ? true : false
    });
    return (
      <div
        {...remainingProps}
        style={{
          fontSize: uiSize ? uiSizes[uiSize] + "px" : uiSizes["s"] + "px",
          color: danger
            ? DANGER
            : typeof uiColor !== "undefined"
            ? COLORS[uiColor]
            : COLORS[300],
          lineHeight: `calc(${
            uiSize ? uiSizes[uiSize] + "px" : uiSizes["s"] + "px"
          }+3px)`,
          textAlign: textAlign ? (textAlign as any) : "",
          paddingTop: paddingTop ? paddingTop : "",
          paddingLeft: paddingLeft ? paddingLeft : "",
          fontWeight: fontWeight ? fontWeight : undefined,
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
