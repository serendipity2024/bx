import * as React from "react";
import Icon from "../Icon";
import InputGroupInput from "../InputGroupInput";
import InputGroup from "../InputGroup";
import InputGroupRight from "../InputGroupRight";
import InputGroupLeft from "../InputGroupLeft";
import Button from "../Button";

const uiSizes = {
  xxl: 20,
  xl: 18,
  l: 16,
  m: 14,
  s: 12,
  xs: 10
};

type propType = {
  inputProps: any;
  onClick: () => void;
  recordClick?: (e: any) => void;
  recordState?: boolean;
  disabled?: boolean;
  leftGroupIcon?: any;
  uiBackground?: any;
  uiSize?: string;
  readOnly?: boolean;
  isOpen?: boolean;
  width?: string;
  noCursor?: boolean;
  setParentRef?: any;
  onFocus?: (e: any) => void;
};
export default class InputDropdown extends React.Component<propType, any> {
  hover: boolean = false;
  inputRef: any;
  componentDidMount() {
    if (this.inputRef) {
      this.inputRef.addEventListener("keyup", (event: any) => {
        if (event.keyCode === 13) {
          this.inputRef.blur();
        }
      });
    }
  }
  render() {
    return (
      <InputGroup
        uiBackground={this.props.uiBackground ? this.props.uiBackground : 700}
        disabled={this.props.disabled}
        onMouseEnter={() => {
          this.hover = true;
          this.forceUpdate();
        }}
        onMouseLeave={() => {
          this.hover = false;
          this.forceUpdate();
        }}
      >
        <InputGroupLeft width="100%" paddingLeft>
          {this.props.leftGroupIcon ? this.props.leftGroupIcon : null}
          <InputGroupInput
            ref={(c: any) => {
              this.inputRef = c;
              if (this.props.setParentRef) {
                this.props.setParentRef(c);
              }
            }}
            onFocus={this.props.onFocus}
            noCursor={this.props.noCursor}
            width={this.props.width ? this.props.width : ""}
            readOnly={this.props.readOnly}
            uiSize={this.props.uiSize}
            isDropdown
            {...this.props.inputProps}
            disabled={this.props.disabled}
            onClick={
              this.props.disabled
                ? () => {
                    return;
                  }
                : this.props.onClick
            }
            style={{ borderWidth: 0 }}
          />
        </InputGroupLeft>
        <InputGroupRight
          width="auto"
          paddingRight
          style={{ display: "flex", alignItems: "center" }}
        >
          {this.hover && (this.props.recordState || this.props.recordClick) && (
            <Button
              transparent
              onClick={this.props.recordClick}
              icon={
                <Icon
                  name={this.props.recordState ? "pause-record" : "record"}
                  size={
                    this.props.uiSize
                      ? uiSizes[this.props.uiSize]
                      : uiSizes["s"]
                  }
                />
              }
            />
          )}
          <Icon
            onClick={() => {
              if (this.props.disabled) {
                return;
              }
              this.props.onClick();
              if (this.inputRef && this.inputRef.current) {
                this.inputRef.current.focus();
              }
            }}
            name={!this.props.isOpen ? "downarrow" : "uparrow"}
            size={
              this.props.uiSize ? uiSizes[this.props.uiSize] - 2 : uiSizes["s"]
            }
          />
        </InputGroupRight>
      </InputGroup>
    );
  }
}
