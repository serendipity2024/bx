import styled from "styled-components";
import COLORS, { secondary as SECONDARY } from "./constants/COLORS";
import Background from "./types/BackgroundPropType";
import Size from "./types/SizePropType";
import * as React from "react";
import * as classNames from "classnames";
import createComponent from "../createComponent";

interface PropType extends Background, Size {
  selected?: boolean;
  first?: boolean;
  secondaryBackground?: boolean;
  disabled?: boolean;
}

const uiSizes = {
  l: 40,
  m: 35,
  s: 26,
  xs: 18
};
export default createComponent(
  `
  .tabX {
    background: transparent;
    border-right: 0px;
    border-left: 0px;
    font-size: 11px;
    color: ${COLORS[300]};
    letter-spacing: -0.27px;
    align-items: center;
    display: flex;
    padding: 0 20px;
    font-weight: 400;
    cursor: pointer;
    height: 26px;
  }

  .tabX:hover{
    background: ${COLORS[500]};
  }

  .tabX:active {
    background: ${COLORS[600]};
    border-left: 0px;
    border-right: none;
    font-weight: 600;
  }

  .tabX:focus {
    background: ${COLORS[600]};
    border-left: 0px;
    border-right: none;
    font-weight: 500;
  }

  .tabX.first {
    padding: 0px 20px;
  }

  .tabX.selected{
    font-weight: 600;
    background: ${COLORS[600]};
  }

  .tabX.disabled{
    font-weight: 400;
    background: ${COLORS[600]};
    opacity: 0.5;
  }

  .tabX.secondaryBackground{
    font-weight: 400;
    background: ${SECONDARY[600]};
  }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      uiBackground,
      uiSize,
      first,
      selected,
      disabled,
      secondaryBackground,
      ...remainingProps
    } = props;

    const className = classNames({
      tabX: true,
      first: first ? true : false,
      selected: selected ? true : false,
      disabled: disabled ? true : false,
      secondaryBackground: selected && secondaryBackground ? true : false
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
