import * as React from "react";
import COLORS from "./constants/COLORS";
import Background from "./types/BackgroundPropType";
import * as classNames from "classnames";
import createComponent from "../createComponent";

interface PropType extends Background {
  selected?: boolean;
  vertical?: boolean;
  horizontal?: boolean;
  disabled?: boolean;
  onClick?: any;
}

const Layout = createComponent(
  `
  .layoutX {
    background: ${COLORS[700]};
    height: 88px;
    width: 100%;
    border: 1px solid ${COLORS[900]};
    border-radius: 2px;
    padding: 3px;
    outline: none;
    position: relative;
    cursor: pointer;
   }
   .layoutX:hover span {
    visibility: visible;
  }
   .layoutX.selected
   {
     background: ${COLORS[600]}
   }
   .layoutX.disabled{
     cursor: not-allowed;
   }
  `,
  (props: PropType & React.HTMLProps<HTMLButtonElement>) => {
    const {
      uiBackground,
      selected,
      vertical,
      horizontal,
      disabled,
      ...remainingProps
    } = props;

    const className = classNames({
      layoutX: true,
      vertical: vertical ? true : false
    });
    return (
      <button
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
const Box = createComponent(
  `
  .boxX {
    height: 52px;
    width: 71px;
    border: 1px dashed ${COLORS[300]};
    border-radius: 3px;
    margin: 14px 16px;
   }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      uiBackground,
      selected,
      vertical,
      horizontal,
      disabled,
      ...remainingProps
    } = props;

    const className = classNames({
      boxX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const DashedLine = createComponent(
  `
  .dashedLineX {
    height: 1px;
    width: auto;
    position: relative;
    border-bottom: 1px dashed ${COLORS[300]};
    top: 50%;
   }
   .dashedLineX.vertical{
    height: 50px;
    margin-top: -24px;
    border-right: 1px dashed ${COLORS[300]};
    width: 1px;
    left: 50%;
   }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      uiBackground,
      selected,
      vertical,
      horizontal,
      disabled,
      ...remainingProps
    } = props;

    const className = classNames({
      dashedLineX: true,
      selected: selected ? true : false,
      vertical: vertical ? true : false,
      horizontal: horizontal ? true : false,
      disabled: disabled ? true : false
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
export default class LayoutButton extends React.Component<PropType, any> {
  render() {
    const { vertical, horizontal, selected, ...otherProps } = this.props;
    return (
      <Layout selected={selected} {...otherProps}>
        <Box>
          <DashedLine vertical={vertical} horizontal={horizontal} />
        </Box>
      </Layout>
    );
  }
}
