import * as React from "react";
import styled from "styled-components";
import Button from "./Button";
import COLORS, { secondary } from "./constants/COLORS";
import Icon from "./Icon";
import Text from "./Text";
import Background from "./types/BackgroundPropType";

import createComponent from "../createComponent";
import * as classNames from "classnames";
interface PropType extends Background {
  top?: number;
  left?: number;
  right?: number;
  bottom?: number;
  width?: number;
  height?: number;
}
const OverlayContainer = createComponent(
  `
  .overlayContainerX {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: 20000;
   }

  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      width,
      height,
      top,
      left,
      right,
      bottom,
      uiBackground,
      ...remainingProps
    } = props;

    const className = classNames({
      overlayContainerX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
// const OverlayContainer = styled.div<PropType & React.HTMLProps<HTMLDivElement>>`
//   position: absolute;
//   top: 0;
//   bottom: 0;
//   left: 0;
//   right: 0;
//   z-index: 20000;
// `;
const Overlay = createComponent(
  `
  .overlayX {
    position: absolute;
    z-index: 20000;
  border: 1px solid ${secondary[400]};
  outline: rgba(0, 0, 0, 0.6) solid 10000px;
   }

  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      width,
      height,
      top,
      left,
      right,
      bottom,
      uiBackground,
      ...remainingProps
    } = props;

    const className = classNames({
      overlayX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          top: top ? top + "px" : "",
          bottom: bottom ? bottom + "px" : "",
          left: left ? left + "px" : "",
          right: right ? right + "px" : "",
          width: width ? width + "px" : "",
          height: height ? height + "px" : ""
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
// const Overlay = styled.div<PropType & React.HTMLProps<HTMLDivElement>>`
//   position: absolute;
//   top: ${(props: PropType) => (props.top ? props.top : "")}px;
//   bottom: ${(props: PropType) => (props.bottom ? props.bottom : "")}px;
//   left: ${(props: PropType) => (props.left ? props.left : "")}px;
//   right: ${(props: PropType) => (props.right ? props.right : "")}px;
//   z-index: 20000;
//   border: 1px solid ${secondary[400]};
//   outline: rgba(0, 0, 0, 0.6) solid 10000px;
//   width: ${(props: WrapperPropType) => (props.width ? props.width : "")}px;
//   height: ${(props: WrapperPropType) => (props.height ? props.height : "")}px;
// `;
const OverlayBox = createComponent(
  `
  .overlayBoxX {
    position: absolute;
    z-index: 20000;
   }

  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      width,
      height,
      top,
      left,
      right,
      bottom,
      uiBackground,
      ...remainingProps
    } = props;

    const className = classNames({
      overlayBoxX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,

          width: width ? width + "px" : "300px",
          height: height ? height + "px" : ""
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
// const Box = styled.div<PropType & React.HTMLProps<HTMLDivElement>>`
//   position: absolute;

//   width: ${(props: WrapperPropType) => (props.width ? props.width : 300)}px;
//   height: ${(props: WrapperPropType) => (props.height ? props.height : "")}px;
//   z-index: 20000;
// `;
const Content = createComponent(
  `
  .contentX {

    z-index: 20000;

    border-radius: 5px;
    padding: 12px;
    display: block;
    align-item: center;
   }

  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      width,
      height,
      top,
      left,
      right,
      bottom,
      uiBackground,
      ...remainingProps
    } = props;

    const className = classNames({
      contentX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          background: uiBackground ? COLORS[uiBackground] : COLORS[700]
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
// const Content = styled.div<PropType & React.HTMLProps<HTMLDivElement>>`
//   background: ${(props: WrapperPropType) =>
//     props.uiBackground ? COLORS[props.uiBackground] : COLORS[700]};
//   z-index: 20000;
//   border-radius: 5px;
//   padding: 12px;
//   display: block;
//   align-item: center;
//   // box-shadow: 0px 0px 4px ${COLORS[700]};
// `;
interface WrapperPropType extends PropType {
  x?: number;
  y?: number;
  width?: number;
  height?: number;
  message?: string;
  messageHeader?: string;
  position?: string;
  arrowDirection?: string;
  onButtonClick?: any;
}
class OverlayModalBox extends React.Component<WrapperPropType, any> {
  getStyle() {
    if (this.props.arrowDirection === "es") {
      return {
        arrowPos: {
          position: "absolute",
          transform: "rotate3d(0, 1, 0.2, 123rad)",
          top: -55,
          right: -22
        }
      };
    } else if (this.props.arrowDirection === "en") {
      return {
        arrowPos: {
          position: "absolute",
          transform: "rotate(180deg)",
          bottom: -80,
          right: -22
        }
      };
    } else if (this.props.arrowDirection === "se") {
      return {
        arrowPos: {
          position: "absolute",
          transform: "rotate(270deg)",
          bottom: -20,
          left: -55
        }
      };
    } else if (this.props.arrowDirection === "ws") {
      return {
        arrowPos: {
          position: "absolute",
          top: -55,
          left: -20
        }
      };
    } else {
      return {
        arrowPos: {
          position: "absolute",
          top: -55,
          left: -20
        }
      };
    }
  }
  render() {
    return (
      <OverlayBox {...this.props}>
        <Icon
          name="arrow-tutorial"
          size={50}
          style={this.getStyle().arrowPos}
        />
        <Content uiBackground={this.props.uiBackground}>
          <Text style={{ paddingBottom: 8, fontWeight: 500 }}>
            {this.props.messageHeader}
          </Text>
          <Text uiSize="xs">{this.props.message}</Text>
        </Content>
        <Button
          style={{
            position: "absolute",
            right: 0,
            marginTop: 5,
            paddingLeft: 12,
            paddingRight: 12,
            borderRadius: 1,
            backgroundColor: "#1FB2CC"
          }}
          onClick={this.props.onButtonClick}
        >
          <Text style={{ color: "#FFF" }}>Got it</Text>
        </Button>
      </OverlayBox>
    );
  }
}
export { OverlayContainer, OverlayModalBox, Overlay };
