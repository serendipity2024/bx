import * as React from "react";
import Scrollbars from "react-custom-scrollbars";

interface PropType {
  onScroll?: (e: any) => void;
  style?: Object;
  autoHide?: boolean;
  autoHeight?: boolean;
  noScroll?: boolean;
  forwardRef?: any;
}
class CustomScrollbar extends React.Component<PropType, any> {
  renderThumbHorizontal(style?: any, props?: any) {
    let appliedProps = { ...props };
    delete appliedProps["forwardRef"];
    const some = {
      backgroundColor: "rgba(0,0,0,0.5)",
      height: 8,
      borderWidth: 1,
      borderColor: "rgba(255,255,255,0.2)",
      borderStyle: "solid",
      borderRadius: 5
    };
    return (
      <div
        {...appliedProps}
        className="thumb-horizontal"
        style={{ ...style, ...some }}
      />
    );
  }
  renderThumbVertical(style?: any, props?: any) {
    let appliedProps = { ...props };
    delete appliedProps["forwardRef"];
    const some = {
      backgroundColor: "rgba(0,0,0,0.5)",
      width: 8,
      borderWidth: 1,
      borderColor: "rgba(255,255,255,0.2)",
      borderStyle: "solid",
      borderRadius: 5
    };
    return (
      <div
        {...appliedProps}
        style={{
          ...style,
          ...some
        }}
      />
    );
  }
  render() {
    let appliedProps = { ...this.props };
    delete appliedProps["forwardRef"];
    return (
      <Scrollbars
        renderThumbHorizontal={this.renderThumbHorizontal}
        renderThumbVertical={this.renderThumbVertical}
        ref={this.props.forwardRef}
        {...appliedProps}
      />
    );
  }
}

const WrappedSCrollbarComponent: any = React.forwardRef(
  (props: PropType, ref: any) => {
    return <CustomScrollbar {...props} forwardRef={ref} />;
  }
);

export default WrappedSCrollbarComponent;
