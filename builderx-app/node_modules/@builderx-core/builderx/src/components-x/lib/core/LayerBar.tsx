import COLORS, { secondary } from "./constants/COLORS";
import Background from "./types/BackgroundPropType";
import Size from "./types/SizePropType";
import createComponent from "../createComponent";
import * as classNames from "classnames";
import * as React from "react";

interface PropType extends Background, Size {
  sublayer?: boolean;
  header?: boolean;
  selected?: boolean;
  hover?: boolean;
  dragHoverInside?: boolean;
  dragHoverBefore?: boolean;
  dragHoverAfter?: boolean;
  dragHoverParent?: boolean;
  transparent?: boolean;
  level?: number;
}

const uiSizes = {
  l: 40,
  m: 35,
  s: 30,
  xs: 26,
  xl: "auto"
};

export default createComponent(
  `
  .layerBarX {
    display: flex;
  align-items: center;
  padding: 0 5px 0 20px;
  cursor: pointer;
  }
  `,
  React.forwardRef(
    (props: PropType & React.HTMLProps<HTMLDivElement>, ref: any) => {
      const {
        uiSize,
        uiBackground,
        dragHoverInside,
        hover,
        selected,
        header,
        level,
        transparent,
        sublayer,
        dragHoverAfter,
        dragHoverBefore,
        dragHoverParent,
        ...remainingProps
      } = props;

      const className = classNames({
        layerBarX: true,
        dragHoverInside: dragHoverInside ? true : false,
        hover: hover ? true : false,
        selected: selected ? true : false,
        header: header ? true : false,
        transparent: transparent ? true : false,
        sublayer: sublayer ? true : false
      });

      return (
        <div
          {...remainingProps}
          style={{
            ...remainingProps.style,
            background: selected
              ? COLORS[600]
              : hover
              ? COLORS[700]
              : uiBackground
              ? COLORS[uiBackground]
              : "transparent",
            height: uiSize ? uiSizes[uiSize] : uiSizes["s"] + "px",
            paddingLeft: level ? 20 + level * 17 + "px" : undefined
          }}
          className={
            className +
            (remainingProps.className ? " " + remainingProps.className : "")
          }
          ref={ref}
        />
      );
    }
  )
);
