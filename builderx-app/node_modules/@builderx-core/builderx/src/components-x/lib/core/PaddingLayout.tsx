import styled from "styled-components";
import COLORS from "./constants/COLORS";
import Background from "./types/BackgroundPropType";
import * as React from "react";
import createComponent from "../createComponent";
import * as classNames from "classnames";

interface PropType extends Background {
  selected?: boolean;
  locked?: boolean;
}
const PaddingLayout = createComponent(
  `
  .paddingLayoutX {
    height: 75px;
    width: 75px;
    border: 1px solid ${COLORS[400]};
    border-radius: 3px;
    padding: 0px 3px;
    background:${COLORS[700]};
  }
  .paddingLayoutX.selected{
    background:${COLORS[300]};
  }
`,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { selected, ...remainingProps } = props;
    const className = classNames({
      paddingLayoutX: true,
      selected: selected ? true : false
    });
    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
const PaddingLeftSelector = createComponent(
  `
  .paddingLeftSelectorX {
    top: 25.5px;
    left: -5px;
    display: inline-block;
    padding: 5px;
    border:solid ${COLORS[400]};
    border-width: 0 2px 2px 0;
    position: relative;
    cursor: pointer;
    transform: rotate(135deg);
    -webkit-transform: rotate(135deg);
  }
  .paddingLeftSelectorX.selected{
    border-color: ${COLORS[300]};
  }
`,
  (props: PropType & React.HTMLProps<HTMLSpanElement>) => {
    const { selected, ...remainingProps } = props;
    const className = classNames({
      paddingLeftSelectorX: true,
      selected: selected ? true : false
    });
    return (
      <span
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const PaddingTopSelector = createComponent(
  `
  .paddingTopSelectorX {
    top: 5px;
    left: 27.5px;
    display: inline-block;
    padding: 5px;
    border: solid ${COLORS[400]};
    border-width: 0 2px 2px 0;
    position: relative;
    cursor: pointer;
    transform: rotate(-135deg);
    -webkit-transform: rotate(-135deg);
  }
  .paddingTopSelectorX.selected{
    border-color: ${COLORS[300]};
  }
`,
  (props: PropType & React.HTMLProps<HTMLSpanElement>) => {
    const { selected, ...remainingProps } = props;
    const className = classNames({
      paddingTopSelectorX: true,
      selected: selected ? true : false
    });
    return (
      <span
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const PaddingBottomSelector = createComponent(
  `
  .paddingBottomSelectorX {
    top: 46px;
    left: -8.5px;
    display: inline-block;
    padding: 5px;
    border: solid ${COLORS[400]};
    border-width: 0 2px 2px 0;
    position: relative;
    cursor: pointer;
    transform: rotate(45deg);
    -webkit-transform: rotate(45deg);
  }
  .paddingBottomSelectorX.selected{
    border-color: ${COLORS[300]};
  }
`,
  (props: PropType & React.HTMLProps<HTMLSpanElement>) => {
    const { selected, ...remainingProps } = props;
    const className = classNames({
      paddingBottomSelectorX: true,
      selected: selected ? true : false
    });
    return (
      <span
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const PaddingRightSelector = createComponent(
  `
  .paddingRightSelectorX {
    left: 24px;
    top: 25.5px;
    display: inline-block;
    padding: 5px;
    border: solid ${COLORS[400]};
    border-width: 0 2px 2px 0;
    position: relative;
    cursor: pointer;
    transform: rotate(-45deg);
    -webkit-transform: rotate(-45deg);
  }
  .paddingRightSelectorX.selected{
    border-color: ${COLORS[300]};
  }
`,
  (props: PropType & React.HTMLProps<HTMLSpanElement>) => {
    const { selected, ...remainingProps } = props;
    const className = classNames({
      paddingRightSelectorX: true,
      selected: selected ? true : false
    });
    return (
      <span
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const PaddingLock = createComponent(
  `
  .paddingLockX {
    top: 26.5px;
    left: -23.5px;
    height: 19px;
    width: 19px;
    display: inline-flex;
    position: relative;
    justify-content: center;
    align-items: center;
    cursor: pointer;
  }
`,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { ...remainingProps } = props;
    const className = classNames({
      paddingLockX: true
    });
    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

export {
  PaddingLayout,
  PaddingLock,
  PaddingTopSelector,
  PaddingLeftSelector,
  PaddingRightSelector,
  PaddingBottomSelector
};
