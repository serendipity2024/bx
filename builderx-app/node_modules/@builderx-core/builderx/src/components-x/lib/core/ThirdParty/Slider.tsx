import * as React from "react";
import createComponent from "../../createComponent";
import classNames from "classnames";

interface PropType {
  disabled?: boolean;
  minimumTrackTintColor?: string;
  maximumTrackTintColor?: string;
  thumbTintColor?: string;
  style?: any;
  value?: number;
  min?: number;
  max?: number;
  width?: number;
}

export const SliderWrapper = createComponent(
  ``,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    return <div {...props} />;
  }
);

export const AndroidSliderProgressBar = createComponent(
  `
  .androidSliderProgressBarX {
    height: 2px;
    border-radius: 2px;
    position: relative;
    -webkit-appearance: none;
   }

  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      value,
      minimumTrackTintColor,
      maximumTrackTintColor,

      ...remainingProps
    } = props;

    const className = classNames({
      androidSliderProgressBarX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          backgroundImage: value
            ? `-webkit-gradient(
              linear,
              left top,
              right top,
              color-stop(${value}, ${
                minimumTrackTintColor ? minimumTrackTintColor : "#00897b"
              }),
              color-stop(${value}, ${
                maximumTrackTintColor ? maximumTrackTintColor : "#b7b7b7"
              }))`
            : `-webkit-gradient(
              linear,
              left top,
              right top,
              color-stop(0, #00897b),
              color-stop(0, #b7b7b7))`
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

export const AndroidSliderButton = createComponent(
  `
  .androidSliderButtonX {
    -webkit-appearance: none;
    background-color: #666;
    width: 14px;
    height: 14px;
    // z-index:2;
    border-radius: 50%;
    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);
    cursor: pointer;
    position: relative;
    top: -5.5px;
  }

  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      disabled,
      thumbTintColor,
      value,

      ...remainingProps
    } = props;

    const className = classNames({
      androidSliderButtonX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          background: disabled
            ? `#666`
            : thumbTintColor
            ? `${thumbTintColor}`
            : `#00897b`,
          left: value ? value : "0px",
          boxShadow: disabled
            ? ` 0px 2px 4px transparent`
            : ` 0px 2px 4px rgba(0,0,0,.2)`
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

export const IOSSliderProgressBar = createComponent(
  `
  .iOSSliderProgressBarX {
    height: 2px;
    border-radius: 2px;
    position: relative;
    top: -2px;
    -webkit-appearance: none;
  }

  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      value,
      minimumTrackTintColor,
      maximumTrackTintColor,

      ...remainingProps
    } = props;

    const className = classNames({
      iOSSliderProgressBarX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          backgroundImage: value
            ? `-webkit-gradient(
          linear,
          left top,
          right top,
          color-stop(${value}, ${
                minimumTrackTintColor ? minimumTrackTintColor : "#007aff"
              }),
          color-stop(${value}, ${
                maximumTrackTintColor ? maximumTrackTintColor : "#b7b7b7"
              }))`
            : `-webkit-gradient(
          linear,
          left top,
          right top,
          color-stop(0, #007aff),
          color-stop(0, #b7b7b7))`
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

export const IOSSliderButton = createComponent(
  `
  .iOSSliderButtonX {
    -webkit-appearance: none;
    background-color: #666;
    display: block;
    width: 28px;
    height: 28px;
    // z-index:2;
    border-radius: 50%;
    background: #fff;
    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.2);
    cursor: pointer;
    position: relative;
  top: -12.5px;
  }

  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const {
      value,

      ...remainingProps
    } = props;

    const className = classNames({
      iOSSliderButtonX: true
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          left: value ? `${value}px` : "0px"
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);
