import * as React from "react";
import styled from "styled-components";
import COLORS from "./constants/COLORS";
import Background from "./types/BackgroundPropType";
import createComponent from "../createComponent";
import * as classNames from "classnames";

interface PropType extends Background {
  selected?: boolean;
  locked?: boolean;
  position?: string;
}

const ResizingButton = createComponent(
  `
  .resizingButtonFBX {
    height: 20px;
    width: 20px;
    flex-direction:column;
    align-items:center;
    justify-content:center;
    align-self:center;
    display:flex;
    border-radius: 1px;
    background-color:${COLORS[600]};
  }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { position, ...remainingProps } = props;

    const className = classNames({
      resizingButtonFBX: true
    });
    const transformConditions = () => {
      if (position === "left") {
        return "rotate(270deg)";
      } else if (position === "right") {
        return "rotate(90deg)";
      } else if (position === "bottom") {
        return "rotate(180deg);";
      } else {
        return "";
      }
    };
    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          transform: transformConditions()
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const TopBorderWidth = createComponent(
  `
  .topBorderWidthFBX {
    height: 1px;
    width: 11px;
    align-self: center;
  }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { selected, ...remainingProps } = props;

    const className = classNames({
      topBorderWidthFBX: true,
      selected: selected ? true : false
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          background: selected ? COLORS[100] : COLORS[400]
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const TopBorderLine = createComponent(
  `
  .topBorderLineFBX {
    align-self: center;
    height: 10px;
    width: 1px;
  }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { selected, ...remainingProps } = props;

    const className = classNames({
      topBorderLineFBX: true,
      selected: selected ? true : false
    });

    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          background: selected ? COLORS[100] : COLORS[400]
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

export default class extends React.Component<any, any> {
  render() {
    const { selected, ...otherProps } = this.props;
    return (
      <ResizingButton {...otherProps}>
        <TopBorderWidth selected={selected} />
        <TopBorderLine selected={selected} />
        <TopBorderWidth selected={selected} />
      </ResizingButton>
    );
  }
}
