import styled from "styled-components";
import COLORS from "./constants/COLORS";
import Background from "./types/BackgroundPropType";
import createComponent from "../createComponent";
import * as classNames from "classnames";
import * as React from "react";

interface PropType extends Background {
  selected?: boolean;
  locked?: boolean;
}

const BorderWidth = createComponent(
  `
  .borderWidthX {
    height: 40px;
    width: 44px;
    border-radius: 3px;
    padding: 0px 3px;
  }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const className = classNames({
      borderWidthX: true
    });

    return (
      <div
        {...props}
        className={className + (props.className ? " " + props.className : "")}
      />
    );
  }
);

const LeftBorderWidth = createComponent(
  `
  .leftBorderWidthsX {
    height: 39px;
    width: 0px;
    border-top: 4px solid transparent;
    border-bottom: 4px solid transparent;
    left: -3px;
    top: -4px;
    display: inline-block;
    position: relative;
    cursor: pointer;
    border-left: 4px solid ${COLORS[400]};
  }
  .leftBorderWidthsX.selected {
    border-left: 4px solid ${COLORS[300]};
  }
  `,
  (props: PropType & React.HTMLProps<HTMLSpanElement>) => {
    const { selected, ...remainingProps } = props;

    const className = classNames({
      leftBorderWidthsX: true,
      selected: selected ? true : false
    });

    return (
      <span
        {...remainingProps}
        style={remainingProps.style}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const TopBorderWidth = createComponent(
  `
  .topBorderWidthsX {
    height: 0px;
    width: 39px;
    left: -2px;
    top: 0px;
    display: block;
    position: relative;
    border-left: 4px solid transparent;
    border-right: 4px solid transparent;
    cursor: pointer;
    border-top: 4px solid ${COLORS[400]};
  }
  .topBorderWidthsX.selected {
    border-top: 4px solid ${COLORS[300]};
  }
  `,
  (props: PropType & React.HTMLProps<HTMLSpanElement>) => {
    const { selected, ...remainingProps } = props;

    const className = classNames({
      topBorderWidthsX: true,
      selected: selected ? true : false
    });

    return (
      <span
        {...remainingProps}
        style={remainingProps.style}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const BottomBorderWidth = createComponent(
  `
  .bottomBorderWidthsX {
    height: 14px;
    width: 39px;
    left: 8px;
    border-left: 4px solid transparent;
    border-right: 4px solid transparent;
    display: inline-block;
    top: -20px;
    left: -2px;
    position: relative;
    cursor: pointer;
    border-bottom: 4px solid ${COLORS[400]};
  }
  .bottomBorderWidthsX.selected {
    border-bottom: 4px solid ${COLORS[300]};
  }
  `,
  (props: PropType & React.HTMLProps<HTMLSpanElement>) => {
    const { selected, ...remainingProps } = props;

    const className = classNames({
      bottomBorderWidthsX: true,
      selected: selected ? true : false
    });

    return (
      <span
        {...remainingProps}
        style={remainingProps.style}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const RightBorderWidth = createComponent(
  `
  .rightBorderWidthsX {
    height: 39px;
    width: 0px;
    border-top: 4px solid transparent;
    border-bottom: 4px solid transparent;
    top: -4px;
    left: 30px;
    display: inline-block;
    position: relative;
    cursor: pointer;
    border-right: 4px solid ${COLORS[400]};
  }
  .rightBorderWidthsX.selected {
    border-right: 4px solid ${COLORS[300]};
  }
  `,
  (props: PropType & React.HTMLProps<HTMLSpanElement>) => {
    const { selected, ...remainingProps } = props;

    const className = classNames({
      rightBorderWidthsX: true,
      selected: selected ? true : false
    });

    return (
      <span
        {...remainingProps}
        style={remainingProps.style}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

const BorderWidthLock = createComponent(
  `
  .borderWidthLockX {
    height: 25px;
    width: 19px;
    display: inline-flex;
    left: 7px;
    top: -53px;
    position: relative;
    justify-content: center;
    align-items: center;
    cursor: pointer;
  }
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const className = classNames({
      borderWidthLockX: true
    });

    return (
      <div
        {...props}
        className={className + (props.className ? " " + props.className : "")}
      />
    );
  }
);

export {
  BorderWidth,
  BorderWidthLock,
  TopBorderWidth,
  LeftBorderWidth,
  RightBorderWidth,
  BottomBorderWidth
};
