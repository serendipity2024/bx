import * as React from "react";
import COLORS, { secondary, DANGER } from "./constants/COLORS";
import Icon from "./Icon";
import Text from "./Text";
import Background from "./types/BackgroundPropType";
import Color from "./types/ColorPropType";
import Size from "./types/SizePropType";
import createComponent from "../createComponent";
import { isNil } from "lodash";
import * as classNames from "classnames";

interface PropType extends Background, Color, Size {
  borderRadius?: boolean;
  borderBottomRadius?: boolean;
  borderTopRadius?: boolean;
  transparent?: boolean;
  flexible?: boolean;
  barButton?: boolean;
  borderLeft?: boolean;
  borderRight?: boolean;
  noPadding?: boolean;
  paddingLeft?: number;
  paddingRight?: number;
  active?: boolean;
  danger?: boolean;
  marginBottom?: number;
  marginRight?: boolean;
  marginLeft?: boolean;
  marginLeftCustom?: number;
  minWidth?: boolean;
  border?: boolean;
  hover?: boolean;
  fixed?: boolean;
  textLeft?: boolean;
  textRight?: boolean;
  disabled?: boolean;
  style?: object;
  color?: any;
  marginTop?: number;
  actionBtn?: boolean;
  headerMenu?: boolean;
  width?: string | number;
  textUiSize?: Size;
  tooltip?: any;
  outline?: boolean;
}

const uiSizes = {
  xxl: "80px",
  xl: "60px",
  l: "40px",
  m: "35px",
  s: "30px",
  ms: "28px",
  xs: "23px"
};

const Button = createComponent(
  `
  .buttonX {
    outline: none;
    font-size: 11px;
    align-items: center;
    display: inline-flex;
    position: relative;
    border: none;

    transition: all 0.3s ease 0s;
    cursor: pointer;
    border-right: none;
    border-left: none;
    padding: 3px 6px;
    border-radius: 2px;
    justify-content: center;
    margin-right: 0px;
    margin-left: 0px;
    min-width: 0px;
  }
  .buttonX span {
    transition-delay:0s;
  }
  .buttonX:hover span {
    visibility: visible;
    transition-delay:0.7s;
  }
  .buttonX.transparent {
    background: transparent;
    border: none;
  }
  .buttonX.active {
    background: ${COLORS[600]};
  }
  .buttonX.active.headerMenu {
    background: ${COLORS[600]};
    height:34px;
  }
  .buttonX.disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }
  .buttonX.fixed {
    width: 100px;
  }
  .buttonX.flexible {
    width: 100%;
  }
  .buttonX.barButton {
    width: 40px;
  }
  .buttonX.borderRight {
    border-right: 1px solid ${COLORS[800]};
  }
  .buttonX.borderLeft {
    border-left: 1px solid ${COLORS[800]};
  }
  .buttonX.noPadding {
    padding: 3px 0px;
  }
  .buttonX.borderBottomRadius {
    border-radius: 0px 0px 2px 2px;
  }
  .buttonX.borderTopRadius {
    border-radius: 2px 2px 0px 0px;
  }
  .buttonX.borderRadius {
    border-radius: 2px;
  }
  .buttonX.textLeft {
    justify-content: flex-start;
  }
  .buttonX.textRight {
    justify-content: flex-end;
  }
  .buttonX.marginRight {
    margin-right: 15px;
  }
  .buttonX.marginLeft {
    margin-left: 10px;
  }
  .buttonX.minWidth {
    min-width: 100px;
  }
  .buttonX.transparent.active {
    background: ${COLORS[600]};
  }
  .buttonX.danger {
    background: ${DANGER};
  }
  .buttonX.outline {
    background: transparent;
    border: 1px solid ${COLORS[300]}
  }
  `,
  (props: PropType & React.HTMLProps<HTMLButtonElement>) => {
    const {
      // boolean props
      transparent,
      active,
      disabled,
      fixed,
      flexible,
      barButton,
      borderRight,
      borderLeft,
      noPadding,
      borderBottomRadius,
      borderTopRadius,
      borderRadius,
      textLeft,
      textRight,
      marginRight,
      marginLeft,
      minWidth,
      actionBtn,
      marginTop,
      uiBackground,
      color,
      uiSize,
      paddingLeft,
      paddingRight,
      marginBottom,
      headerMenu,
      width,
      danger,
      marginLeftCustom,
      outline,
      tooltip,
      ...remainingProps
    } = props;

    const className = classNames({
      buttonX: true,
      transparent: transparent ? true : false,
      active: active ? true : false,
      danger: danger ? true : false,
      disabled: disabled ? true : false,
      fixed: fixed ? true : false,
      flexible: flexible ? true : false,
      barButton: barButton ? true : false,
      borderRight: borderRight ? true : false,
      borderLeft: borderLeft ? true : false,
      noPadding: noPadding ? true : false,
      borderBottomRadius: borderBottomRadius ? true : false,
      borderTopRadius: borderTopRadius ? true : false,
      borderRadius: borderRadius ? true : false,
      textLeft: textLeft ? true : false,
      textRight: textRight ? true : false,
      marginRight: marginRight ? true : false,
      marginLeft: marginLeft ? true : false,
      headerMenu: headerMenu ? true : false,
      minWidth: minWidth ? true : false,
      actionBtn: actionBtn ? true : false,
      outline: outline ? true : false
    });

    let backgroundCondition = () => {
      if (danger) {
        return DANGER;
      } else if (transparent || outline) {
        if (active) {
          return COLORS[600];
        }
        return "transparent";
      } else if (active && !actionBtn) {
        return COLORS[600];
      } else {
        if (uiBackground) {
          if (actionBtn) {
            return secondary[uiBackground];
          } else {
            return COLORS[uiBackground];
          }
        } else {
          return COLORS[700];
        }
      }
    };
    return (
      <button
        {...remainingProps}
        disabled={disabled}
        style={{
          ...remainingProps.style,
          background: backgroundCondition(),
          width: width
            ? width
            : fixed
            ? 100
            : flexible
            ? "100%"
            : barButton
            ? 40
            : "auto",
          color: !isNil(color) ? COLORS[color] : COLORS[50],
          height: uiSize ? uiSizes[uiSize] : uiSizes[""],
          paddingLeft: !isNil(paddingLeft) ? paddingLeft : 6,
          paddingRight: !isNil(paddingRight) ? paddingRight : 6,
          marginBottom: !isNil(marginBottom) ? marginBottom : "",
          marginTop: !isNil(marginTop) ? marginTop : "0px",
          marginLeft: !isNil(marginLeftCustom) ? marginLeftCustom : undefined
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      />
    );
  }
);

interface WrapperPropType extends PropType {
  caption?: string | React.ReactElement<any>;
  icon?: string | React.ReactElement<any>;
  tooltip?: string | React.ReactElement<any>;
  onClick?: any;
  onFocus?: any;
  onDoubleClick?: any;
  onKeyPress?: any;
  disabled?: boolean;
  onMouseEnter?: any;
  className?: any;
  id?: string;
  name?: string;
  type?: string;
  captionBold?: boolean;
}

export default class StyledButton extends React.Component<
  WrapperPropType,
  any
> {
  render() {
    const {
      caption,
      icon,
      children,
      disabled,
      border,
      textUiSize,
      captionBold,
      ...otherProps
    } = this.props;
    return (
      <Button {...otherProps} disabled={disabled}>
        {icon && typeof icon === "string" ? (
          <Icon name={icon} size={16} />
        ) : icon && typeof icon !== "string" ? (
          icon
        ) : (
          ""
        )}
        <Text
          uiColor={this.props.actionBtn ? 50 : 100}
          inactive={!this.props.active}
          bold={captionBold}
        >
          {caption ? caption : ""}
        </Text>
        {children ? children : ""}
      </Button>
    );
  }
}
