import * as React from "react";
import { ISessionPlugin } from "common-interfaces";
import { Session } from "session";
import WindowsWrapper from "./WindowsWrapper";
import { action } from "model";

export default class WindowProvider implements ISessionPlugin {
  name = "WindowProvider";
  session: Session;
  windowsData: {
    windows: Array<{
      component: any;
      modalProps: any;
      modalFooterProps?: any;
      modalFooter?: any;
    }>;
    currentWindowId: number;
  };
  init(session: Session) {
    this.session = session;
    this.windowsData = { windows: [], currentWindowId: -1 };
    session.executeFunction(
      "ExternalComponentsProvider.add",
      {
        placement: "overlay",
        component: () => (
          <WindowsWrapper session={session} windowsData={this.windowsData} />
        )
      },
      true
    );
  }

  activate() {
    this.session.addFunction(
      `${this.name}.get`,
      () => this.windowsData.windows
    );
    this.session.addFunction(
      `${this.name}.add`,
      (
        session: Session,
        component: any,
        modalFooter?: any,
        modalProps?: {
          modalSize?: "xl" | "l" | "ms" | "m" | "s" | "xs";
          backdropBackground?: number;
          maxHeight?: boolean;
          uiSize?: string;
        },
        modalFooterProps?: {
          padder?: boolean;
          noBorder?: boolean;
          uiSize?: string;
        }
      ) => {
        this.windowsData.windows.push({
          component,
          modalProps,
          modalFooter,
          modalFooterProps
        });
        action(() => {
          this.session.emit("WindowProvider");
        });
        return this.windowsData.windows.length - 1;
      }
    );
    this.session.addFunction(
      `${this.name}.show`,
      (session: Session, id: number) => {
        this.windowsData.currentWindowId = id;
        action(() => {
          this.session.emit("WindowProvider");
        });
      }
    );
    this.session.addFunction(`${this.name}.hide`, (session: Session) => {
      this.windowsData.currentWindowId = -1;
      action(() => {
        this.session.emit("WindowProvider");
      });
    });
  }
  deactivate() {
    //
  }
}
