import { DomainLayer, DomainFile } from "domain-x";
import { globalRefMap } from "global-ref-map";
import { Canvas, Layer } from "@builderx-core/designer";
import { StageArtboard, Session, Stage } from "session";
import { find } from "lodash";

export function getOwnCanvasRef(
  domainLayer: DomainLayer | DomainFile,
  canvas: Canvas
): Layer | undefined {
  const domainCompiledRef = globalRefMap.get(domainLayer);

  if (!domainCompiledRef) {
    return;
  }
  let found = domainCompiledRef.find((revRef: any) => {
    if (revRef instanceof StageArtboard) {
      revRef = (globalRefMap.get(revRef) as any)[0]; // TODO: Should ideally iterate over all items of the array
    }
    const currentCanvas = revRef.getCanvas();

    if (currentCanvas === canvas) {
      return true;
    }

    return false;
  });
  if (found instanceof StageArtboard) {
    found = (globalRefMap.get(found) as any)[0]; // TODO: Should ideally iterate over all items of the array
  }
  return found as Layer;
}

export function getStageForCompiled(
  session: Session,
  compiledLayer: Layer
  // stageId: string
) {
  const currentCanvas = compiledLayer.getCanvas();

  let foundStage: Stage | undefined;

  session.stages.forEach(stage => {
    if (stage.canvas === currentCanvas) {
      foundStage = stage;
    }
  });

  session.thumbnailStages.forEach(stage => {
    if (stage.canvas === currentCanvas) {
      foundStage = stage;
    }
  });

  return foundStage;
}

export function getOwnStageArtboardRef(domainFile: DomainFile, stage: Stage) {
  const stageArtboards = globalRefMap.get(domainFile);

  return find(stageArtboards as Array<StageArtboard>, s => {
    return stage.stageArtboards.includes(s);
  });
}
