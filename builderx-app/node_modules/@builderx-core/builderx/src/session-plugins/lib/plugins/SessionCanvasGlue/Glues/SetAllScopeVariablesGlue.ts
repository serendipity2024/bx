import { DomainLayer, LogicalExpression, DomainFile } from "domain-x";
import { Layer, PathEvent } from "@builderx-core/designer";
import { forEach } from "lodash";
import { SessionEvent } from "event-manager";
import { Session, StageArtboard, Mutators } from "session";
import { globalRefMap } from "global-ref-map";
import { BX_PREVIEW_FILE_PATH } from "bx-constants";
import { updateStatusBar } from "./SetStatusBarGlue";
// import { domainStageMap } from "../DomainStageMap";
function setReferences(domainLayer: any, stageArtboard: StageArtboard) {
  const stageArtboardRef = globalRefMap.get(domainLayer);
  if (stageArtboardRef) {
    stageArtboardRef.splice(0, 0, stageArtboard);
  } else {
    globalRefMap.set(domainLayer, [stageArtboard]);
  }
}

function applySideEffects(
  session: Session,
  domainLayer: DomainFile | DomainLayer,
  variableObj: any
) {
  // const stageArtboards = globalRefMap.get(domainFile);
  // forEach(stageArtboards, (stageArtboard: StageArtboard) => {
  //   const compiledLayers = globalRefMap.get(stageArtboard);
  //   forEach(compiledLayers, (canvasLayer: Layer) => {
  //     canvasLayer.executeFunction(
  //       "DeviceFrame.add",
  //       variableObj["deviceName"],
  //       variableObj["deviceOrientation"]
  //     );
  //   });
  // });

  if (domainLayer.type === "file") {
    const domainFile = domainLayer as DomainFile;
    const stageArtboards = globalRefMap.get(domainFile);

    if (stageArtboards) {
      stageArtboards.forEach((s: StageArtboard) => {
        const compiledFiles = globalRefMap.get(s);
        if (compiledFiles) {
          compiledFiles.forEach((compiledFile: Layer) => {
            compiledFile.executeFunction("setData", "deviceData", variableObj);

            if (domainFile.isArtboard()) {
              compiledFile.executeFunction(
                "DeviceFrame.add",
                variableObj["deviceName"],
                variableObj["deviceOrientation"]
              );

              updateStatusBar(domainFile, compiledFile);
            }

            compiledFile.rerenderDescendants();
          });
        }
      });
    }
  } else {
    // layer scope variable update
  }
}

export default function SetAllScopeVariablesGlue(
  session: Session,
  e: SessionEvent
) {
  applySideEffects(session, e.payload.layer, e.payload.variableObj);

  // const domainLayer = session.getLayerFromLayerPath(e.payload.layerId);
}
