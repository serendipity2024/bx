import { DomainLayer, LogicalExpression } from "domain-x";
import { Layer, PathEvent } from "@builderx-core/designer";
import { forEach, find } from "lodash";
import { SessionEvent } from "event-manager";
import { Session, StageArtboard, Mutators } from "session";
import { globalRefMap } from "global-ref-map";

function applySideEffects(session: Session, layer: DomainLayer, value: any) {
  const domainCompiledLayers = globalRefMap.get(layer);

  if (layer.parent && layer.parent.type === "text") {
    const parentLayer = layer.parent;
    const compiledLayers = globalRefMap.get(parentLayer);

    forEach(compiledLayers, compiledLayer => {
      if (compiledLayer instanceof Layer) {
        if (parentLayer.children && parentLayer.children.length) {
          if (parentLayer.type === "text") {
            let scopeVariables = {};

            compiledLayer.setInnerText(value);
            if (parentLayer.isFlexChild) {
              //
            }
            if (parentLayer.isFlexChild) {
              // if (renderCompiledLayer.parent) {
              // renderCompiledLayer.parent.emit("children");
              // renderCompiledLayer.parent.children.forEach((child: any) => {
              //   child.emit("children");
              // });
              // }
            }
          }
        }
      }
    });
  } else if (domainCompiledLayers) {
    domainCompiledLayers.forEach((compiledLayer: any) => {
      compiledLayer["value"] = value;
    });
  }
}

export default function SetLiteralValueGlue(session: Session, e: SessionEvent) {
  applySideEffects(session, e.payload.layer, e.payload.value);
}
