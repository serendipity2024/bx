import { DomainLayer, DomainFile, Style } from "domain-x";
import { Session } from "session";
import { SessionEvent } from "event-manager";
import { forEach, findIndex, toLower } from "lodash";
import AddMissingFonts from "src/session/lib/Commands/Layer/AddMissingFonts";
import { SystemFont } from "common-interfaces";
import { Utils } from "utils";

export default function setStyleAttributePatch(
  session: Session,
  operationPath: string,
  layer: DomainFile | DomainLayer,
  operation: any
) {
  const args = operationPath.split("/");

  const stylePropName = args[args.length - 2];

  if (!(layer.props[stylePropName] instanceof Style)) {
    const style = layer.props[stylePropName];
    layer.props[stylePropName] = new Style();

    forEach(style, (value, key) => {
      layer.props[stylePropName].set(key, value);
    });
  }

  const styleKey = args[args.length - 1];

  if (styleKey === "fontFamily") {
    const fontPostScriptName: any = layer.props.getResolvedStyleAttribute(
      "fontPostscriptName",
      // @ts-ignore
      stylePropName
    );
    const fontFamilyValue: any = layer.props.getResolvedStyleAttribute(
      styleKey,
      // @ts-ignore
      stylePropName
    );
    if (fontFamilyValue) {
      addMissingFonts(session, fontPostScriptName);
    }
  }
  if (session.currentStage.dragging) {
    layer.emit("onDragLayer");
  } else {
    layer.props[stylePropName].emit(styleKey);
  }
  const event = new SessionEvent("setStyleAttribute", {
    layer: layer,
    key: styleKey,
    value: operation.value,
    stylePropName: stylePropName
  });
  session.eventManager.dispatchEvent("setStyleAttribute", event);
}

function addMissingFonts(session: Session, fontPostScriptName: string) {
  if (!fontPostScriptName) {
    return;
  }
  const project = session.project;
  const fontIndex: any = findIndex(
    session.systemFonts,
    (systemFont: SystemFont) => {
      return (
        systemFont.postscriptName === fontPostScriptName ||
        toLower(systemFont.postscriptName) === fontPostScriptName
      );
    }
  );
  if (fontIndex > -1) {
    const font = session.systemFonts[fontIndex];
    const { postscriptName } = font;
    const ignoreFonts = ["Helvetica", "Arial", "Verdana", "Times New Roman"];
    if (ignoreFonts.indexOf(font.family) === -1) {
      Utils.loadFont({ family: font.family, style: font.style });
    }
  } else {
    project.addMissingFontName(fontPostScriptName);
  }
}
