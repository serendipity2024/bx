import { ISessionPlugin } from "common-interfaces";
import { Session, Commands } from "session";
import { File } from "domain-x";
import { isEmpty, forEach } from "lodash";
import { Prompt, Confirm } from "dialog-x";
import { action } from "model";
import { Utils } from "utils";

type ItemType = {
  contextOnArtboard: boolean;
  contextOnLeftPanel: boolean;
  contextOnComponent: boolean;
  contextOnLayer: boolean;
  artboardLength: number;
  selectedLayers: Array<any>;
  payload: any;
};
export default class SessionContextMenu implements ISessionPlugin {
  name = "SessionContextMenu";
  session: Session;

  init(session: Session) {
    this.session = session;
  }

  activate() {
    // this.session.addContextMenuItemCreator((data: any) => this.getItems(data));
    this.getItems().forEach((item: any) => {
      this.session.addContextMenuItemCreator((event: any) => {
        const data = this.getContextFromEvent(event);
        return item(data);
      });
    });
  }
  getContextFromEvent(data: any): ItemType {
    const selectedLayers = this.session.getLayersFromSelectedLayerCollection();
    const contextOnArtboard: boolean =
      (data.hotspotData &&
        data.hotspotData.area !== "left-panel" &&
        !isEmpty(selectedLayers) &&
        selectedLayers[0].type === "root") ||
      false;
    const contextOnComponent: boolean =
      (data.hotspotData &&
        data.hotspotData.area === "left-panel" &&
        data.hotspotData.tab === "components") ||
      false;
    const contextOnLeftPanel: boolean =
      (data.hotspotData && data.hotspotData.area === "left-panel") || false;
    const contextOnLayer: boolean =
      (!isEmpty(selectedLayers) &&
        selectedLayers[0].type !== "root" &&
        !contextOnComponent) ||
      false;
    let artboardLength: number = 0;
    this.session.domain.files.forEach((file: File) => {
      if (file && !file.isSymbol()) {
        artboardLength++;
      }
    });
    return {
      contextOnArtboard,
      contextOnLeftPanel,
      contextOnComponent,
      contextOnLayer,
      artboardLength,
      selectedLayers,
      payload: data.payload
    };
  }
  getItems(): Array<any> {
    const { commandManager } = this.session;
    return [
      ({ contextOnLayer }: ItemType) => {
        return {
          label: "Cut",
          visible: contextOnLayer,
          shortcut: "⌘ X",
          click: () => {
            action(() => {
              commandManager.execute(new Commands.Cut(this.session));
            });
          }
        };
      },
      ({ contextOnLayer }: ItemType) => {
        return {
          label: "Copy",
          visible: contextOnLayer,
          shortcut: "⌘ C",
          click: () => {
            action(() => {
              commandManager.executeAndSkip(new Commands.Copy(this.session));
            });
          }
        };
      },
      ({ contextOnArtboard, contextOnLayer }: ItemType) => {
        return {
          label: "Paste",
          visible:
            (contextOnArtboard || contextOnLayer) &&
            this.session.drivers.clipboardService.get() &&
            this.session.drivers.clipboardService.get().type === "layer",
          shortcut: "⌘ V",
          click: () => {
            action(async () => {
              await commandManager.executeAndSkip(
                new Commands.Paste(this.session)
              );
            });
          }
        };
      },
      ({ contextOnLayer, selectedLayers }: ItemType) => {
        return {
          label: "Duplicate",
          visible: contextOnLayer,
          shortcut: "⌘ D",
          click: () => {
            action(() => {
              commandManager.execute(
                new Commands.DuplicateLayers(this.session, selectedLayers)
              );
            });
          }
        };
      },
      ({ contextOnLayer, selectedLayers }: ItemType) => {
        return {
          label: "Delete",
          visible: contextOnLayer,
          shortcut: "⌫",
          click: () => {
            action(() => {
              forEach(selectedLayers, (layer: any) => {
                commandManager.execute(
                  new Commands.RemoveLayer(this.session, layer as any)
                );
              });
            });
          }
        };
      },
      ({}: ItemType) => {
        return { type: "separator" };
      },
      ({ contextOnLayer, selectedLayers }: ItemType) => {
        return {
          label: "Send To Back",
          visible: contextOnLayer,
          shortcut: "⌘ ⌥ ↓",
          click: () => {
            action(() => {
              commandManager.execute(
                new Commands.SendToBack(this.session, selectedLayers)
              );
            });
          }
        };
      },
      ({ contextOnLayer, selectedLayers }: ItemType) => {
        return {
          label: "Bring To Front",
          visible: contextOnLayer,
          shortcut: "⌘ ⌥ ↑",
          click: () => {
            action(() => {
              commandManager.execute(
                new Commands.MoveToFront(this.session, selectedLayers)
              );
            });
          }
        };
      },
      ({ contextOnLayer, selectedLayers }: ItemType) => {
        return {
          label: "Change To Group",
          visible:
            contextOnLayer &&
            selectedLayers.length === 1 &&
            (selectedLayers[0].type === "view" ||
              selectedLayers[0].type === "touchableOpacity") &&
            !selectedLayers[0].isGroup,
          click: () => {
            action(() => {
              commandManager.execute(
                new Commands.ChangeToGroup(this.session, selectedLayers[0])
              );
            });
          }
        };
      },
      // {
      //   label: "Copy Style",
      //   visible: contextOnLayer,
      //   click: () => {
      //     // this.commandService.execute("layer.copy.style");
      //   }
      // },
      // {
      //   label: "Paste Style",
      //   visible: contextOnLayer,
      //   click: () => {
      //     // this.commandService.execute("layer.paste.style");
      //   }
      // },
      ({
        contextOnArtboard,
        contextOnLayer,
        artboardLength,
        selectedLayers
      }: ItemType) => {
        return { type: "separator" };
      },
      ({ contextOnLayer, selectedLayers }: ItemType) => {
        return {
          label: "Create Component",
          visible:
            contextOnLayer &&
            this.session.createSymbolFromSelectedLayersIsDoable(),
          click: () => {
            action(async () => {
              await commandManager.execute(
                new Commands.CreateSymbol(this.session, selectedLayers)
              );
            });
          }
        };
      },
      // {
      //   label: `Export Layer${selectedLayers.length > 1 ? "s" : ""}`,
      //   visible: contextOnLayer && selectedLayers.length > 0,
      //   click: () => {
      //     action(() => {
      //       commandManager.executeAndSkip(
      //         new Commands.GeneratePreviewAndSelectLayer(this.session, selectedLayers)
      //       );
      //     });
      //   }
      // },
      ({}: ItemType) => {
        return { type: "separator" };
      },
      ({ contextOnLayer, selectedLayers }: ItemType) => {
        return {
          label: `Group Layer${selectedLayers.length > 1 ? "s" : ""}`,
          visible:
            contextOnLayer &&
            this.session.createGroupFromSelectedLayersIsDoable(),
          shortcut: "⌘ G",
          click: () => {
            action(() => {
              commandManager.execute(
                new Commands.CreateGroup(this.session, selectedLayers)
              );
            });
          }
        };
      },
      ({ contextOnLayer, selectedLayers }: ItemType) => {
        return {
          label: "Ungroup Layers",
          visible:
            contextOnLayer && this.session.unGroupFromSelectedLayersIsDoable(),
          click: () => {
            action(() => {
              commandManager.execute(
                new Commands.Ungroup(this.session, selectedLayers[0])
              );
            });
          }
        };
      },
      ({ contextOnLayer, selectedLayers }: ItemType) => {
        return {
          label:
            selectedLayers.length &&
            selectedLayers[0].type === "touchableOpacity"
              ? "Make UnClickable"
              : "Make Clickable",
          visible:
            contextOnLayer &&
            selectedLayers.length &&
            (selectedLayers[0].type === "view" ||
              selectedLayers[0].type === "touchableOpacity"),
          click: () => {
            action(() => {
              commandManager.execute(
                new Commands.ChangeToTouchableOpacity(
                  this.session,
                  selectedLayers[0],
                  !(selectedLayers[0].type === "touchableOpacity")
                )
              );
            });
          }
        };
      },
      ({ contextOnLayer, selectedLayers }: ItemType) => {
        return {
          label: "Create ScrollView",
          visible:
            contextOnLayer &&
            this.session.changeToScrollViewIsDoable(selectedLayers[0]) &&
            selectedLayers.length &&
            selectedLayers[0].type === "view",
          submenu: [
            {
              label: "Vertical",
              visible: true,
              click: () => {
                action(() => {
                  commandManager.execute(
                    new Commands.ChangeToScrollView(
                      this.session,
                      selectedLayers[0],
                      true
                    )
                  );
                });
              }
            },
            {
              label: "Horizontal",
              visible: true,
              click: () => {
                action(() => {
                  commandManager.execute(
                    new Commands.ChangeToScrollView(
                      this.session,
                      selectedLayers[0],
                      true,
                      true
                    )
                  );
                });
              }
            }
          ]
        };
      },
      ({ contextOnLayer, selectedLayers }: ItemType) => {
        return {
          label: "Remove ScrollView",
          visible:
            contextOnLayer &&
            this.session.changeToScrollViewIsDoable(selectedLayers[0]) &&
            selectedLayers.length &&
            selectedLayers[0].type === "scrollView",
          click: () => {
            action(() => {
              commandManager.execute(
                new Commands.ChangeToScrollView(
                  this.session,
                  selectedLayers[0],
                  false
                )
              );
            });
          }
        };
      },
      // // {
      // //   label: "Make a List",
      // //   visible: contextOnLayer && true,
      // //   // this.builderX.operations.layer.createGroupFromSelectedLayersIsDoable(
      // //   //   "FlatList"
      // //   // ),
      // //   submenu: [
      // //     {
      // //       label: "Vertical",
      // //       click: () => {
      // //         // this.commandService.execute("layer.flatList.group", false)
      // //       }
      // //     },
      // //     {
      // //       label: "Horizontal",
      // //       click: () => {
      // //         // this.commandService.execute("layer.flatList.group", true)
      // //       }
      // //     }
      // //   ]
      // // },
      // { type: "separator" },
      // // {
      // //   label: (() => {
      // //     let label = "Set Fixed ";
      // //     let layer = this.builderX.workspace.persist.getSelectedLayers()[0];
      // //     if (
      // //       this.builderX.operations.layer.getParentLayerFlexDirection(
      // //         layer
      // //       ) === "row"
      // //     ) {
      // //       label += "Width";
      // //     } else {
      // //       label += "Height";
      // //     }
      // //     return label;
      // //   })(),
      // //   visible: (() => {
      // //     let visible = false;
      // //     let layer = this.builderX.workspace.persist.getSelectedLayers()[0];
      // //     if (
      // //       layer &&
      // //       (this.builderX.operations.layer.isLayerFill(layer, "width") &&
      // //         this.builderX.operations.layer.isLayerFill(
      // //           layer,
      // //           "height"
      // //         )) &&
      // //       this.builderX.operations.layer.getFlexValue(layer)
      // //     ) {
      // //       visible = true;
      // //     }
      // //     return visible;
      // //   })(),
      // //   click: () => this.commandService.execute("layer.set.absolute")
      // // },
      // // { type: "separator" },
      ({ contextOnLayer, selectedLayers }: ItemType) => {
        return {
          label: `Lock Layer${selectedLayers.length > 1 ? "s" : ""}`,
          visible:
            contextOnLayer &&
            selectedLayers.length > 0 &&
            !selectedLayers[0].locked,
          shortcut: "⌘ L",
          click: () => {
            action(() => {
              const layerLocked = selectedLayers[0].locked;
              commandManager.execute(
                new Commands.SetLayerLock(
                  this.session,
                  selectedLayers[0],
                  !layerLocked
                )
              );
            });
          }
        };
      },
      ({ contextOnLayer, selectedLayers }: ItemType) => {
        return {
          label:
            selectedLayers.length > 0 &&
            selectedLayers[0].props.getResolvedStyleAttribute("display") ===
              "none"
              ? `Show Layer${selectedLayers.length > 1 ? "s" : ""}`
              : `Hide Layer${selectedLayers.length > 1 ? "s" : ""}`,
          visible: contextOnLayer && selectedLayers.length > 0,
          shortcut: "⌘ H",
          click: () => {
            action(() => {
              // TODO: change it to handle multiple layers
              const layerHidden = selectedLayers[0].hidden;
              commandManager.execute(
                new Commands.SetLayerHide(
                  this.session,
                  selectedLayers[0],
                  !layerHidden
                )
              );
            });
          }
        };
      },
      ({}: ItemType) => {
        return { type: "separator" };
      },
      // {
      //   label: "Remove Guide",
      //   visible: true,
      //   // this.builderX.workspace.persist.editorState.context === "onRuler",
      //   click: () => {
      //     // this.commandService.execute("ruler.remove", {
      //     //   layerId: this.builderX.workspace.persist.editorState
      //     //     .contextReferenceId
      //     // });
      //   }
      // },
      ({ contextOnLayer, selectedLayers }: ItemType) => {
        return {
          label: "Rename layer",
          visible: contextOnLayer && selectedLayers.length === 1,
          click: async () => {
            action(async () => {
              const styleName = await Utils.getStyleNameUserInput(
                this.session,
                Prompt,
                selectedLayers[0].styleName
              );
              action(() => {
                if (typeof styleName === "string") {
                  this.session.commandManager.execute(
                    new Commands.SetStyleName(
                      this.session,
                      selectedLayers[0],
                      styleName,
                      false
                    )
                  );
                }
              });
            });
          }
        };
      },
      // {
      //   label: "Remove Layer",
      //   visible: contextOnLayer && selectedLayers.length > 0,
      //   click: () => {
      //     action(() => {
      //       commandManager.execute(
      //         new Commands.RemoveLayer(this.session, selectedLayers[0])
      //       );
      //     });
      //   }
      // },
      // // {
      // //   label: "Delete Symbol",
      // //   visible: true,
      // //     // this.builderX.workspace.persist.editorState.context === "onSymbol",
      // //   click: () => {
      // //     // this.commandService.execute("symbol.remove", {
      // //     //   layerId: this.builderX.workspace.persist.editorState
      // //     //     .contextReferenceId
      // //     // });
      // //   }
      // // },
      ({}: ItemType) => {
        return { type: "separator" };
      },
      ({ contextOnArtboard, contextOnLayer, contextOnLeftPanel }: ItemType) => {
        return {
          label: "Duplicate Artboard",
          visible:
            this.session.selectedFile &&
            this.session.currentStage.id === "artboard" &&
            (contextOnArtboard || contextOnLayer) &&
            !contextOnLeftPanel,
          click: () => {
            action(() => {
              if (this.session.selectedFile) {
                commandManager.execute(
                  new Commands.DuplicateArtboard(
                    this.session,
                    this.session.selectedFile
                  )
                );
              }
            });
          }
        };
      },
      ({
        contextOnArtboard,
        contextOnLayer,
        artboardLength,
        contextOnLeftPanel
      }: ItemType) => {
        return {
          label: "Delete Artboard",
          visible:
            artboardLength > 1 &&
            this.session.currentStage.id === "artboard" &&
            this.session.selectedFile &&
            this.session.currentStage.id === "artboard" &&
            (contextOnArtboard || contextOnLayer) &&
            !contextOnLeftPanel,
          click: () => {
            action(() => {
              if (this.session.selectedFile) {
                commandManager.execute(
                  new Commands.RemoveArtboard(
                    this.session,
                    this.session.selectedFile
                  )
                );
              }
            });
          }
        };
      },
      ({ contextOnComponent, payload }: ItemType) => {
        return {
          label: "Delete Component",
          visible: contextOnComponent,
          click: () => {
            action(async () => {
              if (payload && payload instanceof File) {
                const instances = payload.symbolInstances.length;
                if (instances) {
                  await Confirm(
                    "Delete Component",
                    `This will delete ${instances} instance${
                      instances === 1 ? "" : "s"
                    } of the component as well. Are you sure you want to delete?`
                  )
                    .then((val: any) => {
                      if (val) {
                        commandManager.execute(
                          new Commands.RemoveSymbol(this.session, payload)
                        );
                      }
                    })
                    .catch(err => {
                      console.error(
                        "error in delete component confirmation",
                        err
                      );
                    });
                } else {
                  commandManager.execute(
                    new Commands.RemoveSymbol(this.session, payload)
                  );
                }
              }
            });
          }
        };
      }
    ];
  }
  deactivate() {
    //
  }
}
