import { Canvas, IPlugin, IContext, IPosition } from "@builderx-core/designer";
export default class OnlineUserResizerPlugin implements IPlugin {
  name = "OnlineUserResizer";
  canvas!: Canvas;
  dispose: any;
  usersMap: Map<string, any>;
  containerDiv: any;
  color: string;

  init(canvas: Canvas) {
    this.canvas = canvas;
    this.dispose = null;
    this.usersMap = new Map();
    this.containerDiv = document.createElement("div");
    this.color = "blue";
  }

  activate() {
    this.containerDiv.style.position = "absolute";
    this.dispose = this.canvas.addDomToWorld(this.containerDiv, true);
    this.containerDiv.style.pointerEvents = "none";
    this.containerDiv.style.top = "0px";
    this.containerDiv.style.left = "0px";
    this.containerDiv.style.zIndex = "200";

    // const zoom = this.canvas.getZoom();

    this.canvas.addFunction(
      `${this.name}.add`,
      (
        context: IContext,
        id: string,
        connectionId: string,
        name: string,
        email: any,
        color: string
      ) => {
        const userElements = this.usersMap.get(connectionId);
        if (userElements) {
          this.containerDiv.removeChild(userElements.div);
        }
        this.color = color;

        const div = document.createElement("div");
        div.style.position = "absolute";
        div.id = `online-users-resizer-${connectionId}`;
        div.style.left = "0px";
        div.style.top = "0px";
        // div.style.width = "100px";
        // div.style.height = "100px";
        div.style.border = `${1 / this.canvas.getZoom()}px solid ${color}`;
        div.style.pointerEvents = "none";
        const zoom = this.canvas.getZoom();

        this.containerDiv.appendChild(div);
        this.usersMap.set(connectionId, { div });
      }
    );
    this.canvas.addFunction(
      `${this.name}.remove`,
      (context: IContext, connectionId: string) => {
        const userElements = this.usersMap.get(connectionId);
        if (userElements) {
          this.containerDiv.removeChild(userElements.div);
          this.usersMap.delete(connectionId);
        }
      }
    );

    this.canvas.addFunction(
      `${this.name}.show`,
      (context: IContext, connectionId: string) => {
        const userElements = this.usersMap.get(connectionId);
        if (userElements) {
          userElements.div.style.display = "";
        }
      }
    );
    this.canvas.addFunction(
      `${this.name}.hide`,
      (context: IContext, connectionId: string) => {
        const userElements = this.usersMap.get(connectionId);
        if (userElements) {
          userElements.div.style.display = "none";
        }
      }
    );
    this.canvas.addFunction(
      `${this.name}.setDimension`,
      (context: IContext, connectionId: string, dimenension: any) => {
        let userResizer = this.usersMap.get(connectionId);
        if (userResizer) {
          userResizer.div.style.top = `${dimenension.y}px`;
          userResizer.div.style.left = `${dimenension.x}px`;
          userResizer.div.style.width = `${dimenension.width}px`;
          userResizer.div.style.height = `${dimenension.height}px`;
          userResizer.div.style.transform = `rotate(${dimenension.rotation}deg`;

          // userCursor.div.style.transform = `translate(${coords.x /
          //   zoom}px,${coords.y / zoom}px)`;
        }
      }
    );

    this.canvas.addFunction(
      `${this.name}.resizer`,
      (context: IContext, connectionId: string) => {
        const userElements = this.usersMap.get(connectionId);
        if (userElements) {
          return true;
        }
        return false;
      }
    );

    this.canvas.on("zoom", () => {
      this.usersMap.forEach((userElements: any) => {
        const zoom = this.canvas.getZoom();
        // userElements.svgElement.setAttributeNS(
        //   null,
        //   "height",
        //   `${16 / zoom}px`
        // );
        // userElements.svgElement.setAttributeNS(null, "width", `${16 / zoom}px`);
        // userElements.nameDiv.style.top = `${14 / zoom}px`;
        // userElements.nameDiv.style.left = `${14 / zoom}px`;
        // userElements.nameDiv.style.borderRadius = `${16 / zoom}px`;
        // userElements.nameDiv.style.fontSize = `${12 / zoom}px`;
        userElements.div.style.border = `${1 / zoom}px solid ${this.color}`;
      });
    });
  }
  deactivate() {
    this.dispose();
  }
}
