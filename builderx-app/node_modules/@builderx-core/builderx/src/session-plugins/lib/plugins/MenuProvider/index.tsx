import { ISessionPlugin } from "common-interfaces";
import { Session } from "session";
import { MenuItem } from "./types";
import { renderExternalMenu } from "./ExternalMenuRenderer";
import { registerKeyMapper, unregisterKeyMapper } from "./MenuKeyMapper";
import { action } from "model";

export default class MenuProvider implements ISessionPlugin {
  name = "MenuProvider";
  session: Session;
  menuItemsList: Array<() => MenuItem | undefined>;
  init(session: Session) {
    this.session = session;
    this.menuItemsList = [];
  }

  activate() {
    this.session.addFunction(`${this.name}.get`, () => this.menuItemsList);
    this.session.addFunction(
      `${this.name}.add`,
      (session: Session, menuItemCallback: () => MenuItem | undefined) => {
        this.menuItemsList.push(menuItemCallback);
        registerKeyMapper(session, menuItemCallback);
        action(() => {
          session.emit("MenuProvider");
        });
        return this.menuItemsList.length - 1;
      }
    );
    this.session.addFunction(
      `${this.name}.remove`,
      (session: Session, id: any) => {
        unregisterKeyMapper(session, this.menuItemsList[id]);
        this.menuItemsList.splice(id, 1);
        action(() => {
          session.emit("MenuProvider");
        });
      }
    );
    this.session.addFunction(
      `${this.name}.show`,
      (session: Session, id: any) => {
        if (this.menuItemsList[id]) {
          this.menuItemsList[id]["visible"] = true;
        }
        action(() => {
          session.emit("MenuProvider");
        });
      }
    );
    this.session.addFunction(
      `${this.name}.hide`,
      (session: Session, id: any) => {
        if (this.menuItemsList[id]) {
          this.menuItemsList[id]["visible"] = false;
        }
        action(() => {
          session.emit("MenuProvider");
        });
      }
    );
    this.session.addFunction(
      `${this.name}.renderExternalMenu`,
      (session: Session, placement: any) => {
        let filteredMenuItems = this.menuItemsList.filter(
          (extractedItem: () => MenuItem | undefined) => {
            let item = extractedItem();
            return item && item.placement === placement;
          }
        );
        return renderExternalMenu(session, filteredMenuItems);
      }
    );
  }
  deactivate() {
    //
  }
}
