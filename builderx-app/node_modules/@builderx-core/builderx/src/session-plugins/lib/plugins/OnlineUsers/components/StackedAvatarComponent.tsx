import * as React from "react";
import * as classNames from "classnames";
import { COLORS, createComponent } from "components-x";

interface PropType {
  avatarMap: Map<string, Array<any>>;
  maxAvatars: number;
  uiSize: "l" | "m" | "s";
}
const uiSizes = {
  l: 64,
  m: 48,
  s: 32
};
export default createComponent(
  `
    div.stackedAvatarX ul.avatars {
			display: flex;
			list-style-type: none ;
      margin: auto ;
      flex-direction: row;
		}
    div.stackedAvatarX li.avatars__item {
			margin: 0px 0 0px 0px;
			padding: 0px 0px 0px 0px;
			position: relative;
    }
    div.stackedAvatarX img.avatars__img,
		span.avatars__initials,
		span.avatars__others {
			background-color: #596376 ;
			border: 2px solid #1F2532 ;
			border-radius: 100px 100px 100px 100px ;
			color: #FFFFFF ;
			display: block ;
			font-family: Roboto ;
			font-weight: 600 ;
			text-align: center ;
		}
  `,
  (props: PropType & React.HTMLProps<HTMLDivElement>) => {
    const { avatarMap, uiSize, maxAvatars, ...remainingProps } = props;

    const size = uiSize ? uiSizes[uiSize] : uiSizes["m"];
    const itemStyle = {
      height: size,
      width: size,
      marginRight: -size / 4
    };
    const itemChildStyle = {
      height: size,
      width: size,
      lineHeight: size - 2 + "px",
      fontSize: size / 2.5
    };
    const className = classNames({
      stackedAvatarX: true
    });

    let consolidatedData: any = "";

    let userAvatarArray: any = [];
    avatarMap.forEach(avatar => {
      const userAvatar = { ...avatar[0], count: avatar.length };
      userAvatarArray.push(userAvatar);
    });

    for (let i = maxAvatars; i < userAvatarArray.length; i++) {
      if (i - maxAvatars > 4) {
        consolidatedData += `and ${userAvatarArray.length -
          maxAvatars -
          5} other${userAvatarArray.length - maxAvatars - 5 > 1 ? `s` : ""}`;
        break;
      }
      consolidatedData += `${userAvatarArray[i].name}<br>`;
    }
    return (
      <div
        {...remainingProps}
        style={{
          ...remainingProps.style,
          height: uiSize ? uiSizes[uiSize] : uiSizes["m"],
          marginRight: size / 4
        }}
        className={
          className +
          (remainingProps.className ? " " + remainingProps.className : "")
        }
      >
        <ul className="avatars">
          {userAvatarArray.slice(0, maxAvatars).map((avatar: any, idx: any) => {
            let countString = "";
            if (avatar.count > 1) {
              countString = ` (${avatar.count})`;
            }
            return (
              <li
                key={`avatar-${avatar.connectionId}`}
                className="avatars__item"
                style={itemStyle}
                data-tip={`${avatar.name}${countString}`}
              >
                {avatar.avatar ? (
                  <img
                    src={avatar.avatar}
                    className="avatars__img"
                    alt={avatar.name}
                    style={{
                      ...itemChildStyle,
                      backgroundColor: COLORS.getUtilityColor(
                        avatar.name.charCodeAt(0)
                      )
                    }}
                  />
                ) : (
                  <span
                    className="avatars__others"
                    style={{
                      ...itemChildStyle,
                      backgroundColor: COLORS.getUtilityColor(
                        avatar.name.charCodeAt(0)
                      )
                    }}
                  >
                    {avatar.name.slice(0, 1).toUpperCase()}
                  </span>
                )}
              </li>
            );
          })}
          {userAvatarArray.length > maxAvatars ? (
            <li
              key={`avatar-other`}
              className="avatars__item"
              style={itemStyle}
              data-tip={consolidatedData}
            >
              <span
                className="avatars__others"
                style={{
                  ...itemChildStyle,
                  backgroundColor: COLORS.getUtilityColor(
                    userAvatarArray.length - maxAvatars
                  )
                }}
              >
                {`+${userAvatarArray.length - maxAvatars}`}
              </span>
            </li>
          ) : null}
        </ul>
      </div>
    );
  }
);
