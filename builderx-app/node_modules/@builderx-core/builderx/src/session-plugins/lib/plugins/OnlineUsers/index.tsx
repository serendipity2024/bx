import * as React from "react";
import { ISessionPlugin } from "common-interfaces";
import { Session, Stage } from "session";
import AvatarComponentWrapper from "./components/AvatarComponentWrapper";
import OnlineUserCursorDesignerPlugin from "./OnlineUserCursorDesignerPlugin";
import OnlineUserResizerPlugin from "./OnlineUserResizerPlugin";
import { OnlineUser, OnlineUserCollection } from "./model";
import { forEach } from "lodash";
import { DomainLayer, Domain } from "domain-x";

export default class OnlineUsers implements ISessionPlugin {
  name = "OnlineUsers";
  session: Session;
  onlineUsers: OnlineUserCollection;
  avatarId: string;
  cursorPluginId: string;
  init(session: Session) {
    this.session = session;
    this.onlineUsers = new OnlineUserCollection();

    if (process.env.NODE_ENV !== "production") {
      window["onlineUsers"] = this.onlineUsers;
    }
  }

  activate() {
    this.session.addFunction(
      "OnlineUsers.activate",
      (session: Session, connectionId: string) => {
        const user = this.onlineUsers.getUser(connectionId);
        if (user) {
          user.activate();
          if (session.currentStage) {
            session.currentStage.canvas.executeFunction(
              "OnlineUserCursor.show",
              connectionId
            );
          }
        }
      }
    );
    this.session.addFunction(
      "OnlineUsers.deactivate",
      (session: Session, connectionId: string) => {
        const user = this.onlineUsers.getUser(connectionId);
        if (user) {
          user.deactivate();
          if (session.currentStage) {
            session.currentStage.canvas.executeFunction(
              "OnlineUserCursor.hide",
              connectionId
            );
          }
        }
      }
    );
    this.session.addFunction(
      "OnlineUsers.registerTimer",
      (session: Session, connectionId: string) => {
        const user = this.onlineUsers.getUser(connectionId);
        if (user) {
          user.registerTimerCallback(() => {
            this.session.executeFunction(
              "OnlineUsers.deactivate",
              connectionId
            );
          });
        }
      }
    );
    this.session.addFunction(
      "OnlineUsers.add",
      (session: Session, userData: any) => {
        if (!(userData instanceof OnlineUser)) {
          // console.log(userData, "user data here");
          userData = new OnlineUser(
            userData.id,
            userData.connectionId,
            userData.name,
            userData.email,
            userData.avatar
          );
        }
        this.onlineUsers.addUser(userData);

        const user = this.onlineUsers.getUser(userData.connectionId);

        const artboardStage = session.stages.get("artboard");
        if (user && session.connectionId != userData.connectionId) {
          if (artboardStage) {
            artboardStage.canvas.executeFunction(
              "OnlineUserCursor.add",
              userData.id,
              userData.connectionId,
              userData.name,
              userData.email,
              userData.color
            );

            artboardStage.canvas.executeFunction(
              "OnlineUserResizer.add",
              userData.id,
              userData.connectionId,
              userData.name,
              userData.email,
              userData.color
            );
          }
        }
      }
    );
    this.session.addFunction(
      "OnlineUsers.setCursor",
      (
        session: Session,
        userId: string,
        connectionId: string,
        position: { x: number; y: number },
        currentStageId: string,
        selectedLayerIds: Array<string>
      ) => {
        const user = this.onlineUsers.getUser(connectionId);
        if (user && session.connectionId != connectionId) {
          user.setCursorPosition(position.x, position.y);

          const stage = session.stages.get(currentStageId);
          if (stage) {
            let cursor = stage.canvas.executeFunction(
              "OnlineUserCursor.cursor",
              connectionId
            );
            if (session.currentStage.id !== currentStageId) {
              session.currentStage.canvas.executeFunction(
                "OnlineUserCursor.remove",
                connectionId
              );
            }

            if (!cursor) {
              stage.canvas.executeFunction(
                "OnlineUserCursor.add",
                user.id,
                user.connectionId,
                user.name,
                user.email,
                user.color
              );
            }
            stage.canvas.executeFunction(
              "OnlineUserCursor.setPosition",
              connectionId,
              position
            );

            const boundingBox = this.lockAndGetBoundingBox(
              session,
              stage,
              user.selectedLayers
            );
            stage.canvas.executeFunction(
              "OnlineUserResizer.setDimension",
              connectionId,
              {
                x: boundingBox.x,
                y: boundingBox.y,
                width: boundingBox.width,
                height: boundingBox.height,
                rotation: boundingBox.rotation
              }
            );
          }
        }
      }
    );

    this.session.addFunction(
      "OnlineUsers.setSelectedLayers",
      (
        session: Session,
        userId: string,
        connectionId: string,
        currentStageId: string,
        selectedLayerIds: Array<string>
      ) => {
        const user = this.onlineUsers.getUser(connectionId);
        if (user && session.connectionId != connectionId) {
          const stage = session.stages.get(currentStageId);
          if (stage) {
            //unlock existing selectedLayers
            this.unlockSelectedLayers(session, stage, user.selectedLayers);
            //lock layer

            let selectedLayers: any = [];
            forEach(selectedLayerIds, layerId => {
              const layer = session.getLayerFromLayerPath(layerId);
              if (layer) {
                selectedLayers.push(layer);
              }
            });
            user.setSelectedLayers(selectedLayers);

            const boundingBox = this.lockAndGetBoundingBox(
              session,
              stage,
              selectedLayers
            );
            // set resizer dimension

            session.currentStage.canvas.executeFunction(
              "OnlineUserResizer.remove",
              connectionId
            );

            let resizer = stage.canvas.executeFunction(
              "OnlineUserResizer.resizer",
              connectionId
            );
            // if (session.currentStage.id !== currentStageId) {

            // }

            if (!resizer) {
              stage.canvas.executeFunction(
                "OnlineUserResizer.add",
                user.id,
                user.connectionId,
                user.name,
                user.email,
                user.color
              );
            }

            // const boundingBox = session.getAbsoluteBoundingBox(selectedLayers);
            stage.canvas.executeFunction(
              "OnlineUserResizer.setDimension",
              connectionId,
              {
                x: boundingBox.x,
                y: boundingBox.y,
                width: boundingBox.width,
                height: boundingBox.height,
                rotation: boundingBox.rotation
              }
            );
          }
        }
      }
    );

    this.session.addFunction(
      "OnlineUsers.setLockedParentLayerId",
      (
        session: Session,
        userId: string,
        connectionId: string,
        currentStageId: string,
        parentLayerId: string
      ) => {
        const user = this.onlineUsers.getUser(connectionId);
        if (user && session.connectionId != connectionId) {
          user.setLockedParentLayerId(parentLayerId);
        }
      }
    );

    this.session.addFunction(
      "OnlineUsers.deselectAllLayers",
      (session: Session) => {
        //
      }
    );

    this.session.addFunction(
      "OnlineUsers.get",
      (session: Session) => this.onlineUsers
    );
    this.session.addFunction(
      "OnlineUsers.remove",
      (session: Session, userData: any) => {
        // const userId = String(id);
        this.onlineUsers.removeUser(userData.connectionId);
        const stages = session.stages;
        stages.forEach(stage => {
          if (stage) {
            stage.canvas.executeFunction(
              "OnlineUserCursor.remove",
              userData.connectionId
            );

            stage.canvas.executeFunction(
              "OnlineUserResizer.remove",
              userData.connectionId
            );

            this.unlockSelectedLayers(session, stage, userData.selectedLayers);
          }
        });
      }
    );
    if (this.session.isPluginLoaded("ExternalComponentsProvider")) {
      this.avatarId = this.session.executeFunction(
        "ExternalComponentsProvider.add",
        {
          placement: "header-panel-right",
          component: () => (
            <AvatarComponentWrapper
              session={this.session}
              userCollection={this.onlineUsers}
            />
          )
        }
      );
      if (this.session.isPluginLoaded("ExternalDesignerPluginsProvider")) {
        this.cursorPluginId = this.session.executeFunction(
          "ExternalDesignerPluginsProvider.add",
          {
            readonly: false,
            plugin: OnlineUserCursorDesignerPlugin
          }
        );
        this.session.executeFunction("ExternalDesignerPluginsProvider.add", {
          readonly: false,
          plugin: OnlineUserResizerPlugin
        });
      }
      // [
      //   { id: "ankur", name: "Ankur Kedia" },
      //   // {
      //   //   id: "Mandir",
      //   //   name: "Mandir",
      //   //   avatar: "https://www.w3schools.com/html/pic_trulli.jpg"
      //   // },
      //   {
      //     id: "Jacket",
      //     name: "Jacket",
      //     avatar: "https://www.w3schools.com/html/img_girl.jpg"
      //   },
      //   // {
      //   //   id: "User",
      //   //   name: "User",
      //   //   avatar: "https://www.w3schools.com/html/img_chania.jpg"
      //   // },
      //   { id: "Suraj", name: "Suraj Ahmed" }
      //   // { id: "sanket", name: "Sanket" },
      //   // { id: "hims", name: "Himanshu" }
      // ].forEach((val: any) => {
      //   // this.session.executeFunction(
      //   //   "addOnlineUser",
      //   //   new OnlineUser(val.id, val.name, val.avatar)
      //   // );
      // });
    }
  }
  deactivate() {
    //
  }

  lockAndGetBoundingBox(
    session: Session,
    stage: Stage,
    selectedLayers: Array<DomainLayer>
  ) {
    let compiledLayers: any = [];
    selectedLayers.map((l: DomainLayer) => {
      if (l) {
        const canvasRef = this.session.executeFunction(
          "getOwnCanvasRef",
          l,
          stage.canvas
        );

        // lock layer

        if (canvasRef) {
          if (l.isFlexChild) {
            canvasRef.parent.children.forEach((cLayer: any) => {
              cLayer.lock();
            });
          } else {
            canvasRef.lock();
          }
          compiledLayers.push(canvasRef);
        }
      }
    });

    const boundingBox = stage.canvas.getBoundingBox(compiledLayers);
    return boundingBox;
  }
  unlockSelectedLayers(
    session: Session,
    stage: Stage,
    selectedLayers: Array<DomainLayer>
  ) {
    forEach(selectedLayers, (layer: DomainLayer) => {
      if (layer) {
        const canvasRef = this.session.executeFunction(
          "getOwnCanvasRef",
          layer,
          stage.canvas
        );
        // lock layer

        if (canvasRef) {
          if (layer.isFlexChild) {
            canvasRef.parent.children.forEach((cLayer: any) => {
              const domainLayer = cLayer.executeFunction(
                "getData",
                "domainLayer"
              );
              if (!domainLayer.locked) {
                cLayer.unlock();
              }
            });
          } else {
            if (!layer.locked) {
              canvasRef.unlock();
            }
          }
        }
      }
    });
  }
}
