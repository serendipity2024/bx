import { Session, StageArtboard, Stage } from "session";
import { ISessionPlugin } from "common-interfaces";
import {
  DomainLayer,
  DomainFile,
  Style,
  Props,
  LayerNodeModel
} from "domain-x";
import { designerAction } from "@builderx-core/designer";
import { action } from "model";
import { Utils } from "utils";
import addLayerPatch from "./patchGlues/addLayerPatch";
import addFilePatch from "./patchGlues/addFilePatch";
import removeStylePatch from "./patchGlues/removeStylePatch";
import removePropPatch from "./patchGlues/removePropPatch";
import removeFilePatch from "./patchGlues/removeFilePatch";
import removeLayerPatch from "./patchGlues/removeLayerPatch";
import setStyleAttributePatch from "./patchGlues/setStyleAttributePatch";
import setPropPatch from "./patchGlues/setPropPatch";
import addStageArtboardPatch from "./patchGlues/addStageArtboardPatch";
import addStagePatch from "./patchGlues/addStagePatch";
import changeDisplayModePatch from "./patchGlues/changeDisplayModePatch";
import { last, isNil, get } from "lodash";
import setLayerSelectedPatch from "./patchGlues/setLayerSelectedPatch";
import setProjectIsLocked from "./patchGlues/setProjectIsLocked";
import removeStageArtboardPatch from "./patchGlues/removeStageArtboardPatch";
import setLayerHoveredPatch from "./patchGlues/setLayerHoveredPatch";
import removeStagePatch from "./patchGlues/removeStagePatch";
import setSelectedFilePatch from "./patchGlues/setSelectedFilePatch";
import setSelectedLayersPatch from "./patchGlues/setSelectedLayersPatch";
import setCenterWrapperPatch from "./patchGlues/setCenterWrapperPatch";
import setConfigurationPatch from "./patchGlues/setConfigurationPatch";
import setCurrentStagePatch from "./patchGlues/setCurrentStagePatch";
import setDrawTypePatch from "./patchGlues/setDrawTypePatch";
import setDirtyPatch from "./patchGlues/setDirtyPatch";
import setHoveredLayersPatch from "./patchGlues/setHoveredLayersPatch";
import setLayerHiddenPatch from "./patchGlues/setLayerHiddenPatch";
import setLayerLockedPatch from "./patchGlues/setLayerLockedPatch";
import setLayerValuePatch from "./patchGlues/setLayerValuePatch";
import setLayerNavigateToPatch from "./patchGlues/setLayerNavigateToPatch ";
import setStatusBarPatch from "./patchGlues/setStatusBarPatch";
import setZoomPatch from "./patchGlues/setZoomPatch";
import setStageArtboardStyleAttributePatch from "./patchGlues/setStageArtboardStyleAttributePatch";
import setScopeVariablesPatch from "./patchGlues/setScopeVariablesPatch";
import createLiteralNodePatch from "./patchGlues/createLiteralNodePatch";
import setLayerResizerVisiblePatch from "./patchGlues/setLayerResizerVisiblePatch";
import setLayerCollapsedPatch from "./patchGlues/setLayerCollapsedPatch";
import renameSymbolFilePatch from "./patchGlues/renameSymbolFilePatch";
import setLayerStyleNamePatch from "./patchGlues/setLayerStyleNamePatch";
import setLayerAspectRatioPatch from "./patchGlues/setLayerAspectRatioPatch";

export default class SessionCanvasGlue implements ISessionPlugin {
  name = "SessionCanvasGlue";
  session: Session;

  init(session: Session) {
    this.session = session;
  }

  activate() {
    this.session.onPatch((operation: any) => {
      const splitPath = operation.path.split(":::");

      let filePath = "",
        layerPath = "",
        stageId = "",
        expressionPath = "",
        scopeVariablesPath = "",
        expressionListPath = "",
        propsStylePath = "";
      ({
        filePath,
        propsStylePath,
        layerPath,
        stageId,
        scopeVariablesPath,
        expressionListPath,
        expressionPath
      } = Utils.splitPatchPath(operation));

      // let operationPath = "/" + splitPath[1];

      // if (operationPath.indexOf("/0/") === 0) {
      //   operationPath = operationPath.replace("/0/", "/layer/");
      // }

      let domainFile: DomainFile;
      let domainLayer: DomainLayer;
      let parentDomainLayer: DomainLayer | DomainFile;
      let stageArtboard: StageArtboard;
      let stage: Stage;
      let currentViewport: any;
      let currentStageId: string;
      if (filePath && !layerPath) {
        domainFile = this.session.domain.files.get(filePath) as DomainFile;
      }

      if (filePath && layerPath) {
        domainLayer = this.session.getLayerFromLayerPath(
          layerPath
        ) as DomainLayer;
        parentDomainLayer = domainLayer ? domainLayer.parent : undefined;
      }

      if (stageId) {
        let typeOfStage = operation.path.split("/")[1];
        typeOfStage = typeOfStage.slice(0, typeOfStage.indexOf(":::"));
        const stages = this.session[typeOfStage];
        stage = stages.get(stageId);

        if (operation.path.includes("stageArtboards/")) {
          // @ts-ignore
          const stageArtboardIndex: string = last(operation.path.split("/"));

          if (!isNil(stageArtboardIndex)) {
            stageArtboard = stage.stageArtboards[stageArtboardIndex];
          }
        }
      }
      if (this.session.currentStage) {
        currentViewport = this.session.currentStage.canvas.getViewport();
        currentStageId = this.session.currentStage.id;
      }

      const patchCallback = () => {
        // designerAction(() => {
        //   action(() => {
        // }

        if (
          operation.op === "add" &&
          operation.value &&
          operation.value.type === "class"
        ) {
          if (
            operation.value.className === "DomainLayer" ||
            operation.value.className === "LiteralNode"
          ) {
            addLayerPatch(this.session, layerPath, filePath);
          } else if (operation.value.className === "DomainFile") {
            addFilePatch(this.session, filePath);
          } else if (operation.value.className === "StageArtboard") {
            addStageArtboardPatch(this.session, stageId, operation);
          } else if (operation.value.className === "Stage") {
            addStagePatch(this.session, stageId, operation);
          }
        } else if (operation.op === "remove") {
          const layer = layerPath ? domainLayer : domainFile;
          if (propsStylePath && propsStylePath.includes("/style")) {
            removeStylePatch(this.session, operation.path, layer);
          } else if (propsStylePath) {
            removePropPatch(this.session, operation.path, layer);
          } else if (scopeVariablesPath) {
            //
          } else if (expressionListPath) {
            //
          } else if (filePath && !layerPath) {
            removeFilePatch(this.session, domainFile);
          } else if (filePath && layerPath) {
            removeLayerPatch(this.session, domainLayer, parentDomainLayer);
          } else if (stageId) {
            if (operation.path.includes("stageArtboard")) {
              removeStageArtboardPatch(
                this.session,
                operation,
                stageArtboard,
                stageId
              );
            } else if (!operation.path.includes("stageArtboard")) {
              removeStagePatch(this.session, stage);
            }
          }
        } else if (operation.op === "replace" || operation.op === "add") {
          const layer = layerPath ? domainLayer : domainFile;

          if (operation.value && operation.value.type === "class") {
            if (operation.value.className === "LiteralNode") {
              createLiteralNodePatch(
                this.session,
                operation,
                layerPath,
                filePath,
                propsStylePath,
                expressionPath
              );
            }
            let resolvedObject, modifiedPath;
            ({ resolvedObject, modifiedPath } = Utils.resolveMapsForJsonPatch(
              operation,
              this.session
            ));
            if (resolvedObject) {
              let modifiedPathChunks = modifiedPath.split("/");
              modifiedPathChunks = modifiedPathChunks.slice(1);

              const addedNode = get(
                resolvedObject,
                modifiedPathChunks.join(".")
              );

              const parentNode = get(
                resolvedObject,
                modifiedPathChunks
                  .slice(0, modifiedPathChunks.length - 1)
                  .join(".")
              );

              if (
                parentNode instanceof DomainLayer ||
                parentNode instanceof LayerNodeModel ||
                parentNode instanceof Props ||
                parentNode instanceof Style
              ) {
                addedNode.parent = parentNode;
              } else {
                const parentNode = get(
                  resolvedObject,
                  modifiedPathChunks
                    .slice(0, modifiedPathChunks.length - 2)
                    .join(".")
                );

                if (
                  parentNode instanceof DomainLayer ||
                  parentNode instanceof LayerNodeModel ||
                  parentNode instanceof Props ||
                  parentNode instanceof Style
                ) {
                  addedNode.parent = parentNode;
                }
              }
            }
          } else if (
            operation.path.includes("/props/style") &&
            operation.path.includes("stageArtboards/")
          ) {
            setStageArtboardStyleAttributePatch(
              this.session,
              operation,
              stageId
            );
          } else if (propsStylePath && propsStylePath.includes("/style")) {
            setStyleAttributePatch(
              this.session,
              operation.path,
              layer,
              operation
            );
          } else if (propsStylePath) {
            setPropPatch(this.session, operation.path, layer, operation);
          } else if ((filePath || layerPath) && !propsStylePath) {
            const endOfPath = last(operation.path.split("/"));

            if (endOfPath === "selected") {
              setLayerSelectedPatch(domainLayer);
            } else if (endOfPath === "hovered") {
              setLayerHoveredPatch(domainLayer);
            } else if (endOfPath === "hidden") {
              setLayerHiddenPatch(this.session, domainLayer, operation);
            } else if (endOfPath === "locked") {
              setLayerLockedPatch(this.session, domainLayer, operation);
            } else if (endOfPath === "collapsed") {
              setLayerCollapsedPatch(domainLayer);
            } else if (endOfPath === "aspectRatio") {
              setLayerAspectRatioPatch(this.session, domainLayer, operation);
            } else if (endOfPath === "isResizerVisible") {
              setLayerResizerVisiblePatch(this.session, layer, operation);
            } else if (endOfPath === "value") {
              setLayerValuePatch(this.session, domainLayer, operation);
            } else if (endOfPath === "navigateTo") {
              setLayerNavigateToPatch(domainLayer);
            } else if (endOfPath === "styleName") {
              setLayerStyleNamePatch(domainLayer);
            } else if (
              endOfPath === "centerHorizontal" ||
              endOfPath === "centerVertical"
            ) {
              setCenterWrapperPatch(this.session, domainLayer);
            } else if (endOfPath === "isDirty") {
              setDirtyPatch(this.session, domainFile);
            } else if (endOfPath === "statusBar") {
              setStatusBarPatch(this.session, domainFile);
            } else if (endOfPath === "scopeVariables") {
              setScopeVariablesPatch(this.session, layer);
            }
          } else if (operation.path === "/displayMode") {
            changeDisplayModePatch(this.session, operation.value);
          } else if (operation.path === "/project/isLocked") {
            setProjectIsLocked(this.session, operation.value);
          } else if (operation.path === "/selectedFile") {
            setSelectedFilePatch(this.session);
          } else if (operation.path === "/selectedLayers") {
            setSelectedLayersPatch(this.session);
          } else if (operation.path === "/hoveredLayers") {
            setHoveredLayersPatch(this.session);
          } else if (operation.path === "/currentStage") {
            setCurrentStagePatch(
              this.session,
              operation,
              currentViewport,
              currentStageId
            );
          } else if (operation.path === "/currentStage/tools/draw/type") {
            setDrawTypePatch(this.session, operation);
          } else if (operation.path.includes("configuration/configurations")) {
            setConfigurationPatch(this.session, operation);
          } else if (operation.path === "/currentStage/tools/zoom") {
            setZoomPatch(this.session, operation);
          }
          // else if (
          //   [
          //     "LogicalExpression",
          //     "ConditionalExpression",
          //     "ExpressionStatement",
          //     "Expression",
          //     "BinaryExpression",
          //     "DomainLayer",
          //     "LiteralNode"
          //   ].includes(operation.value.className)
          // ) {
          // }
        } else if (operation.op === "move") {
          if (
            operation.path.startsWith("/domain/files") &&
            operation.path.split(":::").length === 2
          ) {
            renameSymbolFilePatch(this.session, operation);
          }
        }
        //   });
        // });
      };

      return patchCallback;
    });
  }

  deactivate() {}
}
