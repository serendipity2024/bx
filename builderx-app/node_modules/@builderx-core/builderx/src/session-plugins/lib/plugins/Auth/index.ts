import { ISessionPlugin } from "common-interfaces";
import { Session } from "session";
import { apiSdk, ApiSdk } from "@builderx-core/api-sdk";
import urljoin from "url-join";
import { isEmpty, get } from "lodash";
import { Project } from "@builderx-core/api-sdk/dist/interfaces";
import jsCookie from "js-cookie";
import { Utils } from "utils";

export default class AuthPlugin implements ISessionPlugin {
  name = "Auth";
  session: Session;
  projectId: string;
  userId: string;
  apiSdk: ApiSdk;
  env: any;

  constructor(env: any) {
    this.env = env;
  }

  async init(session: Session) {
    this.session = session;
    apiSdk.init({
      localFontsUrl: "",
      baseUrl: this.env.BACKEND_API_URL,
      accessToken: jsCookie.get("builderx-auth-token")
    });
    this.apiSdk = apiSdk;

    if (await this.isLoggedIn()) {
      let hasTeam = false;
      try {
        hasTeam = await this.hasTeam();
      } catch (err) {
        console.log("No team data", err);
      }
      if (!hasTeam) {
        Utils.redirectParentWindow(
          urljoin(Utils.getEnv("BUILDERX_WEBSITE_URL"), "team")
        );
        // window.parent.location.replace(
        //   urljoin(Utils.getEnv("BUILDERX_WEBSITE_URL"), "team")
        // );
        // return;
      }
    }

    this.projectId = Utils.getEnv("PROJECT_ID");

    // if (isEmpty(this.projectId) || this.projectId === "app") {
    //   await this.newProject();
    // } else {
    await this.openProject();
    // }
  }

  private async openProject() {
    try {
      this.session.setProjectId(this.projectId);
      this.session.setUserId(this.userId);
      const projectDetails = await this.getProjectDetails(
        this.session.connectionId
      );

      console.log(projectDetails, "project details");
      const cloneProject = localStorage.getItem("clone-project");
      if (cloneProject && projectDetails.sample) {
        localStorage.removeItem("clone-project");
        try {
          this.session.cloneProject();
        } catch (error) {
          this.session.notificationManager.notifyError(
            "",
            "There is some issue in cloning this template. Please try again."
          );
        }
      }
      // @ts-ignore
      this.session.readonly = !projectDetails.isEditable;
      this.session.project.setShareabilityData(
        projectDetails.project_shareability
      );
      this.session.project.setIsSample(
        // @ts-ignore
        !projectDetails.isEditable && projectDetails.sample
      );
      this.session.project.setTeamId(projectDetails.team.id);
      this.session.project.setProjectName(projectDetails.name);
      // @ts-ignore
      this.session.project.isLocked = projectDetails.isLocked;
      this.session.project.setProjectAccess(projectDetails.access);
      this.session.setEditorMode(
        projectDetails.sample ? { mode: "design_code" } : projectDetails.access
      );
      if (projectDetails.session) {
        // this.session.commandManager.executeAndSkip(
        //   new SetLastEditedBy(this.session, projectDetails.session)
        // );
        this.session.project.setLastEditedBy(projectDetails.session);
      }
      // @ts-ignore
      if (projectDetails.isLocked) {
        this.session.readonly = true;
      }
      this.session.project.setSubscription(
        get(projectDetails, "team.isSubscribed", false),
        get(projectDetails, "team.days_remaining")
      );
    } catch (error) {
      this.session.throwErrorResponse(error, this.session);
    }
  }

  activate() {
    this.session.addFunction("hasTeam", this.hasTeam);
    this.session.addFunction("isLoggedIn", this.isLoggedIn);
    this.session.addFunction("renameProject", this.renameProject);
    this.session.addFunction("getGoogleFonts", this.getGoogleFonts);
  }

  hasTeam = (): Promise<boolean> => {
    return new Promise(async (resolve, reject) => {
      try {
        const response = await this.apiSdk.auth();
        if (!response) {
          throw new Error("Not Authenticated");
        }
        let hasTeam = get(response, "data.user.teams.length", 0);
        resolve(hasTeam);
      } catch (error) {
        console.log("error: ", error);
        reject(error);
      }
    });
  };

  isLoggedIn = async () => {
    try {
      const response = await this.apiSdk.auth();
      if (!response) {
        throw new Error("Not Authenticated");
      }
      const id = response.data.id.toString();

      if (id) {
        this.userId = id;

        return true;
      } else {
        return false;
      }
    } catch (error) {
      console.log("error");
      return false;
    }
    return false;
  };

  getProjectDetails = (connectionId: string = "") => {
    return new Promise<Project>((resolve, reject) => {
      this.apiSdk.project
        .get(this.projectId, connectionId)
        .then(response => {
          resolve(response.data);
        })
        .catch(error => {
          console.log(error, "Error in fetching getProjectDetails");
          reject(error);
        });
    });
  };

  renameProject = (session: Session, newName: string) => {
    return new Promise<string>((resolve: any, reject: any) => {
      this.session.before();
      this.apiSdk.project
        .update(this.projectId, "name", newName)
        .then(async response => {
          this.session.after();
          resolve(true);
        })
        .catch(err => {
          this.session.after();
          reject(err);
        });
    });
  };

  getGoogleFonts = (session: Session, apiKey: string) => {
    return this.apiSdk.assets.getGoogleFonts(apiKey);
  };

  deactivate() {}
}
