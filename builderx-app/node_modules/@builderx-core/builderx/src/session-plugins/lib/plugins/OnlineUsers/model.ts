import { Model, action } from "model";
import { COLORS } from "components-x";
import { DomainLayer } from "domain-x";
export class OnlineUser extends Model {
  name: string;
  email: string;
  id: string;
  connectionId: string;
  avatar: string | undefined;
  active: boolean | undefined;
  cursorPosition: { x: number; y: number };
  stageId: string;
  activityTimeout: any;
  timerCallback: any;
  color: string;
  selectedLayers: Array<DomainLayer> = [];
  lockedParentLayerId: string = "";
  constructor(
    id: string,
    connectionId: string,
    name: string,
    email: string,
    avatar?: string,
    active: boolean = true
  ) {
    super();
    this.email = email;
    this.connectionId = connectionId;
    this.name = name ? name : email;
    this.id = String(id);
    this.avatar = avatar;
    this.active = active;
    this.cursorPosition = { x: 0, y: 0 };
    this.stageId = "artboard";
    this.color = COLORS.getUtilityColor(this.name.charCodeAt(0));
    this.activityTimeout = setTimeout(() => {
      this.deactivate();
    }, 30000);
  }
  registerTimerCallback(callback: any) {
    this.timerCallback = callback;
  }
  private resetActivityTimeout() {
    clearTimeout(this.activityTimeout);
    this.activityTimeout = setTimeout(() => {
      if (this.timerCallback) {
        this.timerCallback();
      }
    }, 30000);
  }
  activate() {
    this.active = true;
    this.resetActivityTimeout();
    action(() => {
      this.emit("active");
    });
  }
  deactivate() {
    this.active = false;
    clearTimeout(this.activityTimeout);
    action(() => {
      this.emit("active");
    });
  }
  setCursorPosition(x: number, y: number) {
    this.cursorPosition = { x, y };
    this.resetActivityTimeout();
    action(() => {
      this.emit("cursorPosition");
    });
  }

  setSelectedLayers(layers: Array<DomainLayer>) {
    this.selectedLayers = layers;
  }

  setLockedParentLayerId(layerId: string) {
    this.lockedParentLayerId = layerId;
  }
  changeCurrentStageId(stage: string) {
    this.stageId = stage;
    this.resetActivityTimeout();
    action(() => {
      this.emit("stageId");
    });
  }
}
export class OnlineUserCollection extends Model {
  private _users: Map<string, OnlineUser>;
  constructor() {
    super();
    this._users = new Map();
  }
  get users() {
    return this._users;
  }
  getUser(connectionId: string): OnlineUser | undefined {
    return this._users.get(connectionId);
  }
  addUser(user: OnlineUser) {
    this._users.set(user.connectionId, user);
    action(() => {
      this.emit("users");
    });
  }
  removeUser(connectionId: string) {
    this._users.delete(connectionId);
    action(() => {
      this.emit("users");
    });
  }
}
