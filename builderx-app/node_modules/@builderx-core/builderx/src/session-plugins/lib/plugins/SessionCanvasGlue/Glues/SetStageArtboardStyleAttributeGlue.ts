import { DomainLayer, DomainFile } from "domain-x";
import { Layer } from "@builderx-core/designer";
import { forEach } from "lodash";
import { SessionEvent } from "event-manager";
import { Session, StageArtboard } from "session";
import { globalRefMap } from "global-ref-map";

export function updateCompiledLayerStyle(
  session: Session,
  compiledLayer: Layer,
  key: string,
  value: any
) {
  // if (compiledLayer instanceof Layer) {
  if (compiledLayer.layout.isValidKey(key)) {
    compiledLayer.setLayout(key, value);
  } else {
    compiledLayer.setStyle(key, value);
  }
}
function applySideEffects(
  session: Session,
  stageArtboard: StageArtboard,
  key: string,
  value: any
) {
  const compiledLayers = globalRefMap.get(stageArtboard);
  forEach(compiledLayers, (compiledLayer: Layer | StageArtboard) => {
    if (compiledLayer instanceof Layer) {
      updateCompiledLayerStyle(session, compiledLayer, key, value);
    }

    if (compiledLayer instanceof StageArtboard) {
      compiledLayer.props.setStyleAttribute(key, value);

      const event = new SessionEvent("setStyleAttribute", {
        layer: compiledLayer,
        key,
        value
      });
      session.eventManager.dispatchEvent("setStyleAttribute", event);
    }
  });
  //
}

export default function SetStageArtboardStyleAttributeGlue(
  session: Session,
  e: SessionEvent
) {
  applySideEffects(
    session,
    e.payload.stageArtboard,
    e.payload.key,
    e.payload.value
  );
}
