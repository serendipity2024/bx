import { ISessionPlugin } from "common-interfaces";
import { Session, Stage } from "session";
import { SessionEvent } from "event-manager";
import { DomainLayer, DomainFile } from "domain-x";
import { Layer, Canvas } from "@builderx-core/designer";
import AddLayerGlue from "./Glues/AddLayerGlue";
import AddFileGlue from "./Glues/AddFileGlue";
import AddStageArtboardGlue from "./Glues/AddStageArtboardGlue";
import AddStageGlue from "./Glues/AddStageGlue";
import RemoveStageGlue from "./Glues/RemoveStageGlue";
import SetPropGlue from "./Glues/SetPropGlue";
import FocusArtboardGlue from "./Glues/FocusArtboardGlue";
import ToggleSnapGlue from "./Glues/ToggleSnapGlue";
import SetLayerLockGlue from "./Glues/SetLayerLockGlue";
import SetZoomGlue from "./Glues/SetZoomGlue";
import RemoveLayerGlue from "./Glues/RemoveLayerGlue";
import RemoveFileGlue from "./Glues/RemoveFileGlue";
import RemovePropGlue from "./Glues/RemovePropGlue";
import RemoveStyleAttributeGlue from "./Glues/RemoveStyleAttributeGlue";
import SelectFileGlue from "./Glues/SelectFileGlue";
import SelectLayersGlue from "./Glues/SelectLayersGlue";
import SelectToolGlue from "./Glues/SelectToolGlue";
import SetDrawTypeGlue from "./Glues/SetDrawTypeGlue";
import { getOwnCanvasRef, getOwnStageArtboardRef } from "./Utils";
import SetSnapGlue from "./Glues/SetSnapGlue";
import SetRulerVisibilityGlue from "./Glues/SetRulerVisibilityGlue";
import SetPathGlue from "./Glues/SetPathGlue";
import SetLiteralValueGlue from "./Glues/SetLiteralValueGlue";
import SetHoverLayersGlue from "./Glues/SetHoverLayersGlue";
import SetGridVisibilityGlue from "./Glues/SetGridVisibilityGlue";
import SetGridSizeGlue from "./Glues/SetGridSizeGlue";
import SetCenterWrapperGlue from "./Glues/SetCenterWrapperGlue";
import SetStageArtboardStyleAttributeGlue from "./Glues/SetStageArtboardStyleAttributeGlue";
import SetCurrentStageGlue from "./Glues/SetCurrentStageGlue";
import SetStyleAttributeGlue from "./Glues/SetStyleAttributeGlue";
import { globalRefMap } from "global-ref-map";
import DuplicateRulersGlue from "./Glues/DuplicateRulersGlue";
import SetResizerVisibilityGlue from "./Glues/SetResizerVisibilityGlue";
import RemoveStageArtboardGlue from "./Glues/RemoveStageArtboardGlue";
import SetLayerHideGlue from "./Glues/SetLayerHideGlue";
import CreateExpressionNodeGlue from "./Glues/CreateExpressionNodeGlue";
import RenameSymbolFileGlue from "./Glues/RenameSymbolFileGlue";
import LockProjectGlue from "./Glues/LockProjectGlue";
import SetConfigGlue from "./Glues/SetConfigGlue";
import SetAllScopeVariablesGlue from "./Glues/SetAllScopeVariablesGlue";
import SetStatusBarGlue from "./Glues/SetStatusBarGlue";
import ChangeDisplayModeGlue from "./Glues/ChangeDisplayModeGlue";
import ShowCodeEditorGlue from "./Glues/ShowCodeEditorGlue";
import SetLayerAspectRatioGlue from "./Glues/SetLayerAspectRatioGlue";

export default class SessionCanvasGlue implements ISessionPlugin {
  name = "SessionCanvasGlue";
  session: Session;

  init(session: Session) {
    this.session = session;
  }

  activate() {
    this.session.addFunction(
      "getCanvasRefsForDomainLayer",
      (session: Session, domainLayer: DomainLayer | DomainFile) => {
        return globalRefMap.get(domainLayer);
      }
    );

    this.session.addFunction(
      "getOwnCanvasRef",
      (
        session: Session,
        domainLayer: DomainLayer | DomainFile,
        canvas: Canvas
      ) => {
        return getOwnCanvasRef(domainLayer, canvas);
      }
    );
    this.session.addFunction(
      "getOwnStageArtboardRef",
      (session: Session, domainFile: DomainFile, stage: Stage) => {
        return getOwnStageArtboardRef(domainFile, stage);
      }
    );

    this.session.eventManager.addEventListener(
      "setStyleAttribute",
      (event: SessionEvent) => {
        SetStyleAttributeGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setCurrentStage",
      (event: SessionEvent) => {
        SetCurrentStageGlue(this.session, event);
      }
    );

    this.session.eventManager.addEventListener(
      "addLayer",
      (event: SessionEvent) => {
        AddLayerGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "addFile",
      (event: SessionEvent) => {
        AddFileGlue(this.session, event);
      }
    );

    this.session.eventManager.addEventListener(
      "addStage",
      (event: SessionEvent) => {
        AddStageGlue(this.session, event);
      }
    );

    this.session.eventManager.addEventListener(
      "removeStage",
      (event: SessionEvent) => {
        RemoveStageGlue(this.session, event);
      }
    );

    this.session.eventManager.addEventListener(
      "addStageArtboard",
      (event: SessionEvent) => {
        AddStageArtboardGlue(this.session, event);
      }
    );

    this.session.eventManager.addEventListener(
      "setProp",
      (event: SessionEvent) => {
        SetPropGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "focusArtboard",
      (event: SessionEvent) => {
        FocusArtboardGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "toggleSnap",
      (event: SessionEvent) => {
        ToggleSnapGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setLayerLock",
      (event: SessionEvent) => {
        SetLayerLockGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setLayerHide",
      (event: SessionEvent) => {
        SetLayerHideGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setZoom",
      (event: SessionEvent) => {
        SetZoomGlue(this.session, event);
      }
    );

    this.session.eventManager.addEventListener(
      "removeLayer",
      (event: SessionEvent) => {
        RemoveLayerGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "removeFile",
      (event: SessionEvent) => {
        RemoveFileGlue(this.session, event);
      }
    );

    this.session.eventManager.addEventListener(
      "removeProp",
      (event: SessionEvent) => {
        RemovePropGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "removeStyleAttribute",
      (event: SessionEvent) => {
        RemoveStyleAttributeGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "selectFile",
      (event: SessionEvent) => {
        SelectFileGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "selectLayers",
      (event: SessionEvent) => {
        SelectLayersGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setCenterWrapper",
      (event: SessionEvent) => {
        SetCenterWrapperGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "selectTool",
      (event: SessionEvent) => {
        SelectToolGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setDrawType",
      (event: SessionEvent) => {
        SetDrawTypeGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setSnap",
      (event: SessionEvent) => {
        SetSnapGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setRulerVisibility",
      (event: SessionEvent) => {
        SetRulerVisibilityGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setPath",
      (event: SessionEvent) => {
        SetPathGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setLiteralValue",
      (event: SessionEvent) => {
        SetLiteralValueGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setHoverLayers",
      (event: SessionEvent) => {
        SetHoverLayersGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setGridVisibility",
      (event: SessionEvent) => {
        SetGridVisibilityGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setGridSize",
      (event: SessionEvent) => {
        SetGridSizeGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setStageArtboardStyleAttribute",
      (event: SessionEvent) => {
        SetStageArtboardStyleAttributeGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "duplicateRulers",
      (event: SessionEvent) => {
        DuplicateRulersGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setResizerVisibility",
      (event: SessionEvent) => {
        SetResizerVisibilityGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "removeStageArtboard",
      (event: SessionEvent) => {
        RemoveStageArtboardGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "createExpressionNode",
      (event: SessionEvent) => {
        CreateExpressionNodeGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "createExpressionNode",
      (event: SessionEvent) => {
        CreateExpressionNodeGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "renameSymbolFile",
      (event: SessionEvent) => {
        RenameSymbolFileGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "lockProject",
      (event: SessionEvent) => {
        LockProjectGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setConfig",
      (event: SessionEvent) => {
        SetConfigGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setAllScopeVariables",
      (event: SessionEvent) => {
        SetAllScopeVariablesGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setStatusBar",
      (event: SessionEvent) => {
        SetStatusBarGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "changeDisplayMode",
      (event: SessionEvent) => {
        ChangeDisplayModeGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "showCodeEditor",
      (event: SessionEvent) => {
        ShowCodeEditorGlue(this.session, event);
      }
    );
    this.session.eventManager.addEventListener(
      "setLayerAspectRatio",
      (event: SessionEvent) => {
        SetLayerAspectRatioGlue(this.session, event);
      }
    );
  }

  deactivate() {
    //
  }
}
