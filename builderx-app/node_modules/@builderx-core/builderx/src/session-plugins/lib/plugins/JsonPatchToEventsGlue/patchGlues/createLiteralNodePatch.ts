import { Session } from "session";
import { SessionEvent } from "event-manager";
import { get, forEach, last } from "lodash";
import { globalRefMap } from "global-ref-map";
import { DomainLayer } from "domain-x";
import { Layer } from "@builderx-core/designer";
import { ResolveNodeValue } from "utils";
import { updateCompiledLayerStyle } from "../../SessionCanvasGlue/Glues/SetStyleAttributeGlue";
import { createCompiledLayer } from "../../SessionCanvasGlue/Glues/AddLayerGlue";

export default function createLiteralNodePatch(
  session: Session,
  operation: any,
  layerPath: string,
  filePath: string,
  propsStylePath: string,
  expressionPath: string
) {
  let domainLayer = session.getLayerFromLayerPath(layerPath);

  if (!propsStylePath) {
    const indexInParent = domainLayer.findIndexInParent();
    if (indexInParent !== -1 && indexInParent !== undefined) {
      domainLayer = domainLayer.parent;
      expressionPath = "/" + indexInParent.replace(/\./g, "/") + expressionPath;
    }
  }

  let remainingPath = propsStylePath ? propsStylePath : expressionPath;

  const remainingPathChunks = remainingPath.split("/");
  remainingPath = remainingPathChunks
    .slice(1, remainingPathChunks.length - 1)
    .join(".");
  const parentNode = get(
    domainLayer,
    remainingPath
    // .slice(1).replace(/\//g, ".")
  );

  if (!parentNode) {
    return;
  }

  const containingStatement = parentNode.getAbstractedLayer();

  if (!containingStatement) {
    return;
  }
  // const pathChunks = propsStylePath.split("/")
  // const path = expressionPath ? expressionPath : pathChunks[0] === "props" && pathChunks[1] === "style" ? "props.style" : pathChunks[0] === "props" ? "props"
  // const key = pat
  // const node = get(layer, path);
  const file = domainLayer.getFile();
  if (!file) {
    return;
  }

  ///
  // // const rootLayer =file.layer;
  // // const compiledRootLayers = globalRefMap.get(file.layer);
  // // if (compiledRootLayers) {
  // //   forEach(compiledRootLayers, (cRL: Layer) => {
  // //     const domainSymbolInstance = cRL.executeFunction("getData", "domainRef");
  // //     if (domainSymbolInstance.type === "symbol") {

  // //     }
  // //   })
  // // }

  const compiledLayers = globalRefMap.get(domainLayer);
  if (compiledLayers) {
    // if (path === "props.style") {
    if (remainingPath.startsWith("props.style")) {
      forEach(compiledLayers, (compiledLayer: Layer) => {
        const scopeVariables = compiledLayer.executeFunction(
          "getData",
          "scopeVariables"
        );

        const resovledNode = ResolveNodeValue(containingStatement, {
          ...file.scopeVariables,
          ...scopeVariables
        });

        const remainingPathWithoutPropsStyle = remainingPath.replace(
          "props.style.",
          ""
        );

        const key = remainingPathWithoutPropsStyle.split(".")[0];

        updateCompiledLayerStyle(
          session,
          compiledLayer as Layer,
          key,
          resovledNode
        );
      });

      // Mutators.SetStyleAttributeMutator(session, node, key, resovledNode);
      // } else if (path === "props") {
    } else if (remainingPath.startsWith("props")) {
      forEach(compiledLayers, (compiledLayer: Layer) => {
        const scopeVariables = compiledLayer.executeFunction(
          "getData",
          "scopeVariables"
        );
        const resovledNode = ResolveNodeValue(containingStatement, {
          ...file.scopeVariables,
          ...scopeVariables
        });

        const remainingPathWithoutPropsStyle = remainingPath.replace(
          "props.",
          ""
        );

        const key = remainingPathWithoutPropsStyle.split(".")[0];

        compiledLayer.setProp(key, resovledNode);

        // updateCompiledLayerStyle(compiledLayer as Layer, key, resovledNode);
      });

      // Mutators.SetPropMutator(session, layer.getFullPath(), key, resovledNode);
      // } else if (path === "children") {
    } else if (!propsStylePath) {
      forEach(compiledLayers, (compiledLayer: Layer) => {
        const key = last(layerPath.split("."));
        createCompiledLayer(session, containingStatement, compiledLayer, key);

        // const scopeVariables = compiledLayer.executeFunction(
        //   "getData",
        //   "scopeVariables"
        // );

        // const resovledNode = ResolveNodeValue(node, {
        //   ...file.scopeVariables,
        //   ...scopeVariables
        // });

        // updateCompiledLayerStyle(compiledLayer as Layer, key, resovledNode);
      });
    }
  }
}
