import { DomainLayer, DomainFile } from "domain-x";
import { Layer } from "@builderx-core/designer";
import { forEach, get } from "lodash";
import { SessionEvent } from "event-manager";
import { Session, StageArtboard } from "session";
import { globalRefMap } from "global-ref-map";
import { STYLE_PROP_NAMES } from "bx-constants";
import { StylePropNameType } from "common-interfaces";

export function setCompiledLayersProps(
  session: Session,
  layer: DomainLayer | DomainFile | StageArtboard,
  key: string,
  value: any
) {
  const compiledLayers = globalRefMap.get(layer);
  forEach(compiledLayers, (compiledLayer: Layer | StageArtboard) => {
    updateCompiledLayerProp(session, compiledLayer, key, value, layer);
  });
}

export function updateCompiledLayerProp(
  session: Session,
  compiledLayer: Layer | StageArtboard,
  key: string,
  value: any,
  layer: DomainFile | DomainLayer | StageArtboard
) {
  if (compiledLayer instanceof Layer) {
    if (compiledLayer.type === "image") {
      if (key === "source") {
        const source = compiledLayer.props.get(key);
        if (source) {
          return;
        } else if (get(layer, "props.source_local.uri")) {
          fetch(get(layer, "props.source_local.uri"))
            .then(function checkForBlobHealth(blob) {
              if (blob.ok) {
                value = {
                  uri: get(layer, "props.source_local.uri")
                };
                compiledLayer.setProp(key, value);
              }
            })
            .catch(function(err) {
              console.log("Failed verifying. Details: " + err);
              compiledLayer.setProp(key, value);
            });
          return;
        }
      }
    }

    if (STYLE_PROP_NAMES.includes(key as StylePropNameType)) {
      forEach(value, (styleValue, styleKey) => {
        // const layerId =
        //   layer instanceof DomainLayer ? layer.getFullPath() : "";
        const event = new SessionEvent("setStyleAttribute", {
          layer,
          key: styleKey,
          value: styleValue
        });
        session.eventManager.dispatchEvent("setStyleAttribute", event);
      });
      // SetAllStyleAttributes.applySideEffects(
      //   domainLayer,
      //   compiledLayer,
      //   value
      // );
    } else {
      compiledLayer.setProp(key, value);
    }
  } else {
    compiledLayer.setProp(key, value);
    // if (key === "style") {
    //   SetAllStyleAttributes(
    //     session,
    //     layer.getFullPath(),
    //     value
    //   );
    // }
    // const event = new SessionEvent("setProp", {
    //   layer,
    //   key,
    //   value
    // });
    // session.eventManager.dispatchEvent("setProp", event);
    setCompiledLayersProps(session, compiledLayer, key, value);
  }
}

export default function SetPropGlue(session: Session, e: SessionEvent) {
  setCompiledLayersProps(
    session,
    e.payload.layer,
    e.payload.key,
    e.payload.value
  );
}
