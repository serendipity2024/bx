import { DomainLayer } from "domain-x";
import { Layer } from "@builderx-core/designer";
import { forEach } from "lodash";
import { SessionEvent } from "event-manager";
import { Session, StageArtboard, Mutators } from "session";
import { globalRefMap } from "global-ref-map";

// import { domainStageMap } from "../DomainStageMap";
function setReferences(domainLayer: any, stageArtboard: StageArtboard) {
  // const stageArtboardRef = globalRefMap.get(domainLayer);
  // if (stageArtboardRef) {
  //   stageArtboardRef.splice(0, 0, stageArtboard);
  // } else {
  //   globalRefMap.set(domainLayer, [stageArtboard]);
  // }
}

function applySideEffects(
  session: Session,
  domainLayer: DomainLayer,
  key: string,
  stylePropName: string = "style"
) {
  const compiledLayers = globalRefMap.get(domainLayer);
  forEach(compiledLayers, compiledLayer => {
    if (compiledLayer instanceof Layer) {
      if (stylePropName !== "style") {
        const existingPropValue = compiledLayer.props.get(stylePropName);
        const newPropValue = { ...existingPropValue, key: undefined };
        compiledLayer.setProp(stylePropName, newPropValue);
      } else if (compiledLayer.isValidLayoutKey(key)) {
        compiledLayer.removeLayout(key);
      } else {
        compiledLayer.removeStyle(key);
        if (key === "gradient") {
          compiledLayer.removeStyle("backgroundImage");
        }

        if (domainLayer && domainLayer.type === "symbol") {
          const symbolFile = session.domain.getSymbolFileFromSymbolInstance(
            domainLayer
          );

          if (symbolFile) {
            // const symbolFileRootLayerStyle = symbolFile.layer.props.style.toJS();
            if (symbolFile.layer.props.getResolvedStyleAttribute(key)) {
              compiledLayer.setStyle(
                key,
                symbolFile.layer.props.getResolvedStyleAttribute(key)
              );
            }
          }
        }
      }
    }
  });
}

export default function RemoveStyleAttributeGlue(
  session: Session,
  e: SessionEvent
) {
  applySideEffects(
    session,
    e.payload.layer,
    e.payload.key,
    e.payload.stylePropName
  );
}
