import { DomainLayer, LogicalExpression, DomainFile } from "domain-x";
import { Layer, PathEvent } from "@builderx-core/designer";
import { forEach, find } from "lodash";
import { SessionEvent } from "event-manager";
import { Session, StageArtboard, Mutators } from "session";
import { globalRefMap } from "global-ref-map";

// import { domainStageMap } from "../DomainStageMap";
function setReferences(domainLayer: any, stageArtboard: StageArtboard) {
  // const stageArtboardRef = globalRefMap.get(domainLayer);
  // if (stageArtboardRef) {
  //   stageArtboardRef.splice(0, 0, stageArtboard);
  // } else {
  //   globalRefMap.set(domainLayer, [stageArtboard]);
  // }
}

function applySideEffects(session: Session, stageArtboard: StageArtboard) {
  //

  const canvasLayers = globalRefMap.get(stageArtboard);

  // forEach(canvasLayers) => {

  // }

  if (session.currentStage.canvas) {
    // console.log(filePath, "file path here");
    const artboard = session.currentStage.canvas.executeFunction(
      "getArtboardById",
      stageArtboard.path
    );
    artboard.executeFunction("hideGrid");
    session.currentStage.canvas.executeFunction(
      "removeArtboard",
      stageArtboard.path
    );
  }
}

export default function RemoveStageArtboard(session: Session, e: SessionEvent) {
  applySideEffects(session, e.payload.stageArtboard);
}
