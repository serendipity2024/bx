import { DomainLayer, LogicalExpression, DomainFile } from "domain-x";
import { Layer, PathEvent } from "@builderx-core/designer";
import { forEach, find } from "lodash";
import { SessionEvent } from "event-manager";
import { Session, StageArtboard, Mutators } from "session";
import { globalRefMap } from "global-ref-map";

// import { domainStageMap } from "../DomainStageMap";
function setReferences(domainLayer: any, stageArtboard: StageArtboard) {
  // const stageArtboardRef = globalRefMap.get(domainLayer);
  // if (stageArtboardRef) {
  //   stageArtboardRef.splice(0, 0, stageArtboard);
  // } else {
  //   globalRefMap.set(domainLayer, [stageArtboard]);
  // }
}

function applySideEffects(session: Session, file: DomainFile) {
  //
  const stageArtboardRef = file.getOwnStageArtboardRef();

  // if (stageArtboardRefs) {
  //   const stageArtboardRef = stageArtboardRefs[0];
  if (stageArtboardRef && stageArtboardRef instanceof StageArtboard) {
    const canvasLayers = globalRefMap.get(stageArtboardRef);

    forEach(canvasLayers, canvasLayer => {
      session.currentStage.canvas.executeFunction(
        "selectArtboard",
        canvasLayer
      );
    });
  }
  // }

  // const stageArtboardRef = globalRefMap.get(domainLayer);
}

export default function SelectFileGlue(session: Session, e: SessionEvent) {
  applySideEffects(session, e.payload.file);
}
