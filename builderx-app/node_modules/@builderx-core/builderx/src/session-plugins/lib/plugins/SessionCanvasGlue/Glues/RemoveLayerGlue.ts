import { DomainLayer, LogicalExpression } from "domain-x";
import { forEach, find, remove } from "lodash";
import { Layer, PathEvent, Canvas } from "@builderx-core/designer";
import { SessionEvent } from "event-manager";
import { Session, StageArtboard, Mutators, CommandUtils } from "session";
import { globalRefMap } from "global-ref-map";

export function removeDCAndRCLayerOwnStage(
  session: Session,
  domainLayer: DomainLayer,
  toBeDeletedCompiledLayer: Layer,
  canvas?: Canvas
) {
  //

  const currentCanvas = canvas ? canvas : session.currentStage.canvas;

  const currentCanvasRef = session.executeFunction(
    "getOwnCanvasRef",
    domainLayer,
    currentCanvas
  );

  if (domainLayer.type === "symbol") {
    const symbolFile = session.domain.getSymbolFileFromSymbolInstance(
      domainLayer
    );
    if (symbolFile) {
      symbolFile.layer.traverseLayers((child: any) => {
        removeDCAndRCLayerOwnStage(
          session,
          child,
          currentCanvasRef,
          currentCanvas
        );
      });
    }
  }

  const compiledLayers = globalRefMap.get(domainLayer); //();

  // const compiledLayer: any = find(compiledLayers, comLayer => {
  //   return comLayer === toBeDeletedCompiledLayer;
  // });
  // if (compiledLayer) {
  //   if (compiledLayer.parent) {
  //     compiledLayer.parent.removeChild(compiledLayer);
  //   }
  //   const compiledLayers = globalRefMap.get(domainLayer);
  //   if (compiledLayers && compiledLayers.indexOf(compiledLayer) > -1) {
  //     compiledLayers.splice(compiledLayers.indexOf(compiledLayer), 1);
  //   }
  // }

  forEach(compiledLayers, compiledLayer => {
    if (compiledLayer instanceof Layer) {
      // const ownCompiledLayer: any = find(compiledLayers, comLayer => {
      //   return comLayer instanceof Layer && comLayer.getCanvas() === currentCanvas;
      // });

      if (
        compiledLayer.getCanvas() === currentCanvas &&
        toBeDeletedCompiledLayer === compiledLayer
      ) {
        if (compiledLayer) {
          if (compiledLayer.parent) {
            compiledLayer.parent.removeChild(compiledLayer);
          }

          const compiledLayers = globalRefMap.get(domainLayer);
          if (compiledLayers && compiledLayers.indexOf(compiledLayer) > -1) {
            compiledLayers.splice(compiledLayers.indexOf(compiledLayer), 1);
          }
        }
      }
    }
  });
}

export function clearCanvasRef(session: Session, canvasLayer: any) {
  const domainRef = canvasLayer.executeFunction("getData", "domainRef");
  const stageArtboardRef = canvasLayer.executeFunction(
    "getData",
    "stageArtboardRef"
  );

  if (stageArtboardRef) {
    const globalMapData = globalRefMap.get(stageArtboardRef);
    if (globalMapData && globalMapData.indexOf(canvasLayer) > -1) {
      globalMapData.splice(globalMapData.indexOf(canvasLayer), 1);
    }
  }

  if (domainRef) {
    if (domainRef.type === "symbol") {
      const symbolFile = session.domain.getSymbolFileFromSymbolInstance(
        domainRef
      );
      if (symbolFile) {
        const globalMapData1: any = globalRefMap.get(symbolFile.layer);
        if (globalMapData1) {
          forEach([...globalMapData1], rootCanvasLayer => {
            if (rootCanvasLayer === canvasLayer) {
              if (globalMapData1 && globalMapData1.indexOf(canvasLayer) > -1) {
                globalMapData1.splice(globalMapData1.indexOf(canvasLayer), 1);
              }
            }
          });
        }
      }
    }

    const globalMapData = globalRefMap.get(domainRef);
    if (globalMapData && globalMapData.indexOf(canvasLayer) > -1) {
      globalMapData.splice(globalMapData.indexOf(canvasLayer), 1);
    }
  }

  forEach([...canvasLayer.children], child => {
    clearCanvasRef(session, child);
  });
}

function removeDCAndRCLayer(session: Session, domainLayer: any) {
  let symbolFile: any;
  if (domainLayer.type === "symbol") {
    symbolFile = session.domain.getSymbolFileFromSymbolInstance(domainLayer);
  }

  const domainCompiledRefs = globalRefMap.get(domainLayer);

  if (domainCompiledRefs) {
    forEach(domainCompiledRefs, (compiledLayer: any) => {
      if (symbolFile) {
        symbolFile.layer.traverseLayers((child: any) => {
          removeDCAndRCLayerOwnStage(
            session,
            child,
            domainLayer.getOwnCanvasRef()
          );
        });
      }
      if (compiledLayer.parent) {
        compiledLayer.parent.removeChild(compiledLayer);
      }
    });

    globalRefMap.delete(domainLayer);
  }

  if (domainLayer.type === "symbol") {
    remove(symbolFile.symbolInstances, si => si === domainLayer);
  }
}

export function removeCompiledLayer(
  session: Session,
  domainLayer: DomainLayer
) {
  //
  if (domainLayer) {
    const globalMapData: any = globalRefMap.get(domainLayer);

    if (!globalMapData) {
      return;
    }
    forEach([...globalMapData], canvasLayer => {
      clearCanvasRef(session, canvasLayer);

      if (canvasLayer instanceof Layer && canvasLayer.parent) {
        canvasLayer.parent.removeChild(canvasLayer);
      }
    });

    globalRefMap.delete(domainLayer);
  }
}

export default function RemoveLayerGlue(session: Session, e: SessionEvent) {
  removeCompiledLayer(session, e.payload.layer);
}
