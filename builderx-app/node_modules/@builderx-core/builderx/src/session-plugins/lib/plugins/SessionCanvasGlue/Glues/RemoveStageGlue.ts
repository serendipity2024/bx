import { DomainLayer, LogicalExpression } from "domain-x";
import { Layer, PathEvent, Canvas } from "@builderx-core/designer";
import { forEach, find } from "lodash";
import { SessionEvent } from "event-manager";
import { Session, StageArtboard, Mutators } from "session";
import { globalRefMap } from "global-ref-map";
import { removeDCAndRCLayerOwnStage, clearCanvasRef } from "./RemoveLayerGlue";

// function clearCanvasRef(session: Session, canvasLayer: Layer, canvas: Canvas) {
//   const domainRef = canvasLayer.executeFunction("getData", "domainRef");
//   const stageArtboardRef = canvasLayer.executeFunction(
//     "getData",
//     "stageArtboardRef"
//   );

//   console.log("remove stage glue", canvas);

//   if (domainRef) {
//     if (domainRef.type === "symbol") {
//       let symbolFile = session.domain.getSymbolFileFromSymbolInstance(
//         domainRef
//       );

//       if (symbolFile) {
//         symbolFile.layer.traverseLayers((child: any) => {
//           // const canvasRef = session.executeFunction(
//           //   "getOwnCanvasRef",
//           //   child,
//           //   canvas
//           // );

//           const canvasRefs = globalRefMap.get(child);

//           forEach(canvasRefs, canvasRef => {
//             if (canvasRef instanceof Layer) {
//               if (canvasRef.getCanvas() === canvas) {
//                 removeDCAndRCLayerOwnStage(session, child, canvasRef, canvas);
//               }
//             }
//           });
//         });
//       }
//     }
//     const globalMapData = globalRefMap.get(domainRef);
//     if (globalMapData && globalMapData.indexOf(canvasLayer) > -1) {
//       globalMapData.splice(globalMapData.indexOf(canvasLayer), 1);
//     }
//   }

//   if (stageArtboardRef) {
//     const globalMapData = globalRefMap.get(stageArtboardRef);
//     if (globalMapData && globalMapData.indexOf(canvasLayer) > -1) {
//       globalMapData.splice(globalMapData.indexOf(canvasLayer), 1);
//     }
//   }

//   forEach(canvasLayer.children, child => {
//     //TODO: heavy-jugad: checking for child (maybe gets deleted from removeDCAndRCLayerOwnStage )
//     // needs refactor
//     if (child) {
//       clearCanvasRef(session, child, canvas);
//     }
//   });
// }
function applySideEffects(session: Session, stage: any) {
  //
  // remove stage artboard
  // remove

  const canvas: Canvas = stage.canvas;
  if (canvas) {
    forEach([...canvas.children], (layer: Layer) => {
      clearCanvasRef(session, layer);
    });
  }
}

export default function RemoveStageGlue(session: Session, e: SessionEvent) {
  applySideEffects(session, e.payload.stage);
}
