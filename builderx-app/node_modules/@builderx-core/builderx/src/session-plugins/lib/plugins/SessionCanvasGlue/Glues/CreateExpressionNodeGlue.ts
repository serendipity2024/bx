import { DomainLayer, LogicalExpression } from "domain-x";
import { Layer, PathEvent } from "@builderx-core/designer";
import { forEach, find, get } from "lodash";
import { SessionEvent } from "event-manager";
import { Session, StageArtboard, Mutators } from "session";
import { globalRefMap } from "global-ref-map";
import { ResolveNode, ResolveNodeValue } from "utils";
import { updateCompiledLayerStyle } from "./SetStyleAttributeGlue";
import { createCompiledLayer } from "./AddLayerGlue";

function applySideEffects(
  session: Session,
  layer: DomainLayer,
  path: string,
  key: string
) {
  //
  let node: any;
  if (path) {
    node = get(layer, `${path}.${key}`);
  } else {
    node = get(layer, `${key}`);
  }
  const file = layer.getFile();
  if (!file) {
    return;
  }

  ///
  // const rootLayer =file.layer;
  // const compiledRootLayers = globalRefMap.get(file.layer);
  // if (compiledRootLayers) {
  //   forEach(compiledRootLayers, (cRL: Layer) => {
  //     const domainSymbolInstance = cRL.executeFunction("getData", "domainRef");
  //     if (domainSymbolInstance.type === "symbol") {

  //     }
  //   })
  // }

  const compiledLayers = globalRefMap.get(layer);
  if (compiledLayers) {
    if (path === "props.style") {
      forEach(compiledLayers, (compiledLayer: Layer) => {
        const scopeVariables = compiledLayer.executeFunction(
          "getData",
          "scopeVariables"
        );

        const resovledNode = ResolveNodeValue(node, {
          ...file.scopeVariables,
          ...scopeVariables
        });

        updateCompiledLayerStyle(
          session,
          compiledLayer as Layer,
          key,
          resovledNode
        );
      });

      // Mutators.SetStyleAttributeMutator(session, node, key, resovledNode);
    } else if (path === "props") {
      forEach(compiledLayers, (compiledLayer: Layer) => {
        const scopeVariables = compiledLayer.executeFunction(
          "getData",
          "scopeVariables"
        );
        const resovledNode = ResolveNodeValue(node, {
          ...file.scopeVariables,
          ...scopeVariables
        });
        compiledLayer.setProp(key, resovledNode);

        // updateCompiledLayerStyle(compiledLayer as Layer, key, resovledNode);
      });

      // Mutators.SetPropMutator(session, layer.getFullPath(), key, resovledNode);
    } else if (path === "children") {
      forEach(compiledLayers, (compiledLayer: Layer) => {
        createCompiledLayer(session, node, compiledLayer, key);

        // const scopeVariables = compiledLayer.executeFunction(
        //   "getData",
        //   "scopeVariables"
        // );

        // const resovledNode = ResolveNodeValue(node, {
        //   ...file.scopeVariables,
        //   ...scopeVariables
        // });

        // updateCompiledLayerStyle(compiledLayer as Layer, key, resovledNode);
      });
    } else {
      forEach(compiledLayers, (compiledLayer: Layer) => {
        createCompiledLayer(session, node, compiledLayer, key);
      });
    }
  }
}

export default function CreateExpressionNodeGlue(
  session: Session,
  e: SessionEvent
) {
  applySideEffects(session, e.payload.layer, e.payload.path, e.payload.key);
}
