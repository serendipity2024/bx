import { DomainLayer } from "domain-x";
import { forEach } from "lodash";
import { SessionEvent } from "event-manager";
import { Session } from "session";
import SetResizerVisibilityMutator from "../../../../../session/lib/Mutators/SetResizerVisibilityMutator";
// import GenerateLayerPreview from "src/session/lib/Commands/CommandServices/GenerateLayerPreview";
import GenerateLayerPreview from "../../../../../session/lib/Commands/CommandServices/GenerateLayerPreview";

function applySideEffects(
  session: Session,
  layers: Array<DomainLayer>,
  generatePreview: boolean
) {
  let canvasLayers: any = [];
  forEach(layers, (domainLayer: DomainLayer) => {
    if (domainLayer && domainLayer.type !== "file") {
      const canvasLayer = domainLayer.getOwnCanvasRef();
      if (canvasLayer) {
        canvasLayers.push(canvasLayer);
      }
    }
  });
  session.currentStage.canvas.selectLayers(canvasLayers);

  // if (generatePreview && session.showCodeEditor) {
  //   GenerateLayerPreview(
  //     session,
  //     layers.map(l => l.getFullPath())
  //   );
  //   return;
  // }

  // if (session.selectedLayers[0] && session.selectedLayers[0].type === "root") {
  //   // if (session.selectedLayers[0].children.length === 0) {
  //   //   // Show resizer when root layer is being selected and it is empty
  //   //   // canvasLayers[0].parent.executeFunction("LayerResizer.showLayer");

  //   //   SetResizerVisibilityMutator(
  //   //     session,
  //   //     session.selectedLayers[0].parent,
  //   //     "show"
  //   //   );
  //   // } else {
  //   // canvasLayers[0].parent.executeFunction("LayerResizer.hideLayer");

  //   SetResizerVisibilityMutator(
  //     session,
  //     session.selectedLayers[0].parent.getFullPath(),
  //     "hide"
  //   );
  //   // }
  // }
}

export default function SelectLayersGlue(session: Session, e: SessionEvent) {
  applySideEffects(session, e.payload.layers, e.payload.generatePreview);
}
