import { DomainLayer, LogicalExpression, DomainFile } from "domain-x";
import { Layer, PathEvent } from "@builderx-core/designer";
import { forEach, find, isEmpty } from "lodash";
import { SessionEvent } from "event-manager";
import { Session, StageArtboard, Mutators } from "session";
import { globalRefMap } from "global-ref-map";

function applySideEffects(
  session: Session,
  oldFile: DomainFile,
  newFile: DomainFile
) {
  const originalCanvasArtboard = oldFile.getOwnCanvasRef();
  const newCanvasArtboard = newFile.getOwnCanvasRef();

  let canvas = session.currentStage.canvas;
  if (canvas) {
    const rulerLines = session.currentStage.canvas.executeFunction(
      "StageDesignerRuler.getAllLines",
      originalCanvasArtboard
    );
    if (!isEmpty(rulerLines)) {
      let rootXNew = newCanvasArtboard.getBoundingClientRect().rootX;
      let rootYNew = newCanvasArtboard.getBoundingClientRect().rootY;
      let newRulerLines = rulerLines.map((ruler: any) => {
        if (ruler.axis === "y") {
          return {
            axis: "y",
            axisCoordinate: rootXNew + ruler.axisCoordinate
          };
        } else {
          return {
            axis: "x",
            axisCoordinate: rootYNew + ruler.axisCoordinate
          };
        }
      });
      session.currentStage.canvas.executeFunction(
        "RulerLines.addAll",
        newRulerLines,
        false
      );
    }
  }
}

export default function DuplicateRulersGlue(session: Session, e: SessionEvent) {
  applySideEffects(session, e.payload.oldFile, e.payload.newFile);
}
