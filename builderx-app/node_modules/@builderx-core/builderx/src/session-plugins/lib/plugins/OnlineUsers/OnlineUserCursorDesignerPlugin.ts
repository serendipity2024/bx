import { Canvas, IPlugin, IContext, IPosition } from "@builderx-core/designer";
export default class OnlineUserCursorPlugin implements IPlugin {
  name = "OnlineUserCursor";
  canvas!: Canvas;
  dispose: any;
  usersMap: Map<string, any>;
  containerDiv: any;

  init(canvas: Canvas) {
    this.canvas = canvas;
    this.dispose = null;
    this.usersMap = new Map();
    this.containerDiv = document.createElement("div");
  }

  activate() {
    this.containerDiv.style.position = "absolute";
    this.dispose = this.canvas.addDomToWorld(this.containerDiv);
    this.containerDiv.style.pointerEvents = "none";
    this.containerDiv.style.top = "0px";
    this.containerDiv.style.left = "0px";
    this.containerDiv.style.zIndex = "201";
    this.canvas.addFunction(
      `${this.name}.add`,
      (
        context: IContext,
        id: string,
        connectionId: string,
        name: string,
        email: any,
        color: string
      ) => {
        const userElements = this.usersMap.get(connectionId);
        if (userElements) {
          this.containerDiv.removeChild(userElements.div);
        }

        const div = document.createElement("div");
        div.style.position = "absolute";
        div.id = `online-users-cursor-${id}`;
        div.style.position = "absolute";
        div.style.left = "-200px";
        div.style.top = "-200px";
        div.style.pointerEvents = "none";
        const zoom = this.canvas.getZoom();
        const svgns = "http://www.w3.org/2000/svg";
        const svgElement = document.createElementNS(svgns, "svg");
        svgElement.setAttributeNS(null, "height", `${16 / zoom}px`);
        svgElement.setAttributeNS(null, "width", `${16 / zoom}px`);
        svgElement.setAttributeNS(null, "viewBox", "0 0 375 375");
        svgElement.setAttributeNS(null, "fill", color);
        const pathElement = document.createElementNS(svgns, "path");
        pathElement.setAttributeNS(
          null,
          "d",
          `M370,4 C365,0 359,-1 353,1 L9,141 C3,144 -0,150 0,157
        C0,164 5,170 12,171 L174,200 L203,362 C204,368 210,374 217,374 C217,374 218,374 218,374
        C225,374 230,371 233,365 L373,21 C376,15 374,9 370,4 Z`
        );
        pathElement.setAttributeNS(
          null,
          "transform",
          "translate(187.499642, 187.499502) scale(-1, 1) translate(-187.499642, -187.499502)"
        );
        svgElement.appendChild(pathElement);
        div.appendChild(svgElement);
        const nameDiv = document.createElement("div");
        nameDiv.style.cssText = ` display: flex; flex-direction: row;
        padding: 0.4em 0.6em; position: absolute; top: ${14 /
          zoom}px; left: ${14 / zoom}px;
        background: ${color}; border-radius: ${16 / zoom}px; font-size: ${12 /
          zoom}px; font-family:Roboto;
        font-weight: bold; text-align: center; white-space: nowrap;
        vertical-align: middle; align-items: center; justify-content: center;`;
        nameDiv.appendChild(document.createTextNode(name));
        div.appendChild(nameDiv);
        this.containerDiv.appendChild(div);
        this.usersMap.set(connectionId, { div, svgElement, nameDiv });
      }
    );
    this.canvas.addFunction(
      `${this.name}.remove`,
      (context: IContext, connectionId: string) => {
        const userElements = this.usersMap.get(connectionId);
        if (userElements) {
          this.containerDiv.removeChild(userElements.div);
          this.usersMap.delete(connectionId);
        }
      }
    );

    this.canvas.addFunction(
      `${this.name}.cursor`,
      (context: IContext, connectionId: string) => {
        const userElements = this.usersMap.get(connectionId);
        if (userElements) {
          return true;
        }
        return false;
      }
    );

    this.canvas.addFunction(
      `${this.name}.show`,
      (context: IContext, connectionId: string) => {
        const userElements = this.usersMap.get(connectionId);
        if (userElements) {
          userElements.div.style.display = "";
        }
      }
    );
    this.canvas.addFunction(
      `${this.name}.hide`,
      (context: IContext, connectionId: string) => {
        const userElements = this.usersMap.get(connectionId);
        if (userElements) {
          userElements.div.style.display = "none";
        }
      }
    );
    this.canvas.addFunction(
      `${this.name}.setPosition`,
      (context: IContext, connectionId: string, coords: IPosition) => {
        let userCursor = this.usersMap.get(connectionId);
        if (userCursor) {
          userCursor.div.style.top = `${coords.y}px`;
          userCursor.div.style.left = `${coords.x}px`;
          // userCursor.div.style.transform = `translate(${coords.x /
          //   zoom}px,${coords.y / zoom}px)`;
        }
      }
    );
    this.canvas.on("zoom", () => {
      this.usersMap.forEach((userElements: any) => {
        const zoom = this.canvas.getZoom();
        userElements.svgElement.setAttributeNS(
          null,
          "height",
          `${16 / zoom}px`
        );
        userElements.svgElement.setAttributeNS(null, "width", `${16 / zoom}px`);
        userElements.nameDiv.style.top = `${14 / zoom}px`;
        userElements.nameDiv.style.left = `${14 / zoom}px`;
        userElements.nameDiv.style.borderRadius = `${16 / zoom}px`;
        userElements.nameDiv.style.fontSize = `${12 / zoom}px`;
      });
    });
  }
  deactivate() {
    this.dispose();
  }
}
