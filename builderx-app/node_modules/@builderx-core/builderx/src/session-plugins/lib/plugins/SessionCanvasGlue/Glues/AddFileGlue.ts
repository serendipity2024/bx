import { DomainLayer, LogicalExpression, DomainFile } from "domain-x";
import { Layer, PathEvent } from "@builderx-core/designer";
import { forEach } from "lodash";
import { SessionEvent } from "event-manager";
import { Session, StageArtboard, Mutators, Stage } from "session";
import { globalRefMap } from "global-ref-map";
import { BX_PREVIEW_FILE_PATH } from "bx-constants";
// import { domainStageMap } from "../DomainStageMap";
function setReferences(domainLayer: any, stageArtboard: StageArtboard) {
  const stageArtboardRef = globalRefMap.get(domainLayer);
  if (stageArtboardRef) {
    stageArtboardRef.splice(0, 0, stageArtboard);
  } else {
    globalRefMap.set(domainLayer, [stageArtboard]);
  }
}

function applySideEffects(session: Session, filePath: string) {
  //
  let currentStage: Stage | undefined = session.currentStage;
  let currentThumbnailStage: any;
  const file: DomainFile | undefined = session.domain.files.get(filePath);

  if (!file) {
    return;
  }

  if (file.isSymbol() || file.path === BX_PREVIEW_FILE_PATH) {
    currentStage = session.stages.get(file.path);
    currentThumbnailStage = session.thumbnailStages.get(file.path);
  } else {
    currentStage = session.stages.get("artboard");
  }

  if (!currentStage) {
    return;
  }

  const stageArtboardExists = currentStage.stageArtboards.find(
    sa => sa.path === filePath
  );
  if (stageArtboardExists) {
    console.error("Stage artboard already exists for " + filePath);
    return;
  }

  if (!session.envConfig.isSharedComponentInstance) {
    const stageArtboard = Mutators.AddStageArtboardMutator(
      session,
      currentStage.id,
      filePath,
      file.path + ":0"
    );
    // const stageArtboard = new StageArtboard(file.path + ":0");

    if (currentStage && currentStage.canvas) {
      if (stageArtboard) {
        setReferences(file, stageArtboard);
      }
    }
  }

  // add stage artboard for thumbnail stage
  if (currentThumbnailStage) {
    const stageArtboard = Mutators.AddStageArtboardMutator(
      session,
      currentThumbnailStage.id,
      filePath,
      file.path + ":0",
      true
    );
    // const stageArtboard = new StageArtboard(file.path + ":0");

    if (currentThumbnailStage && currentThumbnailStage.canvas) {
      if (stageArtboard) {
        setReferences(file, stageArtboard);
      }
    }
  }

  return file;
}

export default function AddFileGlue(session: Session, e: SessionEvent) {
  applySideEffects(session, e.payload.filePath);

  // const domainLayer = session.getLayerFromLayerPath(e.payload.layerId);
}
