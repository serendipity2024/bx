import { DomainLayer, DomainFile } from "domain-x";
import { Layer } from "@builderx-core/designer";
import { forEach } from "lodash";
import { SessionEvent } from "event-manager";
import { Session, StageArtboard } from "session";
import { globalRefMap } from "global-ref-map";
import { Utils } from "utils";
import { Mutators } from "session";
import {
  LAYOUT_PROPERTIES,
  LAYOUT_PROPERTIES_AFFECTING_CHILDREN
} from "bx-constants";
const { SetPropMutator } = Mutators;

export function updateCompiledLayerStyle(
  session: Session,
  compiledLayer: Layer,
  key: string,
  value: any,
  stylePropName: string = "style"
) {
  if (stylePropName !== "style") {
    const existingPropValue = compiledLayer.props.get(stylePropName);
    const newPropValue = { ...existingPropValue, key: value };
    compiledLayer.setProp(stylePropName, newPropValue);
  } else if (compiledLayer.layout.isValidKey(key)) {
    compiledLayer.setLayout(key, value);
  } else {
    // condition for symbol root layer from instances style changes
    const domainLayerForCompiled = compiledLayer.executeFunction(
      "getData",
      "domainRef"
    );
    if (
      domainLayerForCompiled &&
      compiledLayer.getCanvas() !== session.currentStage.canvas &&
      domainLayerForCompiled.type === "symbol"
    ) {
      if (!domainLayerForCompiled.props.getResolvedStyleAttribute(key)) {
        compiledLayer.setStyle(key, value);
      } else {
        compiledLayer.setStyle(
          key,
          domainLayerForCompiled.props.getResolvedStyleAttribute(key)
        );
      }
    } else {
      compiledLayer.setStyle(key, value);
    }
  }
}
function applySideEffects(
  session: Session,
  domainLayer: DomainLayer | DomainFile | StageArtboard,
  key: string,
  value: any,
  stylePropName: string = "style"
) {
  if (key === "gradient" && domainLayer instanceof DomainLayer) {
    const gradientImage = domainLayer.props.getResolvedProp("gradientImage");
    const imageName = gradientImage
      ? gradientImage
      : "Gradient_" + Utils.randomString(7) + ".png";
    // if (!imageName) {
    //   value.imageName =
    // } else {
    SetPropMutator(
      session,
      (domainLayer as DomainLayer).getFullPath(),
      "gradientImage",
      imageName
    );
    // }
  }

  const compiledLayers = globalRefMap.get(domainLayer);
  forEach(compiledLayers, (compiledLayer: Layer | StageArtboard) => {
    if (compiledLayer instanceof Layer) {
      if (
        (domainLayer as DomainLayer).type === "scrollView" &&
        session.currentStage.id.includes("layer:") &&
        session.currentRootLayer === domainLayer &&
        LAYOUT_PROPERTIES.includes(key) &&
        !LAYOUT_PROPERTIES_AFFECTING_CHILDREN.includes(key)
      ) {
        return;
      }
      updateCompiledLayerStyle(
        session,
        compiledLayer,
        key,
        value,
        stylePropName
      );
      if (key === "gradient" && value) {
        try {
          updateCompiledLayerStyle(
            session,
            compiledLayer,
            "backgroundImage",
            Utils.getGradientString(value),
            stylePropName
          );
          if (
            compiledLayer.getCanvas().executeFunction("GradientEditor.isOpen")
          ) {
            compiledLayer
              .getCanvas()
              .executeFunction("GradientEditor.change", value);
          }
        } catch (err) {
          console.log(err);
        }
      }
    }

    if (compiledLayer instanceof StageArtboard) {
      // if (
      //   (domainLayer as DomainLayer).type === "file" &&
      //   session.thumbnailStages.has(compiledLayer.path)
      // ) {
      // } else {
      compiledLayer.props.setStyleAttribute(key, value);
      const event = new SessionEvent("setStyleAttribute", {
        layer: compiledLayer,
        key,
        value,
        stylePropName
      });
      session.eventManager.dispatchEvent("setStyleAttribute", event);
      // }
    }
  });
}

export default function SetStyleAttributeGlue(
  session: Session,
  e: SessionEvent
) {
  applySideEffects(
    session,
    e.payload.layer,
    e.payload.key,
    e.payload.value,
    e.payload.stylePropName
  );
}
