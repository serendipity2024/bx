import { ISessionPlugin } from "common-interfaces";
import { Session } from "session";

export default class KeyMapperProvider implements ISessionPlugin {
  name = "KeyMapperProvider";
  session: Session;
  keyMappings: Map<string, { callback: any; actionName: string }>;
  init(session: Session) {
    this.session = session;
    this.keyMappings = new Map();
  }

  activate() {
    this.session.addFunction(`${this.name}.get`, () => this.keyMappings);
    this.session.addFunction(
      `${this.name}.add`,
      (
        session: Session,
        shortcut: string | string[],
        callback: any,
        actionName: string
      ) => {
        if (!shortcut || !callback) {
          return;
        }
        if (typeof shortcut === "string") {
          this.keyMappings.set(shortcut, { callback, actionName });
          if (session.keyMapper) {
            session.keyMapper.register(shortcut, callback, actionName);
          }
        } else {
          shortcut.forEach((otherName: string) => {
            this.keyMappings.set(otherName, { callback, actionName });
            if (session.keyMapper) {
              session.keyMapper.register(shortcut, callback, actionName);
            }
          });
        }
      }
    );
    this.session.addFunction(
      `${this.name}.remove`,
      (session: Session, name: any) => {
        if (session.keyMapper) {
          session.keyMapper.unregister(name);
        }
        this.keyMappings.delete(name);
      }
    );
  }
  deactivate() {
    //
  }
}
