import * as _ from "lodash";
import * as React from "react";
import {
  FormGroup,
  FormRow,
  InputGroupInput,
  Pane,
  Button,
  Window,
  WindowBody,
  WrapperDiv,
  Scrollbars,
  FormCol,
  SelectX
} from "components-x";
import Icon from "@builderx/icons";
// @ts-ignore
import LazyLoad from "react-lazy-load";
import { IconOptions as List } from "bx-constants";
import { toLower } from "lodash";
import { COLORS } from "components-x";

type propType = {
  selectedIcon: (iconName: string, iconFamily: string) => void;
  iconName?: string;
  iconFamily?: string;
  showIconModal: boolean;
};

class IconModal extends React.Component<propType, any> {
  iconList: string[] = [];
  searchIconName: string;
  showIconModal: boolean;
  debounceFunction: any;
  constructor(props: propType) {
    super(props);
    this.state = {
      iconFamily: this.props.iconFamily ? this.props.iconFamily : "All",
      sliderValue: 32,
      iconToSearch: "",
      iconName: this.props.iconName ? this.props.iconName : undefined,
      list: []
    };
    // document.addEventListener("keydown", event => {
    //   const keyName = event.key;
    // });
    this.handleIconFamilyChange = this.handleIconFamilyChange.bind(this);
    this.handleSlide = this.handleSlide.bind(this);
    this.debounceFunction = _.debounce(this.getFuzzySearchedIconList, 200);
  }
  handleIconFamilyChange = (name: string) => {
    const singleIconList = List.filter(icon => {
      return icon.key === name;
    });

    const iconList: any[] = [];

    if (singleIconList[0]) {
      _.forEach(singleIconList[0].value, icon => {
        iconList.push(icon);
      });
    }

    this.setState(
      {
        iconFamily: name,
        list: iconList,
        iconToSearch: this.state.iconToSearch
      },
      () => {
        this.getFuzzySearchedIconList(this.state.iconToSearch);
      }
    );
  };
  fuzzy = (source: string, target: string) => {
    var hay = source.toLowerCase(),
      i = 0,
      n = -1,
      l;

    if (!target) {
      return;
    }

    target = target.toLowerCase();

    for (; (l = target[i++]); ) {
      if (!~(n = hay.indexOf(l, n + 1))) {
        return false;
      }
    }

    return true;
  };
  getFuzzySearchedIconList = (iconToSearch: string) => {
    const iconsList = this.allIcons();
    let result: string[] = _.filter(iconsList, (icon: string): any => {
      if (
        this.state.iconToSearch === undefined ||
        this.state.iconToSearch === ""
      ) {
        return true;
      } else if (this.fuzzy(icon, this.state.iconToSearch)) {
        return true;
      }
    });

    this.setState({
      list: result
    });
  };

  customForceCheck = (str: string) => {
    // forceCheck();
  };
  handleScroll = () => {
    this.customForceCheck("handleScroll");
  };

  onClickIcon = (iconName: string, family: string) => () => {
    this.props.selectedIcon(iconName, family);
    this.setState({
      showIconModal: false
    });
  };

  handleChange = (value: any) => {
    this.setState({
      iconToSearch: value
    });

    this.debounceFunction(value);
  };

  allIcons() {
    const singleIconList = List.filter(icon => {
      return icon.key === this.state.iconFamily;
    });

    if (singleIconList[0]) {
      this.iconList = [...singleIconList[0].value];
    } // TODO:define the type

    let result: any[] = _.filter(this.iconList, (icon: string): any => {
      return true;
    });
    return result;
  }
  renderItem = ({ item }: any) => {
    return (
      <WrapperDiv>
        <Button
          key={item}
          icon={
            <Icon
              style={{
                padding: 5,
                paddingLeft: 7,
                color: COLORS.primary[50]
              }}
              name={item}
              type={
                this.state.iconFamily === "All"
                  ? "Feather"
                  : this.state.iconFamily
              }
            />
          }
          actionBtn
          uiBackground={600}
          onClick={this.onClickIcon(item, this.state.family)}
          style={{
            width: 32,
            height: 32,
            marginLeft: 22
          }}
        />
      </WrapperDiv>
    );
  };
  handleIconSizeChange = (e: any) => {
    var value = parseInt(e.target.value, 10);
    this.setState({
      sliderValue: value
    });
  };
  handleSlide = (e: any) => {
    var value = parseInt(e.target.value, 10);

    this.setState({
      sliderValue: value
    });
  };

  componentDidMount() {
    this.getFuzzySearchedIconList("");
  }
  cellRenderer = (columnIndex: any, key: any, rowIndex: any, style: any) => {
    return <div />;
  };

  getRows(list: any): Array<any> {
    const iconRows = [];
    for (let i = 0; i < list.length / 12; i++) {
      let iconRow = [];
      for (let j = 0; j < 12; j++) {
        let iconName = list[i * 12 + j];
        if (i * 12 + j < list.length) {
          let nameToConsider = iconName.indexOf("-");
          let name = iconName.substring(nameToConsider + 1, iconName.length);
          let family = iconName.substring(0, nameToConsider);
          if (
            name === this.state.iconName &&
            family === this.state.iconFamily
          ) {
            iconRow.push(
              <Button
                key={list[i * 12 + j]}
                icon={
                  <Icon
                    style={{
                      padding: 5,
                      paddingLeft: 22,
                      paddingRight: 22,
                      color: COLORS.primary[50]
                    }}
                    name={name}
                    size={32}
                    type={family}
                  />
                }
                actionBtn
                uiBackground={600}
                onClick={this.onClickIcon(name, family)}
                marginLeftCustom={24}
                style={{
                  textAlign: "center"
                }}
                width="3.4rem"
              />
            );
          } else if (
            i * 12 + j < list.length &&
            list[i * 12 + j] !== this.state.iconName
          ) {
            iconName = list[i * 12 + j];
            nameToConsider = iconName.indexOf("-");
            name = iconName.substring(nameToConsider + 1, iconName.length);
            family = iconName.substring(0, nameToConsider);
            iconRow.push(
              <Button
                key={list[i * 12 + j]}
                icon={
                  <Icon
                    style={{
                      padding: 5,
                      color: COLORS.primary[50]
                    }}
                    name={name}
                    size={32}
                    type={family}
                  />
                }
                onKeyPress={() => {
                  // console.log("Key Press Detected", i, j);
                }}
                onClick={this.onClickIcon(name, family)}
                style={{
                  textAlign: "center"
                }}
                width="5rem"
                transparent
              />
            );
          }
        }
      }

      iconRows.push(iconRow);
    }
    return iconRows;
  }

  render() {
    const iconListTypes = _.values(List);
    const iconRows = this.getRows(this.state.list);
    let selectedKey = iconListTypes.find(
      icon => icon.key === this.state.iconFamily
    );
    return (
      <>
        <Window uiBackground={800} uiSize={"l"}>
          <WindowBody>
            <Pane
              uiBackground={800}
              onKeyPress={() => {
                // console.log("Key event detected");
              }}
            >
              <FormGroup className="p-4 bb">
                <FormRow className="px-4">
                  <FormCol>
                    <SelectX
                      options={iconListTypes}
                      value={selectedKey}
                      renderOption={(option: any) => option.key}
                      extractValue={(option: any) => option.key}
                      renderValue={(option: any) => option}
                      onChange={(e: any) => this.handleIconFamilyChange(e)}
                      optionStyle={(option: any) => {
                        return {
                          fontSize: 16,
                          padding: 8,
                          height: 28
                        };
                      }}
                      tooltip=""
                      size="xxl"
                      placeholder="Icon Library"
                      filter={(inputValue: string) =>
                        iconListTypes.filter(
                          (o: any) =>
                            !inputValue ||
                            toLower(o.key).includes(toLower(inputValue))
                        )
                      }
                    />
                  </FormCol>
                  <FormCol uiSize={3} className="pl-5">
                    <InputGroupInput
                      type="text"
                      uiSize="xxl"
                      value={this.state.iconToSearch}
                      autoFocus
                      placeholder="Search icon"
                      onChange={(e: any) => {
                        this.handleChange(e.target.value);
                      }}
                    />
                  </FormCol>
                </FormRow>
              </FormGroup>
              <WrapperDiv
                className="p-4"
                style={{
                  height: 500
                }}
              >
                <Scrollbars
                  autoHide
                  style={{
                    height: "100%"
                  }}
                >
                  {iconRows.map((iconRow: any, i: number) => {
                    return (
                      <LazyLoad
                        scroll={true}
                        once
                        offset={100}
                        height={64}
                        overflow
                        key={iconRow[0].key}
                      >
                        <WrapperDiv
                          key={iconRow[0].key}
                          style={{
                            height: 64
                          }}
                        >
                          <FormRow>{iconRow}</FormRow>
                        </WrapperDiv>
                      </LazyLoad>
                    );
                  })}
                </Scrollbars>
              </WrapperDiv>
            </Pane>
          </WindowBody>
        </Window>
      </>
    );
  }
}

export default IconModal;
