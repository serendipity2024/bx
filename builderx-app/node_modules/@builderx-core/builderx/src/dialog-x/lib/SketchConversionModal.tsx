import * as React from "react";
import {
  Window,
  WindowBody,
  Pane,
  FormGroup,
  FormRow,
  FormCol,
  Checkbox,
  CheckboxLabel,
  CheckboxTick,
  Button,
  ButtonGroup,
  InputGroupInput,
  WindowFooter,
  Text
} from "components-x";
type propType = {
  artboards: Array<any>;
  existingArtboards: Array<any>;
  cancelBtnText: string;
  resolvePromise: (val: boolean, data?: any) => void;
  closeDialog: () => void;
  setConfirmButtonRef: (c: any) => void;
};
type stateType = {
  textInput: string;
  convertSVG: boolean;
  selectedArtboards: any;
  allSelected: boolean;
  // repositionArtboards: boolean;
};
export default class SketchConversionModal extends React.Component<
  propType,
  stateType
> {
  scaleInputRef: any;
  constructor(props: any) {
    super(props);
    this.state = {
      textInput: "1",
      convertSVG: false,
      selectedArtboards: this.props.artboards.map(
        (obj: any, index: number) => obj.id
      ),
      allSelected: true
      // repositionArtboards: false
    };
  }
  componentDidMount() {
    if (this.scaleInputRef) {
      this.scaleInputRef.select();
    }
  }
  selectAll = () => {
    if (
      this.state.allSelected ||
      this.state.selectedArtboards.length >= this.props.artboards.length
    ) {
      this.setState({ selectedArtboards: [], allSelected: false });
    } else if (
      this.state.selectedArtboards.length < this.props.artboards.length
    ) {
      let tempArtboards: Array<string> = [...this.state.selectedArtboards];
      this.props.artboards.forEach((obj: any) => {
        if (!this.state.selectedArtboards.includes(obj.id)) {
          tempArtboards.push(obj.id);
        }
      });
      this.setState({ selectedArtboards: tempArtboards, allSelected: true });
    }
  };
  manipulateSelectedArtboards = (id: string) => {
    let tempArtboards = [...this.state.selectedArtboards];
    if (this.state.selectedArtboards.includes(id)) {
      let ind = tempArtboards.indexOf(id);
      tempArtboards.splice(ind, 1);
    } else {
      tempArtboards.push(id);
    }
    let all = false;
    if (tempArtboards.length === this.props.artboards.length) {
      all = true;
    }
    this.setState({
      selectedArtboards: tempArtboards,
      allSelected: all
    });
  };
  onChange = (e: any) => {
    this.setState({ textInput: e.target.value });
  };
  toggleCheck = () => {
    this.setState({ convertSVG: !this.state.convertSVG });
  };
  // toggleReposition = (e: any) => {
  //   this.setState({ repositionArtboards: e.target.value });
  // };
  onSubmit = (e: any) => {
    e.preventDefault();
    this.props.resolvePromise(true, {
      selectedArtboards: this.state.selectedArtboards,
      scale: this.state.textInput,
      convertSVG: this.state.convertSVG
    });
    this.props.closeDialog();
    this.setState({ convertSVG: false });
  };
  render() {
    return (
      <Window>
        <WindowBody>
          <Pane uiBackground={800}>
            <FormGroup className="p-4">
              <FormRow noPadding alignTop>
                <FormCol uiSize={4} contentLeft alignTop first>
                  <FormRow className="py-2">
                    <FormCol first>
                      <FormRow>
                        <Text
                          uiSize="l"
                          style={{ marginBottom: 0, paddingRight: 10 }}
                        >
                          Scaling
                        </Text>
                        <InputGroupInput
                          uiSize="l"
                          validator={e => !isNaN(parseFloat(e.target.value))}
                          type="number"
                          width={"15%"}
                          ref={(input: any) => {
                            this.scaleInputRef = input;
                          }}
                          value={this.state.textInput}
                          onChange={(e: any) => this.onChange(e)}
                        />
                      </FormRow>
                    </FormCol>
                    {/* <FormCol>
                      <Checkbox>
                        <CheckboxTick
                          checked={this.state.repositionArtboards}
                          onChange={(e: any) => this.toggleReposition(e)}
                        />
                        <CheckboxLabel>Rearrange Artboards</CheckboxLabel>
                      </Checkbox>
                    </FormCol> */}
                    <FormCol>
                      <Checkbox right>
                        <CheckboxTick
                          disabled={this.props.artboards.length === 0}
                          checked={
                            this.state.allSelected ||
                            this.props.artboards.length ===
                              this.state.selectedArtboards.length
                          }
                          onChange={() => this.selectAll()}
                        />
                        <CheckboxLabel
                          uiSize="l"
                          disabled={this.props.artboards.length === 0}
                        >
                          {this.state.allSelected ||
                          this.props.artboards.length ===
                            this.state.selectedArtboards.length
                            ? "Unselect All"
                            : `Select All (${this.props.artboards.length})`}
                        </CheckboxLabel>
                      </Checkbox>
                    </FormCol>
                  </FormRow>
                  <FormRow noPadding>
                    <Pane
                      padder="xs"
                      uiBackground={600}
                      scrollable
                      style={{ maxHeight: 500 }}
                    >
                      {this.props.artboards.length === 0 ? (
                        <FormRow key={"artboard-selector-none"}>
                          <Text uiSize="m" style={{ paddingLeft: 20 }}>
                            No artboard to import, just the symbols will be
                            imported.
                          </Text>
                        </FormRow>
                      ) : (
                        this.props.artboards.map((artboard: any) => (
                          <FormRow key={`artboard-selector-${artboard.id}`}>
                            <FormCol>
                              <Checkbox>
                                <CheckboxTick
                                  checked={
                                    this.state.allSelected ||
                                    this.state.selectedArtboards.includes(
                                      artboard.id
                                    )
                                  }
                                  onChange={() =>
                                    this.manipulateSelectedArtboards(
                                      artboard.id
                                    )
                                  }
                                />
                                <CheckboxLabel uiSize="l">
                                  {artboard.name}
                                </CheckboxLabel>
                              </Checkbox>
                            </FormCol>
                          </FormRow>
                        ))
                      )}
                    </Pane>
                  </FormRow>
                </FormCol>
              </FormRow>
            </FormGroup>
          </Pane>
        </WindowBody>
        <WindowFooter>
          <Pane className="p-4" uiBackground={800}>
            <FormRow className="p-0">
              <Checkbox style={{ flex: 0 }} className="pr-2">
                <CheckboxTick
                  checked={this.state.convertSVG}
                  onChange={() => this.toggleCheck()}
                />
              </Checkbox>
              <Text uiSize="m">Convert SVGs to Symbols</Text>
              <ButtonGroup contentRight style={{ alignItems: "center" }}>
                <Button
                  uiBackground={600}
                  border
                  caption="Cancel"
                  minWidth
                  uiSize="s"
                  onClick={() => {
                    this.props.resolvePromise(false);
                    this.props.closeDialog();
                  }}
                  marginRight
                />
                <Button
                  ref={(c: any) => this.props.setConfirmButtonRef(c)}
                  uiBackground={600}
                  disabled={this.state.selectedArtboards.length === 0}
                  border
                  caption="Import"
                  minWidth
                  uiSize="s"
                  onClick={(e: any) => this.onSubmit(e)}
                  actionBtn
                  active
                />
              </ButtonGroup>
            </FormRow>
          </Pane>
        </WindowFooter>
      </Window>
    );
  }
}
