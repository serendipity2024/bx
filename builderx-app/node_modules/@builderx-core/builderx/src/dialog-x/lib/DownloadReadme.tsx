import * as React from "react";
import {
  Window,
  WindowBody,
  Pane,
  FormGroup,
  FormRow,
  WindowFooter,
  ButtonGroup,
  Button,
  FormCol,
  Title
} from "components-x";
import { Converter } from "showdown";
import { CodeEngineNames, Session } from "session";

type propType = {
  resolvePromise: (val: boolean, data?: any) => void;
  closeDialog: () => void;
  codeEngineName: CodeEngineNames;
  session?: Session;
  downloadType: "project" | "component";
  setConfirmButtonRef: (c: any) => void;
};
export default class DownloadReadmeModal extends React.Component<
  propType,
  any
> {
  onSubmit = (e: any) => {
    e.preventDefault();
    this.props.resolvePromise(true);
    this.props.closeDialog();
  };
  render() {
    const readmeType =
      this.props.downloadType === "component"
        ? "componentReadme"
        : "projectReadme";

    if (!this.props.session) {
      return;
    }
    const codeEngine = this.props.session.selectedCodeEngine;

    if (!codeEngine) {
      this.props.session.notificationManager.notifyError(
        "Error occured",
        "No code engine found"
      );
      return;
    }

    const readme = codeEngine.getFiles()[readmeType];

    const html = new Converter().makeHtml(readme);
    return (
      <Window style={{ height: 650 }}>
        <WindowBody uiSize="ms">
          <Pane uiBackground={800} height={580}>
            <FormGroup className="px-0 pb-0" style={{ height: "100%" }}>
              <FormRow noPadding alignTop className="p-4 bb">
                <FormCol uiSize="xs" first contentLeft alignTop>
                  <Title uiSize="m" uiColor={300}>
                    Readme
                  </Title>
                </FormCol>
              </FormRow>
              <FormRow style={{ height: "100%" }}>
                <FormCol contentLeft className="p-4" style={{ height: "100%" }}>
                  <iframe
                    style={{
                      width: "100%",
                      height: "100%",
                      background: "white"
                    }}
                    srcDoc={html}
                  />
                </FormCol>
              </FormRow>
            </FormGroup>
          </Pane>
        </WindowBody>
        <WindowFooter>
          <Pane padder="xs" uiBackground={800}>
            <ButtonGroup contentRight style={{ alignItems: "center" }}>
              <Button
                ref={(c: any) => this.props.setConfirmButtonRef(c)}
                marginLeft
                actionBtn
                uiBackground={600}
                caption="Ok"
                uiSize="s"
                marginRight
                active
                paddingRight={20}
                paddingLeft={20}
                onClick={(e: any) => this.onSubmit(e)}
              />
            </ButtonGroup>
          </Pane>
        </WindowFooter>
      </Window>
    );
  }
}
