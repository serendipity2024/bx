import * as React from "react";
import {
  MenuDropdown,
  OptionMenu,
  OptionMenuTitle,
  Icon,
  Option,
  Text,
  FormRow
} from "components-x";
import { capitalize } from "lodash";

type propType = {
  zIndex?: number;
  accessValue?: string;
  style?: {};
  callbackType: string;
  onChange: (access: string, typeId?: number, mode?: string) => Promise<any>;
  typeId?: number;
  options?: string[];
  alignTop?: boolean;
};
type stateType = {
  accessValue: string;
  loading: boolean;
};

export class AccessTypeDropdown extends React.Component<propType, stateType> {
  options = this.props.options || [
    "disabled",
    "read-design",
    "read-code",
    "write"
  ];
  constructor(props: any) {
    super(props);
    this.state = {
      accessValue:
        (this.props.accessValue === "write"
          ? "edit"
          : this.props.accessValue === "read"
          ? "View (Design)"
          : this.props.accessValue) || "disabled",
      loading: false
    };
  }
  handleChangeAccess = async (
    option: string,
    typeId?: number,
    mode?: string
  ) => {
    this.setState({ loading: true });
    this.props
      .onChange(
        option,
        this.props.callbackType === "changeUserShareabilityAccess"
          ? this.props.typeId
          : undefined,
        mode
      )
      .then(() => {
        this.setState({
          accessValue: mode
            ? mode === "design_code"
              ? "View (Design + Code)"
              : "View (Design)"
            : option === "write"
            ? "Edit"
            : option,
          loading: false
        });
      })
      .catch(err => {
        this.setState({ loading: false });
      });
  };

  render() {
    return (
      <MenuDropdown
        {...this.props}
        className="mr-2"
        alignRight
        alignTop={this.props.alignTop}
        showChildren
        style={{
          ...this.props.style,
          zIndex: "auto",
          height: 20
        }}
      >
        <Option data-cypress-id="share-access-dropdown">
          <OptionMenu showChildren disabled={this.state.loading}>
            <OptionMenuTitle style={{ fontWeight: 500 }}>
              <FormRow>
                <Text uiSize="m" uiColor={300}>
                  {capitalize(this.state.accessValue)}
                </Text>
                <Icon
                  name="white-downarrow"
                  size={12}
                  marginLeft
                  style={{ color: "black", marginLeft: 15 }}
                />
              </FormRow>
            </OptionMenuTitle>
          </OptionMenu>
          <MenuDropdown showChildren child>
            {this.options.map(option => {
              let renderValue = option;
              let optionValue = option;
              let access: string | undefined = undefined;
              if (option === "read-design") {
                renderValue = "View (Design)";
                optionValue = "read";
                access = "design_only";
              } else if (option === "read-code") {
                renderValue = "View (Design + Code)";
                optionValue = "read";
                access = "design_code";
              } else if (option === "write") {
                renderValue = "edit";
              }
              return (
                <Option
                  key={option}
                  onClick={() => {
                    this.handleChangeAccess(optionValue, undefined, access);
                  }}
                >
                  <OptionMenu>
                    <OptionMenuTitle>{capitalize(renderValue)}</OptionMenuTitle>
                  </OptionMenu>
                </Option>
              );
            })}
          </MenuDropdown>
        </Option>
      </MenuDropdown>
    );
  }
}
