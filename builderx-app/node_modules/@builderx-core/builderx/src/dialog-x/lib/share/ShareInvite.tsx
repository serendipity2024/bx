import * as React from "react";
import {
  Window,
  WindowBody,
  Pane,
  FormRow,
  Button,
  InputGroupInput,
  Text,
  WindowFooter,
  FormCol,
  ButtonGroup,
  Title,
  FormGroup,
  CheckboxTick,
  Checkbox,
  CheckboxLabel,
  Scrollbars,
  Spinner
} from "components-x";
import { AccessTypeDropdown } from "./Components";
import { capitalize, get } from "lodash";
import { emailPattern } from "./../utils";

type propType = {
  resolvePromise: (val: boolean, data?: any) => void;
  closeDialog: () => void;
  copyURL: (url: string) => void;
  setConfirmButtonRef: (c: any) => void;
  isShareable?: boolean;
  shareabilityCallback?: (
    callbackType: string,
    data: { type: string; access: string; email?: string; mode?: string }
  ) => any;
  projectShareableData: any;
  teamMembersFetched?: boolean;
  teamData: any;
};
type stateType = {
  mode?: string;
  textInput: string;
  accessValue: string;
  type: "user";
  helperVisible: boolean;
  helperText: string;
  teamMembersFetched?: boolean;
  teamData: any;
  filteredUsers: Array<any>;
  loading: boolean;
};
export default class ShareInviteModal extends React.Component<
  propType,
  stateType
> {
  constructor(props: any) {
    super(props);
    this.state = {
      textInput: "",
      mode: "design_only",
      accessValue: "read",
      type: "user",
      helperVisible: false,
      helperText: "",
      filteredUsers: get(this.props, "teamData.users", []),
      loading: false,
      teamMembersFetched: this.props.teamMembersFetched,
      teamData: this.props.teamData
    };
  }
  handleInviteButton = async () => {
    if (emailPattern.test(this.state.textInput)) {
      this.setState({ loading: true });
      if (this.props.shareabilityCallback) {
        this.props
          .shareabilityCallback("addUser", {
            type: "user",
            access: this.state.accessValue,
            email: this.state.textInput,
            mode: this.state.mode
          })
          .then((res: any) => {
            this.setState({
              helperText: res.message,
              helperVisible: true,
              textInput: "",
              loading: false
            });
          })
          .catch((err: any) => {
            this.setState({
              helperText: err.message,
              helperVisible: true,
              loading: false
            });
          });
      }
    } else {
      this.setState({
        helperText: "Invalid Email",
        helperVisible: true
      });
    }
  };
  handleChange = (event: any) => {
    let filteredUsers = get(this.state, "teamData.users", []);
    if (event.target.value && get(this.state, "teamData.users")) {
      filteredUsers = this.state.teamData.users.filter((user: any) => {
        return (
          (user.email && user.email.includes(event.target.value)) ||
          (user.name && user.name.includes(event.target.value))
        );
      });
    }
    this.setState({
      textInput: event.target.value,
      filteredUsers,
      helperVisible: false,
      helperText: ""
    });
  };
  handleAccessChange = (
    accessValue: string,
    typeId?: number,
    mode?: string
  ) => {
    this.setState({
      accessValue,
      mode: mode ? mode : undefined
    });
    return new Promise(resolve => {
      resolve();
    });
  };
  selectUser(email: string) {
    this.setState({
      textInput: email,
      helperVisible: false,
      helperText: ""
    });
  }
  render() {
    return (
      <Window style={{ display: "block", overflow: "visible" }}>
        <WindowBody style={{ display: "block", overflow: "visible" }}>
          <Pane
            uiBackground={800}
            style={{ display: "block", overflow: "visible" }}
          >
            <FormGroup className="px-0 pb-0">
              <FormRow noPadding alignTop className="p-4 bb">
                <FormCol uiSize="m" contentLeft alignTop className="px-0">
                  <Title uiSize="m" uiColor={300}>
                    Invite Member
                  </Title>
                </FormCol>
              </FormRow>
              <FormRow className="px-4 pt-4 pb-2">
                <FormCol contentLeft className="pl-0">
                  <InputGroupInput
                    data-cypress-id="share-invite-input"
                    uiSize="l"
                    autoFocus
                    placeholder="Search a name or an email"
                    width={"100%"}
                    value={this.state.textInput}
                    onChange={this.handleChange}
                    type="email"
                  />
                </FormCol>
                <FormCol
                  uiSize="xs"
                  flex={false}
                  style={{ width: "fit-content" }}
                >
                  <AccessTypeDropdown
                    data-cypress-id="share-invite-dropdown"
                    zIndex={2}
                    style={{ paddingInlineStart: 0, marginLeft: 0, height: 20 }}
                    callbackType="addUser"
                    accessValue={this.state.accessValue}
                    onChange={this.handleAccessChange}
                  />
                </FormCol>
                <FormCol
                  uiSize="xs"
                  flex={false}
                  style={{ width: "fit-content" }}
                >
                  <Button
                    data-cypress-id="share-invite-button"
                    ref={(c: any) => this.props.setConfirmButtonRef(c)}
                    marginLeft
                    actionBtn
                    uiBackground={600}
                    caption={this.state.loading ? "" : "Invite"}
                    uiSize="s"
                    active
                    disabled={!this.state.textInput}
                    paddingRight={10}
                    paddingLeft={10}
                    fixed
                    width="60"
                    onClick={this.handleInviteButton}
                  >
                    {this.state.loading ? (
                      <Spinner uiSize="xs" color="white" />
                    ) : null}
                  </Button>
                </FormCol>
              </FormRow>
              {this.state.helperVisible && (
                <FormRow className="px-4 pb-2">
                  <FormCol uiBackground={500} uiSize="m" className="p-2">
                    <Text uiSize="s">{this.state.helperText}</Text>
                  </FormCol>
                </FormRow>
              )}
              <FormRow className="px-4 pt-3 pb-2">
                <FormCol contentLeft className="px-0">
                  <Text uiSize="m">Select a person</Text>
                </FormCol>
              </FormRow>
              <FormRow className="px-4 pb-4 pt-2">
                <Scrollbars autoHide autoHeight>
                  <Pane
                    padder="xs"
                    uiBackground={600}
                    data-cypress-id="share-invite-users"
                  >
                    {this.state.teamMembersFetched ? (
                      this.state.filteredUsers.length ? (
                        this.state.filteredUsers.map((user: any) => {
                          return (
                            <FormRow
                              key={user.id}
                              paddingBottom={10}
                              onClick={() => {
                                this.selectUser(user.email);
                              }}
                            >
                              <FormCol uiSize="m">
                                <Checkbox>
                                  <CheckboxTick
                                    checked={
                                      this.state.textInput === user.email
                                    }
                                  />
                                  <CheckboxLabel style={{ width: "100%" }}>
                                    <Text uiSize="m">
                                      {capitalize(user.name) || user.email}
                                    </Text>
                                    <Text
                                      uiColor={400}
                                      uiSize={"s"}
                                      className="mt-2"
                                    >
                                      {user.email}
                                    </Text>
                                  </CheckboxLabel>
                                </Checkbox>
                              </FormCol>
                              <FormCol className="pr-4">
                                <Text uiSize="m">
                                  {capitalize(user.pivot.role)}
                                </Text>
                              </FormCol>
                            </FormRow>
                          );
                        })
                      ) : (
                        <FormRow center>
                          <Text>No matching user</Text>
                        </FormRow>
                      )
                    ) : (
                      <FormRow>
                        <FormCol flex>
                          <Spinner uiSize="l" color="white" />
                        </FormCol>
                      </FormRow>
                    )}
                  </Pane>
                </Scrollbars>
              </FormRow>
            </FormGroup>
          </Pane>
        </WindowBody>
        <WindowFooter>
          <Pane uiBackground={800} className="p-4">
            <ButtonGroup contentRight>
              <Button
                data-cypress-id="share-invite-done"
                marginLeft
                actionBtn
                uiBackground={600}
                caption="Done"
                uiSize="s"
                active
                paddingRight={20}
                paddingLeft={20}
                onClick={this.props.closeDialog}
              />
            </ButtonGroup>
          </Pane>
        </WindowFooter>
      </Window>
    );
  }
}
