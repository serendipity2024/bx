import * as React from "react";
import {
  Window,
  WindowBody,
  Pane,
  FormRow,
  Button,
  Text,
  WindowFooter,
  FormCol,
  ButtonGroup,
  Title,
  FormGroup,
  Icon,
  Scrollbars
} from "components-x";
import { ShareInviteDialog } from "../DialogX";
import { AccessTypeDropdown } from "./Components";
import { get } from "lodash";
import urljoin from "url-join";
import { Utils } from "utils";
type propType = {
  resolvePromise: (val: boolean, data?: any) => void;
  closeDialog: () => void;
  copyURL: (url: string) => void;
  setConfirmButtonRef: (c: any) => void;
  shareabilityCallback?: (
    callbackType: string,
    data: { type: string; access: string; email?: string; mode?: string }
  ) => any;
  projectShareableData?: any;
};
type stateType = {
  teamAccess?: string;
  publicAccess?: string;
  usersWithAccess?: any[];
  teamData: any;
  teamMembersFetched: boolean;
  copied: boolean;
  helperText: string;
};
export default class ShareAccessModal extends React.Component<
  propType,
  stateType
> {
  showInviteDialogue = async () => {
    await ShareInviteDialog(this.state.teamData, this.state.teamMembersFetched);
  };
  copyToClipboard = () => {
    this.props.copyURL(
      urljoin(Utils.getEnv("BUILDERX_APP_URL"), Utils.getEnv("PROJECT_ID"))
    );
    this.setState({ copied: true });
  };
  componentWillMount() {
    const shareableData = get(this.props, "projectShareableData.data", []);
    let publicAccess = shareableData.filter((item: any) => {
      if (item.type === "public") {
        return item;
      }
    });

    publicAccess = get(publicAccess, "[0].access", "disabled");

    let accessObj = shareableData.filter((item: any) => {
      if (item.type === "team") {
        return item;
      }
    });
    let teamAccess = get(accessObj, "[0].access", "disabled");
    if (teamAccess === "read") {
      const mode = get(accessObj, "[0].mode");
      teamAccess =
        mode === "design_code" ? "View (Design + Code)" : "View (Design)";
    }

    let usersWithAccess = shareableData.filter((item: any) => {
      if (item.type === "user") {
        return item;
      }
    });

    this.props.projectShareableData
      .getTeamDataCallback()
      .then((result: any) => {
        this.setState({ teamData: result, teamMembersFetched: true });
      });
    this.setState({
      publicAccess,
      teamAccess,
      usersWithAccess,
      copied: false
    });
  }
  handlePublicAccessChange = (
    access: string,
    typeId?: number,
    mode?: string
  ) => {
    this.setState({ publicAccess: access, copied: false });
    return new Promise((resolve, reject) => {
      if (this.props.shareabilityCallback) {
        this.props
          .shareabilityCallback("setShareabilityAccess", {
            type: "public",
            access,
            mode
          })
          .then((resp: any) => {
            this.setState({ helperText: resp.message });
            resolve(true);
          })
          .catch((err: any) => {
            this.setState({ helperText: err.message });
            reject(err);
          });
      }
    });
  };
  handleTeamAccessChange = (access: string, typeId?: number, mode?: string) => {
    let teamAccess =
      access === "read"
        ? mode === "design_code"
          ? "View (Design + Code)"
          : "View (Design)"
        : access;
    this.setState({ teamAccess, copied: false });
    return new Promise((resolve, reject) => {
      if (this.props.shareabilityCallback) {
        this.props
          .shareabilityCallback("setShareabilityAccess", {
            type: "team",
            access,
            mode
          })
          .then((resp: any) => {
            this.setState({ helperText: resp.message });
            resolve(true);
          })
          .catch((err: any) => {
            this.setState({ helperText: err.message });
            reject(err);
          });
      }
    });
  };
  handleUserAccessChange = (access: string, email: string, mode?: string) => {
    return new Promise((resolve, reject) => {
      if (this.props.shareabilityCallback) {
        this.props
          .shareabilityCallback("changeUserShareabilityAccess", {
            type: "user",
            access,
            email,
            mode
          })
          .then((resp: any) => {
            this.setState({ helperText: resp.message });
            resolve(true);
          })
          .catch((err: any) => {
            this.setState({ helperText: err.message });
            reject(err);
          });
      } else {
        resolve(true);
      }
    });
  };
  renderPane = (users: Array<any>) => {
    return (
      <Pane
        data-cypress-id="share-access-users"
        padder="xs"
        uiBackground={600}
        overflowNone={users.length < 4}
      >
        {users.map((item, index) => {
          const isLast = users.length > 3 && index > users.length - 3;
          const itemAccess =
            item.access === "read"
              ? item.mode === "design_code"
                ? "View (Design + Code)"
                : "View (Design)"
              : item.access;
          return (
            <FormRow key={item.id} paddingBottom={10}>
              <FormCol uiSize="m" className="px-4">
                <Text uiSize="m">
                  {get(item, "share_user.name") ||
                    get(item, "share_user.email")}
                </Text>
                <Text uiColor={400} uiSize="s" className="mt-2">
                  {get(item, "share_user.email")}
                </Text>
              </FormCol>
              <FormCol className="pr-2">
                <AccessTypeDropdown
                  alignTop={isLast}
                  typeId={item.type_id}
                  accessValue={itemAccess}
                  callbackType="changeUserShareabilityAccess"
                  onChange={(value: string, email?: number, mode?: string) => {
                    return this.handleUserAccessChange(
                      value,
                      item.share_user.email,
                      mode
                    );
                  }}
                />
              </FormCol>
            </FormRow>
          );
        })}
      </Pane>
    );
  };
  render() {
    let membersCount = 0;
    if (this.state.teamData && this.state.teamData.users) {
      membersCount = this.state.teamData.users.length;
    }
    return (
      <Window style={{ display: "block", overflow: "visible" }}>
        <WindowBody style={{ display: "block", overflow: "visible" }}>
          <Pane
            uiBackground={800}
            padder={"xs"}
            style={{
              display: "block",
              overflow: "visible"
            }}
            className="py-0"
          >
            <FormGroup className="px-0 pb-0">
              <FormRow noPadding alignTop className="p-4 bb">
                <FormCol uiSize="xs" contentLeft alignTop>
                  <Title uiSize="m" uiColor={300}>
                    Share
                  </Title>
                </FormCol>
              </FormRow>
              <FormRow className="p-4 bb">
                <FormCol contentLeft className="mr-0" uiSize={6}>
                  <FormRow>
                    <Icon
                      name={"earth"}
                      size={18}
                      style={{ marginRight: 10 }}
                    />
                    <Text uiSize="l" fontWeight={500} uiColor={300}>
                      Public Access
                    </Text>
                  </FormRow>
                </FormCol>
                <FormCol contentRight>
                  <AccessTypeDropdown
                    data-cypress-id="share-access-public"
                    accessValue={this.state.publicAccess}
                    options={["disabled", "read-design"]}
                    callbackType="setShareabilityAccess"
                    onChange={this.handlePublicAccessChange}
                  />
                </FormCol>
              </FormRow>
              <FormRow className="p-4 bb">
                <FormCol contentLeft uiSize={6}>
                  <Text uiSize="l" fontWeight={500} uiColor={300}>
                    Workspace Access
                    {this.state.teamData && this.state.teamData.name
                      ? " (" + this.state.teamData.name + ")"
                      : ""}
                  </Text>
                  <Text fontWeight={500} className="pt-3" uiColor={300}>
                    {membersCount + " member"}
                  </Text>
                </FormCol>
                <FormCol contentRight>
                  <AccessTypeDropdown
                    data-cypress-id="share-access-workspace"
                    accessValue={this.state.teamAccess}
                    callbackType="setShareabilityAccess"
                    onChange={this.handleTeamAccessChange}
                  />
                </FormCol>
              </FormRow>
            </FormGroup>
            {this.state.usersWithAccess && this.state.usersWithAccess.length ? (
              <>
                <FormRow className="px-4 pt-4 pb-2">
                  <FormCol contentLeft>
                    <Text uiSize="m">Users with access</Text>
                  </FormCol>
                </FormRow>
                <FormRow className="px-5 pb-3 pt-2">
                  {this.state.usersWithAccess.length > 3 ? (
                    <Scrollbars autoHide autoHeight>
                      {this.renderPane(this.state.usersWithAccess)}
                    </Scrollbars>
                  ) : (
                    this.renderPane(this.state.usersWithAccess)
                  )}
                </FormRow>
              </>
            ) : (
              <></>
            )}
          </Pane>
        </WindowBody>
        <WindowFooter>
          <Pane padding={0} uiBackground={800} className="px-5 py-4">
            {this.state.helperText && (
              <FormRow className="pt-0 pb-3">
                <FormCol uiBackground={500} uiSize="m" className="p-2">
                  <Text uiSize="s">{this.state.helperText}</Text>
                </FormCol>
              </FormRow>
            )}
            <ButtonGroup uiSize="l">
              <Button
                data-cypress-id="toolbar-share-invite"
                actionBtn
                uiBackground={600}
                caption="Invite a person"
                uiSize="l"
                marginRight
                active
                onClick={this.showInviteDialogue}
                className="px-5 mr-2 ml-0"
              />
              <Button
                data-cypress-id="toolbar-share-copy-link"
                ref={(c: any) => this.props.setConfirmButtonRef(c)}
                marginLeft
                actionBtn
                uiBackground={600}
                caption={this.state.copied ? "Link Copied!" : "Copy link"}
                uiSize="l"
                marginRight
                onClick={this.copyToClipboard}
                className="px-5"
                outline
              />
            </ButtonGroup>
          </Pane>
        </WindowFooter>
      </Window>
    );
  }
}
