import * as React from "react";
import * as ReactDOM from "react-dom";
import {
  ModalContainer,
  ModalBackdrop,
  ModalContent,
  Window,
  WindowBody,
  Pane,
  FormGroup,
  FormRow,
  FormCol,
  Title,
  Button,
  ButtonGroup,
  InputGroupInput,
  SubTitle,
  WindowFooter,
  Text
} from "components-x";
import SketchConversionModal from "./SketchConversionModal";
import ProgressIndicatorModal from "./ProgressIndicatorModal";
import { IconModal } from "icon-modal";
import ShareAccessModal from "./share/ShareAccess";
import ShareInviteModal from "./share/ShareInvite";
import ShareLinkModal from "./share/ShareLink";
import DownloadReadme from "./DownloadReadme";
import { CodeEngineNames } from "session";

interface DialogXState {
  show: boolean;
  dialogType:
    | "alert"
    | "prompt"
    | "confirm"
    | "minFileSize"
    | "confirmOnExit"
    | "sketchImport"
    | "progress"
    | "downloadShare"
    | "iconModal"
    | "shareAccess"
    | "shareInvite"
    | "shareLink"
    | "downloadReadme";
  subject: string;
  message: string;
  confirmBtnText: string;
  cancelBtnText: string;
  promptInputText: string;
  nonDismissible: boolean;
  errorMessage?: string;
  minFileSizeValue?: { width: number; height: number };
  artboards?: Array<any>;
  existingArtboards?: Array<string>;
  loaderOnly?: boolean;
  progressData?: {
    text: string;
    value: number;
    close?: boolean;
    heading: string;
  };
  toggleShareability?: any;
  copyURL?: any;
  isShareable?: boolean;
  iconFamily?: string;
  iconName?: string;
  showIconModal: boolean;
  shareabilityCallback?: (
    callbackType: string,
    data: { type: string; access: string; mode?: string }
  ) => void;
  projectShareableData?: any;
  shareTeamData?: any;
  teamMembersFetched?: boolean;
  codeEngineName?: CodeEngineNames;
  downloadType?: "component" | "project";
}

class DialogXComponent extends React.Component<any, DialogXState> {
  static dialogInstance: DialogXComponent;
  static resolve: any;
  static reject: any;
  promptInputRef: any;
  confirmButtonRef: any;

  minFileSizeInputRef: any = { width: undefined, height: undefined };
  confirmOnExitSave: boolean = false;
  static Alert(
    subject: string,
    message: string,
    nonDismissible: boolean = false,
    confirmBtnText: string = "Reload"
  ) {
    return new Promise<boolean>((resolve, reject) => {
      DialogXComponent.resolve = resolve;
      DialogXComponent.reject = reject;

      if (!DialogXComponent.dialogInstance) {
        alert(message);
        reject(message);
        return;
      }
      DialogXComponent.dialogInstance.setState(
        {
          show: true,
          subject,
          message,
          nonDismissible,
          confirmBtnText,
          dialogType: "alert"
        },
        () => {
          if (DialogXComponent.dialogInstance.confirmButtonRef) {
            (ReactDOM.findDOMNode(
              DialogXComponent.dialogInstance.confirmButtonRef
            ) as HTMLElement).focus();
          }
        }
      );
    });
  }

  static Confirm(
    subject: string,
    message: string,
    confirmBtnText: string = "Confirm",
    cancelBtnText: string = "Cancel"
  ) {
    return new Promise<boolean | string>((resolve, reject) => {
      DialogXComponent.dialogInstance.setState(
        {
          show: true,
          subject,
          message,
          confirmBtnText,
          cancelBtnText,
          nonDismissible: false,
          dialogType: "confirm"
        },
        () => {
          if (DialogXComponent.dialogInstance.confirmButtonRef) {
            (ReactDOM.findDOMNode(
              DialogXComponent.dialogInstance.confirmButtonRef
            ) as HTMLElement).focus();
          }
        }
      );
      DialogXComponent.resolve = resolve;
      DialogXComponent.reject = reject;
    });
  }

  static ConfirmOnExit(
    subject: string,
    message: string,
    confirmBtnText: string = "Save As...",
    cancelBtnText: string = "Cancel"
  ) {
    return new Promise<boolean | string>((resolve, reject) => {
      DialogXComponent.dialogInstance.setState(
        {
          show: true,
          subject,
          message,
          confirmBtnText,
          cancelBtnText,
          nonDismissible: false,
          dialogType: "confirmOnExit"
        },
        () => {
          if (DialogXComponent.dialogInstance.confirmButtonRef) {
            (ReactDOM.findDOMNode(
              DialogXComponent.dialogInstance.confirmButtonRef
            ) as HTMLElement).focus();
          }
        }
      );
      DialogXComponent.resolve = resolve;
      DialogXComponent.reject = reject;
    });
  }
  static IconModal(
    showIconModal: boolean = false,
    iconFamily?: string,
    iconName?: string
  ) {
    return new Promise<boolean | string>((resolve, reject) => {
      DialogXComponent.dialogInstance.setState({
        show: true,
        iconFamily,
        iconName,
        nonDismissible: false,
        showIconModal,
        dialogType: "iconModal"
      });
      DialogXComponent.resolve = resolve;
      DialogXComponent.reject = reject;
    });
  }

  static Prompt(
    subject: string,
    message: string,
    defaultText: string = "",
    errorMessage?: string
  ) {
    return new Promise<boolean | string>((resolve, reject) => {
      DialogXComponent.dialogInstance.setState(
        {
          show: true,
          subject,
          message,
          promptInputText: defaultText,
          nonDismissible: false,
          confirmBtnText: "Confirm",
          dialogType: "prompt",
          errorMessage
        },
        () => {
          if (DialogXComponent.dialogInstance.promptInputRef) {
            DialogXComponent.dialogInstance.promptInputRef.select();
          }
        }
      );
      DialogXComponent.resolve = resolve;
      DialogXComponent.reject = reject;
    });
  }

  static MinFileSize(defaultValue: number) {
    return new Promise<boolean | string>((resolve, reject) => {
      DialogXComponent.dialogInstance.setState(
        {
          show: true,
          subject: "Enter the size",
          nonDismissible: false,
          confirmBtnText: "Confirm",
          dialogType: "minFileSize",
          minFileSizeValue: { width: defaultValue, height: defaultValue }
        },
        () => {
          if (DialogXComponent.dialogInstance.minFileSizeInputRef) {
            DialogXComponent.dialogInstance.minFileSizeInputRef.width.select();
          }
        }
      );
      DialogXComponent.resolve = resolve;
      DialogXComponent.reject = reject;
    });
  }
  static SketchImportDialog(artboards: any, existingArtboards: Array<string>) {
    return new Promise<boolean | string>((resolve, reject) => {
      DialogXComponent.dialogInstance.setState({
        show: true,
        subject: "Select Artboards to import",
        nonDismissible: false,
        confirmBtnText: "Import",
        cancelBtnText: "Cancel",
        dialogType: "sketchImport",
        artboards,
        existingArtboards
      });
      DialogXComponent.resolve = resolve;
      DialogXComponent.reject = reject;
    });
  }
  static ProgressIndicatorDialog(
    heading: string,
    text: string,
    value: number,
    loaderOnly?: boolean,
    close?: boolean
  ) {
    return new Promise<boolean | string>((resolve, reject) => {
      DialogXComponent.dialogInstance.setState({
        show: close ? !close : true,
        subject: "Importing",
        nonDismissible: true,
        dialogType: "progress",
        progressData: { text, value, heading },
        loaderOnly
      });
      DialogXComponent.resolve = resolve;
      DialogXComponent.reject = reject;
    });
  }

  static DownloadReadmeDialog(
    codeEngineName: CodeEngineNames,
    downloadType: "project" | "component"
  ) {
    return new Promise<boolean | string>((resolve, reject) => {
      DialogXComponent.dialogInstance.setState({
        show: true,
        subject: "Readme",
        nonDismissible: false,
        dialogType: "downloadReadme",
        codeEngineName,
        downloadType
      });
      DialogXComponent.resolve = resolve;
      DialogXComponent.reject = reject;
    });
  }
  static ShareAccessDialog(
    copyURL: (content: string) => void,
    projectShareableData: any,
    shareabilityCallback: (
      type: string,
      data: { type: string; access: string; type_id?: number; mode?: string }
    ) => void
  ) {
    return new Promise<boolean | string>((resolve, reject) => {
      DialogXComponent.dialogInstance.setState({
        show: true,
        subject: "",
        nonDismissible: false,
        confirmBtnText: "Confirm",
        cancelBtnText: "Cancel",
        dialogType: "shareAccess",
        copyURL,
        shareabilityCallback: shareabilityCallback,
        projectShareableData: projectShareableData
      });
      DialogXComponent.resolve = resolve;
      DialogXComponent.reject = reject;
    });
  }

  static ShareInviteDialog(teamData: [], teamMembersFetched: boolean) {
    return new Promise<boolean | string>((resolve, reject) => {
      DialogXComponent.dialogInstance.setState({
        show: true,
        subject: "",
        nonDismissible: false,
        confirmBtnText: "Confirm",
        cancelBtnText: "Cancel",
        dialogType: "shareInvite",
        shareTeamData: teamData,
        teamMembersFetched: teamMembersFetched
      });
      DialogXComponent.resolve = resolve;
      DialogXComponent.reject = reject;
    });
  }

  static ShareLinkDialog(
    copyURL?: (content: string) => void,
    isShareable?: any
  ) {
    return new Promise<boolean | string>((resolve, reject) => {
      DialogXComponent.dialogInstance.setState({
        show: true,
        subject: "",
        nonDismissible: false,
        confirmBtnText: "Confirm",
        cancelBtnText: "Cancel",
        dialogType: "shareLink",
        copyURL,
        isShareable
      });
      DialogXComponent.resolve = resolve;
      DialogXComponent.reject = reject;
    });
  }

  constructor(props: any) {
    super(props);
    this.state = {
      show: false,
      subject: "Subject",
      message: "Message",
      confirmBtnText: "Confirm",
      cancelBtnText: "Cancel",
      dialogType: "alert",
      promptInputText: "",
      nonDismissible: false,
      showIconModal: false,
      iconFamily: "FontAwesome",
      iconName: "home"
    };
  }
  addKeyEventListeners = (e: any) => {
    if (e.key === "Escape" && e.keyCode === 27) {
      this.closeDialog();
    }
    if (e.key === "Enter" && e.keyCode === 13) {
      if (DialogXComponent.dialogInstance.confirmButtonRef) {
        (ReactDOM.findDOMNode(
          DialogXComponent.dialogInstance.confirmButtonRef
        ) as HTMLElement).focus();
      }
    }
  };
  componentDidMount() {
    document.addEventListener("keydown", this.addKeyEventListeners);
  }
  componentWillUnmount() {
    document.removeEventListener("keydown", this.addKeyEventListeners);
  }
  closeDialog = () => {
    if (this.state.nonDismissible) {
      return;
    }
    this.setState({
      show: false,
      subject: "Subject",
      message: "Message",
      errorMessage: "",
      confirmBtnText: "Confirm",
      cancelBtnText: "Cancel",
      dialogType: "alert",
      promptInputText: "",
      nonDismissible: false
    });
  };
  setConfirmButtonRef = (c: any) => {
    this.confirmButtonRef = c;
  };
  resolvePromise = (value: boolean = true, data?: any) => {
    switch (this.state.dialogType) {
      case "confirm":
      case "alert":
        DialogXComponent.resolve(value);
        break;
      case "prompt":
        if (value) {
          DialogXComponent.resolve(this.state.promptInputText);
        } else {
          DialogXComponent.resolve();
        }
        break;
      case "minFileSize":
        DialogXComponent.resolve(this.state.minFileSizeValue);
        break;
      case "confirmOnExit":
        DialogXComponent.resolve({ value, save: this.confirmOnExitSave });
        break;
      case "sketchImport":
      case "downloadShare":
      case "progress":
      case "iconModal":
      case "shareAccess":
      case "shareInvite":
      case "shareLink":
        DialogXComponent.resolve(data);
        break;
      default:
        break;
    }
  };
  render() {
    if (this.state.show) {
      return (
        <>
          <ModalContainer className="modal-container">
            <ModalBackdrop
              className="modal-backdrop"
              onClick={() => {
                if (!this.state.nonDismissible) {
                  this.resolvePromise(false);
                  this.closeDialog();
                }
              }}
            />
            <ModalContent
              uiSize={
                this.state.dialogType === "iconModal"
                  ? "l"
                  : this.state.dialogType === "shareAccess" ||
                    this.state.dialogType === "shareInvite" ||
                    this.state.dialogType === "downloadReadme"
                  ? "ms"
                  : "m"
              }
              className="modal-content"
            >
              {this.state.dialogType === "sketchImport" ? (
                <SketchConversionModal
                  artboards={this.state.artboards || []}
                  existingArtboards={this.state.existingArtboards || []}
                  cancelBtnText={this.state.cancelBtnText}
                  resolvePromise={this.resolvePromise}
                  closeDialog={this.closeDialog}
                  setConfirmButtonRef={this.setConfirmButtonRef}
                />
              ) : this.state.dialogType === "iconModal" ? (
                <IconModal
                  selectedIcon={(iconName: string, iconFamily: string) => {
                    this.resolvePromise(true, { iconName, iconFamily });
                    this.closeDialog();
                  }}
                  showIconModal={this.state.show}
                  iconFamily={this.state.iconFamily}
                  iconName={this.state.iconName}
                />
              ) : this.state.dialogType === "downloadReadme" ? (
                <DownloadReadme
                  resolvePromise={this.resolvePromise}
                  closeDialog={this.closeDialog}
                  session={this.props.session}
                  codeEngineName={this.state.codeEngineName || "react-native"}
                  downloadType={this.state.downloadType || "project"}
                  setConfirmButtonRef={this.setConfirmButtonRef}
                />
              ) : this.state.dialogType === "progress" ? (
                <ProgressIndicatorModal
                  resolvePromise={this.resolvePromise}
                  closeDialog={this.closeDialog}
                  text={
                    (this.state.progressData && this.state.progressData.text) ||
                    ""
                  }
                  heading={
                    (this.state.progressData &&
                      this.state.progressData.heading) ||
                    ""
                  }
                  value={
                    (this.state.progressData &&
                      this.state.progressData.value) ||
                    0
                  }
                  loaderOnly={this.state.loaderOnly}
                />
              ) : this.state.dialogType === "shareAccess" ? (
                <ShareAccessModal
                  resolvePromise={this.resolvePromise}
                  closeDialog={this.closeDialog}
                  copyURL={this.state.copyURL}
                  setConfirmButtonRef={this.setConfirmButtonRef}
                  shareabilityCallback={this.state.shareabilityCallback}
                  projectShareableData={this.state.projectShareableData}
                />
              ) : this.state.dialogType === "shareInvite" ? (
                <ShareInviteModal
                  resolvePromise={this.resolvePromise}
                  closeDialog={this.closeDialog}
                  copyURL={this.state.copyURL}
                  setConfirmButtonRef={this.setConfirmButtonRef}
                  shareabilityCallback={this.state.shareabilityCallback}
                  projectShareableData={this.state.projectShareableData}
                  teamData={this.state.shareTeamData}
                  teamMembersFetched={this.state.teamMembersFetched}
                />
              ) : this.state.dialogType === "shareLink" ? (
                <ShareLinkModal
                  resolvePromise={this.resolvePromise}
                  closeDialog={this.closeDialog}
                  copyURL={this.state.copyURL}
                  setConfirmButtonRef={this.setConfirmButtonRef}
                />
              ) : (
                <Window uiBackground={800}>
                  <WindowBody>
                    <Pane uiBackground={800}>
                      <FormGroup className="p-0">
                        <FormRow noPadding alignTop className="p-0">
                          <FormCol
                            uiSize={4}
                            contentLeft
                            alignTop
                            className="p-0"
                          >
                            <FormRow noPadding alignTop className="p-4 bb">
                              <Title uiSize="m" uiColor={300}>
                                {this.state.subject}
                              </Title>
                            </FormRow>
                            {this.state.dialogType === "minFileSize" ? (
                              <FormCol first className="p-4">
                                <FormRow>
                                  <Text uiSize={"m"} style={{ width: 60 }}>
                                    Width
                                  </Text>
                                  <InputGroupInput
                                    style={{ marginLeft: 10 }}
                                    uiSize="l"
                                    ref={(input: any) => {
                                      this.minFileSizeInputRef.width = input;
                                    }}
                                    type="number"
                                    validator={e =>
                                      !isNaN(parseFloat(e.target.value))
                                    }
                                    autoFocus
                                    value={this.state.minFileSizeValue!.width}
                                    onChange={(e: React.FormEvent) =>
                                      this.setState({
                                        minFileSizeValue: {
                                          height: this.state.minFileSizeValue!
                                            .height,
                                          width: Number(
                                            (e.target as HTMLInputElement).value
                                          )
                                        }
                                      })
                                    }
                                  />
                                </FormRow>
                                <FormRow style={{ paddingTop: 10 }}>
                                  <Text uiSize={"m"} style={{ width: 60 }}>
                                    Height
                                  </Text>
                                  <InputGroupInput
                                    uiSize="l"
                                    ref={(input: any) => {
                                      this.minFileSizeInputRef.height = input;
                                    }}
                                    style={{ marginLeft: 10 }}
                                    type="number"
                                    validator={e =>
                                      !isNaN(parseFloat(e.target.value))
                                    }
                                    value={this.state.minFileSizeValue!.height}
                                    onChange={(e: React.FormEvent) =>
                                      this.setState({
                                        minFileSizeValue: {
                                          width: this.state.minFileSizeValue!
                                            .width,
                                          height: Number(
                                            (e.target as HTMLInputElement).value
                                          )
                                        }
                                      })
                                    }
                                  />
                                </FormRow>
                              </FormCol>
                            ) : (
                              <>
                                <FormRow className="px-4 pt-2 pb-0">
                                  <SubTitle uiSize="m" uiColor={400}>
                                    {this.state.message}
                                  </SubTitle>
                                </FormRow>
                                {this.state.dialogType === "prompt" && (
                                  <FormRow className="px-4 pb-2 pt-0">
                                    <InputGroupInput
                                      ref={(input: any) => {
                                        this.promptInputRef = input;
                                      }}
                                      uiSize="l"
                                      value={this.state.promptInputText}
                                      onChange={(e: React.FormEvent) =>
                                        this.setState({
                                          promptInputText: (e.target as HTMLInputElement)
                                            .value
                                        })
                                      }
                                    />
                                  </FormRow>
                                )}
                              </>
                            )}
                          </FormCol>
                        </FormRow>
                      </FormGroup>
                    </Pane>
                  </WindowBody>
                  <WindowFooter uiBackground={800}>
                    <Pane uiBackground={800} className="py-4">
                      <ButtonGroup>
                        <ButtonGroup paddingRight={12} contentRight={false}>
                          {this.state.errorMessage ? (
                            <FormCol className="ml-4" first>
                              <Text danger>{this.state.errorMessage}</Text>
                            </FormCol>
                          ) : null}
                          {this.state.dialogType === "confirmOnExit" ? (
                            <Button
                              style={{
                                minWidth: 70,
                                marginRight: 10,
                                padding: 0,
                                marginLeft: 20
                              }}
                              paddingLeft={10}
                              paddingRight={10}
                              uiBackground={600}
                              border
                              caption={
                                <Text uiColor={50}>
                                  {this.state.cancelBtnText}
                                </Text>
                              }
                              uiSize="m"
                              onClick={() => {
                                this.resolvePromise(false);
                                this.closeDialog();
                              }}
                            />
                          ) : null}
                        </ButtonGroup>
                        <ButtonGroup contentRight className="mr-4">
                          {this.state.dialogType === "confirm" ||
                          this.state.dialogType === "confirmOnExit" ? (
                            <Button
                              style={{
                                minWidth: 70,
                                marginRight: 10,
                                padding: 0
                              }}
                              paddingLeft={10}
                              paddingRight={10}
                              uiBackground={600}
                              border
                              caption={
                                <Text uiColor={50}>
                                  {this.state.dialogType === "confirmOnExit"
                                    ? "Don't Save"
                                    : this.state.cancelBtnText}
                                </Text>
                              }
                              uiSize="m"
                              onClick={() => {
                                if (this.state.dialogType === "confirmOnExit") {
                                  this.confirmOnExitSave = false;
                                  this.resolvePromise(true);
                                } else {
                                  this.resolvePromise(false);
                                }
                                this.closeDialog();
                              }}
                            />
                          ) : null}

                          <Button
                            ref={(c: any) => this.setConfirmButtonRef(c)}
                            style={{ minWidth: 70, padding: 0 }}
                            paddingLeft={10}
                            paddingRight={10}
                            actionBtn={true}
                            uiBackground={500}
                            border
                            caption={this.state.confirmBtnText}
                            uiSize="m"
                            onClick={() => {
                              if (this.state.dialogType === "confirmOnExit") {
                                this.confirmOnExitSave = true;
                              }
                              this.resolvePromise();
                              this.closeDialog();
                            }}
                            active
                          />
                        </ButtonGroup>
                      </ButtonGroup>
                    </Pane>
                  </WindowFooter>
                </Window>
              )}
            </ModalContent>
          </ModalContainer>
        </>
      );
    } else {
      return null;
    }
  }
}

export class DialogX extends React.Component<any, any> {
  render() {
    return (
      <DialogXComponent
        session={this.props.session}
        ref={c => {
          if (c) {
            DialogXComponent.dialogInstance = c;
          }
        }}
      />
    );
  }
}

export const Alert = DialogXComponent.Alert;
export const Prompt = DialogXComponent.Prompt;
export const Confirm = DialogXComponent.Confirm;
export const MinFileSize = DialogXComponent.MinFileSize;
export const ConfirmOnExit = DialogXComponent.ConfirmOnExit;
export const SketchImportDialog = DialogXComponent.SketchImportDialog;
// export const DownloadShareDialog = DialogXComponent.DownloadShareDialog;
export const DownloadReadmeDialog = DialogXComponent.DownloadReadmeDialog;
export const ProgressIndicatorDialog = DialogXComponent.ProgressIndicatorDialog;
export const IconModalDialog = DialogXComponent.IconModal;
export const ShareAccessDialog = DialogXComponent.ShareAccessDialog;
export const ShareInviteDialog = DialogXComponent.ShareInviteDialog;
export const ShareLinkDialog = DialogXComponent.ShareLinkDialog;
