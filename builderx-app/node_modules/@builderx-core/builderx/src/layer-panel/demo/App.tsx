// import * as React from "react";
// import { IEvent } from "common-interfaces";
// import LayerPanel from "../lib/components/LayerPanel";
// import { Layer as LayerModel, File } from "domain-x";

// class App extends React.Component {
//   store: any;
//   constructor(props: any) {
//     super(props);
//     this.store = new File({
//       content: "",
//       isDirty: false,
//       type: "file",
//       template: {
//         centerVertical: false,
//         centerHorizontal: false
//       },
//       props: { style: { backgroundColor: "gray", flex: 1 } },
//       children: []
//     });
//     // this.store.appendChild(
//     //   DomainLayerFactory.createDomainLayer({
//     //     type: "root",
//     //     import: {
//     //       layerName: "View",
//     //       packageName: "native",
//     //       isDefaultImport: false,
//     //       asName: ""
//     //     },
//     //     template: {
//     //       centerVertical: false,
//     //       centerHorizontal: false
//     //     },
//     //     props: { style: { backgroundColor: "gray", flex: 1 } },
//     //     children: []
//     //   })
//     // );

//     // this.store.appendChild(
//     //   DomainLayerFactory.createDomainLayer({
//     //     type: "view",
//     //     styleName: "view11",
//     //     import: {},
//     //     template: {
//     //       centerVertical: false,
//     //       centerHorizontal: false
//     //     },
//     //     props: {
//     //       style: {
//     //         display: "none",
//     //         position: "absolute",
//     //         top: 100,
//     //         left: 100,
//     //         width: 100,
//     //         height: 100,
//     //         backgroundColor: "#FF9"
//     //       }
//     //     },
//     //     children: [],
//     //     collapsed: true,
//     //     locked: true
//     //   })
//     // );
//   }
//   moveLayer(data: {
//     fromParent: LayerModel;
//     fromIndex: number;
//     toIndex: number;
//     toParent: LayerModel;
//     layer: LayerModel;
//   }) {
//     let { fromParent, fromIndex, toIndex, toParent, layer } = data;

//     if (fromParent === toParent && fromIndex === toIndex) {
//       return;
//     }
//     const newLayerId = toParent.appendChild(layer, toIndex);
//     fromParent.children.splice(fromIndex, 1);
//     fromParent.emit("change");
//     toParent.emit("change");
//     return newLayerId;
//   }

//   setOnHover(layer: any, value: boolean) {
//     layer.hovered = value;
//     layer.emit("hovered");
//   }
//   toggleLayerSelected(layer: any) {
//     layer.selected = !layer.selected;
//     layer.emit("selected");
//   }
//   toggleLock(layer: any) {
//     layer.locked = !layer.locked;
//     layer.emit("locked");
//   }
//   toggleCollapse(layer: any) {
//     layer.collapsed = !layer.collapsed;
//     layer.emit("collapsed");
//   }
//   toggleHide(layer: any) {
//     if (layer.props.style.display !== "none") {
//       layer.props.style.display = "none";
//     } else {
//       layer.props.style.display = "block";
//     }
//     layer.props.style.emit("display");
//   }
//   onDragHover(payload: any) {
//     payload.layer.dragHoverInside = false;
//     payload.layer.dragHoverBefore = false;
//     payload.layer.dragHoverAfter = false;
//     switch (payload.position) {
//       case "inside":
//         payload.layer.dragHoverInside = true;
//         break;
//       case "before":
//         payload.layer.dragHoverBefore = true;
//         break;
//       case "after":
//         payload.layer.dragHoverAfter = true;
//         break;
//       default:
//         break;
//     }
//     payload.layer.emit([
//       "dragHoverInside",
//       "dragHoverBefore",
//       "dragHoverAfter"
//     ]);
//   }
//   onEvent(type: string, payload: any) {
//     const { layer, target } = payload;
//     switch (type) {
//       case "moveLayer":
//         this.moveLayer(payload);
//         break;
//       case "onDragHover":
//         this.onDragHover(payload);
//         break;
//       case "onHover":
//         break;
//       case "onMouseEnter":
//         this.setOnHover(layer, true);
//         break;
//       case "onMouseLeave":
//         this.setOnHover(layer, false);
//         break;
//       case "toggleCollapse":
//         this.toggleCollapse(payload);
//         break;
//       case "toggleLock":
//         this.toggleLock(payload);
//         break;
//       case "toggleHide":
//         this.toggleHide(payload);
//         break;
//       case "onClick":
//         this.toggleLayerSelected(layer);
//         break;
//       default:
//         break;
//     }
//   }
//   public render() {
//     return (
//       <div>
//         <LayerPanel
//           active
//           layer={this.store}
//           onEvent={(event: IEvent) => {
//             this.onEvent(event.type, event.payload);
//           }}
//         />
//       </div>
//     );
//   }
// }

// export default App;
