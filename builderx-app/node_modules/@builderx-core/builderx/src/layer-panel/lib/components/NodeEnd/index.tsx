import * as React from "react";
import { Layer, File as DomainFile } from "domain-x";
import { Utils } from "utils";

const updateProps = [
  "hovered",
  "selected",
  "locked",
  "collapsed",
  "dragHoverInside",
  "dragHoverBefore",
  "dragHoverAfter",
  "children"
];
export default class NodeEnd extends React.PureComponent<{
  path: string;
  renderDivider: (props: any) => any;
  onChangeDragOver: (target: any, layer: Layer) => any;
  layer: Layer;
}> {
  file: DomainFile;
  onUpdate = () => {
    this.forceUpdate();
  };
  componentDidMount() {
    this.file = this.props.layer.getFile() as DomainFile;
    this.file.on("scopeVariables", this.onUpdate);
    if (!Utils.shouldIgnoreLayer(this.props.layer.type)) {
      this.props.layer.on(updateProps, this.onUpdate);
      this.props.layer.props.style.on("display", this.onUpdate);
    }
  }
  componentDidUpdate(prevProps: any) {
    if (this.props.layer.getFile() !== this.file) {
      this.file.off("scopeVariables", this.onUpdate);
      this.file = this.props.layer.getFile() as DomainFile;
      this.file.on("scopeVariables", this.onUpdate);
    }
    if (!Utils.shouldIgnoreLayer(prevProps.layer.type)) {
      prevProps.layer.off(updateProps, this.onUpdate);
      prevProps.layer.props.style.off("display", this.onUpdate);
    }
    if (!Utils.shouldIgnoreLayer(this.props.layer.type)) {
      this.props.layer.on(updateProps, this.onUpdate);
      this.props.layer.props.style.on("display", this.onUpdate);
    }
  }
  componentWillUnmount() {
    this.file.off("scopeVariables", this.onUpdate);
    if (!Utils.shouldIgnoreLayer(this.props.layer.type)) {
      this.props.layer.off(updateProps, this.onUpdate);
      this.props.layer.props.style.off("display", this.onUpdate);
    }
  }

  onDragOver(e: any) {
    this.props.onChangeDragOver(e.target, this.props.layer);
  }
  render() {
    const dividerPropsAfter = {
      style: { listStyleType: "none", color: "transparent", height: 5 },
      onDragEnter: (e: any) => {
        this.onDragOver(e);
      },
      "data-path": this.props.path,
      "data-position": "_after_" + this.props.path,
      "data-node-id": "",
      layer: this.props.layer
    };
    return this.props.renderDivider(dividerPropsAfter);
  }
}
