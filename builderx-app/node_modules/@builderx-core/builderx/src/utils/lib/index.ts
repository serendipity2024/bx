export { default as Utils } from "./utils";
export * from "./ResolveNode";
export const saveAs =
  typeof window !== "undefined"
    ? require("./ZipFileSaver.js")
    : () => {
        //
      };

export const findCommonProperties = (obj1: any, obj2: any) => {
  let instersectionObj;
  if (typeof obj1 === "object") {
    for (const [key, value] of Object.entries(obj1)) {
      let childObjInObj2 = obj2[key];
      if (childObjInObj2) {
        if (typeof childObjInObj2 !== "object" && childObjInObj2 === value) {
          if (!instersectionObj) {
            instersectionObj = {};
          }
          instersectionObj[key] = value;
        } else {
          let properties = findCommonProperties(value, childObjInObj2);
          if (properties) {
            if (!instersectionObj) {
              instersectionObj = {};
            }
            instersectionObj[key] = properties;
          }
        }
      }
    }
  }
  return instersectionObj;
};

export const findSchemaIntersection = (arr1: Array<any>, arr2: Array<any>) => {
  let instersectionArray: Array<any> = [];
  arr1.map(objInArr1 => {
    let objInArr2 = arr2.find(
      obj => obj.title === objInArr1.title && objInArr1.type === obj.type
    );
    if (objInArr2) {
      if (!objInArr2.properties) {
        instersectionArray.push(objInArr2);
      } else {
        let properties = findSchemaIntersection(
          objInArr1.properties,
          objInArr2.properties
        );
        if (properties && properties.length) {
          instersectionArray.push({ ...objInArr2, properties });
        }
      }
    }
  });
  return instersectionArray;
};
