import IPC from "./IPC";
import { ExtractedData } from "./utils/types";
import getOutputJSON from "./utils/getOutputJSON";
import extractFile from "./utils/extractSketchFile";
import getSketchVersion from "./utils/getSketchVersion";
import getArtboardsList from "./utils/getArtboardsList";
import { setFontsList } from "./utils/FontsStore";

export default class SketchImport {
  ipc: IPC;
  projectSettings: {};
  user: { email: any; uuid: any };
  sketchVersion: number;
  extractedData: ExtractedData;
  convertedData: any;
  serverUrl: string;
  constructor(ipcObject: IPC) {
    this.ipc = ipcObject;
    this.user = { email: "", uuid: "" };
  }
  handshake(data: any) {
    this.projectSettings = data.settings;
    this.serverUrl = data.serverUrl + this.ipc.id + "/";
    this.extractedData = {
      pages: [],
      images: new Map<string, File>(),
      meta: ""
    };
  }
  updateUserData(userInfo: { email: any; uuid: any }) {
    this.user = userInfo;
  }

  setSketchVersion() {
    this.sketchVersion = getSketchVersion(this.extractedData.meta);
  }

  // DOC: set the extracted data in this.extractedData, do not return anything
  async extractSketchFile(file: string) {
    this.extractedData = await extractFile(file);
    this.setSketchVersion();
  }

  // DOC: read artboards list from meta.json from this.extractedData
  getArtboardsList() {
    return getArtboardsList(this.extractedData.meta);
  }

  // DOC: return the data in JSON format
  getOutputJSON = async (
    scalingFactor: number,
    convertSvgToSymbol: boolean,
    artboardsList: any,
    initialPosition: { x: number; y: number },
    existingFiles: { artboards: Array<string>; symbols: Array<string> },
    fontsList: any
  ) => {
    setFontsList(fontsList);
    return await getOutputJSON(
      this.extractedData,
      this.sketchVersion,
      scalingFactor,
      convertSvgToSymbol,
      artboardsList,
      initialPosition,
      existingFiles
    );
  };
}
