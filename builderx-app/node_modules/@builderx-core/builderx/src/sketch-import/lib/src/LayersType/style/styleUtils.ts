import { lowerFirst, replace, camelCase } from "lodash";
import { getNameId, getGradientId } from "../../utils/NameMapsStore";

export function getStyleName(layerName: string) {
  let styleName = camelCase(layerName);
  styleName = replace(styleName, /[^a-zA-Z0-9]/g, "");
  let firstMatch = styleName.match("[a-zA-z]");
  let firstChar = firstMatch ? firstMatch.toString() : null;
  let firstCharIndex = firstChar ? styleName.indexOf(firstChar) : -1;
  styleName =
    firstCharIndex !== -1 ? styleName.substring(firstCharIndex) : "style";
  styleName = lowerFirst(styleName);
  let serialNo = getNameId(styleName, "style");
  if (serialNo !== 0) {
    styleName += serialNo;
  }
  return styleName;
}
export function getMaxFillIndex(fills: any) {
  let objIndex = -1;
  let maxAlpha = 0;
  fills.map((obj: any, index: number) => {
    if (
      obj.isEnabled &&
      obj.fillType === 0 &&
      obj.color &&
      obj.color.alpha >= maxAlpha
    ) {
      maxAlpha = obj.color.alpha;
      objIndex = index;
    }
  });
  return objIndex;
}
export function getColor(colorObj: any) {
  let red = Math.round(colorObj.red * 255);
  let green = Math.round(colorObj.green * 255);
  let blue = Math.round(colorObj.blue * 255);
  let alpha = colorObj.alpha;
  return "rgba(" + red + "," + green + "," + blue + "," + alpha + ")";
}

export function getActiveBorderList(borders: any) {
  let borderArray: any = [];
  borders.forEach((border: any) => {
    if (border.isEnabled) {
      borderArray.push(border);
    }
  });
  return borderArray;
}
// util functions for SVG style
export function getSVGStrokeWidth(svgStyle: any, scalingFactor: number) {
  let width;
  if (
    svgStyle.borders &&
    svgStyle.borders.length &&
    svgStyle.borders[0].isEnabled
  ) {
    width =
      scalingFactor === 1
        ? svgStyle.borders[0].thickness
        : svgStyle.borders[0].thickness * scalingFactor;
  } else {
    width = 0;
  }
  return width;
}

function getSVGFill(svgStyle: any) {
  let fill;
  if (svgStyle.fills && svgStyle.fills.length) {
    let activeFillIndex = getMaxFillIndex(svgStyle.fills);
    if (
      activeFillIndex !== -1 &&
      svgStyle.fills[activeFillIndex] &&
      svgStyle.fills[activeFillIndex].fillType === 0
    ) {
      fill = getColor(svgStyle.fills[activeFillIndex].color);
    } else {
      fill = "transparent";
    }
  } else {
    fill = "transparent";
  }
  return fill;
}

export function getColorFill(parentObjId: string, style: any) {
  if (style && style.fills) {
    let gradObj = getGradientId(parentObjId);
    if (gradObj.id !== -1) {
      return "url(#" + gradObj.id + ")";
    } else {
      return getSVGFill(style);
    }
  } else {
    return getSVGFill(style);
  }
}
