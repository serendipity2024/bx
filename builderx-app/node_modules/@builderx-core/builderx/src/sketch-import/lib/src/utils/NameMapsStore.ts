let parentDataMap = {
  symbols: {},
  artboards: {}
};
let symbolWithNavigation = {};

export function addParentEntry(thisOne: string, id: string, name: string) {
  parentDataMap[thisOne][id] = name;
}
export function queryParentDataMap(thisOne: string, id: string) {
  if (id in parentDataMap[thisOne]) {
    return parentDataMap[thisOne][id];
  } else {
    return -1;
  }
}
export function addNavigationInSymbol(id: string) {
  if (!(id in symbolWithNavigation)) {
    symbolWithNavigation[id] = true;
  }
}

export function hasNavigationInSymbol(id: string) {
  if (id in symbolWithNavigation) {
    return true;
  } else {
    return false;
  }
}

let nameMaps = {
  style: {},
  artboard: {},
  symbol: {}
};

export function getNameId(name: string, mapKey: string) {
  let map = nameMaps[mapKey];
  if (name in map) {
    map[name]++;
  } else {
    map[name] = 0;
  }
  return map[name];
}

export function resetLayerNameMap(name: string) {
  nameMaps[name] = {};
}

export function getFillId(name: string) {
  if (name in nameMaps["style"]) {
    return nameMaps["style"][name];
  } else {
    return 0;
  }
}

let overrideDataMap = {};

export function addOverrideEntry(id: string, styleName: string, value: string) {
  overrideDataMap[id] = {
    style: styleName,
    defaultValue: value
  };
}
export function queryOverrideData(id: string) {
  if (id in overrideDataMap) {
    return overrideDataMap[id];
  } else {
    return -1;
  }
}

let gradientMap = {};
let gradientId = 0;
export function registerGradientId(id: string, lastIndex: number) {
  gradientMap[id] = {
    id: "gradient" + ++gradientId,
    lastIndex: lastIndex
  };
}

let maskMap = { points: [], style: {}, frame: {} };

export function setMaskDataPoints(points: any) {
  maskMap.points = points;
}
export function setMaskDataStyle(style: any) {
  maskMap.style = style;
}
export function setMaskDataFrame(frame: any) {
  maskMap.frame = frame;
}
export function resetMaskData() {
  maskMap = { points: [], style: {}, frame: {} };
}
export function getMaskData() {
  return maskMap;
}

export function getGradientId(id: string) {
  if (id in gradientMap) {
    return gradientMap[id];
  } else {
    return { id: -1, lastIndex: -1 };
  }
}

let sceneDims: { x: number; y: number } = {
  x: Number.MAX_VALUE,
  y: Number.MAX_VALUE
};

export function registerSceneDimX(x: number) {
  sceneDims.x = x;
}
export function registerSceneDimY(y: number) {
  sceneDims.y = y;
}

export function getSceneDims() {
  return sceneDims;
}

export function clearSceneDims() {
  sceneDims = { x: Number.MAX_VALUE, y: Number.MAX_VALUE };
}
