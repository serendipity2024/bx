// import * as unzip from "unzipper";
// import * as fs from "fs-extra";

export async function copyFile(source: any, target: any) {
  return new Promise((resolve: any, reject: any) => {
    // let rd = fs.createReadStream(source);
    // rd.on("error", function(err: any) {
    //   console.log("File Read error", err);
    //   reject("File Read error");
    // });
    // let wr = fs.createWriteStream(target);
    // wr.on("error", function(err: any) {
    //   reject("File Write error");
    // });
    // wr.on("close", function() {
    //   resolve("Completed");
    // });
    // rd.pipe(wr);
  });
}

export async function unZipFolder(filePath: any, newFileName: any) {
  return new Promise((resolve: any, reject: any) => {
    // createDir(filePath);
    // let rs = fs
    //   .createReadStream(filePath)
    //   .pipe(unzip.Extract({ path: newFileName }));
    // rs.on("close", function() {
    //   resolve("true");
    // });
    // rs.on("error", function() {
    //   reject("Unzip error");
    // });
  });
}

export function createDir(dirName: any) {
  // if (!fs.existsSync(dirName)) {
  //   fs.mkdirpSync(dirName);
  // }
}

export function deleteFolder(dirPath: any) {
  // if (fs.existsSync(dirPath)) {
  //   fs.removeSync(dirPath);
  // }
}

export async function writeJSONFile(
  dirPath: string,
  data: any,
  isArtboard: boolean,
  id: string
) {
  let tempPath =
    dirPath +
    "/converted/" +
    (isArtboard ? "artboards/" : "symbols/") +
    id +
    ".json";
  return new Promise(async (resolve: any, reject: any) => {
    // try {
    //   await fs.writeJson(tempPath, data);
    //   resolve();
    // } catch (Error) {
    //   console.log("JSON write error", Error);
    //   reject(Error);
    // }
  });
}
