import { isEmpty, get } from "lodash";
import viewCreate from "./view";
import getStyle from "./style";
import { getStyleName } from "./style/styleUtils";
import { getMaskData, resetMaskData } from "../utils/NameMapsStore";
import { getSVGMaskProp, getSvgImageViewBox } from "./layerUtils";

const imageResizeModes = ["repeat", "cover", "stretch", "contain"];

export default async function imageCreate(
  layers: any,
  layerIndex: number,
  frame: any,
  style: any,
  imageRef: string,
  isMasked: boolean,
  scalingFactor: number,
  sketchVersion: number,
  enableFixedStyling: boolean,
  convertSvgToSymbol: boolean,
  images: Map<string, any>
) {
  if (!layers[layerIndex]) {
    return {};
  }
  let dataContainer: { artboard: any; symbols: Array<any> } = {
    artboard: {},
    symbols: []
  };
  let child: any = {};
  let imageName = imageRef.toString().split("/")[1];
  let imageBlob = images.get(imageRef + (sketchVersion < 50 ? ".png" : ""));
  if (!imageBlob) {
    console.log("Image not found");
    return {};
  }
  try {
    const patternFillType = get(
      layers[layerIndex],
      "style.fills[0].patternFillType",
      1
    );
    let imgObj: any = {
      type: "image",
      locked: false,
      styleName: getStyleName(layers[layerIndex].name),
      blobURL: [imageBlob],
      import: {
        layerName: "Image",
        packageName: isEmpty(getMaskData().frame)
          ? "native"
          : "react-native-svg",
        isDefaultImport: false
      },
      template: {
        centerVertical: false,
        centerHorizontal: false
      },
      props: {
        source: {
          uri: imageName + (sketchVersion < 50 ? ".png" : "")
        },
        resizeMode: imageResizeModes[patternFillType],
        style: getStyle(
          layers[layerIndex],
          frame,
          isMasked,
          scalingFactor,
          false,
          false,
          enableFixedStyling,
          0
        )
      },
      children: []
    };
    let maskDataFrame: any = getMaskData().frame;
    if (!isEmpty(maskDataFrame)) {
      imgObj.mask = getSVGMaskProp(layers[layerIndex], getMaskData());
      imgObj.props.viewBox = getSvgImageViewBox(
        layers[layerIndex],
        scalingFactor,
        getMaskData()
      );
      imgObj.props.style = getMaskData().style;
      imgObj.props.svgDims = {
        x: (layers[layerIndex].frame.x - maskDataFrame.x).toString(),
        y: (layers[layerIndex].frame.y - maskDataFrame.y).toString(),
        width: layers[layerIndex].frame.width.toString(),
        height: layers[layerIndex].frame.height.toString()
      };
    }
    if (layers[layerIndex].isLocked) {
      child.locked = true;
    }
    if (
      layers[layerIndex].style &&
      layers[layerIndex].style.fills &&
      layers[layerIndex].style.fills.length > 0 &&
      layers[layerIndex].style.fills[0].isEnabled &&
      layers[layerIndex].style.fills[0].fillType === 4
    ) {
      let isAvatar: boolean =
        layers[layerIndex].layers &&
        layers[layerIndex].layers.length > 0 &&
        layers[layerIndex].layers[0]._class === "oval" &&
        layers[layerIndex].layers[0].frame &&
        Math.abs(
          layers[layerIndex].layers[0].frame.height -
            layers[layerIndex].layers[0].frame.width
        ) < 2;
      let tempViewParent: any = await viewCreate(
        layers,
        layerIndex,
        frame,
        style,
        false,
        isMasked,
        scalingFactor,
        false,
        isAvatar,
        false,
        "",
        sketchVersion,
        enableFixedStyling,
        convertSvgToSymbol,
        images
      );
      if (tempViewParent && !isEmpty(tempViewParent)) {
        child = tempViewParent.artboard;
      }
      if (layers[layerIndex].isLocked) {
        child.locked = true;
      }
      child.children.push(imgObj);
      child.children[0].props.style.top = 0;
      child.children[0].props.style.left = 0;
      child.children[0].props.style.height = "100%";
      child.children[0].props.style.width = "100%";
    } else {
      child = imgObj;
    }
    if (imgObj.mask) {
      imgObj.import.asName = "SvgImage";
    }
    // TODO: uncomment after navigation is added
    // if (
    //   layers[layerIndex].flow &&
    //   layers[layerIndex].flow.destinationArtboardID
    // ) {
    //   if (layers[layerIndex].flow.destinationArtboardID === "back") {
    //     child.navigateTo = "Go Back";
    //   } else {
    //     let destinationArtboardName = queryParentDataMap(
    //       "artboards",
    //       layers[layerIndex].flow.destinationArtboardID
    //     );
    //     child.navigateTo =
    //       destinationArtboardName !== -1 ? destinationArtboardName : undefined;
    //   }
    // }
    if (!isEmpty(layers) && layerIndex === layers.length - 1) {
      resetMaskData();
    }
  } catch (error) {
    console.log("JSON read error in Image", error);
  }
  dataContainer.artboard = child;
  return dataContainer;
}
