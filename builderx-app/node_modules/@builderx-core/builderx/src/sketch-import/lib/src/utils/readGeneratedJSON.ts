import IPC from "./../IPC";
import { ConvertedData } from "./types";

export default async function readGeneratedJSON(
  convertedData: ConvertedData,
  ipc: IPC,
  shouldRepositionArtboard: boolean
) {
  let promiseArray: any = [];
  // ipc.executeCommand("setProgressIndicator", ["Adding Symbols", 20]);
  return new Promise(async (resolveExt: any, rejectExt: any) => {
    resolveExt(convertedData);
  });
}
//   // DOC: Reading symbol files first
//   if (convertedData && convertedData.symbols.length > 0) {
//     // DOC: dont use forEach loop, has issues with promise
//     for (let index = 0; index < convertedData.symbols.length; index++) {
//       let symbol = convertedData.symbols[index];
//       ipc.executeCommand("setProgressIndicator", [
//         " Adding Symbol " +
//           (index + 1) +
//           " of " +
//           convertedData.symbols.length,
//         5 + (30 * (index + 1)) / convertedData.symbols.length
//       ]);
//       promiseArray.push(
//         new Promise(async (resolve: any) => {
//           console.time("MEASURE:: addSymbolFromJS>>>>>>" + symbol.path);
//           ipc
//             .executeCommand("addSymbolFromJS", [symbol, true])
//             .then(() => {
//               console.timeEnd(
//                 "MEASURE:: addSymbolFromJS>>>>>>" + symbol.path
//               );
//               resolve(true);
//             })
//             .catch(() => {
//               resolve(symbol.name);
//             });
//         })
//       );
//     }
//   }
//   // DOC: Reading artboards
//   if (convertedData.artboards && convertedData.artboards.length > 0) {
//     for (let index = 0; index < convertedData.artboards.length; index++) {
//       let artboard = convertedData.artboards[index];
//       ipc.executeCommand("setProgressIndicator", [
//         " Adding Artboard " +
//           (index + 1) +
//           " of " +
//           convertedData.artboards.length,
//         35 + (55 * (index + 1)) / convertedData.artboards.length,
//         index + 1 === convertedData.artboards.length
//       ]);
//       promiseArray.push(
//         new Promise(async (resolve: any) => {
//           console.time("MEASURE:: addArtboardFromJS>>>>>>" + artboard.path);
//           ipc
//             .executeCommand("addArtboardFromJS", [
//               artboard,
//               shouldRepositionArtboard,
//               true
//             ])
//             .then(() => {
//               console.timeEnd(
//                 "MEASURE:: addArtboardFromJS>>>>>>" + artboard.path
//               );
//               resolve(true);
//             })
//             .catch(() => {
//               resolve(artboard.name);
//             });
//         })
//       );
//     }
//   }
//   Promise.all(promiseArray)
//     .then((response: any) => {
//       let invalidFiles = response.filter((resp: any) => {
//         return typeof resp === "string";
//       });
//       resolveExt(invalidFiles);
//     })
//     .catch((error: any) => {
//       rejectExt(error);
//     });
// });
