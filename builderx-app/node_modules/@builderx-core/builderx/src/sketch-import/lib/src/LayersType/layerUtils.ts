import { findLastIndex, isEmpty } from "lodash";
import { getMaxFillIndex } from "./style/styleUtils";
import { registerGradientId, resetMaskData } from "../utils/NameMapsStore";

export function checkAndRegisterGradient(layers: any, layerIndex: any) {
  let hasGradient = false;
  for (let x = layerIndex; x < layers.length; x++) {
    if (layers[x] && layers[x].shouldBreakMaskChain) {
      break;
    }
    if (
      !(
        layers[x].style &&
        layers[x].style.fills &&
        layers[x].style.fills.length > 0
      )
    ) {
      continue;
    }
    let lastPlainColorIndex =
      layers[layerIndex].style && layers[x].style.fills
        ? getMaxFillIndex(layers[x].style.fills)
        : -1;
    let lastGradientIndex =
      layers[x].style && layers[x].style.fills
        ? findLastIndex(layers[x].style.fills, function(o: any) {
            return o.isEnabled === true && o.fillType !== 0 && o.fillType !== 4;
          })
        : -1;
    if (lastGradientIndex !== -1 && lastGradientIndex > lastPlainColorIndex) {
      registerGradientId(layers[x].do_objectID, lastGradientIndex);
      hasGradient = true;
    }
  }
  return hasGradient;
}

export function getSVGMaskProp(layer: any, maskData: any) {
  if (layer.shouldBreakMaskChain) {
    resetMaskData();
  }
  if (!isEmpty(maskData.points)) {
    return [...maskData.points];
  }
  return [];
}

export function getSvgImageViewBox(
  layer: any,
  scalingFactor: number,
  maskData: any
) {
  return `0 0 ${(!isEmpty(maskData.frame)
    ? maskData.frame.width
    : layer.frame.width) * scalingFactor} ${(!isEmpty(maskData.frame)
    ? maskData.frame.height
    : layer.frame.height) * scalingFactor}`;
}
