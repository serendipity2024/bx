import { pickBy } from "lodash";

export function getSVGStyle(
  layer: any,
  frame: any,
  isMasked: boolean,
  enableFixedStyling: boolean,
  convertSvgToSymbol: boolean
) {
  let style: any = {};
  let filteredStyles: any = {};
  try {
    let resizingConstraintBinary =
      layer && layer.resizingConstraint
        ? layer.resizingConstraint.toString(2)
        : "111111";
    while (resizingConstraintBinary.length < 6) {
      resizingConstraintBinary = "0" + resizingConstraintBinary;
    }
    let borderThickness =
      layer.style &&
      layer.style.borders &&
      layer.style.borders.length &&
      layer.style.borders[0].isEnabled &&
      layer.style.borders[0].thickness
        ? layer.style.borders[0].thickness
        : 0;
    let top = isMasked ? layer.frame.y - frame.y : layer.frame.y;
    let left = isMasked ? layer.frame.x - frame.x : layer.frame.x;
    left -= borderThickness / 2;
    top -= borderThickness / 2;
    let width = layer.frame.width + borderThickness * 2;
    let height = layer.frame.height + borderThickness * 2;
    let bottom = isMasked
      ? frame.height - layer.frame.y - layer.frame.height - frame.y
      : frame.height - layer.frame.y - layer.frame.height;
    let right = isMasked
      ? frame.width - layer.frame.x - layer.frame.width - frame.x
      : frame.width - layer.frame.x - layer.frame.width;
    if (convertSvgToSymbol) {
      style = {
        position: "absolute",
        height: "100%",
        width: "100%"
      };
    } else {
      style = {
        position: "absolute",
        height: ((100 * height) / frame.height).toFixed(2) + "%",
        width: ((100 * width) / frame.width).toFixed(2) + "%",
        top: ((100 * top) / frame.height).toFixed(2) + "%",
        left: ((100 * left) / frame.width).toFixed(2) + "%",
        right: undefined,
        bottom: undefined,
        backgroundColor: "transparent",
        borderColor: "transparent"
      };
      let childLayer =
        layer.layers && layer.layers.length === 1 ? layer.layers[0] : undefined;
      if (
        layer.isFlippedHorizontal ||
        layer.isFlippedVertical ||
        layer.rotation !== 0 ||
        (childLayer &&
          (childLayer.isFlippedHorizontal ||
            childLayer.isFlippedVertical ||
            childLayer.rotation !== 0))
      ) {
        style.transform = [];
      }
      if (layer.rotation || (childLayer && childLayer.rotation)) {
        let rotate = layer.rotation ? layer.rotation : childLayer.rotation;
        style.transform.push({
          rotate: (-rotate).toString() + "deg"
        });
      }
      if (
        layer.isFlippedHorizontal ||
        (childLayer && childLayer.isFlippedHorizontal)
      ) {
        style.transform.push({
          scaleX: -1
        });
      }
      if (
        layer.isFlippedVertical ||
        (childLayer && childLayer.isFlippedVertical)
      ) {
        style.transform.push({
          scaleY: -1
        });
      }
      if (!layer.isVisible) {
        style.display = "none";
      }
      // Cases only for Top,Height and Bottom
      if (resizingConstraintBinary[0] === "0") {
        style.top = parseFloat(top.toFixed(2));
      }
      if (resizingConstraintBinary[1] === "0") {
        style.height = parseFloat(height.toFixed(2));
      }
      if (resizingConstraintBinary[2] === "0") {
        style.bottom = parseFloat(bottom.toFixed(2));
        style.top = undefined;
      }

      if (
        resizingConstraintBinary[0] === "0" &&
        resizingConstraintBinary[2] === "0"
      ) {
        style.top = parseFloat(top.toFixed(2));
        style.height = undefined;
        style.bottom = parseFloat(bottom.toFixed(2));
      }
      if (
        resizingConstraintBinary[1] === "0" &&
        resizingConstraintBinary[2] === "0"
      ) {
        style.height = parseFloat(height.toFixed(2));
        style.bottom = parseFloat(bottom.toFixed(2));
        style.top = undefined;
      }

      // Conditions for Left, Width and Right
      if (resizingConstraintBinary[3] === "0") {
        style.left = parseFloat(left.toFixed(2));
      }
      if (resizingConstraintBinary[4] === "0") {
        style.width = parseFloat(width.toFixed(2));
      }
      if (resizingConstraintBinary[5] === "0") {
        style.right = parseFloat(right.toFixed(2));
        style.left = undefined;
      }

      if (
        resizingConstraintBinary[3] === "0" &&
        resizingConstraintBinary[5] === "0"
      ) {
        style.left = parseFloat(left.toFixed(2));
        style.width = undefined;
        style.right = parseFloat(right.toFixed(2));
      }
      if (
        resizingConstraintBinary[4] === "0" &&
        resizingConstraintBinary[5] === "0"
      ) {
        style.width = parseFloat(width.toFixed(2));
        style.right = parseFloat(right.toFixed(2));
        style.left = undefined;
      }
      if (enableFixedStyling) {
        style.top = parseFloat(top.toFixed(2));
        style.left = parseFloat(left.toFixed(2));
        style.height = parseFloat(height.toFixed(2));
        style.width = parseFloat(width.toFixed(2));
        style.right = undefined;
        style.bottom = undefined;
      }
      filteredStyles = pickBy(style, (obj: any) => {
        return obj && obj !== undefined;
      });
      if (style && style.transform) {
        filteredStyles = {
          ...filteredStyles,
          transform: style.transform
        };
      }
      if (style && style.shadowOffset) {
        filteredStyles = {
          ...filteredStyles,
          shadowOffset: style.shadowOffset
        };
      }
    }
  } catch (error) {
    console.log("JSON read error in SVG Style", error);
  }
  return style;
}
