import { isEmpty } from "lodash";
import oldLayerCreate from "./oldLayerDispatcher";
import newLayerCreate from "./newLayerDispatcher";
import { queryParentDataMap, resetMaskData } from "../utils/NameMapsStore";

export default async function symbolClassCreate(
  symbolClass: any,
  scalingFactor: any,
  sketchVersion: number,
  convertSvgToSymbol: boolean,
  images: Map<string, any>
) {
  let dataContainer: { artboard: any; symbols: object[] } = {
    artboard: {},
    symbols: []
  };
  let layerCreate = sketchVersion >= 52 ? newLayerCreate : oldLayerCreate;
  let symbolClassName = queryParentDataMap("symbols", symbolClass.symbolID);
  resetMaskData();
  let newPath: string = "/src/components/" + symbolClassName + ".js";
  try {
    dataContainer.artboard = {
      path: newPath,
      content: "",
      symbolName: symbolClassName,
      symbolId: symbolClass.symbolID,
      isDirty: true,
      layer: {
        type: "root",
        styleName: "container",
        import: {
          layerName: "View",
          packageName: "native",
          isDefaultImport: false,
          asName: ""
        },
        template: {
          centerVertical: false,
          centerHorizontal: false
        },
        props: {
          style: {
            flex: 1
          }
        },
        children: []
      },
      props: {
        style: {
          position: "absolute",
          left: 700,
          top: 500,
          height: symbolClass.frame.height,
          width: symbolClass.frame.width
        }
      }
    };
    if (symbolClass.hasBackgroundColor) {
      dataContainer.artboard.layer.props.style.backgroundColor = "transparent";
    }
    for (let i = 0; i < symbolClass.layers.length; i++) {
      let child: any = await layerCreate(
        symbolClass.layers,
        i,
        symbolClass.frame,
        symbolClass.style,
        false,
        scalingFactor,
        true,
        symbolClass.symbolID,
        sketchVersion,
        false,
        convertSvgToSymbol,
        images
      );
      if (
        child &&
        !isEmpty(child) &&
        child.artboard &&
        !isEmpty(child.artboard)
      ) {
        dataContainer.artboard.layer.children.push(child.artboard);
        if (convertSvgToSymbol && child.symbols && !isEmpty(child.symbols)) {
          dataContainer.symbols = dataContainer.symbols.concat(child.symbols);
        }
      }
      if (
        symbolClass.layers[i].hasClippingMask &&
        ((symbolClass.layers[i]._class === "rectangle" &&
          !symbolClass.layers[i].edited) ||
          (sketchVersion < 52 &&
            symbolClass.layers[i].layers &&
            !isEmpty(symbolClass.layers[i].layers) &&
            symbolClass.layers[i].layers[0]._class === "rectangle" &&
            !symbolClass.layers[i].layers[0].edited))
      ) {
        let tempI = i + 1;
        while (
          symbolClass.layers[tempI] &&
          !symbolClass.layers[tempI].shouldBreakMaskChain &&
          tempI < symbolClass.layers.length
        ) {
          tempI++;
        }
        i = tempI - 1;
      }
    }
  } catch (error) {
    console.log("JSON read error in Symbol", error);
  }
  return dataContainer;
}
