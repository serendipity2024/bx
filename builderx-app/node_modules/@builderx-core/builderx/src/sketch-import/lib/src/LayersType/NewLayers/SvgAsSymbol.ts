import { isEmpty } from "lodash";
import { getValidName } from "../../utils";
import { addParentEntry, resetLayerNameMap } from "../../utils/NameMapsStore";
import svgCreate from "./newSvgLayer";
import symbolCreate from "./../symbolInstance";

export default async function SvgAsSymbolCreate(
  layers: any,
  layerIndex: any,
  frame: any,
  isMasked: boolean,
  scalingFactor: any,
  sketchVersion: number,
  enableFixedStyling: boolean
) {
  let dataContainer: { artboard: any; symbols: object[] } = {
    artboard: {},
    symbols: []
  };
  let symbolData: any = {};
  let symbolClassName = getValidName(layers[layerIndex].name, "symbol");
  addParentEntry("symbols", layers[layerIndex].do_objectID, symbolClassName);
  let newPath: string = "/src/components/" + symbolClassName + ".js";
  symbolData = {
    path: newPath,
    isDirectory: false,
    content: "",
    symbolName: symbolClassName,
    symbolId: layers[layerIndex].do_objectID,
    isDirty: true,
    layer: {
      type: "root",
      styleName: "container",
      import: {
        layerName: "View",
        packageName: "native",
        isDefaultImport: false,
        asName: ""
      },
      template: {
        centerVertical: false,
        centerHorizontal: false
      },
      props: {
        style: {
          flex: 1,
          top: 0,
          left: 0
        }
      },
      children: []
    },
    props: {
      style: {
        position: "absolute",
        left: 700,
        top: 500,
        height: layers[layerIndex].frame.height * scalingFactor,
        width: layers[layerIndex].frame.width * scalingFactor
      }
    }
  };
  if (layers[layerIndex].hasBackgroundColor) {
    symbolData.layer.props.style.backgroundColor = "transparent";
  }
  resetLayerNameMap("string");
  let child = await svgCreate(
    layers,
    layerIndex,
    layers[layerIndex].frame,
    isMasked,
    scalingFactor,
    enableFixedStyling,
    true
  );
  if (child && !isEmpty(child) && child.artboard && !isEmpty(child.artboard)) {
    symbolData.layer.children.push(child.artboard);
  }
  dataContainer.symbols.push(symbolData);
  let symbInstance: any = symbolCreate(
    layers[layerIndex],
    frame,
    isMasked,
    scalingFactor,
    false,
    "",
    enableFixedStyling,
    true
  );
  dataContainer.artboard = symbInstance.artboard;
  return dataContainer;
}
