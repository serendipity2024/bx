import * as JSZip from "jszip";
import { ExtractedData } from "./types";

export default async function extractSketchFile(
  file: any
): Promise<ExtractedData> {
  let newFile = new File([file], "Test.zip");
  let jsonData: ExtractedData = { pages: [], images: new Map(), meta: "" };
  return new Promise<ExtractedData>(async (resolve, reject) => {
    JSZip.loadAsync(newFile)
      .then(async zip => {
        const files = Object.keys(zip.files);
        for (let i = 0; i < files.length; i++) {
          if (files[i].startsWith("pages")) {
            const data = await zip.files[files[i]].async("text");
            jsonData.pages.push(JSON.parse(data));
          } else if (files[i].startsWith("meta")) {
            const data = await zip.files[files[i]].async("text");
            jsonData.meta = JSON.parse(data);
          } else if (files[i].startsWith("images")) {
            let data = await zip.files[files[i]].async("blob");
            data = new File([data], files[i]);
            jsonData.images.set(files[i], data);
          }
          if (i === files.length - 1) {
            resolve(jsonData);
          }
        }
      })
      .catch((error: any) => {
        reject(error);
      });
  });
}

export async function extractXdFile(file: any): Promise<ExtractedData> {
  let newFile = new File([file], "Test.zip");
  // let jsonData: ExtractedData = { pages: [], images: new Map(), meta: "" };
  return new Promise<ExtractedData>(async (resolve, reject) => {
    JSZip.loadAsync(newFile)
      .then(async zip => {
        const files = Object.keys(zip.files);
        for (let i = 0; i < files.length; i++) {
          console.log("*** file ", i, files[i]);
          if (files[i].startsWith("artwork")) {
            const data = await zip.files[files[i]].async("text");
            console.log("***  data ", i, data);
            //     const data = await zip.files[files[i]].async("text");
            //     jsonData.pages.push(JSON.parse(data));
          }
          //   } else if (files[i].startsWith("meta")) {
          //     const data = await zip.files[files[i]].async("text");
          //     jsonData.meta = JSON.parse(data);
          //   } else if (files[i].startsWith("images")) {
          //     let data = await zip.files[files[i]].async("blob");
          //     data = new File([data], files[i]);
          //     jsonData.images.set(files[i], data);
          //   }
          //   if (i === files.length - 1) {
          //     resolve(jsonData);
          //   }
        }
      })
      .catch((error: any) => {
        reject(error);
      });
  });
}
