import getStyle from "./../style";
import { getStyleName } from "./../style/styleUtils";
import { getSVGMaskProp, getSvgImageViewBox } from "./../layerUtils";
import { convertPointsArray } from "conversions";

export default async function svgImageCreate(
  layers: any,
  layerIndex: number,
  frame: any,
  style: any,
  imageRef: string,
  isMasked: boolean,
  scalingFactor: number,
  sketchVersion: number,
  enableFixedStyling: boolean,
  convertSvgToSymbol: boolean, // TODO: need to add this too
  images: Map<string, any>
) {
  if (!layers[layerIndex]) {
    return {};
  }
  let dataContainer: { artboard: any; symbols: Array<any> } = {
    artboard: {},
    symbols: []
  };
  let child: any = {};
  let imageName = imageRef.toString().split("/")[1];
  let imageBlob = images.get(imageRef + (sketchVersion < 50 ? ".png" : ""));
  if (!imageBlob) {
    console.log("Image not found");
    return {};
  }
  try {
    child = {
      type: "image",
      locked: false,
      styleName: getStyleName(layers[layerIndex].name),
      blobURL: [imageBlob],
      import: {
        layerName: "SvgImage",
        packageName: "react-native-svg",
        isDefaultImport: false
      },
      template: {
        centerVertical: false,
        centerHorizontal: false
      },
      props: {
        source: {
          uri: imageName + (sketchVersion < 50 ? ".png" : "")
        },
        style: getStyle(
          layers[layerIndex],
          frame,
          isMasked,
          scalingFactor,
          false,
          false,
          enableFixedStyling,
          0
        )
      },
      children: []
    };
    let points = convertPointsArray(
      layers[layerIndex].points,
      layers[layerIndex].frame,
      layers[layerIndex].frame,
      { x: 0, y: 0 },
      scalingFactor
    );
    child.mask = getSVGMaskProp(layers[layerIndex], {
      points
    });
    child.props.viewBox = getSvgImageViewBox(
      layers[layerIndex],
      scalingFactor,
      { frame: layers[layerIndex].frame }
    );
    child.props.svgDims = {
      x: (layers[layerIndex].frame.x - layers[layerIndex].frame.x).toString(),
      y: (layers[layerIndex].frame.y - layers[layerIndex].frame.y).toString(),
      width: layers[layerIndex].frame.width.toString(),
      height: layers[layerIndex].frame.height.toString()
    };
    if (layers[layerIndex].isLocked) {
      child.locked = true;
    }
    // TODO: uncomment after navigation is added
    // if (
    //   layers[layerIndex].flow &&
    //   layers[layerIndex].flow.destinationArtboardID
    // ) {
    //   if (layers[layerIndex].flow.destinationArtboardID === "back") {
    //     child.navigateTo = "Go Back";
    //   } else {
    //     let destinationArtboardName = queryParentDataMap(
    //       "artboards",
    //       layers[layerIndex].flow.destinationArtboardID
    //     );
    //     child.navigateTo =
    //       destinationArtboardName !== -1 ? destinationArtboardName : undefined;
    //   }
    // }
  } catch (error) {
    console.log("JSON read error in Image", error);
  }
  dataContainer.artboard = child;
  return dataContainer;
}
