import { isEmpty } from "lodash";
import pathSvgCreate from "./newPath";
import { getSVGStyle } from "../style/svgStyle";
import { checkAndRegisterGradient } from "../layerUtils";
import { getGradientProps } from "../style/gradient";
import {
  getGradientId,
  setMaskDataStyle,
  getMaskData,
  resetMaskData
} from "../../utils/NameMapsStore";

export default async function svgCreate(
  layers: any,
  layerIndex: number,
  frame: any,
  isMasked: boolean,
  scalingFactor: number,
  enableFixedStyling: boolean,
  convertSvgToSymbol: boolean
) {
  let dataContainer: { artboard: any; symbols: object[] } = {
    artboard: {},
    symbols: []
  };
  let child: any = {};
  try {
    let childGradient = {};
    if (checkAndRegisterGradient(layers, layerIndex)) {
      let gradObj = getGradientId(layers[layerIndex].do_objectID);
      if (gradObj.id !== -1) {
        let gradientProps = getGradientProps(
          layers[layerIndex].style.fills[gradObj.lastIndex].gradient,
          gradObj.id
        );
        if (gradientProps) {
          childGradient = gradientProps;
        }
      }
    }
    let tempChild: any = await pathSvgCreate(
      [layers[layerIndex]],
      frame,
      layers[layerIndex].style,
      scalingFactor,
      { x: 0, y: 0 },
      layers[layerIndex].do_objectID
    );
    if (!isEmpty(tempChild)) {
      if (layers[layerIndex].shouldBreakMaskChain) {
        resetMaskData();
      }
      let maskedStyle = getMaskData().style;
      tempChild.props.style = !isEmpty(maskedStyle)
        ? maskedStyle
        : getSVGStyle(
            layers[layerIndex],
            frame,
            isMasked,
            enableFixedStyling,
            convertSvgToSymbol
          );
      if (layers[layerIndex].hasClippingMask) {
        setMaskDataStyle({ ...tempChild.props.style });
      }
      child = tempChild;
    }
    if (!isEmpty(childGradient)) {
      child.gradient = childGradient;
    }
    if (!isEmpty(layers) && layerIndex === layers.length - 1) {
      resetMaskData();
    }
  } catch (error) {
    console.log("JSON read error in SVG Layer", error);
  }
  dataContainer.artboard = child;
  return dataContainer;
}
