import { Layer } from "./interfaces";
import { forEachChild, isValueInPercentage, shouldIgnoreLayer } from "./utils";
import { isNil, forEach } from "lodash";

export default function percentageToFixed(layer: Layer): Layer {
  let transformedLayer: Layer = JSON.parse(JSON.stringify(layer));

  if (
    (transformedLayer.children && transformedLayer.children.length === 0) ||
    transformedLayer.type === "text"
  ) {
    return transformedLayer;
  }

  // Don't use forEachChild, we still want to run this algo for children of ignored layers
  forEach(transformedLayer.children, (child: Layer, index: number) => {
    transformedLayer.children[index] = percentageToFixed(child);
  });

  forEach(transformedLayer.children, (child: Layer, index: number) => {
    if (!child || !child.props || !child.props.style) {
      return;
    }

    if (!child.rcDims) {
      child.rcDims = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
    }

    // Converting left fixed, right % to left fixed, width % (same vice versa and also for y axis)
    modifyResizingConstraints(child);

    modifyFillWidthAndHeight(child);

    if (isValueInPercentage(child.props.style.left)) {
      child.props.style.left = child.rcDims.x;
    }
    if (isValueInPercentage(child.props.style.right)) {
      child.props.style.right =
        transformedLayer.rcDims.width - (child.rcDims.width + child.rcDims.x);
    }
    if (isValueInPercentage(child.props.style.top)) {
      child.props.style.top = child.rcDims.y;
    }
    if (isValueInPercentage(child.props.style.bottom)) {
      child.props.style.bottom =
        transformedLayer.rcDims.height - (child.rcDims.height + child.rcDims.y);
    }
    if (isValueInPercentage(child.props.style.width)) {
      // child._originalWidth = child.props.style.width as string;
      child.props.style.width = child.rcDims.width;
    }
    if (isValueInPercentage(child.props.style.height)) {
      // child._originalHeight = child.props.style.height as string;
      child.props.style.height = child.rcDims.height;
    }

    // Rounding
    child.props.style.left = !isNil(child.props.style.left)
      ? Math.round(child.props.style.left as any)
      : undefined;
    child.props.style.right = !isNil(child.props.style.right)
      ? Math.round(child.props.style.right as any)
      : undefined;
    child.props.style.top = !isNil(child.props.style.top)
      ? Math.round(child.props.style.top as any)
      : undefined;
    child.props.style.bottom = !isNil(child.props.style.bottom)
      ? Math.round(child.props.style.bottom as any)
      : undefined;
    child.props.style.width = !isNil(child.props.style.width)
      ? Math.round(child.props.style.width as any)
      : undefined;
    child.props.style.height = !isNil(child.props.style.height)
      ? Math.round(child.props.style.height as any)
      : undefined;

    // Rounding rcDims
    child.rcDims.x = !isNil(child.rcDims.x)
      ? Math.round(child.rcDims.x as any)
      : 0;
    child.rcDims.y = !isNil(child.rcDims.y)
      ? Math.round(child.rcDims.y as any)
      : 0;
    child.rcDims.height = !isNil(child.rcDims.height)
      ? Math.round(child.rcDims.height as any)
      : 0;
    child.rcDims.width = !isNil(child.rcDims.width)
      ? Math.round(child.rcDims.width as any)
      : 0;
  });

  return transformedLayer;
}
function modifyResizingConstraints(layer: Layer) {
  if (
    isValueInPercentage(layer.props.style.top) &&
    typeof layer.props.style.bottom === "number"
  ) {
    layer.props.style.height = layer.rcDims.height;
    delete layer.props.style.top;
  }

  if (
    isValueInPercentage(layer.props.style.bottom) &&
    typeof layer.props.style.top === "number"
  ) {
    layer.props.style.height = layer.rcDims.height;
    delete layer.props.style.bottom;
  }

  if (
    isValueInPercentage(layer.props.style.left) &&
    typeof layer.props.style.right === "number"
  ) {
    layer.props.style.width = layer.rcDims.width;
    delete layer.props.style.left;
  }

  if (
    isValueInPercentage(layer.props.style.right) &&
    typeof layer.props.style.left === "number"
  ) {
    layer.props.style.width = layer.rcDims.width;
    delete layer.props.style.right;
  }
}

function modifyFillWidthAndHeight(layer: Layer) {
  if (
    layer.props.style.width === "100%" &&
    (layer.props.style.left === 0 ||
      layer.props.style.left === "0%" ||
      layer.props.style.right === 0 ||
      layer.props.style.right === "0%")
  ) {
    layer.props.style.left = layer.props.style.right = 0;
    delete layer.props.style.width;
  }

  if (
    layer.props.style.height === "100%" &&
    (layer.props.style.top === 0 ||
      layer.props.style.top === "0%" ||
      layer.props.style.bottom === 0 ||
      layer.props.style.bottom === "0%")
  ) {
    layer.props.style.top = layer.props.style.bottom = 0;
    delete layer.props.style.height;
  }
}
