import { Layer } from "./interfaces";
import getOverlapDirection from "./getOverlapDirection";
import { sortBy, isNil, isArray, forEach } from "lodash";
import { forEachChild, shouldIgnoreLayer } from "./utils";
export default function reorder(
  layer: Layer,
  sortingProp?: "top" | "left" | "none"
): Layer {
  const transformedLayer = JSON.parse(JSON.stringify(layer));
  if (
    !transformedLayer.children ||
    (transformedLayer.children && transformedLayer.children.length === 0)
  ) {
    return transformedLayer;
  }
  if (
    transformedLayer.type === "stack" ||
    (shouldIgnoreLayer(transformedLayer) && isArray(transformedLayer.children))
  ) {
    forEachChild(transformedLayer, (child, index) => {
      transformedLayer.children[index] = reorder(child);
    });
    return transformedLayer;
  }

  sortingProp = sortingProp
    ? sortingProp
    : getOverlapDirection(transformedLayer) === "vertical"
    ? "top"
    : getOverlapDirection(transformedLayer) === "absolute"
    ? "none"
    : "left";
  let currentLayer = transformedLayer;
  // while (currentLayer.children) {
  if (sortingProp !== "none") {
    currentLayer.children = getSortedChildren(currentLayer, sortingProp);
  }
  //   currentLayer.children.forEach((child: Layer) => {
  //     if (child.children) {
  //       child.children = getSortedChildren(child, sortingProp);
  //     }
  //   });
  //   currentLayer = currentLayer.children;
  // }

  forEach(transformedLayer.children, (child, index) => {
    // if (child.type !== "stack") {
    transformedLayer.children[index] = reorder(child);
    // } else if (child.type === "stack") {
    //   forEachChild(child, (childOfChild, i) => {
    //     child.children[i] = reorder(childOfChild);
    //   });
    // }
  });

  return transformedLayer;
}

function getSortedChildren(
  layer: Layer,
  sortingProp: "top" | "left" | "none"
): Array<Layer> {
  layer.children = sortBy(layer.children, (child: Layer) => {
    if (sortingProp === "top") {
      if (child.rcDims && !isNil(child.rcDims.y)) {
        return child.rcDims.y;
      }
      // else if (child._bottom && child._height) {
      //   return -1 * (child._bottom + child._height);
      // }
      return false;
    } else {
      if (child.rcDims && !isNil(child.rcDims.x)) {
        return child.rcDims.x;
      }
      // else if (child._right && child._width) {
      //   return -1 * (child._right + child._width);
      // }
      return false;
    }
  });
  return layer.children;
}
