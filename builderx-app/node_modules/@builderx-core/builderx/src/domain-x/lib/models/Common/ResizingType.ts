import { IResizingType, ResizingTypeAttributes } from "common-interfaces";
import { isNil, cloneDeep } from "lodash";
import { ResolveNodeValue } from "utils";

const reisizingTypeKeys = ["width", "height", "top", "left", "bottom", "right"];

export default class ResizingType implements IResizingType {
  width: boolean;
  height: boolean;
  top: boolean;
  left: boolean;
  bottom: boolean;
  right: boolean;

  constructor(componentStyle: any) {
    // this.width = false;
    // this.height = false;
    // this.top = false;
    // this.right = false;
    // this.bottom = false;
    // this.left = false;

    this.setResizingType(componentStyle);
  }

  setResizingType(componentStyle: any) {
    // console.trace();
    // console.log("hello ***", componentStyle);
    reisizingTypeKeys.forEach(k => {
      if (
        componentStyle &&
        typeof componentStyle[k] === "string" &&
        componentStyle[k].indexOf("%") !== -1
      ) {
        this[k] = false;
      } else if (componentStyle && typeof componentStyle[k] === "number") {
        this[k] = true;
      } else {
        this[k] = false;
      }
    });
  }

  calculateNewStyleFromResizingType(
    toggleProperty: ResizingTypeAttributes,
    currentStyle: any,
    containerWidth: number,
    containerHeight: number,
    dimsMode: any,
    layerDimensions: any,
    setValueInInt: boolean
  ) {
    const newStyle = currentStyle;

    // console.log(
    //   ResolveNodeValue(currentStyle.top, { ...scopeVariables }),
    //   scopeVariables,
    //   "hello new style"
    // );
    // debugger;
    const getCalculatedValue = (property: string, value: any): any => {
      if (this[property]) {
        return value;
      } else {
        if (
          property === "left" ||
          property === "right" ||
          property === "width"
        ) {
          return (
            (parseFloat(
              value && typeof value === "string" ? value.replace("%", "") : "0"
            ) /
              100) *
            containerWidth
          );
        } else {
          {
            return (
              (parseFloat(
                value && typeof value === "string"
                  ? value.replace("%", "")
                  : "0"
              ) /
                100) *
              containerHeight
            );
          }
        }
      }
    };
    // debugger;
    switch (toggleProperty) {
      case "top":
        if (typeof currentStyle.top === "number") {
          // setValueInInt;
          const newTop =
            Math.round((currentStyle.top / containerHeight) * 100 * 100) / 100;
          newStyle.top = newTop + "%";
        } else if (
          typeof currentStyle.top === "string" &&
          currentStyle.top.endsWith("%") &&
          !(this.bottom && this.height)
        ) {
          let newTop = parseFloat(
            ((parseFloat(currentStyle.top.replace("%", "")) / 100) *
              containerHeight) as any
          );

          newTop = setValueInInt
            ? Math.round(newTop)
            : Math.round(newTop * 100) / 100;

          newStyle.top = newTop;
          if (this.height) {
            newStyle.bottom = undefined;
          }
          if (this.bottom) {
            newStyle.height = undefined;
          }
        } else if (
          currentStyle.top === undefined &&
          !(this.bottom && this.height)
        ) {
          let newTop =
            containerHeight -
            (getCalculatedValue("bottom", currentStyle.bottom) +
              getCalculatedValue("height", currentStyle.height));

          if (dimsMode.heightAuto) {
            newTop =
              containerHeight -
              (getCalculatedValue("bottom", currentStyle.bottom) +
                layerDimensions.height);
          }

          newTop = setValueInInt
            ? Math.round(newTop)
            : Math.round(newTop * 100) / 100;

          newStyle.top = newTop;

          if (this.height) {
            newStyle.bottom = undefined;
          }
          if (this.bottom) {
            newStyle.height = undefined;
          }

          if (dimsMode.heightAuto) {
            newStyle.bottom = undefined;
            newStyle.height = undefined;
          }
        }
        // if(typeof bottom === "number" && typeof height === "number") {
        //   newStyle.top = top;
        // }

        break;

      case "left":
        if (typeof currentStyle.left === "number") {
          const newleft =
            Math.round((currentStyle.left / containerWidth) * 100 * 100) / 100;
          newStyle.left = newleft + "%";
        } else if (
          typeof currentStyle.left === "string" &&
          currentStyle.left.endsWith("%") &&
          !(this.right && this.width)
        ) {
          let newleft = parseFloat(
            ((parseFloat(currentStyle.left.replace("%", "")) / 100) *
              containerWidth) as any
          );

          newleft = setValueInInt
            ? Math.round(newleft)
            : Math.round(newleft * 100) / 100;

          newStyle.left = newleft;

          if (this.width) {
            newStyle.right = undefined;
          }
          if (this.right) {
            newStyle.width = undefined;
          }
        } else if (
          currentStyle.left === undefined &&
          !(this.right && this.width)
        ) {
          let newleft =
            containerWidth -
            (getCalculatedValue("right", currentStyle.right) +
              getCalculatedValue("width", currentStyle.width));

          if (dimsMode.widthAuto) {
            newleft =
              containerWidth -
              (getCalculatedValue("right", currentStyle.right) +
                layerDimensions.width);
          }

          newleft = setValueInInt
            ? Math.round(newleft)
            : Math.round(newleft * 100) / 100;

          newStyle.left = newleft;

          if (this.width) {
            newStyle.right = undefined;
          }
          if (this.right) {
            newStyle.width = undefined;
          }

          if (dimsMode.widthAuto) {
            newStyle.right = undefined;
            newStyle.width = undefined;
          }
        }
        break;

      case "bottom":
        if (typeof currentStyle.bottom === "number") {
          if (!isNil(currentStyle.top) && !isNil(currentStyle.height)) {
            newStyle.bottom = undefined;
          } else if (!isNil(currentStyle.top) && isNil(currentStyle.height)) {
            let newHeight =
              containerHeight -
              (getCalculatedValue("top", currentStyle.top) +
                getCalculatedValue("bottom", currentStyle.bottom));

            newHeight =
              Math.round((newHeight / containerHeight) * 100 * 100) / 100;
            newStyle.height = newHeight + "%";

            newStyle.bottom = undefined;
          } else if (!isNil(currentStyle.bottom)) {
            newStyle.bottom =
              Math.round((currentStyle.bottom / containerHeight) * 100 * 100) /
                100 +
              "%";
          } else if (isNil(currentStyle.top)) {
            let newTop =
              Math.round(
                (containerHeight -
                  (getCalculatedValue("bottom", currentStyle.bottom) +
                    getCalculatedValue("height", currentStyle.height))) *
                  100
              ) / 100;

            newStyle.top =
              Math.round((newTop / containerHeight) * 100 * 100) / 100 + "%";
            newStyle.bottom = undefined;
          }
        } else if (
          typeof currentStyle.bottom === "string" &&
          currentStyle.bottom.endsWith("%") &&
          !(this.top && this.height)
        ) {
          let newBottom = parseFloat(
            ((parseFloat(currentStyle.bottom.replace("%", "")) / 100) *
              containerHeight) as any
          );

          newBottom = setValueInInt
            ? Math.round(newBottom)
            : Math.round(newBottom * 100) / 100;
          newStyle.bottom = newBottom;

          if (this.height) {
            newStyle.top = undefined;
          }
          if (this.top) {
            newStyle.height = undefined;
          }
        } else if (
          currentStyle.bottom === undefined &&
          !(this.top && this.height)
        ) {
          let newBottom =
            containerHeight -
            (getCalculatedValue("top", currentStyle.top) +
              getCalculatedValue("height", currentStyle.height));

          if (dimsMode.heightAuto) {
            newBottom =
              containerHeight -
              (getCalculatedValue("top", currentStyle.top) +
                layerDimensions.height);
          }

          newStyle.bottom = setValueInInt
            ? Math.round(newBottom)
            : Math.round(newBottom * 100) / 100;

          if (
            typeof currentStyle.height === "string" &&
            currentStyle.height.endsWith("%")
          ) {
            newStyle.height = undefined;
          } else if (currentStyle.height !== undefined) {
            newStyle.top = undefined;
          } else if (currentStyle.top !== undefined) {
            newStyle.height = undefined;
          }

          if (dimsMode.heightAuto) {
            newStyle.top = undefined;
            newStyle.height = undefined;
          }
        }
        break;

      case "right":
        if (typeof currentStyle.right === "number") {
          if (!isNil(currentStyle.left) && !isNil(currentStyle.width)) {
            newStyle.right = undefined;
          } else if (!isNil(currentStyle.left) && isNil(currentStyle.width)) {
            let newWidth =
              containerWidth -
              (getCalculatedValue("left", currentStyle.left) +
                getCalculatedValue("right", currentStyle.right));

            newStyle.width =
              Math.round((newWidth / containerWidth) * 100 * 100) / 100 + "%";
            newStyle.right = undefined;
          } else if (!isNil(currentStyle.right)) {
            newStyle.right =
              Math.round((currentStyle.right / containerWidth) * 100 * 100) /
                100 +
              "%";
          } else if (isNil(currentStyle.left)) {
            let newLeft =
              Math.round(
                (containerWidth -
                  (getCalculatedValue("right", currentStyle.right) +
                    getCalculatedValue("width", currentStyle.width))) *
                  100
              ) / 100;

            newStyle.left =
              Math.round((newLeft / containerWidth) * 100 * 100) / 100 + "%";
            newStyle.right = undefined;
          }
        } else if (
          typeof currentStyle.right === "string" &&
          currentStyle.right.endsWith("%") &&
          !(this.left && this.width)
        ) {
          const newright = parseFloat(
            ((parseFloat(currentStyle.right.replace("%", "")) / 100) *
              containerWidth) as any
          );

          newStyle.right = setValueInInt
            ? Math.round(newright)
            : Math.round(newright * 100) / 100;

          if (this.width) {
            newStyle.left = undefined;
          }
          if (this.left) {
            newStyle.width = undefined;
          }
        } else if (
          currentStyle.right === undefined &&
          !(this.left && this.width)
        ) {
          let newright =
            containerWidth -
            (getCalculatedValue("left", currentStyle.left) +
              getCalculatedValue("width", currentStyle.width));

          if (dimsMode.widthAuto) {
            newright =
              containerWidth -
              (getCalculatedValue("left", currentStyle.left) +
                layerDimensions.width);
          }

          newStyle.right = setValueInInt
            ? Math.round(newright)
            : Math.round(newright * 100) / 100;

          if (
            typeof currentStyle.width === "string" &&
            currentStyle.width.endsWith("%")
          ) {
            newStyle.width = undefined;
          } else if (currentStyle.width !== undefined) {
            newStyle.left = undefined;
          } else if (currentStyle.left !== undefined) {
            newStyle.width = undefined;
          }

          if (dimsMode.widthAuto) {
            newStyle.left = undefined;
            newStyle.width = undefined;
          }
        }
        break;

      case "width":
        if (typeof currentStyle.width === "number") {
          newStyle.width =
            Math.round((currentStyle.width / containerWidth) * 100 * 100) /
              100 +
            "%";
        } else if (
          typeof currentStyle.width === "string" &&
          currentStyle.width.endsWith("%") &&
          !(this.left && this.right)
        ) {
          const newWidth = parseFloat(
            ((parseFloat(currentStyle.width.replace("%", "")) / 100) *
              containerWidth) as any
          );

          newStyle.width = setValueInInt
            ? Math.round(newWidth)
            : Math.round(newWidth * 100) / 100;

          if (this.left) {
            newStyle.right = undefined;
          }
          if (this.right) {
            newStyle.left = undefined;
          }
        } else if (
          currentStyle.width === undefined &&
          !(this.left && this.right)
        ) {
          let newWidth = 0;
          if (isNil(currentStyle.left) || isNil(currentStyle.right)) {
            newWidth = layerDimensions.width;
          } else {
            newWidth =
              containerWidth -
              (getCalculatedValue("left", currentStyle.left) +
                getCalculatedValue("right", currentStyle.right));
          }

          newStyle.width = setValueInInt
            ? Math.round(newWidth)
            : Math.round(newWidth * 100) / 100;

          if (this.left) {
            newStyle.right = undefined;
          }
          if (this.right) {
            newStyle.left = undefined;
          }
        }
        break;

      case "height":
        if (typeof currentStyle.height === "number") {
          newStyle.height =
            Math.round((currentStyle.height / containerHeight) * 100 * 100) /
              100 +
            "%";
        } else if (
          typeof currentStyle.height === "string" &&
          currentStyle.height.endsWith("%") &&
          !(this.bottom && this.top)
        ) {
          const newHeight = parseFloat(
            ((parseFloat(currentStyle.height.replace("%", "")) / 100) *
              containerHeight) as any
          );

          newStyle.height = setValueInInt
            ? Math.round(newHeight)
            : Math.round(newHeight * 100) / 100;

          if (this.top) {
            newStyle.bottom = undefined;
          }
          if (this.bottom) {
            newStyle.top = undefined;
          }
        } else if (
          currentStyle.height === undefined &&
          !(this.bottom && this.top)
        ) {
          let newHeight = 0;
          if (isNil(currentStyle.top) || isNil(currentStyle.bottom)) {
            newHeight = layerDimensions.height;
          } else {
            newHeight =
              containerHeight -
              (getCalculatedValue("top", currentStyle.top) +
                getCalculatedValue("bottom", currentStyle.bottom));
          }

          newStyle.height = setValueInInt
            ? Math.round(newHeight)
            : Math.round(newHeight * 100) / 100;

          if (this.top) {
            newStyle.bottom = undefined;
          }
          if (this.bottom) {
            newStyle.top = undefined;
          }
        }
        break;

      default:
    }

    return newStyle;
  }
}
