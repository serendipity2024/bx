import VirtualStyle from "./VirtualStyle";
import { isNil, forEach, findIndex, keys, isArray, indexOf } from "lodash";
import { ResolveNodeValue } from "utils";
import LayerCollection from "./Layer";
import { StylePropNameType } from "common-interfaces";
import DomainFile from "../Base/Domain/File";
import { findCommonProperties } from "utils";
import DomainLayer from "../Base/Domain/Layer";
export default class VirtualProps {
  _parent: LayerCollection | DomainFile | DomainLayer;
  style: VirtualStyle;
  layers: Array<DomainLayer>;
  constructor(layersCollection: Array<DomainLayer>) {
    this.style = new VirtualStyle(layersCollection);
    this.style.parent = this;
    this.layers = layersCollection;
    this.calculateProps();
  }
  addLayer(layer: DomainLayer) {
    this.layers.push(layer);
    this.calculateProps();
  }
  removeLayer(layer: DomainLayer) {
    let index = this.layers.indexOf(layer);
    if (index > -1) {
      this.layers.splice(index, 1);
      this.calculateProps();
    }
  }
  calculateProps() {
    let tempProps: any = this.layers.length ? this.layers[0].props.toJS() : {};
    for (let i = 1; i < this.layers.length; i++) {
      tempProps = findCommonProperties(tempProps, this.layers[i].props.toJS());
    }
    let style = tempProps["style"];
    if (style) {
      tempProps["style"] = VirtualStyle.fromJS(style, this.layers);
    }
    for (const [key, value] of Object.entries(tempProps)) {
      this[key] = value;
    }
  }
  calculateStyle(stylePropName: string = "style") {
    let tempStyle: any = this.layers.length
      ? this.layers[0].props[stylePropName].toJS()
      : {};
    for (let i = 1; i < this.layers.length; i++) {
      tempStyle = findCommonProperties(
        tempStyle,
        this.layers[i].props[stylePropName].toJS()
      );
    }
    this[stylePropName] = VirtualStyle.fromJS(tempStyle, this.layers);
  }
  on(properties: Array<string> | string, listener: any) {
    if (this.layers.length) {
      this.layers[0].props.on(properties, listener);
    }
  }
  off(properties: Array<string> | string, listener: any) {
    if (this.layers.length) {
      this.layers[0].props.off(properties, listener);
    }
  }
  get parent() {
    if (this.layers.length) {
      return this.layers[0].props.parent;
    }
    return null;
  }
  set parent(node: any) {
    this.layers.forEach((layer: DomainLayer) => {
      layer.props.parent = node;
    });
  }

  set(key: string, value: any) {
    this.layers.forEach((layer: DomainLayer) => {
      layer.props.set(key, value);
    });
  }

  get(key: string) {
    return this[key];
  }

  findIndexInParent() {
    let index;
    const parent = this.parent;
    forEach(parent, (value: any, key: string) => {
      if (isArray(value)) {
        const childIndex = indexOf(value, this);
        if (childIndex > -1) {
          index = `${key}.${childIndex}`;
        }
      } else {
        if (value === this) {
          index = key;
        }
      }
    });
    return index;
  }

  getAllPropsResolvedValue() {
    const file = this.getFile();
    if (!file) {
      return undefined;
    }
    let scopeVarialbes = file.scopeVariables;
    const props = this;
    forEach(props, (value: any, key: string) => {
      props[key] = ResolveNodeValue(value, scopeVarialbes);
    });
    return props;
  }
  getProp(key: string) {
    if (key === "style") {
      return this.get("style");
    } else if (!isNil(this.get(key))) {
      return this.get(key);
    } else {
      return undefined;
    }
  }

  getPath(): string {
    if (this.layers.length) {
      return this.layers[0].props.getPath();
    }
    return "";
  }

  getFullPath() {
    return this.getPath();
  }

  getResolvedProp(key: string): any {
    const file = this.getFile();
    if (!file) {
      return undefined;
    }
    let scopeVariables = file.scopeVariables;
    if (key === "style") {
      return this.get("style");
    } else if (!isNil(this[key])) {
      return ResolveNodeValue(this[key], scopeVariables);
    } else {
      return undefined;
    }
  }

  removeProp(key: string) {
    this.layers.forEach((layer: DomainLayer) => {
      layer.props.removeProp(key);
    });
  }
  setProp(key: string, value: any) {
    this.layers.forEach((layer: DomainLayer) => {
      layer.props.setProp(key, value);
    });
  }
  setAllProps(props: { [key: string]: any }) {
    forEach(props, (value: any, key: string) => {
      this.setProp(key, value);
    });
  }
  getAllProps(): { [key: string]: any } {
    return this;
  }
  setStyleAttribute(
    key: string,
    value: any,
    stylePropName: StylePropNameType = "style"
  ) {
    this.layers.forEach((layer: DomainLayer) => {
      layer.props.setStyleAttribute(key, value, stylePropName);
    });
    this.calculateStyle(stylePropName);
  }
  removeStyleAttribute(
    key: string,
    stylePropName: StylePropNameType = "style"
  ) {
    this.layers.forEach((layer: DomainLayer) => {
      layer.props.removeStyleAttribute(key, stylePropName);
    });
    this.calculateStyle(stylePropName);
  }

  getFile(
    node?: VirtualProps | LayerCollection | DomainLayer
  ): DomainFile | null {
    if (this.layers.length) {
      return this.layers[0].getFile();
    }
    return null;
  }

  getStyleAttribute(
    key: string,
    stylePropName: StylePropNameType = "style"
  ): any {
    const style = this.get(stylePropName);
    if (!style) {
      return null;
    }
    return style.get(key);
  }

  getRotateKey() {
    const transformValue = this.getStyleAttribute("transform");
    let rotateKey = "";
    if (transformValue) {
      let index = findIndex(transformValue, (item: any) => {
        let rotate = keys(item).indexOf("rotate");
        return rotate !== -1 && !isNil(item["rotate"]);
      });

      if (index > -1) {
        rotateKey = `transform.${index}.rotate`;
      } else {
        rotateKey = `transform.${transformValue.length}.rotate`;
      }
    } else {
      rotateKey = `transform.0.rotate`;
    }
    return rotateKey;
  }
  getResolvedStyleAttribute(
    key: string,
    stylePropName: StylePropNameType = "style"
  ): any {
    const file = this.getFile();
    if (!file) {
      return undefined;
    }
    let scopeVarialbes = file.scopeVariables;
    this.calculateStyle(stylePropName);

    const style = this.get(stylePropName);
    if (!style) {
      return null;
    }
    let obj = style.get(key);
    return ResolveNodeValue(obj, scopeVarialbes);
  }
  setAllStyle(style: { [key: string]: any }, stylePropName: string = "style") {
    this.layers.forEach((layer: DomainLayer) => {
      layer.props.setAllStyle(style, stylePropName);
    });
  }
  getStyle(): { [key: string]: any } {
    return this.get("style");
  }
  toJS() {
    if (this.layers.length) {
      return this.layers[0].props.toJS();
    }
    return {};
  }
}
