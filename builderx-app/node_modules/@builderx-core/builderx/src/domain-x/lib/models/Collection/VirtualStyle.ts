import { forEach, get } from "lodash";
import VirtualProps from "./VirtualProps";
import LayerNodeModel from "./../Common/LayerNodeModel";
import DomainLayer from "../Base/Domain/Layer";
export default class VirtualStyle {
  _parent: VirtualProps | LayerNodeModel;
  layers: Array<DomainLayer>;
  static fromJS(styles: any, layersCollection: Array<DomainLayer>) {
    const classInstance = new VirtualStyle(layersCollection);
    forEach(styles, (value: any, key: any) => {
      classInstance[key] = value;
    });
    return classInstance as any;
  }
  constructor(layersCollection: Array<DomainLayer>) {
    this.layers = layersCollection;
  }
  set(key: string, value: any) {
    this.layers.forEach((layer: DomainLayer) => {
      layer.props.style.set(key, value);
    });
  }

  get(key: string) {
    return get(this, key);
  }
  on(properties: Array<string> | string, listener: any) {
    if (this.layers.length) {
      this.layers[0].props.style.on(properties, listener);
    }
  }
  off(properties: Array<string> | string, listener: any) {
    if (this.layers.length) {
      this.layers[0].props.style.off(properties, listener);
    }
  }
  get parent() {
    if (this.layers.length) {
      return this.layers[0].props.style.parent;
    }
  }
  set parent(node: any) {
    this.layers.forEach((layer: DomainLayer) => {
      layer.props.style.parent = node;
    });
  }

  getPath(): string {
    if (this.layers.length) {
      return this.layers[0].props.style.getPath();
    }
    return "";
  }

  getFullPath() {
    return this.getPath();
  }

  toJS() {
    if (this.layers.length) {
      return this.layers[0].props.style.toJS();
    }
    return {};
  }

  findIndexInParent() {
    if (this.layers.length) {
      return this.layers[0].props.style.findIndexInParent();
    }
    return -1;
  }

  customToJS(propsJSON: any) {
    if (this.layers.length) {
      return this.layers[0].props.style.customToJS(propsJSON);
    }
    return {};
  }
}
