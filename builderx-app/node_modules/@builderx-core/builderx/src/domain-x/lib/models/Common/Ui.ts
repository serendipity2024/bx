import { IResizingType } from "common-interfaces";
import ResizingType from "./ResizingType";
import { Model } from "model";

export class BoxModel {
  lock: boolean;
  top: boolean;
  right: boolean;
  bottom: boolean;
  left: boolean;

  constructor() {
    this.lock = true;
    this.top = true;
    this.right = true;
    this.bottom = true;
    this.left = true;
  }
}

export default class Ui extends Model {
  margin: BoxModel;
  childMargin: BoxModel;
  padding: BoxModel;
  borderWidth: BoxModel;
  borderRadius: BoxModel;
  resizingType: ResizingType;
  widthMode: "auto" | "fixed" | "fill" | "percent";
  heightMode: "auto" | "fixed" | "fill" | "percent";

  constructor(style: any) {
    super();
    this.margin = new BoxModel();
    this.childMargin = new BoxModel();
    this.padding = new BoxModel();
    this.borderWidth = new BoxModel();
    this.borderRadius = new BoxModel();
    this.resizingType = new ResizingType(style);
    this.widthMode = "fixed";
    this.heightMode = "fixed";

    this.setValues(style);
    // this.setP(style);
    // console.log(style, "style here 111");
  }

  getFields() {
    return {};
  }

  setValues(style: any) {
    if (!style) {
      return;
    }

    this.setValue(style, "padding");
    this.setValue(style, "margin");
    // this.setValue(style, "border");
    // this.setValue(style, "borderRadius");
  }
  setValue(style: any, propName: string) {
    this[propName].top = false;
    this[propName].left = false;
    this[propName].right = false;
    this[propName].bottom = false;
    this[propName].lock = false;

    if (style.padding) {
      this[propName].top = true;
      this[propName].left = true;
      this[propName].right = true;
      this[propName].bottom = true;
      this[propName].lock = true;
    }
    if (style[propName + "Left"]) {
      this[propName].left = true;
    }
    if (style[propName + "Right"]) {
      this[propName].right = true;
    }
    if (style[propName + "Top"]) {
      this[propName].top = true;
    }
    if (style[propName + "Bottom"]) {
      this[propName].bottom = true;
    }
  }

  setMarginValues(style: any) {
    this.margin.top = false;
    this.margin.left = false;
    this.margin.right = false;
    this.margin.bottom = false;
    this.margin.lock = false;

    if (style.margin) {
      this.margin.top = true;
      this.margin.left = true;
      this.margin.right = true;
      this.margin.bottom = true;
      this.margin.lock = true;
    }
    if (style.marginLeft) {
      this.margin.left = true;
    }
    if (style.marginRight) {
      this.margin.right = true;
    }
    if (style.marginTop) {
      this.margin.top = true;
    }
    if (style.marginBottom) {
      this.margin.bottom = true;
    }
  }

  setMargin(propName: any, value: any) {
    this.margin[propName] = value;
  }
  setChildMargin(propName: any, value: any) {
    this.childMargin[propName] = value;
  }
  setPadding(propName: any, value: any) {
    this.padding[propName] = value;
  }
  setBorderWidth(propName: any, value: any) {
    this.borderWidth[propName] = value;
  }
  setBorderRadius(propName: any, value: any) {
    this.borderRadius[propName] = value;
  }
  setResizingType(componentStyle: any) {
    this.resizingType.setResizingType(componentStyle);
  }
  setMode(widthMode: any, heightMode: any) {
    this.widthMode = widthMode;
    this.heightMode = heightMode;
  }
}
