import { Model } from "model";
import { types } from "serializable";
import { isNil } from "lodash";
export default class KeyValueContainer extends Model {
  private data: any = {};
  getFields(): {
    [key: string]: any;
  } {
    return {
      data: types.literal
    };
  }
  isValidKey(key: string) {
    return true;
  }
  set(key: string | object, value?: any) {
    if (typeof key === "object") {
      for (var prop in key) {
        if (this.isValidKey(prop)) {
          this.data[prop] = (key as any)[prop];
        } else {
          throw new Error(
            `Model KeyValueContainer Error: Invalid key '${prop}'`
          );
        }
      }
    } else {
      if (this.isValidKey(key)) {
        this.data[key] = value;
      } else {
        throw new Error(`Model KeyValueContainer Error: Invalid key '${key}'`);
      }
    }
  }
  get(key: string): any {
    return this.data[key];
  }
  getAll() {
    debugger;
    return this.data;
  }
  remove(key: string) {
    if (!isNil(this.data[key])) {
      delete this.data[key];
    }
  }
}
