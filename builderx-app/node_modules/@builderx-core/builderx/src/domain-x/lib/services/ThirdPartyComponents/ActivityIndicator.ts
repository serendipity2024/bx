import { ComponentDefinition } from "common-interfaces";

const activityIndicatorSchema: ComponentDefinition = {
  version: "0.0.1",
  template: {
    type: "thirdParty",
    import: {
      layerName: "ActivityIndicator",
      packageName: "react-native",
      isDefaultImport: false,
      asName: ""
    },
    locked: false,
    template: {
      centerVertical: false,
      centerHorizontal: false
    },
    props: {
      style: {
        position: "absolute",
        top: 50,
        left: 50,
        color: "rgba(128,128,128,1)"
      }
    },
    children: []
  },
  thumbnail: "",
  name: "ActivityIndicator",
  controlsProperty: [
    {
      type: "AlignmentEditor",
      title: "Alignment Editor",
      value: {},
      showForMultiple: true
    },
    {
      type: "OrientationEditor",
      title: "Orientation Editor",
      value: {},
      showForMultiple: true,
      additionalOptions: {
        hideSize: true
      }
    },
    {
      type: "ResizingTypeEditor",
      title: "ResizingType Editor",
      value: {},
      additionalOptions: {
        hideSize: true
      }
    },
    {
      type: "group",
      title: "Activity Indicator",
      value: {},
      properties: [
        {
          propertyName: "color",
          type: "simpleColor",
          title: "Color",
          value: {
            defaultValue: "#fff"
          },
          category: "props"
        },
        {
          propertyName: "size",
          type: "enum",
          title: "Size",
          value: {
            options: ["small", "large"],
            defaultValue: "small"
          },
          category: "props"
        },
        {
          propertyName: "opacity",
          type: "range",
          title: "Opacity",
          value: {
            defaultValue: 1,
            min: 0,
            max: 1
          },
          category: "style"
        }
      ]
    }
  ],
  componentRenderDefinition: `class ThirdPartyFlatList extends React.Component {    constructor() {
      super();      const ds = new ListView.DataSource({ rowHasChanged: (r1, r2) => r1 !== r2 });
      this.state = { dataSource: ds.cloneWithRows(["row 1", "row 2"]) };    }    render() {
        const props = {        ...this.props,        style:{ ...this.props.style},
        dataSource:this.state.dataSource,          renderRow:rowData => <Text>{rowData}</Text>      };
        return (        <ListView          {...props}        />      );    }  }`
};

export default activityIndicatorSchema;
