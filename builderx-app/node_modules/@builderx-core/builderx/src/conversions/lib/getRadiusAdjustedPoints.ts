import { Point, Coordinate } from "./types";
import { getRadiusAdjustment } from "./pathUtils";

export default function getRadiusAdjustedPoints(
  pointsArray: Array<Point>,
  viewBox: string
) {
  const dims: Array<any> =
    viewBox && viewBox.split ? viewBox.split(" ") : [0, 0, 100, 100];
  const maxRadius = Math.min(dims[2] - dims[0], dims[3] - dims[1]) / 2;
  let newPoints: Array<Point> = [];
  pointsArray.forEach((oldPoint: Point, i: number) => {
    if (oldPoint.cornerRadius) {
      let d: Coordinate = { x: 0, y: 0 };
      let point: Coordinate;
      let additionalPoint: Point;
      if (i === 0) {
        d = getRadiusAdjustment(pointsArray, i, i + 1, maxRadius);
        point = {
          x: Number(oldPoint.point.x + d.x),
          y: Number(oldPoint.point.y + d.y)
        };
        newPoints.push({
          ...oldPoint,
          cornerRadius: 0,
          point
        });
      }
      const nextIndex = i === pointsArray.length - 1 ? 0 : i + 1;
      const nextToNextIndex =
        i === pointsArray.length - 1 ? 1 : pointsArray[i + 2] ? i + 2 : 0;
      d = getRadiusAdjustment(pointsArray, i, nextIndex, maxRadius);
      point = {
        x: Number(pointsArray[nextIndex].point.x - d.x),
        y: Number(pointsArray[nextIndex].point.y - d.y)
      };
      const curveFrom = {
        x: pointsArray[nextIndex].point.x - d.x / 2,
        y: pointsArray[nextIndex].point.y - d.y / 2
      };
      newPoints.push({
        ...oldPoint,
        cornerRadius: 0,
        hasCurveFrom: true,
        curveFrom: point,
        curveTo: point,
        point
      });
      const d2 = getRadiusAdjustment(
        pointsArray,
        nextIndex,
        nextToNextIndex,
        maxRadius
      );
      additionalPoint = {
        curveMode: 1,
        hasCurveFrom: true,
        hasCurveTo: true,
        cornerRadius: 0,
        curveFrom: {
          x: pointsArray[nextIndex].point.x + d2.x,
          y: pointsArray[nextIndex].point.y + d2.y
        },
        curveTo: {
          x: pointsArray[nextIndex].point.x,
          y: pointsArray[nextIndex].point.y
        },
        point: {
          x: pointsArray[nextIndex].point.x + d2.x,
          y: pointsArray[nextIndex].point.y + d2.y
        }
      };
      newPoints.push(additionalPoint);
    } else {
      newPoints.push(oldPoint);
    }
  });
  return newPoints;
}
