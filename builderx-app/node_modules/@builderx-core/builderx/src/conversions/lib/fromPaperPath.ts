import * as Paper from "paper";
if (typeof document !== "undefined") {
  let canvasDOMElement = document.createElement("canvas");
  canvasDOMElement.style.position = "absolute";
  canvasDOMElement.setAttribute("height", "1000px");
  canvasDOMElement.setAttribute("width", "1000px");
  canvasDOMElement.style.top = "0px";
  canvasDOMElement.style.left = "0px";
  Paper.setup(canvasDOMElement as HTMLCanvasElement);
  Paper.settings["insertItems"] = false;
} else {
  // @ts-ignore
  Paper.setup([640, 480]);
}
export function convertPaperPointToBxObj(finalPaperPath: any) {
  return {
    closed: finalPaperPath.closed,
    points: convertPaperToBx(finalPaperPath.exportJSON())
  };
}
export function convertPaperToBx(finalPathPaper: any) {
  let finalPaperPoints: any = [];
  let finalPathPaperJson = JSON.parse(finalPathPaper);
  if (
    finalPathPaperJson[0] !== "CompoundPath" &&
    finalPathPaperJson[1] &&
    finalPathPaperJson[1].segments
  ) {
    finalPaperPoints = finalPaperPoints.concat(
      getPaperPoints(finalPathPaperJson[1].segments)
    );
  } else if (
    finalPathPaperJson[1] &&
    finalPathPaperJson[1].children &&
    finalPathPaperJson[1].children.length > 0
  ) {
    for (let k = 0; k < finalPathPaperJson[1].children.length; k++) {
      finalPaperPoints = finalPaperPoints.concat(
        getPaperPoints(finalPathPaperJson[1].children[k][1].segments)
      );
      // Jugaad: using 776 and 777 for closed and no-closed paths
      let filler = finalPathPaperJson[1].children[k][1].closed ? 776 : 777;
      // Adding Filler Point
      finalPaperPoints.push(
        createPointObject(filler, filler, false, false, 0, 0, 0, 0, 0, 0)
      );
    }
  }
  return finalPaperPoints;
}

function getPaperPoints(segments: any) {
  let finalPaperPoints = [];
  for (let j = 0; j < segments.length; j++) {
    let point: any = {};
    let curveFrom: any = {};
    let curveTo: any = {};
    let pointObject = {};
    if (segments[j][0] && segments[j][0].constructor === Array) {
      point.x = segments[j][0][0];
      point.y = segments[j][0][1];
      curveTo.x = segments[j][1][0] + segments[j][0][0];
      curveTo.y = segments[j][1][1] + segments[j][0][1];
      curveFrom.x = segments[j][2][0] + segments[j][0][0];
      curveFrom.y = segments[j][2][1] + segments[j][0][1];
      pointObject = createPointObject(
        0,
        0,
        true,
        true,
        curveFrom.x,
        curveFrom.y,
        curveTo.x,
        curveTo.y,
        point.x,
        point.y
      );
    } else {
      point.x = segments[j][0];
      point.y = segments[j][1];
      pointObject = createPointObject(
        0,
        0,
        false,
        false,
        point.x,
        point.y,
        point.x,
        point.y,
        point.x,
        point.y
      );
    }
    finalPaperPoints.push(pointObject);
  }
  return finalPaperPoints;
}

function createPointObject(
  cornerRadius: number,
  curveMode: number,
  hasCurveFrom: boolean,
  hasCurveTo: boolean,
  curveFromX: number,
  curveFromY: number,
  curveToX: number,
  curveToY: number,
  px: number,
  py: number
) {
  return {
    cornerRadius: cornerRadius,
    curveMode: curveMode,
    hasCurveTo: hasCurveTo,
    hasCurveFrom: hasCurveFrom,
    curveFrom: {
      x: curveFromX,
      y: curveFromY
    },
    curveTo: {
      x: curveToX,
      y: curveToY
    },
    point: {
      x: px,
      y: py
    }
  };
}
