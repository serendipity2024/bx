import { Model } from "model";
import { DefaultConfigurations } from "session";
import { get, merge, isNil } from "lodash";
import { Session } from "session";
import { IConfiguration } from "common-interfaces";

export default class ConfigurationService extends Model
  implements IConfiguration {
  configurations: any;
  defaultConfigurations: any;
  userConfigurations: any;
  userPath: string;
  settingPath: string;
  session: Session;
  constructor(session: Session) {
    super();
    this.defaultConfigurations = DefaultConfigurations;
    this.configurations = DefaultConfigurations;
    this.session = session;
  }

  getFields() {
    return {};
  }

  get = (key: string): any => {
    return get(this.configurations, key);
  };
  getAll = () => {
    return this.configurations;
  };
  set = (key: string, value: any) => {
    this.userConfigurations[key] = value;
    this.configurations[key] = value;
    this.saveUserConfiguration();
  };
  async fetchUserConfig() {
    let localConfig: any = localStorage.getItem("bx_user_settings");
    if (localConfig) {
      localConfig = localConfig ? JSON.parse(localConfig) : {};
      localStorage.removeItem("bx_user_settings");
    } else {
      localConfig = {};
    }
    await this.getUserConfig(localConfig);
  }
  saveUserConfiguration() {
    const config = JSON.stringify(this.userConfigurations, null, 4);
    const id = this.session.drivers.userService.id;
    if (!isNil(id)) {
      this.session.apiSdk.user
        .patch(id, { config: config })
        .then((res: any) => {
          // console.log(res, "res");
        })
        .catch(err => {
          console.log("saveUserConfiguration ---", err);
        });
    }
  }

  overwriteConfiguraions(newConfiguration: any) {
    this.configurations = merge(this.configurations, newConfiguration);
    // console.log(newConfiguration.version, "hello here");
    this.userConfigurations["editor.snap.snapMagnet"] = 5;

    // if (
    //   // newConfiguration.version !== "2.0" &&
    //   this.configurations["editor.snap.snapMagnet"] == 10
    // ) {
    //   this.configurations["editor.snap.snapMagnet"] = 5;
    //   this.userConfigurations["editor.snap.snapMagnet"] = 5;
    // }
    // console.log(this.configurations, newConfiguration, "config");
    // this.configurations = merge(this.configurations, newConfiguration);
  }

  async getUserConfig(localConfig: any) {
    try {
      const id = this.session.drivers.userService.id;
      let res;
      if (!isNil(id)) {
        res = await this.session.apiSdk.user.get(id);
      } else {
        throw "Id is undefined";
      }
      // let config = res.data.config;
      // config = config ? JSON.parse(config) : {};

      // /* Use this to rerun Joyride from the begining */
      // // config["app.tutorial.currentStep"] = 0;
      // // config["app.tutorial.skipped"] = false;

      // this.userConfigurations = merge(localConfig, config);
      // this.userConfigurations = this.userConfigurations
      //   ? this.userConfigurations
      //   : {};
      // this.overwriteConfiguraions(this.userConfigurations);
    } catch (err) {
      console.log(err, "error fetching user config");
      this.userConfigurations = { "app.tutorial.skipped": true };
      this.overwriteConfiguraions(this.userConfigurations);
    }
  }
}
