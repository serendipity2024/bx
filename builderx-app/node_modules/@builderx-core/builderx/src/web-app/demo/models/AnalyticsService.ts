import { IAnalyticsService } from "common-interfaces";
import { Model } from "model";
import { Session } from "session";
import { isNil, get } from "lodash";

const electronIsDev = window["require"]("electron-is-dev");
const Store = window["require"]("electron-store");

type Activity = {
  name: string;
  path: string;
  payload?: any;
  category?: string;
};
type ActivityObj = {
  action_name: string;
  action_path: string;
  payload: null;
  action_time: string;
};

export default class AnalyticsService extends Model
  implements IAnalyticsService {
  activities: any = [];
  lastTenActivities: any = [];
  storage: Storage;
  session: Session;
  deviceDetailService: any;
  constructor(session: Session, deviceDetailService: any) {
    super();
    this.storage = new Store();
    this.session = session;
    this.deviceDetailService = deviceDetailService;
    this.initialiseData();
    setInterval(() => this.sendAnalyticsData(), 10000);
  }

  getActivities() {
    return this.activities;
  }
  recordLastTenActivities(activityObj: ActivityObj) {
    if (this.lastTenActivities) {
      if (this.lastTenActivities.length >= 10) {
        this.lastTenActivities.shift();
      }
      this.lastTenActivities.push(activityObj.action_name);
    }
  }
  getLastTenActivities() {
    return this.lastTenActivities;
  }

  hasAnalyticsData = () => {
    const analyticsData = this.storage.has("analyticsData");
    if (isNil(analyticsData)) {
      this.storage.set("analyticsData", { actions: [], uuid: "" });
    }
    this.storeAnalyticsData(this.activities);
  };

  storeAnalyticsData(_activities: ActivityObj[]) {
    if (electronIsDev) {
      return;
    }
    const ANALYTICS_OBJECT_LENGTH_LIMIT = 300;
    this.deviceDetailService.getDeviceDetails((userDeviceDetails: any) => {
      let data = this.storage.get("analyticsData");
      if (data && data.actions) {
        if (data.actions.length === 0) {
          data.actions = _activities;
        } else if (data.actions.length >= ANALYTICS_OBJECT_LENGTH_LIMIT) {
          this.sendAnalyticsData()
            .then((result: boolean) => {
              if (result) {
                this.storage.set("analyticsData", {
                  actions: [],
                  uuid: "",
                  version: ""
                });
                data.actions = _activities;
              } else {
                data = this.storage.get("analyticsData");
                if (data.actions.length >= ANALYTICS_OBJECT_LENGTH_LIMIT) {
                  // splice the array
                  data.actions.splice(
                    data.actions.length - _activities.length,
                    _activities.length,
                    _activities
                  );
                } else {
                  data.action = data.actions.concat(_activities);
                }
              }
            })
            .catch(err => {
              console.error(err);
            });
        } else if (data.actions.length <= ANALYTICS_OBJECT_LENGTH_LIMIT) {
          data.actions = data.actions.concat(_activities);
        }
        data.uuid = userDeviceDetails.uuid;
        data.version = "0.0.1";
        this.storage.set("analyticsData", data);
        this.activities = [];
      } else if (!data) {
        this.storage.set("analyticsData", { actions: [], uuid: "" });
      }
    });
  }

  sendAnalyticsData() {
    return new Promise((resolve, reject) => {
      if (electronIsDev) {
        resolve(true);
        return;
      }
      if (navigator.onLine) {
        let data = this.storage.get("analyticsData");
        // make api call and remove the data
        if (data && data.actions && data.actions.length > 0) {
          this.session.analyticsApiService.send(data).then(
            (result: any) => {
              if (result.status) {
                this.storage.delete("analyticsData");
                resolve(true);
              }
              resolve(false);
            },
            (err: any) => {
              console.log(err, "err");
              resolve(false);
            }
          );
        }
      }
    });
  }
  addActivity(activity: Activity, manual?: boolean) {
    const activityObj: ActivityObj = {
      action_name: "",
      action_path: "",
      action_time: "",
      payload: null
    };
    if (activity != null && activity.name != null && activity.path !== null) {
      activityObj.action_name = activity.name;
      activityObj.action_path = activity.path;
      activityObj.action_time = this.getTIMESTAMP();
    }
    if (manual) {
      this.activities.push(activityObj);
      this.hasAnalyticsData();
    } else {
      this.activities.push(activityObj);
      this.hasAnalyticsData();
      this.recordLastTenActivities(activityObj);
    }
  }
  getTIMESTAMP() {
    const date = new Date();
    const year = date.getFullYear();
    const month = ("0" + (date.getMonth() + 1)).substr(-2);
    const day = ("0" + date.getDate()).substr(-2);
    const hour = ("0" + date.getHours()).substr(-2);
    const minutes = ("0" + date.getMinutes()).substr(-2);
    const seconds = ("0" + date.getSeconds()).substr(-2);

    return (
      year +
      "-" +
      month +
      "-" +
      day +
      " " +
      hour +
      ":" +
      minutes +
      ":" +
      seconds
    );
  }
  private initialiseData() {
    if (
      !this.storage.get("analyticsData") ||
      get(this.storage.get("analyticsData"), "activities")
    ) {
      this.activities = [];
      this.lastTenActivities = [];
      this.storage.set("analyticsData", { actions: [], uuid: "", version: "" });
    }
    const { actions } = this.storage.get("analyticsData");
    this.activities = actions;
    this.addActivity({ name: "appOpen", path: "", category: "app/user_action" });
  }
}
