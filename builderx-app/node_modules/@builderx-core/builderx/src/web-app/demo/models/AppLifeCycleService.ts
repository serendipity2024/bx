import { IAppLifeCycleService } from "common-interfaces";
import { Model } from "model";
const electron = window["require"]("electron");
const ipcRenderer = electron.ipcRenderer;
const BrowserWindow = electron.BrowserWindow;
const app = electron.remote.app;
const shell = electron.remote.shell;
const remote = electron.remote;
export default class AppLifeCycleService extends Model
  implements IAppLifeCycleService {
  ipcRenderer = ipcRenderer;
  BrowserWindow = BrowserWindow;
  app = app;
  shell = shell;
  remote = remote;
  constructor() {
    super();
  }

  registerListener() {
    this.ipcRenderer.on("open-project", async (event: any, arg: any) => {
      //
    });
  }
  getAppVersion() {
    return this.app.getVersion();
  }

  getAppName() {
    return this.app.getName();
  }

  quitApp() {
    this.app.quit();
  }

  hideApp() {
    this.app.hide();
  }

  exitApp() {
    this.app.exit();
  }

  showApp() {
    this.app.show();
  }

  closeWindow() {
    const focusedWindow = this.BrowserWindow.getFocusedWindow();
    if (focusedWindow) {
      focusedWindow.close();
    }
  }

  openWeb(urlString: string) {
    this.shell.openExternal(urlString);
  }

  createNewWindow() {
    this.ipcRenderer.send("create-new-window");
  }

  createNewProject() {
    this.ipcRenderer.send("create-new-project");
  }
  createNewProjectWithTutorial() {
    this.ipcRenderer.send("create-new-project", true);
  }

  openNewWindow(index: string, callback: any) {
    this.ipcRenderer.send("open-new-window", index);
    // const focusedWindow = BrowserWindow.getFocusedWindow();
    this.ipcRenderer.on(
      "open-existing-project",
      async (event: any, arg: any) => {
        const allWindows = this.BrowserWindow.getAllWindows();
        // allWindows[allWindows.length - 1].destroy();
        await allWindows[0].focus();
        const focusedWindow = this.BrowserWindow.getFocusedWindow();
        focusedWindow.open();
        focusedWindow.opener = null;
        // callback();
      }
    );
  }

  getWindows() {
    return this.remote.BrowserWindow.getAllWindows();
  }
}
