import ReactGA from "react-ga";
import { isNil, forEach, get } from "lodash";
import { Session } from "session";
import axios from "axios";
type Activity = {
  name: string;
  path: string;
  payload?: any;
  category?: string;
};
import parseDomain from "parse-domain";
import { isNull } from "util";
import { Utils } from "utils";
import urljoin from "url-join";
export default class GoogleAnalyticsService {
  activities: Array<any> = [];
  commonPayload: any;
  session: Session;
  constructor(session: any) {
    this.session = session;
  }
  init = () => {
    let env = "";
    let subdomain = "";
    let domainDetails = {
      subdomain: Utils.getEnv("BUILDERX_APP_ENVIRONMENT")
    };

    switch (subdomain) {
      case "pre-cloud":
        env = "pre-cloud";
        break;
      case "cloud":
        env = "cloud";
        break;
      case "development":
        env = "localhost";
        break;
      default:
        env = subdomain;
    }
    this.commonPayload = {
      user_id: get(this.session, "user.id", -1),
      team_id: get(this.session, "user.currentTeam.id", -1),
      project_id: this.session.project.projectId,
      env: env,
      cookies: document.cookie,
      domain: this.getDomainName()
    };
    try {
      // console.log("init here ga", GA_TRACKING_ID);
      setInterval(() => this.sendAnalyticsData(), 10000);
      if (this.session.envConstants.GA_TRACKING_ID) {
        this.initialiseReactGA();
      }
      this.addActivity({
        name: "appOpen",
        category: "app/command",
        path: ""
      });
    } catch (error) {
      alert(error + "init error react-ga");
    }
  };
  getDomainName = (): string => {
    return Utils.getEnv("BUILDERX_WEBSITE_URL");
  };
  initialiseReactGA = () => {
    ReactGA.initialize(this.session.envConstants.GA_TRACKING_ID);
    ReactGA.pageview(
      urljoin(Utils.getEnv("BUILDERX_APP_URL"), Utils.getEnv("PROJECT_ID"))
    );
  };
  sendAnalyticsData() {
    let activitiesObject = this.activities;
    this.sendEvents(activitiesObject);
    this.activities = [];
  }
  sendEvents(activities: any) {
    if (this.session.envConstants.GA_TRACKING_ID) {
      try {
        forEach(activities, (activityObject: any) => {
          ReactGA.event(activityObject);
        });
      } catch (error) {
        this.session.captureErrorForSentry(error);
      }
    }
    axios
      .post("https://analytics.builderx.io/analytics", {
        analytics: JSON.stringify(activities),
        commonPayload: JSON.stringify(this.commonPayload)
      })
      .then(response => {
        // console.log("Request Completed Successfully");
      })
      .catch(error => {
        // this.session.captureErrorForSentry(error);
        console.log("Error in completing request ", error);
      });
  }
  addActivity(activity: Activity) {
    if (
      !this.isNil(activity) &&
      !this.isNil(activity.name)
      // !this.isNil(activity.path)
    ) {
      this.activities.push({
        category: activity.category || "BuilderX_App",
        action: activity.name,
        label: this.getTIMESTAMP()
      });
    }
  }
  isNil(activity: any): boolean {
    if (isNil(activity)) {
      return true;
    }
    if (activity === "") {
      return true;
    }
    return false;
  }
  getTIMESTAMP() {
    const date = new Date();
    const year = date.getFullYear();
    const month = ("0" + (date.getMonth() + 1)).substr(-2);
    const day = ("0" + date.getDate()).substr(-2);
    const hour = ("0" + date.getHours()).substr(-2);
    const minutes = ("0" + date.getMinutes()).substr(-2);
    const seconds = ("0" + date.getSeconds()).substr(-2);

    return (
      year +
      "-" +
      month +
      "-" +
      day +
      " " +
      hour +
      ":" +
      minutes +
      ":" +
      seconds
    );
  }
}
