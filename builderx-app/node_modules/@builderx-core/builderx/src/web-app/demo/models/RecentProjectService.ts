import { RecentProject } from "session";
import { Model } from "model";
import { types } from "serializable";
import { minBy } from "lodash";
import { IRecentProjects } from "common-interfaces";

const Store = window["require"]("electron-store");
const store = new Store();

export default class RecentProjectService extends Model
  implements IRecentProjects {
  recentProjectList: Map<string, RecentProject>;
  store: any;

  static create() {
    const recentProjects = store.get("recentProjects");
    if (recentProjects) {
      return RecentProjectService.fromJS(recentProjects);
    } else {
      return RecentProjectService.fromJS({ recentProjectList: {} });
    }
  }

  getFields(): { [key: string]: any } {
    return {
      recentProjectList: types.map(types.literal, RecentProject)
    };
  }

  addRecentProject(basePath: string, lastOpened: number) {
    const recentProject = RecentProject.fromJS({ basePath, lastOpened });
    console.log(recentProject, "recentProject");
    if (recentProject.basePath.indexOf("/var/folders") !== -1) {
      console.log("Temp Project");
    } else {
      if (this.recentProjectList.size < 9 && recentProject.basePath) {
        this.recentProjectList.set(recentProject.basePath, recentProject);
      } else if (this.recentProjectList.size === 9 && recentProject.basePath) {
        if (!this.recentProjectList.has(recentProject.basePath)) {
          const arrayOfMapObj = Array.from(this.recentProjectList.values());
          const minObj = minBy(arrayOfMapObj, "lastOpened");
          if (minObj) {
            this.recentProjectList.delete(minObj.basePath);
            this.recentProjectList.set(recentProject.basePath, recentProject);
          }
        } else {
          this.recentProjectList.set(recentProject.basePath, recentProject);
        }
      }
    }
    this.persist();
  }

  setRecentProjectList(newRecentProjectList: any) {
    this.recentProjectList = newRecentProjectList;
    this.persist();
  }

  removeRecentProject(basePath: string) {
    if (this.recentProjectList.has(basePath)) {
      this.recentProjectList.delete(basePath);
    }
    this.persist();
  }

  private persist() {
    const recentProjectJSON = this.toJS();
    store.set("recentProjects", recentProjectJSON);
  }
}
