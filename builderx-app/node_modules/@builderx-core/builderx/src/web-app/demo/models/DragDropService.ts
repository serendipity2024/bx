import { get } from "lodash";
import { Session, Commands } from "session";
import * as path from "path";
import { action } from "model";

export class DragDropService {
  private session: Session;
  constructor(session: Session) {
    this.session = session;
    this.registerEvents();
  }
  registerEvents() {
    window.ondragover = (e: any) => {
      e.preventDefault();
      e.stopPropagation();
      return false;
    };

    window.onfocus = (e: any) => {
      if (this.session.keyboardService) {
        this.session.keyboardService.clearCurrentKey();
      }
    };

    window.ondrop = (e: any) => {
      if (this.session.readonly) {
        return;
      }
      action(async () => {
        e.preventDefault();
        e.stopPropagation();
        if (this.session.pageRouter.currentRoute === "workspace") {
          try {
            const draggedFile = get(e, "dataTransfer.files[0]");
            var files = get(e, "dataTransfer.files"); // Array of all files

            if (!draggedFile) {
              return false;
            }
            let fileType = path.extname(draggedFile.name);
            fileType = fileType.toLowerCase();
            if (
              fileType === ".png" ||
              fileType === ".jpg" ||
              fileType === ".jpeg" ||
              fileType === ".webp" ||
              fileType === ".gif"
            ) {
              this.session
                .checkImageType(draggedFile)
                .then(result => {
                  //
                  this.session.commandManager.execute(
                    new Commands.AddImage(this.session, [result])
                  );
                })
                .catch(err => {
                  //
                  this.session.notificationManager.notifyError(
                    "Invalid file format. Use .png, .jpg, .gif or .sketch",
                    "File format"
                  );
                });

              // this.session.addImage(draggedFile);
            } else if (fileType === ".sketch") {
              await this.session.commandManager.executeAndSkip(
                new Commands.SketchImport(this.session, draggedFile)
              );
            } else {
              this.session.notificationManager.notifyError(
                "Invalid file format. Use .png, .jpg, .gif or .sketch",
                "File format"
              );
            }
          } catch (err) {
            console.error(err);
            return false;
          }
        }
        return false;
      });
    };

    window.ondragleave = (e: any) => {
      e.preventDefault();
      e.stopPropagation();
      return false;
    };
  }
}
