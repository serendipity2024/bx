import {
  IUserService,
  IDeviceDetail,
  IAppUpdater,
  IAppLifeCycleService
} from "common-interfaces";
import { Session, Commands } from "session";
import { action } from "model";

const electron = window["require"]("electron");
const app = electron.remote.app;
const autoUpdater = electron.remote.autoUpdater;

const isDev = window["require"]("electron-is-dev");

const Store = window["require"]("electron-store");
const store = new Store();

export default class AppUpdaterService implements IAppUpdater {
  userService: IUserService;
  session: Session;
  deviceDetailsService: IDeviceDetail;
  userApiService: any;
  appLifeCycleService: IAppLifeCycleService;
  appUpdaterIndicator: string;
  constructor(
    session: Session,
    userService: IUserService,
    deviceDetailsService: IDeviceDetail,
    userApiService: any,
    appLifeCycleService: IAppLifeCycleService
  ) {
    this.session = session;
    this.userService = userService;
    this.deviceDetailsService = deviceDetailsService;
    this.userApiService = userApiService;
    this.appLifeCycleService = appLifeCycleService;
  }

  setLocalVersion(newVersion: string): Promise<boolean> {
    return new Promise((resolve, reject) => {
      store.set("currentAppVersion", { currentAppVersion: newVersion });
      resolve(true);
    });
  }

  getLocalVersion(): Promise<string> {
    return new Promise((resolve, reject) => {
      const data = store.get("currentAppVersion");
      if (data) {
        resolve(data.currentAppVersion);
      } else {
        resolve();
      }
    });
  }

  getVersion() {
    return this.appLifeCycleService.getAppVersion();
  }

  quitAndInstall() {
    autoUpdater.quitAndInstall();
  }

  setAppUpdaterIndicator(value: string) {
    this.appUpdaterIndicator = value;
  }

  checkAndMatchVersions() {
    console.log("checkAndMatchVersions");
    this.getLocalVersion().then(currentAppVersion => {
      const buildVersion = this.getVersion();
      if (!isDev) {
        if (currentAppVersion !== buildVersion) {
          this.deviceDetailsService.getDeviceDetails((data: any) => {
            data.build_version = buildVersion;
            this.userApiService
              .update(data)
              .then((result: any) => {
                if (result.status) {
                  this.setLocalVersion(buildVersion);
                }
              })
              .catch((err: any) => {
                console.log(err, "err at check and match versions");
              });
          });
        }
      }
    });
  }

  checkForUpdates() {
    // console.log(navigator.onLine, this.userService.uuid, "navigator.onLine, ");
    // console.log(electron.remote.process.env, "navigator.onLine, ZZZZ");
    if (
      navigator.onLine
      // TODO: Uncomment this
      // && this.userService.uuid &&
      // this.userService.uuid !== ""
    ) {
      if (process.env.NODE_ENV !== "development") {
        /// ${this.userService.uuid}

        console.log(
          "checkForUpdates",
          `${
            electron.remote.process.env.REACT_APP_BUILDERX_DOWNLOAD_URL
          }release/latest/${this.userService.uuid}/${this.getVersion()}`
        );

        autoUpdater.setFeedURL(
          `${
            electron.remote.process.env.REACT_APP_BUILDERX_DOWNLOAD_URL
          }release/latest/${this.userService.uuid}/${this.getVersion()}`
        );

        autoUpdater.checkForUpdates();

        autoUpdater.on("error", function(error: any) {
          console.log(error, "App updaterr");
        });

        autoUpdater.on("update-available", (ev: any, info: any) => {
          action(() => {
            this.session.commandManager.executeAndSkip(
              new Commands.NotifyInfo(
                this.session,
                "Update Available. Downloading Update...",
                "Update"
              )
            );
            // this.notificationManager.notifyInfo("Update available.", "Update");
            console.log("Update available. App updaterr", info, ev);

            this.session.commandManager.executeAndSkip(
              new Commands.SetAppUpdaterIndicator(this.session, "downloading")
            );
          });
        });

        autoUpdater.on("update-not-available", (ev: any, info: any) => {
          // this.session.commandManager.executeAndSkip(
          //   new Commands.NotifyInfo(
          //     this.session,
          //     "Update Not Available.",
          //     "Update"
          //   )
          // );
        });

        autoUpdater.on("download-progress", (ev: any, progressObj: any) => {
          console.log("download-progress ev App updaterr", progressObj, ev);
          // console.log("download-progress progressObj", progressObj);
          // //console.log("Download progress...", progressObj, ev);
        });

        autoUpdater.on("update-downloaded", (ev: any, info: any) => {
          action(() => {
            this.session.commandManager.executeAndSkip(
              new Commands.NotifySuccess(
                this.session,
                "Update downloaded, Restart the app to use new features.",
                "Update"
              )
            );

            this.session.commandManager.executeAndSkip(
              new Commands.SetAppUpdaterIndicator(this.session, "downloaded")
            );
            this.session.drivers.userService.setUpdateDownloaded(true);
          });
        });
      }
    }
  }
}
