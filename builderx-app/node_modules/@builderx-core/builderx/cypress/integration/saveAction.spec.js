import selectTool from "./actions/selectTool";
import drawShape from "./actions/drawShape";
import { camelCase, upperFirst } from "lodash";
import { func } from "prop-types";
import {
  roundOffDomPositionElement,
  makeRandomName
} from "./actions/sharedFuncs";

export default function saveAction() {
  context("DOM should be same after reload", () => {
    beforeEach(function() {
      Cypress.Cookies.preserveOnce("access-token");
    });

    var env = "production";
    var afterRect, beforeRect, afterEllip, beforeEllip, projName, projURL;
    it("can can create a Rectangle and ellipse", function() {
      // console.log("in no issued");
      cy.get(".bx-artboard-Untitled > .view-render > .view-render").should(
        "not.exist"
      );
      cy.get(".bx-artboard-Untitled > .view-render > svg > ellipse").should(
        "not.exist"
      );
      selectTool("ellipse");
      drawShape();
      cy.get("body").type("{command}S");
      cy.get(".bx-artboard-Untitled > .view-render > svg > ellipse").should(
        "exist"
      );

      // cy.get(".bx-artboard-Untitled > .view-render > .view-render").should(
      //   "exist"
      // );

      cy.url().then(url => {
        projURL = url;
      });
      cy.wait(1000);
    });

    it("can save and reload the project", function() {
      // cy.get(".bx-artboard-Untitled > .view-render > .view-render").then(
      // elemRect => {
      // beforeRect = Cypress.dom.getElementCoordinatesByPosition(elemRect);
      cy.get(".bx-artboard-Untitled > .view-render > svg > ellipse").then(
        elemEllip => {
          beforeEllip = Cypress.dom.getElementCoordinatesByPosition(elemEllip);

          cy.get("body").type("{command}S");

          cy.get("div", {
            timeout: 5000
          })
            .contains("saving...")
            .should("exist");

          cy.wait(20000);
          // cy.get("div", {
          //   timeout: 40000
          // })
          //   .contains("saving...")
          //   .should("not.exist");
          cy.reload();
          cy.wait(15000);

          // cy.get(
          //   ".bx-artboard-Untitled > .view-render > .view-render"
          // ).then(elemRectAfter => {
          //   afterRect = Cypress.dom.getElementCoordinatesByPosition(
          //     elemRectAfter
          //   );
          //   roundOffDomPositionElement(afterRect);
          //   roundOffDomPositionElement(beforeRect);
          //   expect(afterRect).to.deep.equal(beforeRect);
          // });

          cy.get(".bx-artboard-Untitled > .view-render > svg > ellipse").then(
            elemEllipAfter => {
              afterEllip = Cypress.dom.getElementCoordinatesByPosition(
                elemEllipAfter
              );
              roundOffDomPositionElement(afterEllip);
              roundOffDomPositionElement(beforeEllip);
              console.log(afterEllip, "afterEllip");
              console.log(beforeEllip, "beforeEllip");

              expect(afterEllip).to.deep.equal(beforeEllip);
            }
          );
        }
      );
      // }
      // );
    });

    it("Can Rename the project to Random", function() {
      cy.get("[data-tip='Project Name']").dblclick("center");
      projName = makeRandomName(10);
      cy.get(".modalContentX input.inputGroupInputX").type(projName);
      cy.get(".modalContentX div.textX")
        .contains("Confirm")
        .click("center");
      projName = upperFirst(camelCase(projName));
      cy.get("div.textX")
        .contains(projName)
        .should("exist");

      cy.get("body").type("{command}S");
      cy.wait(10000);
      //   cy.get("div", {
      //     timeout: 5000
      //   })
      //     .contains("saving..."
      //     .should("exist");

      //   cy.get("div", {
      //     timeout: 20000
      //   })
      //     .contains("saving...")
      //     .should("not.exist");
    });

    it("can open the dashboard", function() {
      if (env != "production") {
        this.skip();
      }

      cy.get("[data-cypress-id=profileMenu]").click("center");
      cy.contains("Dashboard").click("center", { force: true });

      //To be removed
      cy.visit("https://pre-cloud.builderx.io/dashboard");
      cy.wait(2000);
      //Till here

      cy.url().should("include", "https://pre-cloud.builderx.io/dashboard");

      cy.contains(projName)
        .should("exist")
        .click("center", { force: true });
      cy.wait(10000);
      cy.get("div.textX")
        .contains(projName)
        .should("exist");
    });

    // it("Artboard should be same as left before", function() {
    //   // cy.url().should("eq", projURL);

    //   // cy.get(".bx-artboard-Untitled > .view-render > .view-render").then(
    //   //   elemRectAfter => {
    //   //     afterRect = Cypress.dom.getElementCoordinatesByPosition(
    //   //       elemRectAfter
    //   //     );
    //   //     roundOffDomPositionElement(afterRect);
    //   //     roundOffDomPositionElement(beforeRect);
    //   //     expect(afterRect).to.deep.equal(beforeRect);
    //   //   }
    //   // );
    //   cy.wait(1000);
    //   cy.get(".bx-artboard-Untitled > .view-render > svg > ellipse").then(
    //     elemEllipAfter => {
    //       afterEllip = Cypress.dom.getElementCoordinatesByPosition(
    //         elemEllipAfter
    //       );
    //       roundOffDomPositionElement(afterEllip);
    //       roundOffDomPositionElement(beforeEllip);
    //       expect(afterEllip).to.deep.equal(beforeEllip);
    //     }
    //   );
    // });

    it("can logout from the project", function() {
      if (env != "production") {
        this.skip();
      }
      // cy.get("[data-cypress-id=profileMenu]").click("center");

      // cy.contains("Logout").click("center");

      cy.visit("https://pre-cloud.builderx.io/logout");

      cy.url().should("include", "https://pre-cloud.builderx.io/login");
      cy.wait(2000);
      cy.visit(projURL);
    });
  });
}
