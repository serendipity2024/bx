import selectTool from "./actions/selectTool";
import drawShape from "./actions/drawShape";

import deleteShapeSelecter from "./actions/deleteShape";
//import { selectShapeByDblClick } from "./actions/selectShape";
import { resize } from "./actions/resize";

import { getOffsetsOf } from "./actions/sharedFuncs";
import { selectShape } from "./actions/selectShape";
import { scrollToArtboard } from "./actions/scroll";

export default function resizeTypeTests() {
  context("Rigorous test resizeType", () => {
    const posArray = ["tl", "tc", "tr", "cr", "br", "bc", "bl", "cl"];
    beforeEach(function() {
      Cypress.Cookies.preserveOnce("access-token");
      scrollToArtboard(".bx-artboard-Untitled");
      scrollToArtboard(".bx-artboard-Untitled");
    });

    // it("can draw a Rectangle that will be parent", function() {
    //   selectTool("rectangle");
    //   drawShape(undefined, 200, 200);
    // });

    it("can draw a Rectangle that will be a child", function() {
      selectTool("rectangle");
      drawShape(undefined, 100, 100, 120, 150);
    });

    it("can create a parent container group", function() {
      cy.get(".textX")
        .contains(/^Group$/)
        .click("center");
    });

    it("can open the layers panel", function() {
      cy.get(".textX")
        .contains("Untitled.js")
        .click("center");
      cy.get("div.layerX").should("be.visible");

      // cy.get(".layerX > .layerChildrenX > .layerX > div").should(
      //   "have.length",
      //   2
      // );
    });

    it("can change size of parent from all resizers and offset from top and left should be same", function() {
      getOffsetsOf(
        ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
        ".bx-artboard-Untitled > .view-render > .view-render",
        offsetBeforeIncrease => {
          for (let pos in posArray) {
            resize(
              ".bx-artboard-Untitled > .view-render > .view-render",
              posArray[pos],
              100,
              100
            );
            getOffsetsOf(
              ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
              ".bx-artboard-Untitled > .view-render > .view-render",
              offsetAfterIncrease => {
                expect(offsetAfterIncrease.left).to.equal(
                  offsetBeforeIncrease.left
                );
                expect(offsetAfterIncrease.top).to.equal(
                  offsetBeforeIncrease.top
                );
                resize(
                  ".bx-artboard-Untitled > .view-render > .view-render",
                  posArray[pos],
                  -100,
                  -100
                );
                getOffsetsOf(
                  ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
                  ".bx-artboard-Untitled > .view-render > .view-render",
                  offsetAfterDecrease => {
                    expect(offsetAfterDecrease.left).to.equal(
                      offsetBeforeIncrease.left
                    );
                    expect(offsetAfterDecrease.top).to.equal(
                      offsetBeforeIncrease.top
                    );
                  }
                );
              }
            );
          }
        }
      );
    });

    it("can select child layer and resizer type top and select parent layer", function() {
      cy.get(".textX")
        .contains(/^Rect$/)
        .click("center");
      selectShape(".resizingButtonX.posL");
      cy.get(".vertical.Pane1 .layerX .textX")
        .contains(/^Group$/)
        .click("center");
    });

    it("can change size of parent from all resizers and offset from top should be same", function() {
      getOffsetsOf(
        ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
        ".bx-artboard-Untitled > .view-render > .view-render",
        offsetBeforeIncrease1 => {
          for (let pos2 in posArray) {
            resize(
              ".bx-artboard-Untitled > .view-render > .view-render",
              posArray[pos2],
              100,
              100
            );
            getOffsetsOf(
              ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
              ".bx-artboard-Untitled > .view-render > .view-render",
              offsetAfterIncrease1 => {
                expect(offsetAfterIncrease1.top).to.equal(
                  offsetBeforeIncrease1.top
                );
                resize(
                  ".bx-artboard-Untitled > .view-render > .view-render",
                  posArray[pos2],
                  -100,
                  -100
                );
                getOffsetsOf(
                  ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
                  ".bx-artboard-Untitled > .view-render > .view-render",
                  offsetAfterDecrease1 => {
                    expect(offsetAfterDecrease1.top).to.equal(
                      offsetBeforeIncrease1.top
                    );
                  }
                );
              }
            );
          }
        }
      );
    });

    it("can select child layer and resizer type top-right and select parent layer", function() {
      cy.get(".textX")
        .contains(/^Rect$/)
        .click("center");
      selectShape(".resizingButtonX.posR");
      cy.get(".vertical.Pane1 .layerX .textX")
        .contains(/^Group$/)
        .click("center");
    });

    it("can change size of parent from all resizers and offset from top and right should be same", function() {
      getOffsetsOf(
        ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
        ".bx-artboard-Untitled > .view-render > .view-render",
        offsetBeforeIncrease => {
          for (let pos in posArray) {
            resize(
              ".bx-artboard-Untitled > .view-render > .view-render",
              posArray[pos],
              100,
              100
            );
            getOffsetsOf(
              ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
              ".bx-artboard-Untitled > .view-render > .view-render",
              offsetAfterIncrease => {
                expect(offsetAfterIncrease.right).to.equal(
                  offsetBeforeIncrease.right
                );
                expect(offsetAfterIncrease.top).to.equal(
                  offsetBeforeIncrease.top
                );
                resize(
                  ".bx-artboard-Untitled > .view-render > .view-render",
                  posArray[pos],
                  -100,
                  -100
                );
                getOffsetsOf(
                  ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
                  ".bx-artboard-Untitled > .view-render > .view-render",
                  offsetAfterDecrease => {
                    expect(offsetAfterDecrease.right).to.equal(
                      offsetBeforeIncrease.right
                    );
                    expect(offsetAfterDecrease.top).to.equal(
                      offsetBeforeIncrease.top
                    );
                  }
                );
              }
            );
          }
        }
      );
    });

    it("can select child layer and resizer type right and select parent layer", function() {
      cy.get(".textX")
        .contains(/^Rect$/)
        .click("center");
      selectShape(".resizingButtonX.posT");

      cy.get(".vertical.Pane1 .layerX .textX")
        .contains(/^Group$/)
        .click("center");
    });

    it("can change size from all resizers and offset from right should be same", function() {
      getOffsetsOf(
        ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
        ".bx-artboard-Untitled > .view-render > .view-render",
        offsetBeforeIncrease => {
          for (let pos in posArray) {
            resize(
              ".bx-artboard-Untitled > .view-render > .view-render",
              posArray[pos],
              100,
              100
            );
            getOffsetsOf(
              ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
              ".bx-artboard-Untitled > .view-render > .view-render",
              offsetAfterIncrease => {
                expect(offsetAfterIncrease.right).to.equal(
                  offsetBeforeIncrease.right
                );
                resize(
                  ".bx-artboard-Untitled > .view-render > .view-render",
                  posArray[pos],
                  -100,
                  -100
                );
                getOffsetsOf(
                  ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
                  ".bx-artboard-Untitled > .view-render > .view-render",
                  offsetAfterDecrease => {
                    expect(offsetAfterDecrease.right).to.equal(
                      offsetBeforeIncrease.right
                    );
                  }
                );
              }
            );
          }
        }
      );
    });

    it("can select child layer and resizer type bottom-right and select parent layer", function() {
      cy.get(".textX")
        .contains(/^Rect$/)
        .click("center");
      selectShape(".resizingButtonX.posD");

      cy.get(".vertical.Pane1 .layerX .textX")
        .contains(/^Group$/)
        .click("center");
    });

    it("can change size from all resizers and offset from bottom and right should be same", function() {
      getOffsetsOf(
        ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
        ".bx-artboard-Untitled > .view-render > .view-render",
        offsetBeforeIncrease => {
          for (let pos in posArray) {
            resize(
              ".bx-artboard-Untitled > .view-render > .view-render",
              posArray[pos],
              100,
              100
            );
            getOffsetsOf(
              ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
              ".bx-artboard-Untitled > .view-render > .view-render",
              offsetAfterIncrease => {
                expect(offsetAfterIncrease.right).to.equal(
                  offsetBeforeIncrease.right
                );
                expect(offsetAfterIncrease.bottom).to.equal(
                  offsetBeforeIncrease.bottom
                );
                resize(
                  ".bx-artboard-Untitled > .view-render > .view-render",
                  posArray[pos],
                  -100,
                  -100
                );
                getOffsetsOf(
                  ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
                  ".bx-artboard-Untitled > .view-render > .view-render",
                  offsetAfterDecrease => {
                    expect(offsetAfterDecrease.right).to.equal(
                      offsetBeforeIncrease.right
                    );
                    expect(offsetAfterDecrease.bottom).to.equal(
                      offsetBeforeIncrease.bottom
                    );
                  }
                );
              }
            );
          }
        }
      );
    });

    it("can select child layer and resizer type bottom and select parent layer", function() {
      cy.get(".textX")
        .contains(/^Rect$/)
        .click("center");
      selectShape(".resizingButtonX.posR");
      cy.get(".vertical.Pane1 .layerX .textX")
        .contains(/^Group$/)
        .click("center");
    });

    it("can change size from all resizers and offset from bottom should be same", function() {
      getOffsetsOf(
        ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
        ".bx-artboard-Untitled > .view-render > .view-render",
        offsetBeforeIncrease => {
          for (let pos in posArray) {
            resize(
              ".bx-artboard-Untitled > .view-render > .view-render",
              posArray[pos],
              100,
              100
            );
            getOffsetsOf(
              ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
              ".bx-artboard-Untitled > .view-render > .view-render",
              offsetAfterIncrease => {
                expect(offsetAfterIncrease.bottom).to.equal(
                  offsetBeforeIncrease.bottom
                );
                resize(
                  ".bx-artboard-Untitled > .view-render > .view-render",
                  posArray[pos],
                  -100,
                  -100
                );
                getOffsetsOf(
                  ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
                  ".bx-artboard-Untitled > .view-render > .view-render",
                  offsetAfterDecrease => {
                    expect(offsetAfterDecrease.bottom).to.equal(
                      offsetBeforeIncrease.bottom
                    );
                  }
                );
              }
            );
          }
        }
      );
    });

    it("can select child layer and resizer type bottom-left and select parent layer", function() {
      cy.get(".textX")
        .contains(/^Rect$/)
        .click("center");
      selectShape(".resizingButtonX.posL");

      cy.get(".vertical.Pane1 .layerX .textX")
        .contains(/^Group$/)
        .click("center");
    });

    it("can change size from all resizers and offset from bottom and left should be same", function() {
      getOffsetsOf(
        ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
        ".bx-artboard-Untitled > .view-render > .view-render",
        offsetBeforeIncrease => {
          for (let pos in posArray) {
            resize(
              ".bx-artboard-Untitled > .view-render > .view-render",
              posArray[pos],
              100,
              100
            );
            getOffsetsOf(
              ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
              ".bx-artboard-Untitled > .view-render > .view-render",
              offsetAfterIncrease => {
                expect(offsetAfterIncrease.left).to.equal(
                  offsetBeforeIncrease.left
                );
                expect(offsetAfterIncrease.bottom).to.equal(
                  offsetBeforeIncrease.bottom
                );
                resize(
                  ".bx-artboard-Untitled > .view-render > .view-render",
                  posArray[pos],
                  -100,
                  -100
                );
                getOffsetsOf(
                  ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
                  ".bx-artboard-Untitled > .view-render > .view-render",
                  offsetAfterDecrease => {
                    expect(offsetAfterDecrease.left).to.equal(
                      offsetBeforeIncrease.left
                    );
                    expect(offsetAfterDecrease.bottom).to.equal(
                      offsetBeforeIncrease.bottom
                    );
                  }
                );
              }
            );
          }
        }
      );
    });

    it("can select child layer and resizer type left and select parent layer", function() {
      cy.get(".textX")
        .contains(/^Rect$/)
        .click("center");
      selectShape(".resizingButtonX.posD");
      cy.get(".vertical.Pane1 .layerX .textX")
        .contains(/^Group$/)
        .click("center");
    });

    it("can change size from all resizers and offset from bottom and left should be same", function() {
      getOffsetsOf(
        ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
        ".bx-artboard-Untitled > .view-render > .view-render",
        offsetBeforeIncrease => {
          for (let pos in posArray) {
            resize(
              ".bx-artboard-Untitled > .view-render > .view-render",
              posArray[pos],
              100,
              100
            );
            getOffsetsOf(
              ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
              ".bx-artboard-Untitled > .view-render > .view-render",
              offsetAfterIncrease => {
                expect(offsetAfterIncrease.left).to.equal(
                  offsetBeforeIncrease.left
                );
                resize(
                  ".bx-artboard-Untitled > .view-render > .view-render",
                  posArray[pos],
                  -100,
                  -100
                );
                getOffsetsOf(
                  ".bx-artboard-Untitled > .view-render > .view-render >.view-render",
                  ".bx-artboard-Untitled > .view-render > .view-render",
                  offsetAfterDecrease => {
                    expect(offsetAfterDecrease.left).to.equal(
                      offsetBeforeIncrease.left
                    );
                  }
                );
              }
            );
          }
        }
      );
    });

    it("can delete the group", function() {
      cy.get(".bx-artboard-Untitled > .view-render > .view-render").should(
        "exist"
      );
      deleteShapeSelecter(".bx-artboard-Untitled > .view-render > div");
      cy.get(".bx-artboard-Untitled > .view-render > .view-render").should(
        "not.exist"
      );
    });

    // it("Can create Parent Child relation by dragging", function() {
    //   dragByStringContent(
    //     ".layerBodyX > .textX",
    //     /^Rect2$/,
    //     ".layerBodyX > .textX",
    //     /^Rect$/
    //   );
    // });
  });
}
