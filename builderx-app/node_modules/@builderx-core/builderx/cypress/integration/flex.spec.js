import selectTool from "./actions/selectTool";
import drawShape from "./actions/drawShape";

import deleteShapeSelecter from "./actions/deleteShape";
import { resize } from "./actions/resize";

import { getOffsetsOf } from "./actions/sharedFuncs";
import { selectShape } from "./actions/selectShape";

export default function flexTests() {
  context("Flex Tests", () => {
    var rectSelecter = ".bx-artboard-Untitled > .view-render > .view-render";
    var ellipSelecter = ".bx-artboard-Untitled > .view-render > svg";

    //Runs Verification tests After Increasing and decreasing size from all edges
    function runVerifyForAllSides(verify) {
      verify();
      selectShape("data-cypress-id=[file-header]");
      // cy.get(".file-header").click("center");
      resize(".bx-artboard-Untitled > .view-render", "tc", -50, -50);

      verify();

      resize(".bx-artboard-Untitled > .view-render", "tc", 50, 50);

      verify();

      resize(".bx-artboard-Untitled > .view-render", "bc", -50, -50);
      verify();

      resize(".bx-artboard-Untitled > .view-render", "bc", 50, 50);

      verify();

      resize(".bx-artboard-Untitled > .view-render", "cl", 100, 100);

      verify();

      resize(".bx-artboard-Untitled > .view-render", "cl", -100, -100);

      verify();

      resize(".bx-artboard-Untitled > .view-render", "cr", 100, 100);

      verify();

      resize(".bx-artboard-Untitled > .view-render", "cr", -100, -100);

      verify();
    }

    context("Horizontal", () => {
      beforeEach(function() {
        Cypress.Cookies.preserveOnce("access-token");
      });

      it("can draw a Rectangle", function() {
        cy.get(rectSelecter).should("not.exist");
        selectTool("rectangle");
        drawShape(undefined, 100, 100, 70, 30);
        cy.get(rectSelecter).should("exist");
      });

      it("can draw an Ellipse", function() {
        cy.get(ellipSelecter).should("not.exist");
        selectTool("ellipse");
        drawShape(undefined, 100, 100, 120, 150);
        cy.get(ellipSelecter).should("exist");
        cy.get(".bx-artboard-Untitled > .view-render").then(elem => {
          var elemPos = Cypress.dom.getElementCoordinatesByPosition(elem);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
          cy.wait(200);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
        });
      });

      it("will select Horizontal flex and justify-space-between and align-flex-start-button by default", function() {
        cy.get("button[data-cypress-id=horizontal-flex-button]").click(
          "center",
          { force: true }
        );

        function verify() {
          getOffsetsOf(
            rectSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofrect => {
              expect(parseInt(offsetofrect.top)).to.equal(0);
              expect(parseInt(offsetofrect.left)).to.equal(0);
            }
          );

          getOffsetsOf(
            ellipSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofEllip => {
              expect(parseInt(offsetofEllip.top)).to.equal(0);
              expect(parseInt(offsetofEllip.right)).to.equal(0);
            }
          );
        }

        runVerifyForAllSides(verify);

        cy.get(".bx-artboard-Untitled > .view-render").then(elem => {
          var elemPos = Cypress.dom.getElementCoordinatesByPosition(elem);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
          cy.wait(200);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
        });
      });

      it("Will align Layers to the left i.e. flex-start", function() {
        cy.get(
          "button[data-cypress-id=horizontal-justify-flex-start-button]"
        ).click("center", { force: true });

        function verify() {
          getOffsetsOf(
            rectSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofrect => {
              expect(parseInt(offsetofrect.left)).to.equal(0);
              expect(parseInt(offsetofrect.top)).to.equal(0);
              getOffsetsOf(
                ellipSelecter,
                ".bx-artboard-Untitled > .view-render",
                offsetofEllip => {
                  expect(parseInt(offsetofEllip.left)).to.equal(
                    Math.round(offsetofrect.left + offsetofrect.selfWidth)
                  );
                  expect(parseInt(offsetofEllip.top)).to.equal(0);
                }
              );
            }
          );
        }

        runVerifyForAllSides(verify);

        cy.get(".bx-artboard-Untitled > .view-render").then(elem => {
          var elemPos = Cypress.dom.getElementCoordinatesByPosition(elem);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
          cy.wait(200);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
        });
      });

      it("Will align Layers to the center i.e. justify-center", function() {
        cy.get(
          "button[data-cypress-id=horizontal-justify-center-button]"
        ).click("center", { force: true });

        function verify() {
          getOffsetsOf(
            rectSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofrect => {
              console.log(offsetofrect, "justi");
              console.log(
                Math.round(offsetofrect.left + offsetofrect.selfWidth),
                "rounded "
              );
              getOffsetsOf(
                ellipSelecter,
                ".bx-artboard-Untitled > .view-render",
                offsetofEllip => {
                  expect(parseInt(offsetofEllip.left)).to.equal(
                    Math.round(offsetofrect.left + offsetofrect.selfWidth)
                  );
                  expect(offsetofrect.left).to.equal(offsetofEllip.right);
                }
              );
            }
          );
        }

        runVerifyForAllSides(verify);

        cy.get(".bx-artboard-Untitled > .view-render").then(elem => {
          var elemPos = Cypress.dom.getElementCoordinatesByPosition(elem);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
          cy.wait(200);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
        });
      });

      it("Will align Layers to the right i.e. flex-end", function() {
        cy.get(
          "button[data-cypress-id=horizontal-justify-flex-end-button]"
        ).click("center", { force: true });

        function verify() {
          getOffsetsOf(
            ellipSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofEllip => {
              expect(parseInt(offsetofEllip.right)).to.equal(0);
              getOffsetsOf(
                rectSelecter,
                ".bx-artboard-Untitled > .view-render",
                offsetofrect => {
                  expect(parseInt(offsetofrect.right)).to.equal(
                    Math.round(offsetofEllip.right + offsetofEllip.selfWidth)
                  );
                }
              );
            }
          );
        }

        runVerifyForAllSides(verify);

        cy.get(".bx-artboard-Untitled > .view-render").then(elem => {
          var elemPos = Cypress.dom.getElementCoordinatesByPosition(elem);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
          cy.wait(200);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
        });
      });

      it("Will distribute Layers with space around i.e. space-around", function() {
        cy.get(
          "button[data-cypress-id=horizontal-justify-space-around-button]"
        ).click("center", { force: true });

        function verify() {
          getOffsetsOf(
            ellipSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofEllip => {
              getOffsetsOf(
                rectSelecter,
                ".bx-artboard-Untitled > .view-render",
                offsetofrect => {
                  expect(parseInt(offsetofrect.left)).to.equal(
                    offsetofEllip.right
                  );
                  expect(Math.round(offsetofrect.left * 2)).to.equal(
                    Math.round(
                      offsetofEllip.left -
                        (offsetofrect.left + offsetofrect.selfWidth)
                    )
                  );
                }
              );
            }
          );
        }

        runVerifyForAllSides(verify);

        cy.get(".bx-artboard-Untitled > .view-render").then(elem => {
          var elemPos = Cypress.dom.getElementCoordinatesByPosition(elem);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
          cy.wait(200);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
        });
      });

      it("Will align Layers to vertically center i.e. align-center", function() {
        cy.get("button[data-cypress-id=horizontal-align-center-button]").click(
          "center",
          {
            force: true
          }
        );

        function verify() {
          getOffsetsOf(
            ellipSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofEllip => {
              getOffsetsOf(
                rectSelecter,
                ".bx-artboard-Untitled > .view-render",
                offsetofrect => {
                  expect(parseInt(offsetofrect.left)).to.equal(
                    offsetofEllip.right
                  );
                  expect(Math.round(offsetofrect.left * 2)).to.equal(
                    Math.round(
                      offsetofEllip.left -
                        (offsetofrect.left + offsetofrect.selfWidth)
                    )
                  );
                  expect(offsetofrect.top).to.equal(offsetofrect.bottom);
                  expect(offsetofEllip.top).to.equal(offsetofEllip.bottom);
                }
              );
            }
          );
        }

        runVerifyForAllSides(verify);

        cy.get(".bx-artboard-Untitled > .view-render").then(elem => {
          var elemPos = Cypress.dom.getElementCoordinatesByPosition(elem);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.top + 20
          );
          cy.wait(200);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.top + 20
          );
        });
      });

      it("will align contents to bottom and align-flex-end ", function() {
        cy.get(
          "button[data-cypress-id=horizontal-align-flex-end-button]"
        ).click("center", { force: true });

        function verify() {
          getOffsetsOf(
            ellipSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofEllip => {
              getOffsetsOf(
                rectSelecter,
                ".bx-artboard-Untitled > .view-render",
                offsetofrect => {
                  expect(parseInt(offsetofrect.left)).to.equal(
                    offsetofEllip.right
                  );
                  expect(Math.round(offsetofrect.left * 2)).to.equal(
                    Math.round(
                      offsetofEllip.left -
                        (offsetofrect.left + offsetofrect.selfWidth)
                    )
                  );
                  expect(offsetofrect.bottom).to.equal(0);
                  expect(offsetofEllip.bottom).to.equal(0);
                }
              );
            }
          );
        }

        runVerifyForAllSides(verify);

        cy.get(".bx-artboard-Untitled > .view-render").then(elem => {
          var elemPos = Cypress.dom.getElementCoordinatesByPosition(elem);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
          cy.wait(200);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
        });
      });

      it("will align contents to baseline", function() {
        cy.get(
          "button[data-cypress-id=horizontal-align-baseline-button]"
        ).click("center", { force: true });

        function verify() {
          getOffsetsOf(
            ellipSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofEllip => {
              getOffsetsOf(
                rectSelecter,
                ".bx-artboard-Untitled > .view-render",
                offsetofrect => {
                  expect(parseInt(offsetofrect.left)).to.equal(
                    offsetofEllip.right
                  );
                  expect(Math.round(offsetofrect.left * 2)).to.equal(
                    Math.round(
                      offsetofEllip.left -
                        (offsetofrect.left + offsetofrect.selfWidth)
                    )
                  );
                  expect(offsetofrect.bottom).to.equal(offsetofEllip.bottom);
                }
              );
            }
          );
        }

        runVerifyForAllSides(verify);

        cy.get(".bx-artboard-Untitled > .view-render").then(elem => {
          var elemPos = Cypress.dom.getElementCoordinatesByPosition(elem);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
          cy.wait(200);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
        });
      });
    });

    context("Vertical", () => {
      beforeEach(function() {
        Cypress.Cookies.preserveOnce("access-token");
      });

      it("will select Veritcal flex and align-space-between and distribute to vertical baseline by default", function() {
        cy.get("button[data-cypress-id=vertical-flex-button]").click("center", {
          force: true
        });

        function verify() {
          getOffsetsOf(
            rectSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofrect => {
              expect(parseInt(offsetofrect.top)).to.equal(0);
              expect(parseInt(offsetofrect.left)).to.equal(0);
            }
          );

          getOffsetsOf(
            ellipSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofEllip => {
              expect(parseInt(offsetofEllip.bottom)).to.equal(0);
              expect(parseInt(offsetofEllip.left)).to.equal(0);
            }
          );
        }

        runVerifyForAllSides(verify);

        cy.get(".bx-artboard-Untitled > .view-render").then(elem => {
          var elemPos = Cypress.dom.getElementCoordinatesByPosition(elem);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
          cy.wait(200);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
        });
      });

      it("will align layers to top i.e. justify-flex-start by default", function() {
        cy.get(
          "button[data-cypress-id=vertical-justify-flex-start-button]"
        ).click("center", {
          force: true
        });

        function verify() {
          getOffsetsOf(
            rectSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofrect => {
              expect(parseInt(offsetofrect.top)).to.equal(0);
              expect(parseInt(offsetofrect.left)).to.equal(0);

              getOffsetsOf(
                ellipSelecter,
                ".bx-artboard-Untitled > .view-render",
                offsetofEllip => {
                  expect(parseInt(offsetofEllip.top)).to.equal(
                    Math.round(offsetofrect.top + offsetofrect.selfHeight)
                  );
                  expect(parseInt(offsetofEllip.left)).to.equal(0);
                }
              );
            }
          );
        }

        runVerifyForAllSides(verify);

        cy.get(".bx-artboard-Untitled > .view-render").then(elem => {
          var elemPos = Cypress.dom.getElementCoordinatesByPosition(elem);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
          cy.wait(200);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
        });
      });

      it("Will align Layers to the center i.e. justicy-center", function() {
        cy.get("button[data-cypress-id=vertical-justify-center-button]").click(
          "center",
          {
            force: true
          }
        );

        function verify() {
          getOffsetsOf(
            rectSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofrect => {
              getOffsetsOf(
                ellipSelecter,
                ".bx-artboard-Untitled > .view-render",
                offsetofEllip => {
                  expect(parseInt(offsetofEllip.top)).to.equal(
                    Math.round(offsetofrect.top + offsetofrect.selfHeight)
                  );
                  expect(offsetofrect.top).to.equal(offsetofEllip.bottom);
                  expect(offsetofrect.left).to.equal(0);
                  expect(offsetofEllip.left).to.equal(0);
                }
              );
            }
          );
        }

        runVerifyForAllSides(verify);

        cy.get(".bx-artboard-Untitled > .view-render").then(elem => {
          var elemPos = Cypress.dom.getElementCoordinatesByPosition(elem);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
          cy.wait(200);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
        });
      });

      it("Will align Layers to the bottom i.e. justify-flex-end", function() {
        cy.get(
          "button[data-cypress-id=vertical-justify-flex-end-button]"
        ).click("center", { force: true });

        function verify() {
          getOffsetsOf(
            ellipSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofEllip => {
              expect(parseInt(offsetofEllip.left)).to.equal(0);
              expect(parseInt(offsetofEllip.bottom)).to.equal(0);
              getOffsetsOf(
                rectSelecter,
                ".bx-artboard-Untitled > .view-render",
                offsetofrect => {
                  expect(parseInt(offsetofrect.bottom)).to.equal(
                    Math.round(offsetofEllip.bottom + offsetofEllip.selfHeight)
                  );
                  expect(offsetofrect.left).to.equal(0);
                }
              );
            }
          );
        }

        runVerifyForAllSides(verify);

        cy.get(".bx-artboard-Untitled > .view-render").then(elem => {
          var elemPos = Cypress.dom.getElementCoordinatesByPosition(elem);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
          cy.wait(200);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
        });
      });

      it("Will distribute Layers vertically with space around i.e. justify-space-around", function() {
        cy.get(
          "button[data-cypress-id=vertical-justify-space-around-button]"
        ).click("center", { force: true });

        function verify() {
          getOffsetsOf(
            ellipSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofEllip => {
              getOffsetsOf(
                rectSelecter,
                ".bx-artboard-Untitled > .view-render",
                offsetofrect => {
                  expect(parseInt(offsetofrect.top)).to.equal(
                    offsetofEllip.bottom
                  );
                  expect(Math.round(offsetofrect.top * 2)).to.equal(
                    Math.round(
                      offsetofEllip.top -
                        (offsetofrect.top + offsetofrect.selfHeight)
                    )
                  );
                  expect(offsetofrect.left).to.equal(0);
                  expect(offsetofEllip.left).to.equal(0);
                }
              );
            }
          );
        }

        runVerifyForAllSides(verify);

        cy.get(".bx-artboard-Untitled > .view-render").then(elem => {
          var elemPos = Cypress.dom.getElementCoordinatesByPosition(elem);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
          cy.wait(200);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
        });
      });

      it("will align layers to left ie. align-flex-start", function() {
        cy.get(
          "button[data-cypress-id=vertical-align-flex-start-button]"
        ).click("center", {
          force: true
        });

        function verify() {
          getOffsetsOf(
            rectSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofrect => {
              expect(parseInt(offsetofrect.left)).to.equal(0);
              getOffsetsOf(
                ellipSelecter,
                ".bx-artboard-Untitled > .view-render",
                offsetofEllip => {
                  expect(parseInt(offsetofEllip.left)).to.equal(0);
                  expect(parseInt(offsetofrect.top)).to.equal(
                    offsetofEllip.bottom
                  );
                  expect(Math.round(offsetofrect.top * 2)).to.equal(
                    Math.round(
                      offsetofEllip.top -
                        (offsetofrect.top + offsetofrect.selfHeight)
                    )
                  );
                }
              );
            }
          );
        }

        runVerifyForAllSides(verify);

        cy.get(".bx-artboard-Untitled > .view-render").then(elem => {
          var elemPos = Cypress.dom.getElementCoordinatesByPosition(elem);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
          cy.wait(200);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter + 20
          );
        });
      });

      it("Will align Layers to horizontally center i.e. align-center", function() {
        cy.get("button[data-cypress-id=vertical-align-center-button]").click(
          "center",
          {
            force: true
          }
        );

        function verify() {
          getOffsetsOf(
            ellipSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofEllip => {
              getOffsetsOf(
                rectSelecter,
                ".bx-artboard-Untitled > .view-render",
                offsetofrect => {
                  expect(parseInt(offsetofrect.top)).to.equal(
                    offsetofEllip.bottom
                  );
                  expect(Math.round(offsetofrect.top * 2)).to.equal(
                    Math.round(
                      offsetofEllip.top -
                        (offsetofrect.top + offsetofrect.selfHeight)
                    )
                  );
                  expect(offsetofrect.left).to.equal(offsetofrect.right);
                  expect(offsetofEllip.left).to.equal(offsetofEllip.right);
                }
              );
            }
          );
        }
        runVerifyForAllSides(verify);

        cy.get(".bx-artboard-Untitled > .view-render").then(elem => {
          var elemPos = Cypress.dom.getElementCoordinatesByPosition(elem);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter
          );
          cy.wait(200);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter
          );
        });
      });

      it("will align contents to Right and align-flex-end ", function() {
        cy.get("button[data-cypress-id=vertical-align-flex-end-button]").click(
          "center",
          { force: true }
        );

        function verify() {
          getOffsetsOf(
            ellipSelecter,
            ".bx-artboard-Untitled > .view-render",
            offsetofEllip => {
              getOffsetsOf(
                rectSelecter,
                ".bx-artboard-Untitled > .view-render",
                offsetofrect => {
                  expect(parseInt(offsetofrect.top)).to.equal(
                    offsetofEllip.bottom
                  );
                  expect(Math.round(offsetofrect.top * 2)).to.equal(
                    Math.round(
                      offsetofEllip.top -
                        (offsetofrect.top + offsetofrect.selfHeight)
                    )
                  );
                  expect(offsetofrect.rigth).to.equal(0);
                  expect(offsetofEllip.right).to.equal(0);
                }
              );
            }
          );
        }

        runVerifyForAllSides(verify);

        cy.get(".bx-artboard-Untitled > .view-render").then(elem => {
          var elemPos = Cypress.dom.getElementCoordinatesByPosition(elem);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter
          );
          cy.wait(200);
          cy.get("body").click(
            elemPos.fromViewport.leftCenter,
            elemPos.fromViewport.topCenter
          );
        });
      });
    });
  });
}
