export function resize(selecter, pos, widthVar, heightVar) {
  var valid = ["tl", "tc", "tr", "cr", "br", "bc", "bl", "cl"];
  try {
    if (!valid.includes(pos)) {
      throw "Invalid resize handler:" +
        pos +
        " position can be (tl,tc,tr,cl,cr,bl,bc,br)";
    }
    cy.get(selecter).then(elem => {
      var cords = Cypress.dom.getElementCoordinatesByPosition(elem)
        .fromViewport;
      console.log(cords);
      var start = {};
      var end = {};
      var ver = pos[0];
      var hor = pos[1];

      switch (ver) {
        case "t":
          start.y = cords.top;
          end.y = start.y - heightVar;
          break;
        case "c":
          start.y = cords.topCenter;
          end.y = start.y + heightVar;
          break;
        case "b":
          start.y = cords.bottom;
          end.y = start.y + heightVar;
          break;
        default:
          throw "Invalid resize handler:" +
            pos +
            " position can be (tl,tc,tr,cl,cr,bl,bc,br)";
      }

      switch (hor) {
        case "l":
          start.x = cords.left;
          end.x = start.x - widthVar;
          break;
        case "c":
          start.x = cords.leftCenter;
          end.x = start.x + widthVar;
          break;
        case "r":
          start.x = cords.right;
          end.x = start.x + widthVar;
          break;
        default:
          throw "Invalid resize handler:" +
            pos +
            " position can be (tl,tc,tr,cl,cr,bl,bc,br)";
      }

      cy.get("body")
        .trigger("mousedown", start.x, start.y)
        .trigger("mousemove", start.x, start.y)
        .trigger("mousemove", (start.x + end.x) / 2, (start.y + end.y) / 2)
        .trigger("mousemove", end.x, end.y)
        .trigger("mouseup", end.x, end.y);
    });
  } catch (err) {
    console.log(err);
  }
}
