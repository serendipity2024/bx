'use strict';

var lodash = require('lodash');

var yoga =
/*#__PURE__*/
require('yoga-layout-prebuilt');

function updateNodePositionalAttributes(yogaNode, key, value) {
  if (!yogaNode) {
    return;
  }

  if (key === 'height') {
    if (value === undefined) {
      yogaNode.setHeightAuto();
    } else {
      yogaNode.setHeight(value);
    }
  } else if (key === 'width') {
    if (value === undefined) {
      yogaNode.setWidthAuto();
    } else {
      yogaNode.setWidth(value);
    }
  } else if (key === 'fontSize') ; else if (key === 'left') {
    if (value === undefined) {
      value = NaN;
    }

    yogaNode.setPosition(yoga.EDGE_LEFT, value);
  } else if (key === 'right') {
    if (value === undefined) {
      value = NaN;
    }

    yogaNode.setPosition(yoga.EDGE_RIGHT, value);
  } else if (key === 'top') {
    if (value === undefined) {
      value = NaN;
    }

    yogaNode.setPosition(yoga.EDGE_TOP, value);
  } else if (key === 'bottom') {
    if (value === undefined) {
      value = NaN;
    }

    yogaNode.setPosition(yoga.EDGE_BOTTOM, value);
  } else if (key === 'position' && value === 'absolute') {
    yogaNode.setPositionType(yoga.POSITION_TYPE_ABSOLUTE);
  } else if (key === 'position' && value === undefined) {
    yogaNode.setPositionType(undefined);
  } else if (key === 'flex') {
    yogaNode.setFlexGrow(value);
    yogaNode.setFlexShrink(value); // yogaNode.setFlexBasis("auto");

    yogaNode.setFlex(value);
  } else if (key === 'alignContent') {
    setAlignProperties(yogaNode, key, value);
  } else if (key === 'alignItems') {
    setAlignProperties(yogaNode, key, value);
  } else if (key === 'alignSelf') {
    setAlignProperties(yogaNode, key, value);
  } else if (key === 'display') {
    yogaNode.setDisplay(value);
  } else if (key === 'flexBasis') {
    yogaNode.setFlexBasis(value);
  } else if (key === 'flexDirection') {
    setFlexDirection(yogaNode, value);
  } else if (key === 'flexGrow') {
    yogaNode.setFlexGrow(value);
  } else if (key === 'flexShrink') {
    yogaNode.setFlexShrink(value);
  } else if (key === 'flexWrap') {
    setFlexWrap(yogaNode, value);
  } else if (key === 'justifyContent') {
    setJustifyContent(yogaNode, value);
  } else if (key === 'maxHeight') {
    if (value === undefined) {
      value = NaN;
    }

    yogaNode.setMaxHeight(value);
  } else if (key === 'maxWidth') {
    if (value === undefined) {
      value = NaN;
    }

    yogaNode.setMaxWidth(value);
  } else if (key === 'minHeight') {
    if (value === undefined) {
      value = NaN;
    }

    yogaNode.setMinHeight(value);
  } else if (key === 'minWidth') {
    if (value === undefined) {
      value = NaN;
    }

    yogaNode.setMinWidth(value);
  } else if (key === 'maxHeight') {
    if (value === undefined) {
      value = NaN;
    }

    yogaNode.setMaxHeight(value);
  } else if (key === 'maxHeight') {
    if (value === undefined) {
      value = NaN;
    }

    yogaNode.setMaxHeight(value);
  } else if (key.indexOf('padding') !== -1 || key.indexOf('border') !== -1 || key.indexOf('margin') !== -1) {
    setBoxModelProperties(yogaNode, key, value);
  } else if (key === 'overflow') {
    setOverflow(yogaNode, value);
  }
} // for margin, padding & border

function setBoxModelProperties(yogaNode, key, value) {
  if (lodash.isNil(value)) {
    value = NaN;
  }

  var yogaEdge = yoga.EDGE_ALL;

  if (key.indexOf('Left') !== -1) {
    yogaEdge = yoga.EDGE_LEFT;
  } else if (key.indexOf('Right') !== -1) {
    yogaEdge = yoga.EDGE_RIGHT;
  } else if (key.indexOf('Top') !== -1) {
    yogaEdge = yoga.EDGE_TOP;
  } else if (key.indexOf('Bottom') !== -1) {
    yogaEdge = yoga.EDGE_BOTTOM;
  } else if (key.indexOf('Horizontal') !== -1) {
    yogaEdge = [yoga.EDGE_LEFT, yoga.EDGE_RIGHT];
  } else if (key.indexOf('Vertical') !== -1) {
    yogaEdge = [yoga.EDGE_TOP, yoga.EDGE_BOTTOM];
  }

  if (key.indexOf('padding') !== -1) {
    if (lodash.isArray(yogaEdge)) {
      yogaEdge.forEach(function (edge) {
        yogaNode.setPadding(edge, value / 2);
      });
    } else {
      yogaNode.setPadding(yogaEdge, value);
    }
  } else if (key.indexOf('border') !== -1) {
    if (typeof value !== 'string') {
      if (lodash.isArray(yogaEdge)) {
        yogaEdge.forEach(function (edge) {
          yogaNode.setBorder(edge, value / 2);
        });
      } else {
        if (yogaEdge === yoga.EDGE_ALL) {
          var edges = [yoga.EDGE_LEFT, yoga.EDGE_RIGHT, yoga.EDGE_BOTTOM, yoga.EDGE_TOP];

          if (!lodash.isNil(yogaNode.props.style['borderLeftWidth']) || !lodash.isNil(yogaNode.props.style['borderHorizontalWidth'])) {
            edges.splice(edges.indexOf(yoga.EDGE_LEFT), 1);
          }

          if (!lodash.isNil(yogaNode.props.style['borderRightWidth']) || !lodash.isNil(yogaNode.props.style['borderHorizontalWidth'])) {
            edges.splice(edges.indexOf(yoga.EDGE_RIGHT), 1);
          }

          if (!lodash.isNil(yogaNode.props.style['borderTopWidth']) || !lodash.isNil(yogaNode.props.style['borderVerticalWidth'])) {
            edges.splice(edges.indexOf(yoga.EDGE_TOP), 1);
          }

          if (!lodash.isNil(yogaNode.props.style['borderBottomWidth']) || !lodash.isNil(yogaNode.props.style['borderVerticalWidth'])) {
            edges.splice(edges.indexOf(yoga.EDGE_BOTTOM), 1);
          }

          edges.forEach(function (edge) {
            yogaNode.setBorder(edge, value);
          });
        } else {
          yogaNode.setBorder(yogaEdge, value);
        }
      }
    }
  } else if (key.indexOf('margin') !== -1) {
    if (typeof value === 'string' && value.indexOf('auto') !== -1) {
      yogaNode.setMarginAuto(yogaEdge);
    } else {
      if (lodash.isArray(yogaEdge)) {
        yogaEdge.forEach(function (edge) {
          yogaNode.setMargin(edge, value / 2);
        });
      } else {
        yogaNode.setMargin(yogaEdge, value);
      }
    }
  }
}

function setOverflow(yogaNode, value) {
  if (value === 'hidden') {
    yogaNode.setOverflow(yoga.OVERFLOW_HIDDEN);
  } else if (value === 'visible') {
    yogaNode.setOverflow(yoga.OVERFLOW_SCROLL);
  } else if (value === 'scroll') {
    yogaNode.setOverflow(yoga.OVERFLOW_VISIBLE);
  }
}

function setFlexDirection(yogaNode, value) {
  if (value === 'column') {
    yogaNode.setFlexDirection(yoga.FLEX_DIRECTION_COLUMN);
  } else if (value === 'column-reverse') {
    yogaNode.setFlexDirection(yoga.FLEX_DIRECTION_COLUMN_REVERSE);
  } else if (value === 'row') {
    yogaNode.setFlexDirection(yoga.FLEX_DIRECTION_ROW);
  } else if (value === 'row-reverse') {
    yogaNode.setFlexDirection(yoga.FLEX_DIRECTION_ROW_REVERSE);
  }
}

function setAlignProperties(yogaNode, key, value) {
  var alignProperty = yoga.ALIGN_AUTO;

  if (value === 'baseline') {
    alignProperty = yoga.ALIGN_BASELINE;
  } else if (value === 'center') {
    alignProperty = yoga.ALIGN_CENTER;
  } else if (value === 'flex-end') {
    alignProperty = yoga.ALIGN_FLEX_END;
  } else if (value === 'flex-start') {
    alignProperty = yoga.ALIGN_FLEX_START;
  } else if (value === 'stretch') {
    alignProperty = yoga.ALIGN_STRETCH;
  } else if (value === 'space-around') {
    alignProperty = yoga.ALIGN_SPACE_AROUND;
  } else if (value === 'space-between') {
    alignProperty = yoga.ALIGN_SPACE_BETWEEN;
  } else if (value === undefined) {
    alignProperty = undefined;
  }

  if (key === 'alignItems') {
    yogaNode.setAlignItems(alignProperty);
  } else if (key === 'alignContent') {
    yogaNode.setAlignContent(alignProperty);
  } else if (key === 'alignSelf') {
    yogaNode.setAlignSelf(alignProperty);
  }
}

function setFlexWrap(yogaNode, value) {
  if (value === 'wrap') {
    yogaNode.setFlexWrap(yoga.WRAP_WRAP);
  } else if (value === 'nowrap') {
    yogaNode.setFlexWrap(yoga.WRAP_NO_WRAP);
  } else if (value === 'wrap-reverse') {
    yogaNode.setFlexWrap(yoga.WRAP_WRAP_REVERSE);
  }
}

function setJustifyContent(yogaNode, value) {
  if (value === 'center') {
    yogaNode.setJustifyContent(yoga.JUSTIFY_CENTER);
  } else if (value === 'flex-end') {
    yogaNode.setJustifyContent(yoga.JUSTIFY_FLEX_END);
  } else if (value === 'flex-start') {
    yogaNode.setJustifyContent(yoga.JUSTIFY_FLEX_START);
  } else if (value === 'space-around') {
    yogaNode.setJustifyContent(yoga.JUSTIFY_SPACE_AROUND);
  } else if (value === 'space-between') {
    yogaNode.setJustifyContent(yoga.JUSTIFY_SPACE_BETWEEN);
  } else if (value === 'space-evenly') {
    yogaNode.setJustifyContent(yoga.JUSTIFY_SPACE_EVENLY);
  }
}

var AntDesign =
/*#__PURE__*/
require('react-native-vector-icons/glyphmaps/AntDesign.json');

var Entypo =
/*#__PURE__*/
require('react-native-vector-icons/glyphmaps/Entypo.json');

var EvilIcons =
/*#__PURE__*/
require('react-native-vector-icons/glyphmaps/EvilIcons.json');

var Feather =
/*#__PURE__*/
require('react-native-vector-icons/glyphmaps/Feather.json');

var FontAwesome =
/*#__PURE__*/
require('react-native-vector-icons/glyphmaps/FontAwesome.json'); // const FontAwesome5 = require("react-native-vector-icons/glyphmaps/FontAwesome5Free.json");


var Foundation =
/*#__PURE__*/
require('react-native-vector-icons/glyphmaps/Foundation.json');

var Ionicons =
/*#__PURE__*/
require('react-native-vector-icons/glyphmaps/Ionicons.json');

var MaterialCommunityIcons =
/*#__PURE__*/
require('react-native-vector-icons/glyphmaps/MaterialCommunityIcons.json');

var MaterialIcons =
/*#__PURE__*/
require('react-native-vector-icons/glyphmaps/MaterialIcons.json');

var Octicons =
/*#__PURE__*/
require('react-native-vector-icons/glyphmaps/Octicons.json');

var SimpleLineIcons =
/*#__PURE__*/
require('react-native-vector-icons/glyphmaps/SimpleLineIcons.json');

var Zocial =
/*#__PURE__*/
require('react-native-vector-icons/glyphmaps/Zocial.json');

var IconFamilies = {
  AntDesign: AntDesign,
  Entypo: Entypo,
  EvilIcons: EvilIcons,
  Feather: Feather,
  FontAwesome: FontAwesome,
  // FontAwesome5,
  Foundation: Foundation,
  Ionicons: Ionicons,
  MaterialCommunityIcons: MaterialCommunityIcons,
  MaterialIcons: MaterialIcons,
  SimpleLineIcons: SimpleLineIcons,
  Octicons: Octicons,
  Zocial: Zocial
};
function iconToText(props) {
  var text = props.name;
  var family1 = props.type ? props.type : 'MaterialCommunityIcons';
  var str = String.fromCharCode(IconFamilies[family1][text]);

  return {
    family: family1,
    text: str
  }; // return {
  //   family: "",
  //   text: "hai"
  // };
}

var yoga$1 =
/*#__PURE__*/
require('yoga-layout-prebuilt');

var _Node = yoga$1.Node,
    _Config = yoga$1.Config;

var NodeCreateInstanceX =
/*#__PURE__*/
function () {
  function NodeCreateInstanceX() {
    this.width = 0;
    this.height = 0;
    this.type = 'view';
    this.children = [];
  }

  var _proto = NodeCreateInstanceX.prototype;

  _proto.updateNode = function updateNode(style) {
    var _this = this;

    // check reset function
    this.reset(); // this.setHeightAuto();
    // this.setWidthAuto();
    // const nodeStyle: any = omitBy(style, isNil);
    // console.log(nodeStyle, "hello node w");

    var nodeStyle = lodash.pickBy(style, function (value) {
      return !lodash.isNil(value) && value !== '';
    });
    lodash.map(nodeStyle, function (value, key) {
      updateNodePositionalAttributes(_this, key, value);
    });
  };

  _proto.setType = function setType(type) {
    this.type = type;
  };

  _proto.getType = function getType() {
    return this.type;
  };

  _proto.setProps = function setProps(props) {
    return this.props = props;
  };

  _proto.setChildren = function setChildren(children) {
    return this.children = children;
  };

  _proto.getComputedLayout = function getComputedLayout() {
    var layout = this._original.getComputedLayout();

    return layout;
  };

  _proto.calculateLayout = function calculateLayout(width, height, direction) {
    var layout = this._original.calculateLayout(width, height, direction); // traverseNode(this, (child: any) => {
    //   if (child) {
    //     if (child.type === 'text' || child.type === 'icon') {
    //       let dims = { width: 0, height: 0 };
    //       if (child.isAutoWidth() || child.isAutoHeight()) {
    //         let text = child.children;
    //         if (child.type === 'icon') {
    //           text = iconToText(child.props).text;
    //         }
    //         let containerDims = getContainerDims(child);
    //         let rootWidth = getRoot(child).getWidth();
    //         // getRoot(child).getWidth(); //getRoot(child).getWidth();
    //         let rootHeight = getRoot(child).getHeight();
    //         // getRoot(child.yogaNode).getWidth(); //getRoot(child).getWidth();
    //         containerDims.width = Math.min(containerDims.width, rootWidth);
    //         // let style = { ...child.props.style };
    //         // let newText = text.replace ? text.replace(/[ ]/g, "<br/>") : text;
    //         // let dims = Utils.memoizedCalculateTextDims(
    //         //   newText,
    //         //   style,
    //         //   { isAbsolute: true },
    //         //   { width: rootWidth, height: rootHeight }
    //         // );
    //         if (containerDims.isAbsolute) {
    //           // if (dims.width < rootWidth) {
    //           //   containerDims.width = rootWidth - containerDims.left;
    //           // } else {
    //           //   containerDims.width = dims.width;
    //           // }
    //           let parentFixedWidth = getFixedWidthParent(child.yogaNode);
    //           if (parentFixedWidth) {
    //             // containerDims.width = dims.width;
    //           }
    //           // DOC: uncommented works fine in yoga demo, but breaking for session
    //           // if (dims.height < rootHeight) {
    //           //   containerDims.height = rootHeight - containerDims.top;
    //           // } else {
    //           //   containerDims.height = dims.height;
    //           // }
    //           // let parentFixedHeight = getFixedHeightParent(child.yogaNode);
    //           // if (parentFixedHeight) {
    //           //   containerDims.height = dims.height;
    //           // }
    //         }
    //         const layerStyle = child.props.style.toJS
    //           ? child.props.style.toJS()
    //           : child.props.style;
    //         dims = Utils.memoizedCalculateTextDims(
    //           text,
    //           resolveLiteralNode(layerStyle),
    //           containerDims,
    //           { width: rootWidth, height: rootHeight }
    //         );
    //       }
    //       if (child.isAutoWidth()) {
    //         child.setWidth(dims.width);
    //       }
    //       if (child.isAutoHeight()) {
    //         child.setHeight(dims.height);
    //       }
    //     }
    //   }
    // });


    layout = this._original.calculateLayout(width, height, direction);
    return layout;
  };

  _proto.free = function free() {
    return this._original.free();
  };

  _proto.getRootLeft = function getRootLeft() {
    var left = 0;
    var parent = this;

    while (parent) {
      left += parent.getComputedLeft();
      parent = parent.parent;
    }

    return left;
  };

  _proto.getRootTop = function getRootTop() {
    var top = this.getComputedTop();
    var parent = this;

    while (parent) {
      top += parent.getComputedTop();
      parent = parent.parent;
    }

    return top;
  };

  _proto.isFillWidth = function isFillWidth() {
    var position = this.getPositionType(); // const property = this.getWidth();

    if (position) {
      var left, right;
      left = this.props.style.left;
      right = this.props.style.right;

      if (!lodash.isNil(left) && !lodash.isNil(right)) {
        return true;
      } else {
        return false;
      }
    } else {
      var flexDirection = this.getFlexDirection();
      var flex = this.getFlexGrow();

      if (!flex) {
        return false;
      }

      if (flexDirection) {
        // Main axis
        if (lodash.isNil(flex) || isNaN(flex)) {
          return false;
        } else {
          return true;
        }
      } else {
        // Cross axis
        var alignSelf = this.getAlignSelf();

        if (alignSelf) {
          return true;
        } else {
          return false;
        }
      }
    }
  };

  _proto.isAutoWidth = function isAutoWidth() {
    var position = this.getPositionType();
    var width = lodash.get(this.props, 'style.width');

    if (position) {
      // let left = this.getComputedLeft();
      // let right = this.getComputedRight();
      // console.log(left, right, this.props.style.left, "left right left");
      // if (isNil(left) && isNil(right) && isNaN(property.value)) {
      //   return true;
      // }
      if (!lodash.isNil(this.props.style.left) && !lodash.isNil(this.props.style.right)) {
        return false;
      } else if (lodash.isNil(width)) {
        return true;
      } else {
        return false;
      }
    } else {
      var flexDirection = this.getFlexDirection();
      var flex = this.getFlexGrow();

      if (!flex) {
        if (lodash.isNil(width)) {
          return true;
        }

        if (!lodash.isNil(width)) {
          return false;
        }
      }

      if (flexDirection) {
        // Main axis
        if (lodash.isNil(flex) || isNaN(flex)) {
          return true;
        } else {
          return false;
        }
      } else {
        // Cross axis
        var alignSelf = this.getAlignSelf();

        if (alignSelf) {
          return true;
        } else {
          return false;
        }
      }
    }
  };

  _proto.isAutoHeight = function isAutoHeight() {
    var position = this.getPositionType();
    var height = lodash.get(this.props, 'style.height');

    if (position) {
      // if (isNaN(property.value)) {
      //   return true;
      // }
      // let top, bottom;
      // top = this.getComputedLeft();
      // bottom = this.getComputedRight();
      if (!lodash.isNil(this.props.style.top) && !lodash.isNil(this.props.style.bottom)) {
        return false;
      } else if (lodash.isNil(height)) {
        return true;
      } else {
        return false;
      }
    } else {
      var flexDirection = this.getFlexDirection();
      var flex = this.getFlexGrow();

      if (!flex) {
        if (lodash.isNil(height)) {
          return true;
        }

        if (!lodash.isNil(height)) {
          return false;
        }
      }

      if (flexDirection) {
        // Main axis
        var alignSelf = this.getAlignSelf();

        if (alignSelf) {
          return true;
        } else {
          return false;
        }
      } else {
        if (lodash.isNil(flex) || isNaN(flex)) {
          return true;
        } else {
          return false;
        } // Cross axis

      }
    }
  };

  _proto.isAbsolute = function isAbsolute() {
    var parent = this;
    var isAbsolute = false;
    var done = false;

    while (parent && !done) {
      var position = parent.getPositionType();

      if (position) {
        isAbsolute = true;
        done = true;
      } // if (!parent.isAutoWidth()) {
      //   // isAbsolute = false;
      //   // done = true;
      // }


      parent = parent.parent;
    }

    return isAbsolute;
  };

  _proto.freeRecursive = function freeRecursive() {
    return this._original.freeRecursive();
  };

  _proto.getAlignContent = function getAlignContent() {
    return this._original.getAlignContent();
  };

  _proto.getAlignItems = function getAlignItems() {
    return this._original.getAlignItems();
  };

  _proto.getAlignSelf = function getAlignSelf() {
    return this._original.getAlignSelf();
  };

  _proto.getAspectRatio = function getAspectRatio() {
    return this._original.getAspectRatio();
  };

  _proto.getBorder = function getBorder(edge) {
    return this._original.getBorder(edge);
  };

  _proto.getChild = function getChild(index) {
    return this._original.getChild(index);
  };

  _proto.getChildCount = function getChildCount() {
    return this._original.getChildCount();
  };

  _proto.getComputedBorder = function getComputedBorder(edge) {
    return this._original.getComputedBorder(edge);
  };

  _proto.getComputedBottom = function getComputedBottom() {
    return this._original.getComputedBottom();
  };

  _proto.getComputedHeight = function getComputedHeight() {
    return this._original.getComputedHeight();
  };

  _proto.getComputedLeft = function getComputedLeft() {
    return this._original.getComputedLeft();
  };

  _proto.getComputedMargin = function getComputedMargin(edge) {
    return this._original.getComputedMargin(edge);
  };

  _proto.getComputedPadding = function getComputedPadding(edge) {
    return this._original.getComputedPadding(edge);
  };

  _proto.getComputedRight = function getComputedRight() {
    return this._original.getComputedRight();
  };

  _proto.getComputedTop = function getComputedTop() {
    return this._original.getComputedTop();
  };

  _proto.getComputedWidth = function getComputedWidth() {
    return this._original.getComputedWidth();
  };

  _proto.getDisplay = function getDisplay() {
    return this._original.getDisplay();
  };

  _proto.getFlexBasis = function getFlexBasis() {
    return this._original.getFlexBasis();
  };

  _proto.getFlexDirection = function getFlexDirection() {
    return this._original.getFlexDirection();
  };

  _proto.getFlexGrow = function getFlexGrow() {
    return this._original.getFlexGrow();
  };

  _proto.getFlexShrink = function getFlexShrink() {
    return this._original.getFlexShrink();
  };

  _proto.getFlexWrap = function getFlexWrap() {
    return this._original.getFlexWrap();
  };

  _proto.getHeight = function getHeight() {
    return this._original.getHeight();
  };

  _proto.getJustifyContent = function getJustifyContent() {
    return this._original.getJustifyContent();
  };

  _proto.getMargin = function getMargin(edge) {
    return this._original.getMargin(edge);
  };

  _proto.getMaxHeight = function getMaxHeight() {
    return this._original.getMaxHeight();
  };

  _proto.getMaxWidth = function getMaxWidth() {
    return this._original.getMaxWidth();
  };

  _proto.getMinHeight = function getMinHeight() {
    return this._original.getMinHeight();
  };

  _proto.getMinWidth = function getMinWidth() {
    return this._original.getMinWidth();
  };

  _proto.getOverflow = function getOverflow() {
    return this._original.getOverflow();
  };

  _proto.getPadding = function getPadding(edge) {
    return this._original.getPadding(edge);
  };

  _proto.getParent = function getParent() {
    return this._original.getParent();
  };

  _proto.getPosition = function getPosition(edge) {
    return this._original.getPosition(edge);
  };

  _proto.getPositionType = function getPositionType() {
    return this._original.getPositionType();
  };

  _proto.getWidth = function getWidth() {
    return this._original.getWidth();
  };

  _proto.insertChild = function insertChild(child, index) {
    child.parent = this;
    this.children.splice(index, 0, child);
    return this._original.insertChild(child._original, index);
  };

  _proto.isDirty = function isDirty() {
    return this._original.isDirty();
  };

  _proto.markDirty = function markDirty() {
    return this._original.markDirty();
  };

  _proto.removeChild = function removeChild(child) {
    var indexOfChild = this.children.indexOf(child);
    this.children.splice(indexOfChild, 1);
    return this._original.removeChild(child._original);
  };

  _proto.reset = function reset() {
    this.setPositionType('relative');
    this.setPosition(yoga$1.EDGE_LEFT, NaN);
    this.setPosition(yoga$1.EDGE_RIGHT, NaN);
    this.setPosition(yoga$1.EDGE_TOP, NaN);
    this.setPosition(yoga$1.EDGE_BOTTOM, NaN);
    this.setAlignContent('flex-start'); // this.setAlignItems("stretch");

    this.setAlignSelf('auto');
    this.setAspectRatio('auto');
    this.setBorder(yoga$1.EDGE_ALL, 0);
    this.setBorder(yoga$1.EDGE_LEFT, 0);
    this.setBorder(yoga$1.EDGE_RIGHT, 0);
    this.setBorder(yoga$1.EDGE_TOP, 0);
    this.setBorder(yoga$1.EDGE_BOTTOM, 0);
    this.setDisplay(undefined);
    this.setFlex(NaN);
    this.setFlexBasis(NaN);
    this.setFlexBasisPercent(undefined);
    this.setFlexDirection('column'); // this.setFlex(0);
    // this.setFlexShrink(1);

    this.setFlexWrap('wrap');
    this.setHeight(NaN);
    this.setHeightAuto();
    this.setWidth(NaN);
    this.setWidthAuto();
    this.setHeightPercent(undefined);
    this.setJustifyContent('flex-start');
    this.setMargin(yoga$1.EDGE_ALL, 0);
    this.setMargin(yoga$1.EDGE_LEFT, 0);
    this.setMargin(yoga$1.EDGE_RIGHT, 0);
    this.setMargin(yoga$1.EDGE_TOP, 0);
    this.setMargin(yoga$1.EDGE_BOTTOM, 0);
    this.setMarginAuto(yoga$1.EDGE_ALL);
    this.setMarginAuto(yoga$1.EDGE_LEFT);
    this.setMarginAuto(yoga$1.EDGE_RIGHT);
    this.setMarginAuto(yoga$1.EDGE_TOP);
    this.setMarginAuto(yoga$1.EDGE_BOTTOM);
    this.setMarginPercent(yoga$1.EDGE_ALL, undefined);
    this.setMarginPercent(yoga$1.EDGE_LEFT, undefined);
    this.setMarginPercent(yoga$1.EDGE_RIGHT, undefined);
    this.setMarginPercent(yoga$1.EDGE_TOP, undefined);
    this.setMarginPercent(yoga$1.EDGE_BOTTOM, undefined);
    this.setMaxHeight(NaN);
    this.setMaxHeightPercent(undefined);
    this.setMaxWidth(NaN);
    this.setMaxWidthPercent(undefined);
    this.setMinHeight(NaN);
    this.setMinHeightPercent(undefined);
    this.setMinWidth(NaN);
    this.setMinWidthPercent(undefined);
    this.setOverflow(undefined);
    this.setPadding(yoga$1.EDGE_ALL, 0);
    this.setPadding(yoga$1.EDGE_LEFT, 0);
    this.setPadding(yoga$1.EDGE_RIGHT, 0);
    this.setPadding(yoga$1.EDGE_TOP, 0);
    this.setPadding(yoga$1.EDGE_BOTTOM, 0);
    this.setPaddingPercent(yoga$1.EDGE_ALL, undefined);
    this.setPaddingPercent(yoga$1.EDGE_LEFT, undefined);
    this.setPaddingPercent(yoga$1.EDGE_RIGHT, undefined);
    this.setPaddingPercent(yoga$1.EDGE_TOP, undefined);
    this.setPaddingPercent(yoga$1.EDGE_BOTTOM, undefined);
    this.setPositionPercent(yoga$1.EDGE_LEFT, undefined);
    this.setPositionPercent(yoga$1.EDGE_RIGHT, undefined);
    this.setPositionPercent(yoga$1.EDGE_TOP, undefined);
    this.setPositionPercent(yoga$1.EDGE_BOTTOM, undefined);
    this.setWidthPercent(undefined);
  };

  _proto.setAlignContent = function setAlignContent(alignContent) {
    return this._original.setAlignContent(alignContent);
  };

  _proto.setAlignItems = function setAlignItems(alignItems) {
    return this._original.setAlignItems(alignItems);
  };

  _proto.setAlignSelf = function setAlignSelf(alignSelf) {
    return this._original.setAlignSelf(alignSelf);
  };

  _proto.setAspectRatio = function setAspectRatio(aspectRatio) {
    return this._original.setAspectRatio(aspectRatio);
  };

  _proto.setBorder = function setBorder(edge, borderWidth) {
    return this._original.setBorder(edge, borderWidth);
  };

  _proto.setDisplay = function setDisplay(display) {
    return this._original.setDisplay(display);
  };

  _proto.setFlex = function setFlex(flex) {
    this.setFlexShrink(0);
    this.setFlexBasis(0); // this.setFlexBasisPercent(undefined);

    return this.setFlexGrow(flex); // return this._original.setFlex(flex);
  };

  _proto.setFlexBasis = function setFlexBasis(flexBasis) {
    return this._original.setFlexBasis(flexBasis);
  };

  _proto.setFlexBasisPercent = function setFlexBasisPercent(flexBasis) {
    return this._original.setFlexBasisPercent(flexBasis);
  };

  _proto.setFlexDirection = function setFlexDirection(flexDirection) {
    return this._original.setFlexDirection(flexDirection);
  };

  _proto.setFlexGrow = function setFlexGrow(flexGrow) {
    return this._original.setFlexGrow(flexGrow);
  };

  _proto.setFlexShrink = function setFlexShrink(flexShrink) {
    return this._original.setFlexShrink(flexShrink);
  };

  _proto.setFlexWrap = function setFlexWrap(flexWrap) {
    return this._original.setFlexWrap(flexWrap);
  };

  _proto.setHeight = function setHeight(height) {
    this.height = height;
    return this._original.setHeight(height);
  };

  _proto.setHeightAuto = function setHeightAuto() {
    return this._original.setHeightAuto();
  };

  _proto.setHeightPercent = function setHeightPercent(height) {
    return this._original.setHeightPercent(height);
  };

  _proto.setJustifyContent = function setJustifyContent(justifyContent) {
    return this._original.setJustifyContent(justifyContent);
  };

  _proto.setMargin = function setMargin(edge, margin) {
    return this._original.setMargin(edge, margin);
  };

  _proto.setMarginAuto = function setMarginAuto(edge) {
    return this._original.setMarginAuto(edge);
  };

  _proto.setMarginPercent = function setMarginPercent(edge, margin) {
    return this._original.setMarginPercent(edge, margin);
  };

  _proto.setMaxHeight = function setMaxHeight(maxHeight) {
    return this._original.setMaxHeight(maxHeight);
  };

  _proto.setMaxHeightPercent = function setMaxHeightPercent(maxHeight) {
    return this._original.setMaxHeightPercent(maxHeight);
  };

  _proto.setMaxWidth = function setMaxWidth(maxWidth) {
    return this._original.setMaxWidth(maxWidth);
  };

  _proto.setMaxWidthPercent = function setMaxWidthPercent(maxWidth) {
    return this._original.setMaxWidthPercent(maxWidth);
  };

  _proto.setMeasureFunc = function setMeasureFunc(measureFunc) {
    return this._original.setMeasureFunc(measureFunc);
  };

  _proto.setMinHeight = function setMinHeight(minHeight) {
    return this._original.setMinHeight(minHeight);
  };

  _proto.setMinHeightPercent = function setMinHeightPercent(minHeight) {
    return this._original.setMinHeightPercent(minHeight);
  };

  _proto.setMinWidth = function setMinWidth(minWidth) {
    return this._original.setMinWidth(minWidth);
  };

  _proto.setMinWidthPercent = function setMinWidthPercent(minWidth) {
    return this._original.setMinWidthPercent(minWidth);
  };

  _proto.setOverflow = function setOverflow(overflow) {
    return this._original.setOverflow(overflow);
  };

  _proto.setPadding = function setPadding(edge, padding) {
    return this._original.setPadding(edge, padding);
  };

  _proto.setPaddingPercent = function setPaddingPercent(edge, padding) {
    return this._original.setPaddingPercent(edge, padding);
  };

  _proto.setPosition = function setPosition(edge, position) {
    return this._original.setPosition(edge, position);
  };

  _proto.setPositionPercent = function setPositionPercent(edge, position) {
    return this._original.setPositionPercent(edge, position);
  };

  _proto.setPositionType = function setPositionType(positionType) {
    return this._original.setPositionType(positionType);
  };

  _proto.setWidth = function setWidth(width) {
    this.width = width;
    return this._original.setWidth(width);
  };

  _proto.setWidthAuto = function setWidthAuto() {
    return this._original.setWidthAuto();
  };

  _proto.setWidthPercent = function setWidthPercent(width) {
    return this._original.setWidthPercent(width);
  };

  _proto.unsetMeasureFun = function unsetMeasureFun() {
    return this._original.unsetMeasureFun();
  };

  return NodeCreateInstanceX;
}();

var NodeX =
/*#__PURE__*/
function () {
  function NodeX() {}

  NodeX.create = function create(config) {
    var node = _Node.create(config);

    var nodeX = new NodeCreateInstanceX();
    nodeX.props = {
      style: {}
    };
    nodeX._original = node;
    return nodeX;
  };

  return NodeX;
}();

var ConfigX =
/*#__PURE__*/
function () {
  function ConfigX() {}

  ConfigX.create = function create() {
    var config = _Config.create();

    return config;
  };

  return ConfigX;
}();

var yogax = {
  Node: NodeX,
  Config: ConfigX
};

exports.iconToText = iconToText;
exports.updateNodePositionalAttributes = updateNodePositionalAttributes;
exports.yoga = yogax;
//# sourceMappingURL=yogax.cjs.development.js.map
