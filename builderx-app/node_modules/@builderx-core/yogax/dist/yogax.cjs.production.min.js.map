{"version":3,"file":"yogax.cjs.production.min.js","sources":["../src/yogaNodeMapper.ts","../src/iconToText.ts","../src/yogax.ts"],"sourcesContent":["import { isNil, isArray } from 'lodash';\nconst yoga = require('yoga-layout-prebuilt');\n\nexport default function updateNodePositionalAttributes(\n  yogaNode: any,\n  key: any,\n  value: any\n) {\n  if (!yogaNode) {\n    return;\n  }\n\n  if (key === 'height') {\n    if (value === undefined) {\n      yogaNode.setHeightAuto();\n    } else {\n      yogaNode.setHeight(value);\n    }\n  } else if (key === 'width') {\n    if (value === undefined) {\n      yogaNode.setWidthAuto();\n    } else {\n      yogaNode.setWidth(value);\n    }\n  } else if (key === 'fontSize') {\n    // yogaNode.setWidth(value);\n    // yogaNode.setHeight(value);\n  } else if (key === 'left') {\n    if (value === undefined) {\n      value = NaN;\n    }\n    yogaNode.setPosition(yoga.EDGE_LEFT, value);\n  } else if (key === 'right') {\n    if (value === undefined) {\n      value = NaN;\n    }\n    yogaNode.setPosition(yoga.EDGE_RIGHT, value);\n  } else if (key === 'top') {\n    if (value === undefined) {\n      value = NaN;\n    }\n    yogaNode.setPosition(yoga.EDGE_TOP, value);\n  } else if (key === 'bottom') {\n    if (value === undefined) {\n      value = NaN;\n    }\n    yogaNode.setPosition(yoga.EDGE_BOTTOM, value);\n  } else if (key === 'position' && value === 'absolute') {\n    yogaNode.setPositionType(yoga.POSITION_TYPE_ABSOLUTE);\n  } else if (key === 'position' && value === undefined) {\n    yogaNode.setPositionType(undefined);\n  } else if (key === 'flex') {\n    yogaNode.setFlexGrow(value);\n    yogaNode.setFlexShrink(value);\n    // yogaNode.setFlexBasis(\"auto\");\n    yogaNode.setFlex(value);\n  } else if (key === 'alignContent') {\n    setAlignProperties(yogaNode, key, value);\n  } else if (key === 'alignItems') {\n    setAlignProperties(yogaNode, key, value);\n  } else if (key === 'alignSelf') {\n    setAlignProperties(yogaNode, key, value);\n  } else if (key === 'display') {\n    yogaNode.setDisplay(value);\n  } else if (key === 'flexBasis') {\n    yogaNode.setFlexBasis(value);\n  } else if (key === 'flexDirection') {\n    setFlexDirection(yogaNode, value);\n  } else if (key === 'flexGrow') {\n    yogaNode.setFlexGrow(value);\n  } else if (key === 'flexShrink') {\n    yogaNode.setFlexShrink(value);\n  } else if (key === 'flexWrap') {\n    setFlexWrap(yogaNode, value);\n  } else if (key === 'justifyContent') {\n    setJustifyContent(yogaNode, value);\n  } else if (key === 'maxHeight') {\n    if (value === undefined) {\n      value = NaN;\n    }\n    yogaNode.setMaxHeight(value);\n  } else if (key === 'maxWidth') {\n    if (value === undefined) {\n      value = NaN;\n    }\n    yogaNode.setMaxWidth(value);\n  } else if (key === 'minHeight') {\n    if (value === undefined) {\n      value = NaN;\n    }\n    yogaNode.setMinHeight(value);\n  } else if (key === 'minWidth') {\n    if (value === undefined) {\n      value = NaN;\n    }\n    yogaNode.setMinWidth(value);\n  } else if (key === 'maxHeight') {\n    if (value === undefined) {\n      value = NaN;\n    }\n    yogaNode.setMaxHeight(value);\n  } else if (key === 'maxHeight') {\n    if (value === undefined) {\n      value = NaN;\n    }\n    yogaNode.setMaxHeight(value);\n  } else if (\n    key.indexOf('padding') !== -1 ||\n    key.indexOf('border') !== -1 ||\n    key.indexOf('margin') !== -1\n  ) {\n    setBoxModelProperties(yogaNode, key, value);\n  } else if (key === 'overflow') {\n    setOverflow(yogaNode, value);\n  }\n}\n// for margin, padding & border\nfunction setBoxModelProperties(yogaNode: any, key: any, value: any) {\n  if (isNil(value)) {\n    value = NaN;\n  }\n  let yogaEdge = yoga.EDGE_ALL;\n  if (key.indexOf('Left') !== -1) {\n    yogaEdge = yoga.EDGE_LEFT;\n  } else if (key.indexOf('Right') !== -1) {\n    yogaEdge = yoga.EDGE_RIGHT;\n  } else if (key.indexOf('Top') !== -1) {\n    yogaEdge = yoga.EDGE_TOP;\n  } else if (key.indexOf('Bottom') !== -1) {\n    yogaEdge = yoga.EDGE_BOTTOM;\n  } else if (key.indexOf('Horizontal') !== -1) {\n    yogaEdge = [yoga.EDGE_LEFT, yoga.EDGE_RIGHT];\n  } else if (key.indexOf('Vertical') !== -1) {\n    yogaEdge = [yoga.EDGE_TOP, yoga.EDGE_BOTTOM];\n  }\n\n  if (key.indexOf('padding') !== -1) {\n    if (isArray(yogaEdge)) {\n      yogaEdge.forEach(edge => {\n        yogaNode.setPadding(edge, value / 2);\n      });\n    } else {\n      yogaNode.setPadding(yogaEdge, value);\n    }\n  } else if (key.indexOf('border') !== -1) {\n    if (typeof value !== 'string') {\n      if (isArray(yogaEdge)) {\n        yogaEdge.forEach(edge => {\n          yogaNode.setBorder(edge, value / 2);\n        });\n      } else {\n        if (yogaEdge === yoga.EDGE_ALL) {\n          let edges = [\n            yoga.EDGE_LEFT,\n            yoga.EDGE_RIGHT,\n            yoga.EDGE_BOTTOM,\n            yoga.EDGE_TOP,\n          ];\n\n          if (\n            !isNil(yogaNode.props.style['borderLeftWidth']) ||\n            !isNil(yogaNode.props.style['borderHorizontalWidth'])\n          ) {\n            edges.splice(edges.indexOf(yoga.EDGE_LEFT), 1);\n          }\n\n          if (\n            !isNil(yogaNode.props.style['borderRightWidth']) ||\n            !isNil(yogaNode.props.style['borderHorizontalWidth'])\n          ) {\n            edges.splice(edges.indexOf(yoga.EDGE_RIGHT), 1);\n          }\n\n          if (\n            !isNil(yogaNode.props.style['borderTopWidth']) ||\n            !isNil(yogaNode.props.style['borderVerticalWidth'])\n          ) {\n            edges.splice(edges.indexOf(yoga.EDGE_TOP), 1);\n          }\n\n          if (\n            !isNil(yogaNode.props.style['borderBottomWidth']) ||\n            !isNil(yogaNode.props.style['borderVerticalWidth'])\n          ) {\n            edges.splice(edges.indexOf(yoga.EDGE_BOTTOM), 1);\n          }\n\n          edges.forEach(edge => {\n            yogaNode.setBorder(edge, value);\n          });\n        } else {\n          yogaNode.setBorder(yogaEdge, value);\n        }\n      }\n    }\n  } else if (key.indexOf('margin') !== -1) {\n    if (typeof value === 'string' && value.indexOf('auto') !== -1) {\n      yogaNode.setMarginAuto(yogaEdge);\n    } else {\n      if (isArray(yogaEdge)) {\n        yogaEdge.forEach(edge => {\n          yogaNode.setMargin(edge, value / 2);\n        });\n      } else {\n        yogaNode.setMargin(yogaEdge, value);\n      }\n    }\n  }\n}\nfunction setOverflow(yogaNode: any, value: any) {\n  if (value === 'hidden') {\n    yogaNode.setOverflow(yoga.OVERFLOW_HIDDEN);\n  } else if (value === 'visible') {\n    yogaNode.setOverflow(yoga.OVERFLOW_SCROLL);\n  } else if (value === 'scroll') {\n    yogaNode.setOverflow(yoga.OVERFLOW_VISIBLE);\n  }\n}\nfunction setFlexDirection(yogaNode: any, value: any) {\n  if (value === 'column') {\n    yogaNode.setFlexDirection(yoga.FLEX_DIRECTION_COLUMN);\n  } else if (value === 'column-reverse') {\n    yogaNode.setFlexDirection(yoga.FLEX_DIRECTION_COLUMN_REVERSE);\n  } else if (value === 'row') {\n    yogaNode.setFlexDirection(yoga.FLEX_DIRECTION_ROW);\n  } else if (value === 'row-reverse') {\n    yogaNode.setFlexDirection(yoga.FLEX_DIRECTION_ROW_REVERSE);\n  }\n}\n\nfunction setAlignProperties(yogaNode: any, key: any, value: any) {\n  let alignProperty = yoga.ALIGN_AUTO;\n  if (value === 'baseline') {\n    alignProperty = yoga.ALIGN_BASELINE;\n  } else if (value === 'center') {\n    alignProperty = yoga.ALIGN_CENTER;\n  } else if (value === 'flex-end') {\n    alignProperty = yoga.ALIGN_FLEX_END;\n  } else if (value === 'flex-start') {\n    alignProperty = yoga.ALIGN_FLEX_START;\n  } else if (value === 'stretch') {\n    alignProperty = yoga.ALIGN_STRETCH;\n  } else if (value === 'space-around') {\n    alignProperty = yoga.ALIGN_SPACE_AROUND;\n  } else if (value === 'space-between') {\n    alignProperty = yoga.ALIGN_SPACE_BETWEEN;\n  } else if (value === undefined) {\n    alignProperty = undefined;\n  }\n  if (key === 'alignItems') {\n    yogaNode.setAlignItems(alignProperty);\n  } else if (key === 'alignContent') {\n    yogaNode.setAlignContent(alignProperty);\n  } else if (key === 'alignSelf') {\n    yogaNode.setAlignSelf(alignProperty);\n  }\n}\n\nfunction setFlexWrap(yogaNode: any, value: any) {\n  if (value === 'wrap') {\n    yogaNode.setFlexWrap(yoga.WRAP_WRAP);\n  } else if (value === 'nowrap') {\n    yogaNode.setFlexWrap(yoga.WRAP_NO_WRAP);\n  } else if (value === 'wrap-reverse') {\n    yogaNode.setFlexWrap(yoga.WRAP_WRAP_REVERSE);\n  }\n}\n\nfunction setJustifyContent(yogaNode: any, value: any) {\n  if (value === 'center') {\n    yogaNode.setJustifyContent(yoga.JUSTIFY_CENTER);\n  } else if (value === 'flex-end') {\n    yogaNode.setJustifyContent(yoga.JUSTIFY_FLEX_END);\n  } else if (value === 'flex-start') {\n    yogaNode.setJustifyContent(yoga.JUSTIFY_FLEX_START);\n  } else if (value === 'space-around') {\n    yogaNode.setJustifyContent(yoga.JUSTIFY_SPACE_AROUND);\n  } else if (value === 'space-between') {\n    yogaNode.setJustifyContent(yoga.JUSTIFY_SPACE_BETWEEN);\n  } else if (value === 'space-evenly') {\n    yogaNode.setJustifyContent(yoga.JUSTIFY_SPACE_EVENLY);\n  }\n}\n","const AntDesign = require('react-native-vector-icons/glyphmaps/AntDesign.json');\nconst Entypo = require('react-native-vector-icons/glyphmaps/Entypo.json');\nconst EvilIcons = require('react-native-vector-icons/glyphmaps/EvilIcons.json');\nconst Feather = require('react-native-vector-icons/glyphmaps/Feather.json');\nconst FontAwesome = require('react-native-vector-icons/glyphmaps/FontAwesome.json');\n// const FontAwesome5 = require(\"react-native-vector-icons/glyphmaps/FontAwesome5Free.json\");\nconst Foundation = require('react-native-vector-icons/glyphmaps/Foundation.json');\nconst Ionicons = require('react-native-vector-icons/glyphmaps/Ionicons.json');\nconst MaterialCommunityIcons = require('react-native-vector-icons/glyphmaps/MaterialCommunityIcons.json');\nconst MaterialIcons = require('react-native-vector-icons/glyphmaps/MaterialIcons.json');\nconst Octicons = require('react-native-vector-icons/glyphmaps/Octicons.json');\nconst SimpleLineIcons = require('react-native-vector-icons/glyphmaps/SimpleLineIcons.json');\nconst Zocial = require('react-native-vector-icons/glyphmaps/Zocial.json');\n\nconst IconFamilies = {\n  AntDesign,\n  Entypo,\n  EvilIcons,\n  Feather,\n  FontAwesome,\n  // FontAwesome5,\n  Foundation,\n  Ionicons,\n  MaterialCommunityIcons,\n  MaterialIcons,\n  SimpleLineIcons,\n  Octicons,\n  Zocial,\n};\n\nexport default function iconToText(props: any) {\n  let text = props.name;\n  let family1 = props.type ? props.type : 'MaterialCommunityIcons';\n\n  let str = String.fromCharCode((IconFamilies as any)[family1][text]);\n\n  if (family1 === 'MaterialCommunityIcons') {\n    // family1 = \"Material Design Icons\";\n  }\n  return {\n    family: family1,\n    text: str,\n  };\n\n  // return {\n  //   family: \"\",\n  //   text: \"hai\"\n  // };\n}\n","import { forEach, reverse, memoize, isNil, pickBy, map, get } from 'lodash';\n// import iconToText from './iconToText';\n// import { resolveLiteralNode } from './utils';\nimport updateNodePositionalAttributes from './yogaNodeMapper';\n\nconst yoga = require('yoga-layout-prebuilt');\nconst { Node: _Node, Config: _Config } = yoga;\n\nfunction forEachLayerChild(layer: any, callback: any) {\n  forEach(layer.children, (childLayer, index) => {\n    if (childLayer) {\n      callback(childLayer, index);\n    }\n  });\n}\n\nfunction traverseNode(node: any, callback: any) {\n  if (node) {\n    callback(node);\n  }\n  if (node && node.type !== 'text') {\n    forEachLayerChild(node, (child: any) => {\n      if (typeof child !== 'string') {\n        traverseNode(child, callback);\n      }\n    });\n  }\n}\n\nvar getRoot = function(yogaNode: any) {\n  var parent = yogaNode;\n  var root = null;\n  while (parent) {\n    root = parent;\n    parent = parent.parent;\n  }\n\n  return root;\n};\n\nlet getFixedWidthParent = function(yogaNode: any) {\n  let parent = yogaNode;\n  let root = getRoot(yogaNode);\n  let result = false;\n  let done = false;\n  while (parent && !done) {\n    let width = parent.getWidth();\n    if (!isNaN(width.value) && parent !== root) {\n      result = true;\n      done = true;\n    }\n    parent = parent.parent;\n  }\n  return result;\n};\n\nlet getContainerDims = function(yogaNode: any) {\n  let width = 0;\n  let height = 0;\n  let left = 0;\n  let top = 0;\n  let isAbsolute = false;\n  // let isAuto = false;\n  let nodeLeft = yogaNode.getComputedLeft();\n  let nodePosition = yogaNode.getPositionType();\n  // console.log(left, \"left here 123123\");\n  let parent = yogaNode;\n\n  let done = false;\n  let parentObj = [];\n  while (!width && !done) {\n    const position = parent.getPositionType();\n    left = parent.getRootLeft();\n\n    // isAuto = isNaN(parent.getWidth().value) ? true : false;\n    const isFillParent = parent.parent && parent.parent.isFillWidth();\n    parent = parent.parent;\n\n    if (parent) {\n      parentObj.push(parent);\n\n      if (position) {\n        isAbsolute = true;\n\n        if (isFillParent) {\n          width = parent.getComputedWidth();\n        } else if (nodePosition) {\n          width = parent.getComputedWidth() - nodeLeft;\n        } else {\n          width =\n            getRoot(parent).getWidth() -\n            (left - getRoot(parent).getComputedLeft());\n        }\n\n        done = true;\n      } else {\n        const yogaWidth = parent.getWidth();\n\n        if (yogaWidth.unit === 2) {\n          width = parent.getComputedWidth();\n        } else {\n          width = yogaWidth.value;\n        }\n      }\n    } else {\n      done = true;\n    }\n  }\n\n  parent = yogaNode;\n  done = false;\n  while (!height && !done) {\n    const position = parent.getPositionType();\n    top = parent.getRootTop();\n    // isAuto = isNaN(parent.getHeight().value) ? true : false;\n    parent = parent.parent;\n    if (parent) {\n      parentObj.push(parent);\n\n      if (position) {\n        height = getRoot(parent).getHeight();\n        done = true;\n      } else {\n        const yogaHeight = parent.getHeight();\n        if (yogaHeight.unit === 2) {\n          height = parent.getComputedHeight();\n        } else {\n          height = yogaHeight.value;\n        }\n      }\n    } else {\n      done = true;\n    }\n  }\n\n  var reverseParentObj = reverse(parentObj);\n  reverseParentObj.forEach(node => {\n    var paddingAll = node.getPadding(yoga.EDGE_ALL);\n    var paddingLeft = node.getPadding(yoga.EDGE_LEFT);\n    var paddingRight = node.getPadding(yoga.EDGE_RIGHT);\n\n    var marginAll = node.getMargin(yoga.EDGE_ALL);\n    var marginLeft = node.getMargin(yoga.EDGE_LEFT);\n    var marginRight = node.getMargin(yoga.EDGE_RIGHT);\n\n    var borderAll = node.getBorder(yoga.EDGE_ALL);\n    var borderLeft = node.getBorder(yoga.EDGE_LEFT);\n    var borderRight = node.getBorder(yoga.EDGE_RIGHT);\n\n    var paddingValue = 0;\n    var marginValue = 0;\n    var borderValue = 0;\n\n    if (!isNaN(paddingAll.value)) {\n      if (!isNaN(paddingLeft.value) && isNaN(paddingRight.value)) {\n        paddingValue = paddingAll + paddingLeft;\n      } else if (isNaN(paddingLeft.value) && !isNaN(paddingRight.value)) {\n        paddingValue = paddingAll + paddingRight;\n      } else if (!isNaN(paddingLeft.value) && !isNaN(paddingRight.value)) {\n        paddingValue = paddingLeft + paddingRight;\n      } else {\n        paddingValue += paddingAll * 2;\n      }\n    } else {\n      if (!isNaN(paddingLeft.value)) {\n        paddingValue += paddingLeft;\n      }\n\n      if (!isNaN(paddingRight.value)) {\n        paddingValue += paddingRight;\n      }\n    }\n\n    if (!isNaN(marginAll.value)) {\n      if (!isNaN(marginLeft.value) && isNaN(marginRight.value)) {\n        marginValue = marginAll + marginLeft;\n      } else if (isNaN(marginLeft.value) && !isNaN(marginRight.value)) {\n        marginValue = marginAll + marginRight;\n      } else if (!isNaN(marginLeft.value) && !isNaN(marginRight.value)) {\n        marginValue = marginLeft + marginRight;\n      } else {\n        marginValue += marginAll * 2;\n      }\n    } else {\n      if (!isNaN(marginLeft.value)) {\n        marginValue += marginLeft;\n      }\n\n      if (!isNaN(marginRight.value)) {\n        marginValue += marginRight;\n      }\n    }\n\n    if (!isNaN(borderAll)) {\n      if (!isNaN(borderLeft) && isNaN(borderRight)) {\n        borderValue = borderAll + borderLeft;\n      } else if (isNaN(borderLeft) && !isNaN(borderRight)) {\n        borderValue = borderAll + borderRight;\n      } else if (!isNaN(borderLeft) && !isNaN(borderRight)) {\n        borderValue = borderLeft + borderRight;\n      } else {\n        borderValue += borderAll * 2;\n      }\n    } else {\n      if (!isNaN(borderLeft)) {\n        borderValue += borderLeft;\n      }\n\n      if (!isNaN(borderRight)) {\n        borderValue += borderRight;\n      }\n    }\n\n    // if (isNaN(node.getWidth().value)) {\n    //   if (!isNaN(marginAll.value)) {\n    //     width = width - marginAll * 2;\n    //   }\n    // }\n\n    width = width - paddingValue - marginValue - borderValue;\n  });\n\n  if (width <= 0) {\n    width = 1;\n  }\n  if (height <= 0) {\n    height = 1;\n  }\n  parent = yogaNode;\n  done = false;\n  parentObj = [yogaNode];\n\n  reverseParentObj = reverse(parentObj);\n\n  // let isFlex = false;\n  reverseParentObj.forEach(node => {\n    let paddingAll = node.getPadding(yoga.EDGE_ALL);\n    // let paddingLeft = node.getPadding(yoga.EDGE_LEFT);\n    // let paddingRight = node.getPadding(yoga.EDGE_RIGHT);\n    // let paddingTop = node.getPadding(yoga.EDGE_TOP);\n    // let paddingBottom = node.getPadding(yoga.EDGE_BOTTOM);\n\n    if (!isNaN(paddingAll.value)) {\n      height = height - paddingAll * 2;\n    }\n\n    // if (node.getFlexGrow()) {\n    //   isFlex = true;\n    // }\n  });\n\n  return { width, height, isAbsolute, left, top };\n};\n\n// let getFixedHeightParent = function(yogaNode: any) {\n//   let parent = yogaNode;\n//   let root = getRoot(yogaNode);\n//   let result = false;\n//   let done = false;\n//   while (parent && !done) {\n//     var height = parent.getHeight();\n//     if (!isNaN(height.value) && parent !== root) {\n//       result = true;\n//       done = true;\n//     }\n//     parent = parent.parent;\n//   }\n//   return result;\n// };\nexport class Utils {\n  static memoizedCalculateTextDims = memoize(\n    Utils.calculateTextDims,\n    (...args) => {\n      delete args[1].color;\n      delete args[1].opacity;\n      delete args[1].backgroundColor;\n      return JSON.stringify(args);\n    }\n  );\n  static getAdjustedDims(style: any, prop: string, parentDims: any) {\n    if (style[prop]) {\n      return style[prop] + 'px';\n    }\n    let adjustedParentDims = parentDims[prop] || 0;\n    let marginLeft = style.marginLeft || style.margin || 0;\n    let marginRight = style.marginRight || style.margin || 0;\n    let marginTop = style.marginTop || style.margin || 0;\n    let marginBottom = style.marginBottom || style.margin || 0;\n    if (prop === 'width') {\n      adjustedParentDims = adjustedParentDims - marginLeft - marginRight;\n    } else if (prop === 'height') {\n      adjustedParentDims = adjustedParentDims - marginTop - marginBottom;\n    }\n    let fillWidth: boolean =\n      prop === 'width' && !isNil(style.left) && !isNil(style.right);\n    let fillHeight: boolean =\n      prop === 'height' && !isNil(style.top) && !isNil(style.bottom);\n    if (style.position !== 'absolute') {\n      return 'fit-content';\n    }\n    return style.position === 'absolute' && (fillWidth || fillHeight)\n      ? adjustedParentDims + 'px'\n      : parentDims.isAbsolute\n      ? 'fit-content'\n      : undefined;\n  }\n  static calculateTextDims(text: any, style: any, parentDims: any, root: any) {\n    let newStyle = { ...style };\n    let newParentDims = { ...parentDims };\n    let width: any = 0;\n    let height: any = 0;\n    let fontFamily =\n      style.fontFamily && style.fontFamily !== 'System'\n        ? style.fontFamily\n        : 'system-ui';\n    let boundary = document.createElement('div');\n    // let oP: any = document.getElementById(\"calculate\");\n    // if (oP) {\n    //   document.body.removeChild(oP);\n    // }\n    // console.log(parentDims, root, style, text, \"hello here\");\n    boundary.setAttribute('id', 'calculate');\n    boundary.style.pointerEvents = 'none';\n    boundary.style.position = 'absolute';\n    boundary.style.left = '900px';\n    boundary.style.backgroundColor = 'blue';\n    boundary.style.top = '0px';\n    boundary.style.width = root.width + 'px';\n    boundary.style.height = root.height + 'px';\n    boundary.style.opacity = '0.5';\n    boundary.style.lineHeight = 'normal';\n\n    // let oP: any = document.getElementById(\"calculate\");\n\n    // if (!oP)\n    document.body.appendChild(boundary);\n    let parent: any = document.createElement('div');\n    boundary.appendChild(parent);\n\n    parent.style.width = !isNil(parentDims.width)\n      ? parentDims.width + 'px'\n      : undefined;\n\n    parent.style.left = '150px';\n\n    parent.style.height = !isNil(parentDims.height)\n      ? parentDims.height + 'px'\n      : undefined;\n\n    let c: any = document.createElement('div');\n    parent.appendChild(c);\n\n    text = text.replace ? text.replace(/\\n/g, ' <br/>') : text;\n    c.innerHTML = text;\n    c.style.visibility = 'hidden';\n    // c.style.opacity = 0.5;\n    c.style.pointerEvents = 'none';\n    c.style.wordWrap = 'break-word';\n    c.style.whiteSpace = 'pre-wrap';\n    let maxWidth = !isNil(parentDims.width)\n      ? parentDims.width\n      : parentDims.maxWidth;\n    let maxHeight;\n    //  = !isNil(parentDims.height)\n    //   ? parentDims.height\n    //   : parentDims.maxHeight;\n\n    // console.log(maxWidth, maxHeight, \"hello here max maane jyada\");\n    c.style.top = '0px';\n    if (c) {\n      let temp = this.getAdjustedDims(newStyle, 'width', newParentDims);\n      c.style.width = temp;\n      c.style.height = this.getAdjustedDims(newStyle, 'height', newParentDims);\n      c.style.padding = style.padding ? style.padding + 'px' : undefined;\n\n      if (style.paddingHorizontal || style.paddingLeft || style.paddingRight) {\n        c.style.paddingLeft = style.paddingHorizontal\n          ? style.paddingHorizontal + 'px'\n          : style.paddingLeft\n          ? style.paddingLeft + 'px'\n          : undefined;\n        c.style.paddingRight = style.paddingHorizontal\n          ? style.paddingHorizontal + 'px'\n          : style.paddingRight\n          ? style.paddingRight + 'px'\n          : undefined;\n      }\n      if (style.paddingVertical || style.paddingTop || style.paddingBottom) {\n        c.style.paddingTop = style.paddingVertical\n          ? style.paddingVertical + 'px'\n          : style.paddingTop\n          ? style.paddingTop + 'px'\n          : undefined;\n        c.style.paddingBottom = style.paddingVertical\n          ? style.paddingVertical + 'px'\n          : style.paddingBottom\n          ? style.paddingBottom + 'px'\n          : undefined;\n      }\n\n      c.style.margin = style.margin ? style.margin + 'px' : undefined;\n      if (style.marginHorizontal || style.marginLeft || style.marginRight) {\n        c.style.marginLeft = style.marginHorizontal\n          ? style.marginHorizontal + 'px'\n          : style.marginLeft\n          ? style.marginLeft + 'px'\n          : undefined;\n        c.style.marginRight = style.marginHorizontal\n          ? style.marginHorizontal + 'px'\n          : style.marginRight\n          ? style.marginRight + 'px'\n          : undefined;\n      }\n      if (style.marginVertical || style.marginTop || style.marginBottom) {\n        c.style.marginTop = style.marginVertical\n          ? style.marginVertical + 'px'\n          : style.marginTop\n          ? style.marginTop + 'px'\n          : undefined;\n        c.style.marginBottom = style.marginVertical\n          ? style.marginVertical + 'px'\n          : style.marginBottom\n          ? style.marginBottom + 'px'\n          : undefined;\n      }\n      c.style.maxWidth = style.maxWidth\n        ? style.maxWidth + 'px'\n        : maxWidth + 'px';\n\n      c.style.maxHeight = style.maxHeight\n        ? style.maxHeight + 'px'\n        : maxHeight + 'px';\n      c.style.lineHeight = style.lineHeight\n        ? style.lineHeight + 'px'\n        : undefined;\n      c.style.fontWeight = style.fontWeight ? style.fontWeight : 'normal';\n      c.style.fontFamily = fontFamily;\n      c.style.fontStyle = style.fontStyle ? style.fontStyle : 'normal';\n      c.style.fontSize = style.fontSize ? style.fontSize + 'px' : '14px';\n      c.style.letterSpacing = style.letterSpacing\n        ? style.letterSpacing + 'px'\n        : 0;\n      const clientRect = c.getBoundingClientRect();\n      width = clientRect.width;\n      height = clientRect.height;\n    }\n    let oP: any = document.getElementById('calculate');\n    document.body.removeChild(oP);\n\n    // console.log(width, height, \"width height here\");\n    return { width, height };\n  }\n}\nclass NodeCreateInstanceX {\n  _original: any;\n  width: number = 0;\n  height: number = 0;\n  type: string = 'view';\n  props: any;\n  children: any[] = [];\n  parent: any;\n\n  updateNode(style: any) {\n    // check reset function\n    this.reset();\n    // this.setHeightAuto();\n    // this.setWidthAuto();\n\n    // const nodeStyle: any = omitBy(style, isNil);\n\n    // console.log(nodeStyle, \"hello node w\");\n\n    const nodeStyle: any = pickBy(style, value => {\n      return !isNil(value) && value !== '';\n    });\n\n    map(nodeStyle, (value, key) => {\n      updateNodePositionalAttributes(this, key, value);\n    });\n  }\n  setType(type: any) {\n    this.type = type;\n  }\n  getType() {\n    return this.type;\n  }\n  setProps(props: any) {\n    return (this.props = props);\n  }\n  setChildren(children: any) {\n    return (this.children = children);\n  }\n\n  getComputedLayout() {\n    let layout = this._original.getComputedLayout();\n    return layout;\n  }\n\n  calculateLayout(width: any, height: any, direction: any) {\n    let layout = this._original.calculateLayout(width, height, direction);\n\n    // traverseNode(this, (child: any) => {\n    //   if (child) {\n    //     if (child.type === 'text' || child.type === 'icon') {\n    //       let dims = { width: 0, height: 0 };\n\n    //       if (child.isAutoWidth() || child.isAutoHeight()) {\n    //         let text = child.children;\n\n    //         if (child.type === 'icon') {\n    //           text = iconToText(child.props).text;\n    //         }\n\n    //         let containerDims = getContainerDims(child);\n\n    //         let rootWidth = getRoot(child).getWidth();\n    //         // getRoot(child).getWidth(); //getRoot(child).getWidth();\n    //         let rootHeight = getRoot(child).getHeight();\n    //         // getRoot(child.yogaNode).getWidth(); //getRoot(child).getWidth();\n\n    //         containerDims.width = Math.min(containerDims.width, rootWidth);\n    //         // let style = { ...child.props.style };\n    //         // let newText = text.replace ? text.replace(/[ ]/g, \"<br/>\") : text;\n    //         // let dims = Utils.memoizedCalculateTextDims(\n    //         //   newText,\n    //         //   style,\n    //         //   { isAbsolute: true },\n    //         //   { width: rootWidth, height: rootHeight }\n    //         // );\n\n    //         if (containerDims.isAbsolute) {\n    //           // if (dims.width < rootWidth) {\n    //           //   containerDims.width = rootWidth - containerDims.left;\n    //           // } else {\n    //           //   containerDims.width = dims.width;\n    //           // }\n    //           let parentFixedWidth = getFixedWidthParent(child.yogaNode);\n    //           if (parentFixedWidth) {\n    //             // containerDims.width = dims.width;\n    //           }\n\n    //           // DOC: uncommented works fine in yoga demo, but breaking for session\n    //           // if (dims.height < rootHeight) {\n    //           //   containerDims.height = rootHeight - containerDims.top;\n    //           // } else {\n    //           //   containerDims.height = dims.height;\n    //           // }\n    //           // let parentFixedHeight = getFixedHeightParent(child.yogaNode);\n    //           // if (parentFixedHeight) {\n    //           //   containerDims.height = dims.height;\n    //           // }\n    //         }\n    //         const layerStyle = child.props.style.toJS\n    //           ? child.props.style.toJS()\n    //           : child.props.style;\n\n    //         dims = Utils.memoizedCalculateTextDims(\n    //           text,\n    //           resolveLiteralNode(layerStyle),\n    //           containerDims,\n    //           { width: rootWidth, height: rootHeight }\n    //         );\n    //       }\n\n    //       if (child.isAutoWidth()) {\n    //         child.setWidth(dims.width);\n    //       }\n\n    //       if (child.isAutoHeight()) {\n    //         child.setHeight(dims.height);\n    //       }\n    //     }\n    //   }\n    // });\n\n    layout = this._original.calculateLayout(width, height, direction);\n    return layout;\n  }\n  free() {\n    return this._original.free();\n  }\n\n  getRootLeft() {\n    let left = 0;\n    var parent = this;\n    while (parent) {\n      left += parent.getComputedLeft();\n      parent = parent.parent;\n    }\n\n    return left;\n  }\n\n  getRootTop() {\n    let top = this.getComputedTop();\n    var parent = this;\n    while (parent) {\n      top += parent.getComputedTop();\n      parent = parent.parent;\n    }\n\n    return top;\n  }\n\n  isFillWidth() {\n    const position = this.getPositionType();\n    // const property = this.getWidth();\n\n    if (position) {\n      let left, right;\n      left = this.props.style.left;\n      right = this.props.style.right;\n\n      if (!isNil(left) && !isNil(right)) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      const flexDirection = this.getFlexDirection();\n      const flex = this.getFlexGrow();\n\n      if (!flex) {\n        return false;\n      }\n\n      if (flexDirection) {\n        // Main axis\n\n        if (isNil(flex) || isNaN(flex)) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        // Cross axis\n        const alignSelf = this.getAlignSelf();\n\n        if (alignSelf) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n  }\n\n  isAutoWidth() {\n    const position = this.getPositionType();\n    const width = get(this.props, 'style.width');\n    if (position) {\n      // let left = this.getComputedLeft();\n      // let right = this.getComputedRight();\n\n      // console.log(left, right, this.props.style.left, \"left right left\");\n      // if (isNil(left) && isNil(right) && isNaN(property.value)) {\n      //   return true;\n      // }\n\n      if (!isNil(this.props.style.left) && !isNil(this.props.style.right)) {\n        return false;\n      } else if (isNil(width)) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      const flexDirection = this.getFlexDirection();\n\n      const flex = this.getFlexGrow();\n\n      if (!flex) {\n        if (isNil(width)) {\n          return true;\n        }\n\n        if (!isNil(width)) {\n          return false;\n        }\n      }\n\n      if (flexDirection) {\n        // Main axis\n        if (isNil(flex) || isNaN(flex)) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        // Cross axis\n        const alignSelf = this.getAlignSelf();\n\n        if (alignSelf) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n  }\n  isAutoHeight() {\n    const position = this.getPositionType();\n    const height = get(this.props, 'style.height');\n    if (position) {\n      // if (isNaN(property.value)) {\n      //   return true;\n      // }\n\n      // let top, bottom;\n\n      // top = this.getComputedLeft();\n      // bottom = this.getComputedRight();\n\n      if (!isNil(this.props.style.top) && !isNil(this.props.style.bottom)) {\n        return false;\n      } else if (isNil(height)) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      const flexDirection = this.getFlexDirection();\n      const flex = this.getFlexGrow();\n      if (!flex) {\n        if (isNil(height)) {\n          return true;\n        }\n        if (!isNil(height)) {\n          return false;\n        }\n      }\n\n      if (flexDirection) {\n        // Main axis\n\n        const alignSelf = this.getAlignSelf();\n\n        if (alignSelf) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        if (isNil(flex) || isNaN(flex)) {\n          return true;\n        } else {\n          return false;\n        }\n        // Cross axis\n      }\n    }\n  }\n\n  isAbsolute() {\n    var parent = this;\n    var isAbsolute = false;\n    var done = false;\n    while (parent && !done) {\n      const position = parent.getPositionType();\n      if (position) {\n        isAbsolute = true;\n        done = true;\n      }\n\n      // if (!parent.isAutoWidth()) {\n      //   // isAbsolute = false;\n      //   // done = true;\n      // }\n      parent = parent.parent;\n    }\n\n    return isAbsolute;\n  }\n\n  freeRecursive() {\n    return this._original.freeRecursive();\n  }\n  getAlignContent() {\n    return this._original.getAlignContent();\n  }\n  getAlignItems() {\n    return this._original.getAlignItems();\n  }\n  getAlignSelf() {\n    return this._original.getAlignSelf();\n  }\n  getAspectRatio() {\n    return this._original.getAspectRatio();\n  }\n  getBorder(edge: any) {\n    return this._original.getBorder(edge);\n  }\n  getChild(index: any) {\n    return this._original.getChild(index);\n  }\n  getChildCount() {\n    return this._original.getChildCount();\n  }\n  getComputedBorder(edge: any) {\n    return this._original.getComputedBorder(edge);\n  }\n  getComputedBottom() {\n    return this._original.getComputedBottom();\n  }\n  getComputedHeight() {\n    return this._original.getComputedHeight();\n  }\n\n  getComputedLeft() {\n    return this._original.getComputedLeft();\n  }\n  getComputedMargin(edge: any) {\n    return this._original.getComputedMargin(edge);\n  }\n  getComputedPadding(edge: any) {\n    return this._original.getComputedPadding(edge);\n  }\n  getComputedRight() {\n    return this._original.getComputedRight();\n  }\n  getComputedTop() {\n    return this._original.getComputedTop();\n  }\n  getComputedWidth() {\n    return this._original.getComputedWidth();\n  }\n  getDisplay() {\n    return this._original.getDisplay();\n  }\n  getFlexBasis() {\n    return this._original.getFlexBasis();\n  }\n  getFlexDirection() {\n    return this._original.getFlexDirection();\n  }\n  getFlexGrow() {\n    return this._original.getFlexGrow();\n  }\n  getFlexShrink() {\n    return this._original.getFlexShrink();\n  }\n  getFlexWrap() {\n    return this._original.getFlexWrap();\n  }\n  getHeight() {\n    return this._original.getHeight();\n  }\n  getJustifyContent() {\n    return this._original.getJustifyContent();\n  }\n  getMargin(edge: any) {\n    return this._original.getMargin(edge);\n  }\n  getMaxHeight() {\n    return this._original.getMaxHeight();\n  }\n  getMaxWidth() {\n    return this._original.getMaxWidth();\n  }\n  getMinHeight() {\n    return this._original.getMinHeight();\n  }\n  getMinWidth() {\n    return this._original.getMinWidth();\n  }\n  getOverflow() {\n    return this._original.getOverflow();\n  }\n  getPadding(edge: any) {\n    return this._original.getPadding(edge);\n  }\n  getParent() {\n    return this._original.getParent();\n  }\n  getPosition(edge: any) {\n    return this._original.getPosition(edge);\n  }\n  getPositionType() {\n    return this._original.getPositionType();\n  }\n  getWidth() {\n    return this._original.getWidth();\n  }\n  insertChild(child: any, index: any) {\n    child.parent = this;\n    this.children.splice(index, 0, child);\n    return this._original.insertChild(child._original, index);\n  }\n  isDirty() {\n    return this._original.isDirty();\n  }\n  markDirty() {\n    return this._original.markDirty();\n  }\n  removeChild(child: any) {\n    var indexOfChild = this.children.indexOf(child);\n    this.children.splice(indexOfChild, 1);\n    return this._original.removeChild(child._original);\n  }\n  reset() {\n    this.setPositionType('relative');\n    this.setPosition(yoga.EDGE_LEFT, NaN);\n    this.setPosition(yoga.EDGE_RIGHT, NaN);\n    this.setPosition(yoga.EDGE_TOP, NaN);\n    this.setPosition(yoga.EDGE_BOTTOM, NaN);\n    this.setAlignContent('flex-start');\n    // this.setAlignItems(\"stretch\");\n    this.setAlignSelf('auto');\n    this.setAspectRatio('auto');\n    this.setBorder(yoga.EDGE_ALL, 0);\n    this.setBorder(yoga.EDGE_LEFT, 0);\n    this.setBorder(yoga.EDGE_RIGHT, 0);\n    this.setBorder(yoga.EDGE_TOP, 0);\n    this.setBorder(yoga.EDGE_BOTTOM, 0);\n    this.setDisplay(undefined);\n    this.setFlex(NaN);\n    this.setFlexBasis(NaN);\n    this.setFlexBasisPercent(undefined);\n    this.setFlexDirection('column');\n    // this.setFlex(0);\n    // this.setFlexShrink(1);\n    this.setFlexWrap('wrap');\n    this.setHeight(NaN);\n    this.setHeightAuto();\n    this.setWidth(NaN);\n    this.setWidthAuto();\n    this.setHeightPercent(undefined);\n    this.setJustifyContent('flex-start');\n    this.setMargin(yoga.EDGE_ALL, 0);\n    this.setMargin(yoga.EDGE_LEFT, 0);\n    this.setMargin(yoga.EDGE_RIGHT, 0);\n    this.setMargin(yoga.EDGE_TOP, 0);\n    this.setMargin(yoga.EDGE_BOTTOM, 0);\n    this.setMarginAuto(yoga.EDGE_ALL);\n    this.setMarginAuto(yoga.EDGE_LEFT);\n    this.setMarginAuto(yoga.EDGE_RIGHT);\n    this.setMarginAuto(yoga.EDGE_TOP);\n    this.setMarginAuto(yoga.EDGE_BOTTOM);\n    this.setMarginPercent(yoga.EDGE_ALL, undefined);\n    this.setMarginPercent(yoga.EDGE_LEFT, undefined);\n    this.setMarginPercent(yoga.EDGE_RIGHT, undefined);\n    this.setMarginPercent(yoga.EDGE_TOP, undefined);\n    this.setMarginPercent(yoga.EDGE_BOTTOM, undefined);\n    this.setMaxHeight(NaN);\n    this.setMaxHeightPercent(undefined);\n    this.setMaxWidth(NaN);\n    this.setMaxWidthPercent(undefined);\n    this.setMinHeight(NaN);\n    this.setMinHeightPercent(undefined);\n    this.setMinWidth(NaN);\n    this.setMinWidthPercent(undefined);\n    this.setOverflow(undefined);\n    this.setPadding(yoga.EDGE_ALL, 0);\n    this.setPadding(yoga.EDGE_LEFT, 0);\n    this.setPadding(yoga.EDGE_RIGHT, 0);\n    this.setPadding(yoga.EDGE_TOP, 0);\n    this.setPadding(yoga.EDGE_BOTTOM, 0);\n    this.setPaddingPercent(yoga.EDGE_ALL, undefined);\n    this.setPaddingPercent(yoga.EDGE_LEFT, undefined);\n    this.setPaddingPercent(yoga.EDGE_RIGHT, undefined);\n    this.setPaddingPercent(yoga.EDGE_TOP, undefined);\n    this.setPaddingPercent(yoga.EDGE_BOTTOM, undefined);\n    this.setPositionPercent(yoga.EDGE_LEFT, undefined);\n    this.setPositionPercent(yoga.EDGE_RIGHT, undefined);\n    this.setPositionPercent(yoga.EDGE_TOP, undefined);\n    this.setPositionPercent(yoga.EDGE_BOTTOM, undefined);\n    this.setWidthPercent(undefined);\n  }\n  setAlignContent(alignContent: any) {\n    return this._original.setAlignContent(alignContent);\n  }\n  setAlignItems(alignItems: any) {\n    return this._original.setAlignItems(alignItems);\n  }\n  setAlignSelf(alignSelf: any) {\n    return this._original.setAlignSelf(alignSelf);\n  }\n  setAspectRatio(aspectRatio: any) {\n    return this._original.setAspectRatio(aspectRatio);\n  }\n  setBorder(edge: any, borderWidth: any) {\n    return this._original.setBorder(edge, borderWidth);\n  }\n  setDisplay(display: any) {\n    return this._original.setDisplay(display);\n  }\n  setFlex(flex: any) {\n    this.setFlexShrink(0);\n    this.setFlexBasis(0);\n    // this.setFlexBasisPercent(undefined);\n    return this.setFlexGrow(flex);\n    // return this._original.setFlex(flex);\n  }\n  setFlexBasis(flexBasis: any) {\n    return this._original.setFlexBasis(flexBasis);\n  }\n  setFlexBasisPercent(flexBasis: any) {\n    return this._original.setFlexBasisPercent(flexBasis);\n  }\n  setFlexDirection(flexDirection: any) {\n    return this._original.setFlexDirection(flexDirection);\n  }\n  setFlexGrow(flexGrow: any) {\n    return this._original.setFlexGrow(flexGrow);\n  }\n  setFlexShrink(flexShrink: any) {\n    return this._original.setFlexShrink(flexShrink);\n  }\n  setFlexWrap(flexWrap: any) {\n    return this._original.setFlexWrap(flexWrap);\n  }\n  setHeight(height: any) {\n    this.height = height;\n    return this._original.setHeight(height);\n  }\n  setHeightAuto() {\n    return this._original.setHeightAuto();\n  }\n  setHeightPercent(height: any) {\n    return this._original.setHeightPercent(height);\n  }\n  setJustifyContent(justifyContent: any) {\n    return this._original.setJustifyContent(justifyContent);\n  }\n  setMargin(edge: any, margin: any) {\n    return this._original.setMargin(edge, margin);\n  }\n  setMarginAuto(edge: any) {\n    return this._original.setMarginAuto(edge);\n  }\n  setMarginPercent(edge: any, margin: any) {\n    return this._original.setMarginPercent(edge, margin);\n  }\n  setMaxHeight(maxHeight: any) {\n    return this._original.setMaxHeight(maxHeight);\n  }\n  setMaxHeightPercent(maxHeight: any) {\n    return this._original.setMaxHeightPercent(maxHeight);\n  }\n  setMaxWidth(maxWidth: any) {\n    return this._original.setMaxWidth(maxWidth);\n  }\n  setMaxWidthPercent(maxWidth: any) {\n    return this._original.setMaxWidthPercent(maxWidth);\n  }\n  setMeasureFunc(measureFunc: any) {\n    return this._original.setMeasureFunc(measureFunc);\n  }\n  setMinHeight(minHeight: any) {\n    return this._original.setMinHeight(minHeight);\n  }\n  setMinHeightPercent(minHeight: any) {\n    return this._original.setMinHeightPercent(minHeight);\n  }\n  setMinWidth(minWidth: any) {\n    return this._original.setMinWidth(minWidth);\n  }\n  setMinWidthPercent(minWidth: any) {\n    return this._original.setMinWidthPercent(minWidth);\n  }\n  setOverflow(overflow: any) {\n    return this._original.setOverflow(overflow);\n  }\n  setPadding(edge: any, padding: any) {\n    return this._original.setPadding(edge, padding);\n  }\n  setPaddingPercent(edge: any, padding: any) {\n    return this._original.setPaddingPercent(edge, padding);\n  }\n  setPosition(edge: any, position: any) {\n    return this._original.setPosition(edge, position);\n  }\n  setPositionPercent(edge: any, position: any) {\n    return this._original.setPositionPercent(edge, position);\n  }\n  setPositionType(positionType: any) {\n    return this._original.setPositionType(positionType);\n  }\n  setWidth(width: any) {\n    this.width = width;\n    return this._original.setWidth(width);\n  }\n  setWidthAuto() {\n    return this._original.setWidthAuto();\n  }\n  setWidthPercent(width: any) {\n    return this._original.setWidthPercent(width);\n  }\n  unsetMeasureFun() {\n    return this._original.unsetMeasureFun();\n  }\n}\n\nclass NodeX {\n  static create(config: any) {\n    var node = _Node.create(config);\n    var nodeX = new NodeCreateInstanceX();\n    nodeX.props = { style: {} };\n    nodeX._original = node;\n    return nodeX;\n  }\n}\nclass ConfigX {\n  static create() {\n    var config = _Config.create();\n    return config;\n  }\n}\nexport default {\n  Node: NodeX,\n  Config: ConfigX,\n};\n"],"names":["yoga","require","updateNodePositionalAttributes","yogaNode","key","value","undefined","setHeightAuto","setHeight","setWidthAuto","setWidth","NaN","setPosition","EDGE_LEFT","EDGE_RIGHT","EDGE_TOP","EDGE_BOTTOM","setPositionType","POSITION_TYPE_ABSOLUTE","setFlexGrow","setFlexShrink","setFlex","setAlignProperties","setDisplay","setFlexBasis","setFlexDirection","FLEX_DIRECTION_COLUMN","FLEX_DIRECTION_COLUMN_REVERSE","FLEX_DIRECTION_ROW","FLEX_DIRECTION_ROW_REVERSE","setFlexWrap","WRAP_WRAP","WRAP_NO_WRAP","WRAP_WRAP_REVERSE","setJustifyContent","JUSTIFY_CENTER","JUSTIFY_FLEX_END","JUSTIFY_FLEX_START","JUSTIFY_SPACE_AROUND","JUSTIFY_SPACE_BETWEEN","JUSTIFY_SPACE_EVENLY","setMaxHeight","setMaxWidth","setMinHeight","setMinWidth","indexOf","isNil","yogaEdge","EDGE_ALL","isArray","forEach","edge","setPadding","setBorder","edges","props","style","splice","setMarginAuto","setMargin","setBoxModelProperties","setOverflow","OVERFLOW_HIDDEN","OVERFLOW_SCROLL","OVERFLOW_VISIBLE","alignProperty","ALIGN_AUTO","ALIGN_BASELINE","ALIGN_CENTER","ALIGN_FLEX_END","ALIGN_FLEX_START","ALIGN_STRETCH","ALIGN_SPACE_AROUND","ALIGN_SPACE_BETWEEN","setAlignItems","setAlignContent","setAlignSelf","AntDesign","Entypo","EvilIcons","Feather","FontAwesome","Foundation","Ionicons","MaterialCommunityIcons","MaterialIcons","Octicons","IconFamilies","SimpleLineIcons","Zocial","_Node","Node","_Config","Config","NodeCreateInstanceX","updateNode","reset","nodeStyle","pickBy","map","_this","setType","type","getType","this","setProps","setChildren","children","getComputedLayout","_original","calculateLayout","width","height","direction","free","getRootLeft","left","parent","getComputedLeft","getRootTop","top","getComputedTop","isFillWidth","right","getPositionType","flexDirection","getFlexDirection","flex","getFlexGrow","isNaN","getAlignSelf","isAutoWidth","position","get","isAutoHeight","bottom","isAbsolute","done","freeRecursive","getAlignContent","getAlignItems","getAspectRatio","getBorder","getChild","index","getChildCount","getComputedBorder","getComputedBottom","getComputedHeight","getComputedMargin","getComputedPadding","getComputedRight","getComputedWidth","getDisplay","getFlexBasis","getFlexShrink","getFlexWrap","getHeight","getJustifyContent","getMargin","getMaxHeight","getMaxWidth","getMinHeight","getMinWidth","getOverflow","getPadding","getParent","getPosition","getWidth","insertChild","child","isDirty","markDirty","removeChild","indexOfChild","setAspectRatio","setFlexBasisPercent","setHeightPercent","setMarginPercent","setMaxHeightPercent","setMaxWidthPercent","setMinHeightPercent","setMinWidthPercent","setPaddingPercent","setPositionPercent","setWidthPercent","alignContent","alignItems","alignSelf","aspectRatio","borderWidth","display","flexBasis","flexGrow","flexShrink","flexWrap","justifyContent","margin","maxHeight","maxWidth","setMeasureFunc","measureFunc","minHeight","minWidth","overflow","padding","positionType","unsetMeasureFun","create","config","node","nodeX","family1","family","text","String","fromCharCode","name"],"mappings":"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"}