/// <reference types="lodash" />
export declare class Utils {
    static memoizedCalculateTextDims: typeof Utils.calculateTextDims & import("lodash").MemoizedFunction;
    static getAdjustedDims(style: any, prop: string, parentDims: any): string | undefined;
    static calculateTextDims(text: any, style: any, parentDims: any, root: any): {
        width: any;
        height: any;
    };
}
declare class NodeCreateInstanceX {
    _original: any;
    width: number;
    height: number;
    type: string;
    props: any;
    children: any[];
    parent: any;
    updateNode(style: any): void;
    setType(type: any): void;
    getType(): string;
    setProps(props: any): any;
    setChildren(children: any): any;
    getComputedLayout(): any;
    calculateLayout(width: any, height: any, direction: any): any;
    free(): any;
    getRootLeft(): number;
    getRootTop(): any;
    isFillWidth(): boolean;
    isAutoWidth(): boolean;
    isAutoHeight(): boolean;
    isAbsolute(): boolean;
    freeRecursive(): any;
    getAlignContent(): any;
    getAlignItems(): any;
    getAlignSelf(): any;
    getAspectRatio(): any;
    getBorder(edge: any): any;
    getChild(index: any): any;
    getChildCount(): any;
    getComputedBorder(edge: any): any;
    getComputedBottom(): any;
    getComputedHeight(): any;
    getComputedLeft(): any;
    getComputedMargin(edge: any): any;
    getComputedPadding(edge: any): any;
    getComputedRight(): any;
    getComputedTop(): any;
    getComputedWidth(): any;
    getDisplay(): any;
    getFlexBasis(): any;
    getFlexDirection(): any;
    getFlexGrow(): any;
    getFlexShrink(): any;
    getFlexWrap(): any;
    getHeight(): any;
    getJustifyContent(): any;
    getMargin(edge: any): any;
    getMaxHeight(): any;
    getMaxWidth(): any;
    getMinHeight(): any;
    getMinWidth(): any;
    getOverflow(): any;
    getPadding(edge: any): any;
    getParent(): any;
    getPosition(edge: any): any;
    getPositionType(): any;
    getWidth(): any;
    insertChild(child: any, index: any): any;
    isDirty(): any;
    markDirty(): any;
    removeChild(child: any): any;
    reset(): void;
    setAlignContent(alignContent: any): any;
    setAlignItems(alignItems: any): any;
    setAlignSelf(alignSelf: any): any;
    setAspectRatio(aspectRatio: any): any;
    setBorder(edge: any, borderWidth: any): any;
    setDisplay(display: any): any;
    setFlex(flex: any): any;
    setFlexBasis(flexBasis: any): any;
    setFlexBasisPercent(flexBasis: any): any;
    setFlexDirection(flexDirection: any): any;
    setFlexGrow(flexGrow: any): any;
    setFlexShrink(flexShrink: any): any;
    setFlexWrap(flexWrap: any): any;
    setHeight(height: any): any;
    setHeightAuto(): any;
    setHeightPercent(height: any): any;
    setJustifyContent(justifyContent: any): any;
    setMargin(edge: any, margin: any): any;
    setMarginAuto(edge: any): any;
    setMarginPercent(edge: any, margin: any): any;
    setMaxHeight(maxHeight: any): any;
    setMaxHeightPercent(maxHeight: any): any;
    setMaxWidth(maxWidth: any): any;
    setMaxWidthPercent(maxWidth: any): any;
    setMeasureFunc(measureFunc: any): any;
    setMinHeight(minHeight: any): any;
    setMinHeightPercent(minHeight: any): any;
    setMinWidth(minWidth: any): any;
    setMinWidthPercent(minWidth: any): any;
    setOverflow(overflow: any): any;
    setPadding(edge: any, padding: any): any;
    setPaddingPercent(edge: any, padding: any): any;
    setPosition(edge: any, position: any): any;
    setPositionPercent(edge: any, position: any): any;
    setPositionType(positionType: any): any;
    setWidth(width: any): any;
    setWidthAuto(): any;
    setWidthPercent(width: any): any;
    unsetMeasureFun(): any;
}
declare class NodeX {
    static create(config: any): NodeCreateInstanceX;
}
declare class ConfigX {
    static create(): any;
}
declare const _default: {
    Node: typeof NodeX;
    Config: typeof ConfigX;
};
export default _default;
