import { Serializable } from '../serializable';
export declare type onUpdateListener = (...args: Array<any>) => void;
export declare const shouldStopUpdates: (value: boolean) => void;
export declare const action: (callback: any) => void;
export declare const noRerender: (callback: any) => void;
export default abstract class Model extends Serializable {
    eventListenersMap: Map<string, Array<onUpdateListener>>;
    reverseMap: Map<onUpdateListener, Array<string>>;
    disposed?: boolean;
    getFields(): {
        [key: string]: any;
    };
    on(properties: Array<string> | string, listener: onUpdateListener): void;
    emit(properties: Array<string> | string): void;
    off(properties: Array<string> | string, listener: onUpdateListener): void;
}
