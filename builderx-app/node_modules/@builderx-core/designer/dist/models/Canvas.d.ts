import * as React from 'react';
import { IPosition, IComponentMap, IComponentDefinition, IContext } from './../interfaces';
import { LayerInstantiable as Layer } from './Layer';
import { IPlugin, IDimensionWithRotation } from 'interfaces';
import FunctionRegistry from './FunctionRegistry';
import DesignerMouseEvent from '../events/MouseEvent';
export declare class Canvas extends Layer {
    private plugins;
    private dom;
    private zoom;
    private _mouseCursorType;
    private scroll;
    private viewport;
    private _viewportRef;
    private _hoveredLayers;
    private _selectedLayers;
    private _stackWorldDOM;
    private _stackViewportDOM;
    private _middlewareRegistry;
    private _functionRegistry;
    private _componentMap;
    private _isMouseDown;
    private _assetURL;
    private _mouseEventsBlocked;
    moveWithGrabHandle: boolean;
    constructor(dom: any);
    setMouseCursor(mouseCursorType: string): void;
    setScrollCallback(context: IContext, scrollDims: any): void;
    setZoomCallback(context: IContext, zoom: number): void;
    get mouseEventsBlocked(): boolean;
    blockMouseEvents(): void;
    unblockMouseEvents(): void;
    get functionRegistry(): FunctionRegistry;
    createLayer(): Layer;
    addMiddleware(name: string, callback: (next: Function, data: any) => any): void;
    executeMiddleware(name: string, data: any, callback: any): any;
    addFunction(name: string, callback: (context: IContext, ...args: any[]) => any): void;
    removeFunction(name: string): void;
    setAssetUrl(url: string): void;
    setViewport(dims: {
        width: number;
        height: number;
    }): void;
    setViewportRef(ref: any): void;
    getViewport(): {
        width: number;
        height: number;
    };
    setZoom(zoom: number): void;
    getZoom(): number;
    setScroll(scroll: IPosition): void;
    getScroll(): IPosition;
    get assetURL(): string;
    get hoveredLayers(): Layer[];
    get mouseCursorType(): any;
    get selectedLayers(): Layer[];
    get stackWorldDOM(): Array<any>;
    get stackViewportDOM(): Array<any>;
    get componentMap(): IComponentMap;
    get isMouseDown(): boolean;
    setMouseDown(val: boolean): void;
    setHoverLayers(layers: Array<Layer> | Layer | undefined): void;
    selectLayers(layers: Array<Layer> | Layer | undefined): void;
    private convertPointFromViewportToWorld;
    private convertPointFromWorldToViewport;
    private convertPointFromPageToViewport;
    private convertPointFromViewportToPage;
    convertPoint: (point: IPosition, from: 'viewport' | 'page' | 'world', to: 'viewport' | 'page' | 'world') => IPosition;
    installPlugin(plugin: IPlugin): void;
    dispatchEventOnHitLayer(name: string, event: DesignerMouseEvent, dispatchedData?: any): void;
    addComponent(type: string, ReactComponent: React.ComponentClass<any, any>, componentDefinition: IComponentDefinition): void;
    getComponentDefinition(type: string): IComponentDefinition;
    getRenderer(type: string): React.ComponentClass<any, any>;
    addDomToWorld(domElement: any, maintainScale?: boolean, zIndex?: number): () => void;
    removeDomFromWorld(ele: any): void;
    addDomToViewport(domElement: any): () => void;
    removeDomFromViewport(ele: string): void;
    dispatchHandledEvent(event: any): void;
    handleNativeEvent(event: React.MouseEvent | MouseEvent): void;
    getContainerBoundingBox(layers: Array<Layer>): IDimensionWithRotation;
    getContainerBoundingBoxWRTParent(layers: Array<Layer>): {
        x: number;
        y: number;
        rootX: number;
        rootY: number;
        width: number;
        height: number;
        rotation: number;
    };
    getBoundingBox(layers: Array<Layer>, withoutRotation?: boolean, wrtParent?: boolean): IDimensionWithRotation;
    getBoundingBoxWRTParent(layers: Array<Layer>, withoutRotation?: boolean): {
        x: number;
        y: number;
        rootX: number;
        rootY: number;
        width: number;
        height: number;
        rotation: number;
    };
    enableMoveWithGrabHandle(): void;
    disableMoveWithGrabHandle(): void;
}
