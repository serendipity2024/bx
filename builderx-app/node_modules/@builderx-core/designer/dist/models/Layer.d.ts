import { Model } from './base-model';
import { Collisions } from 'detect-collisions';
import { IDimensionWithRoot, IDimensionWithRotation, IDimension } from './../interfaces';
import { EventCallableRegsitry } from '../events/EventCallableRegsitry';
import { IEventCallable } from '../events/IEventCallable';
import { Style } from './Style';
import { Props } from './Props';
import { Layout } from './Layout';
import { Canvas } from './Canvas';
import { Event } from '../events';
export declare abstract class Layer extends Model implements IEventCallable {
    private _name;
    private _type;
    private _parent;
    private _props;
    private _children;
    private _style;
    private _layout;
    private _innerText?;
    private _yogaNode;
    private _collisionScope;
    private _collisionNode;
    private _dims;
    private _domDims;
    private _dom;
    private _mouseProps;
    private _locked;
    private _visible;
    private _thirdParty;
    private _dragging;
    private _preservedProperties;
    private _eventCallableRegistry;
    private _canvas;
    private _aspectRatio;
    private _id;
    constructor(canvas?: Canvas);
    get aspectRatio(): number | undefined;
    setAspectRatio: (val: number | undefined) => void;
    setDomRef: (ref: any) => void;
    setDragging: (dragging: boolean) => void;
    getDomBoundingBox(dom: any, rotation: number): {
        top: number;
        left: number;
        width: number;
        height: number;
    };
    updateDomainCompileDimensions(ref: any): void;
    getCanvas(): Canvas;
    get id(): string;
    get dragging(): boolean;
    getFields(): {
        [key: string]: any;
    };
    get name(): string;
    get parent(): Layer | null;
    get type(): string;
    get props(): Props;
    get children(): Layer[];
    get style(): Style;
    get layout(): Layout;
    get yogaNode(): any;
    get collisionScope(): Collisions | null;
    get collisionNode(): any;
    setSelectable(val: boolean): void;
    get locked(): boolean;
    get visible(): boolean;
    get innerText(): string | undefined;
    get eventCallableRegistry(): EventCallableRegsitry;
    getBoundingClientRect(): IDimensionWithRoot & IDimensionWithRotation;
    getBounds(): IDimensionWithRotation;
    get rootX(): number;
    get rootY(): number;
    get rotation(): number;
    getMarginLeft(): any;
    getMarginTop(): any;
    getPaddingLeft(): any;
    getPaddingTop(): any;
    getBorderLeft(): any;
    getBorderTop(): any;
    setType(type: string): void;
    removeProp(key?: string): void;
    setProp(key: string, value?: any): void;
    lock(): void;
    unlock(): void;
    show(): void;
    hide(noShow?: boolean): void;
    setName(name: string): void;
    setStyle(key: string | object, value?: any): void;
    private setParent;
    setCollisionScope: (scope: Collisions | null) => void;
    executeFunction(name: string, ...args: any[]): any;
    addChild(layer: Layer, index?: number): void;
    removeChild(layer: Layer): void;
    move(newParent: Layer, newIndex?: number): void;
    getRootLayer(node?: Layer): any;
    private addYogaNode;
    getComputedLayout(): any;
    calculateLayout(): any;
    isFlexChild(): boolean;
    getTotalFlexOfFlexChildren(): number;
    getParentLayerFlexDirection(): any;
    isAutoWidth(): boolean;
    isAutoHeight(): boolean;
    isFillWidth(): boolean;
    isFillHeight(): boolean;
    getFlexValue(): any;
    getSiblingsWithFlex(): Array<Layer>;
    setYoga(): void;
    setYogaAfterBatch(): void;
    setChildrenLayout(layer: Layer): void;
    private emitLayoutChanges;
    onUpdateDom: () => void;
    setLayout(key: string | object, value?: any): void;
    recalculateLayout(): void;
    removeLayout(key?: string | object): void;
    removeStyle(key?: string): void;
    isValidLayoutKey(key: string): boolean;
    setViewport(key: string | object, value?: any): void;
    setDims(): void;
    setHeight(height: any): void;
    setWidth(width: any): void;
    getTransform(): any[];
    getAbsoluteRotation(): number;
    getRotatedDims(): {
        x: any;
        y: any;
        height: number;
        width: number;
        rotation: number;
    };
    getRotatedPolygon(): {
        centroid: any;
        poly: any[][];
        rotation: number;
    };
    private removeCollisionNode;
    private setCollisionNode;
    getPartialPath(node?: any): string;
    getDepth(): number;
    getIndexInParent(): number;
    getHitLayer(x: number, y: number): any;
    getHitResult(x: number, y: number): any;
    getHitRectResult(x: number, y: number, width: number, height: number): any;
    addEventListener(name: string, callback: any): void;
    removeEventListener(name: string, callback: any): void;
    dispatchEvent(name: string, event: Event, dispatchedData?: any): void;
    setInnerText(text: string): void;
    getDimensions: (dims: IDimension, container: any) => any;
    convertLayerDimensions(dims: IDimensionWithRotation): any;
    rerenderDescendants(): void;
}
export declare class LayerInstantiable extends Layer {
}
