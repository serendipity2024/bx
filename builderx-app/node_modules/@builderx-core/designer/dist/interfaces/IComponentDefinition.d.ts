export interface IComponentDefinition {
    version: string;
    template: ITemplate;
    thumbnail: string;
    name: string;
    controlsProperty: Array<ControlsProperty>;
    symbols?: Array<string>;
}
interface ITemplate {
    type: string;
    import: IImport;
    style: any;
    layout: any;
    props: IProps;
    innerText?: string;
    value?: string;
    children: Array<ITemplate | LiteralX>;
    styleName?: string;
    locked: boolean;
    template: ILayerTemplate;
    scopeVariables?: {
        [key: string]: any;
    };
}
interface IImport {
    layerName: string;
    packageName: string;
    isDefaultImport: boolean;
    asName: string;
}
interface IProps {
    [key: string]: any;
}
export declare type LiteralX = {
    type: string;
    value: any;
};
interface ILayerTemplate {
    centerVertical: boolean;
    centerHorizontal: boolean;
    repetitions?: number;
}
export interface ControlsProperty {
    title: string;
    type: 'string' | 'number' | 'range' | 'enum' | 'segmentedEnum' | 'color' | 'simpleColor' | 'bareColor' | 'component' | 'renderProp' | 'boolean' | 'group' | 'textArea' | 'OrientationEditor' | 'AlignmentEditor' | 'ResizingTypeEditor' | 'TextPropEditor' | 'FlexboxEditor' | 'CallbackEditor' | 'MarginPaddingEditor' | 'ShadowEditor' | 'BorderRadiusEditor' | 'BorderWidthEditor' | 'LayoutEditor' | 'FormControlEditor' | 'ResetConditionalEditor' | 'CustomConditionalEditor' | 'CarouselEditor' | 'TabViewEditor' | 'TabStyleEditor' | 'PathCurveTypeEditor' | 'TouchableOpacityEditor' | 'ScrollViewEditor' | 'TextToTextInputEditor' | 'ImageEditor' | 'AccessibilityLabel' | 'NavigationEditor' | 'NestedEnum' | 'DeviceTypeEditor' | 'StatusBarEditor' | 'LoopEditor' | 'PickerEditor' | 'IconEditor' | 'shadowColor' | 'shadowOffset' | 'shadowOpacity' | 'elevation';
    additionalOptions?: any;
    showForMultiple?: boolean;
    value: {
        options?: Array<string | number | Options>;
        defaultValue?: string | number | boolean | ITemplate;
        placeholder?: string;
        max?: number;
        min?: number;
        step?: number;
        nestedEnumProperty?: {
            name?: string;
            title: string;
            category: 'props' | 'style';
        };
    };
    propertyName?: string;
    category?: 'props' | 'style';
    properties?: Array<ControlsProperty>;
}
interface Options {
    key: string;
    value: Array<string>;
}
export {};
