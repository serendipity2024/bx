import { Canvas, IPlugin } from '../../';
import { IContext, IDimensionWithRotation } from '../../interfaces';
export default class ResizerRendererPlugin implements IPlugin {
    ghostImageDOM?: any;
    name: string;
    namespace: string;
    canvas: Canvas;
    dispose: any;
    allowClickEvents: boolean;
    wrapperLayer: any;
    resizerHandleLayersRef: Map<string, any>;
    resizerData: {
        dims: IDimensionWithRotation;
        handles: Array<string>;
    };
    defaultHandles: Array<string>;
    passedEvent: string[];
    show: boolean;
    init(canvas: Canvas): void;
    handleGhostImage(e: any): void;
    disposeGhostImage(): void;
    setAllowClickEvents(context: IContext, value: boolean): void;
    setHandleStyle(handleInstance: any, handleName: string): void;
    getCursor(handleName: string): string;
    getRotationQuad(rotation: number): 8 | 1 | 2 | 7 | 4 | 3 | 5 | 6;
    getRotationCursor(handleName: string): string;
    getInitialRotation(handleName: string): 0 | 90 | 180 | 270;
    addEventListeners(handleLayer: any, handleName: string, rotationType?: string): void;
    renderHandles(): void[];
    isVisible(): number | false;
    renderResizer(): void;
    toggleResizer(show: boolean): void;
    showHandle(context: IContext, name: string): void;
    hideHandle(context: IContext, name: string): void;
    hideAllHandles(context: IContext): void;
    isValidKey(key: string): boolean;
    setResizerOrientation(context: any, key: 'x' | 'y' | 'height' | 'width' | 'rotation' | object, value?: any): void;
    resetCursor(): void;
    setCursor(to: string): void;
    passEvent(e: Event): void;
    handleLayerListeners(handle: any): void;
    activate(): void;
    getResizerQuad(rotation: number): string;
    renderDragLayer: () => void;
    deactivate(): void;
}
