import { IPlugin } from 'interfaces/IPlugin';
import { Canvas } from 'models/Canvas';
import { IContext, IDimension } from 'interfaces';
export default class DrawComponent implements IPlugin {
    name: string;
    canvas: Canvas;
    removeDom: any;
    mouseDown: boolean;
    dragStarted: boolean;
    dragStart: any;
    renderer: any;
    isShiftPressed: boolean;
    isAltPressed: boolean;
    overlayDispose: any;
    overlayLayer: any;
    dims: IDimension;
    dragSession: {
        start: {
            x: number;
            y: number;
            deltaX: number;
            deltaY: number;
        };
        current: {
            x: number;
            y: number;
            deltaX: number;
            deltaY: number;
        };
        end: {
            x: number;
            y: number;
            deltaX: number;
            deltaY: number;
        };
    };
    shapeType: any;
    ellipseRenderer: any;
    boundMouseMove: any;
    boundMouseUp: any;
    snapPoints: any;
    initialDelta: any;
    initialDimensions: any;
    newDimensions: any;
    getQuad: (start: {
        x: number;
        y: number;
    }, current: {
        x: number;
        y: number;
    }) => 1 | 2 | 3 | 4;
    onMouseMove: (shapeType: any, e: any) => void;
    onMouseUp: (e: any) => void;
    drawShape(context: IContext, shapeType?: string, cursor?: string): void;
    clickEvent: (data: any) => void;
    abortDraw: () => void;
    setSnapPoints: (context: IContext, snapPoints: any) => void;
    init(canvas: Canvas): void;
    activate(): void;
    deactivate(): void;
}
