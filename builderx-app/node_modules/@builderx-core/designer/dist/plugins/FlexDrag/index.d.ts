import { Canvas, Layer, IPlugin } from '../..';
import { IDimensionWithRotation } from 'interfaces';
export default class FlexDragPlugin implements IPlugin {
    name: string;
    namespace: string;
    canvas: Canvas;
    disabled: boolean;
    layerOpacities: Map<Layer, number>;
    previousTriggerPoint: number | null;
    nextTriggerPoint: number | null;
    targetInitialDims: IDimensionWithRotation;
    target: Array<Layer> | Layer;
    flexDirection: string;
    flexLayers: Array<Layer | undefined>;
    totalDx: number;
    totalDy: number;
    newTargetIndex: number | undefined;
    initialSnapshotData: Map<Layer, any>;
    beforeDragSnapshotData: Map<Layer, any>;
    currentSnapshotData: Map<Layer, any>;
    ghostLayer: Layer;
    targetGhostLayer: Layer;
    isFlex: boolean;
    layersHeightWidth: Map<Layer, {
        height: any;
        width: any;
    }>;
    initialParentData: {
        layer: Layer;
        dims: any;
    } | undefined;
    init(canvas: Canvas): void;
    activate(): void;
    saveLayersHeightWidth: (layer: Layer) => void;
    clearFlexLayersHeightWidth: () => void;
    saveSiblingOpacity: (parentLayer: Layer) => void;
    revertSiblingOpacity: () => void;
    layerResizerDrag: (next: any, event: any) => any;
    layerResizerDragEnd: (next: any, event: any) => any;
    revertParentDims: () => void;
    changeParentDims: (layer: Layer) => void;
    setFlexLayers: () => void;
    createGhostLayer: (layout: any, parent: Layer) => void;
    startGhostDragging: (event: any) => void;
    ghostMove: (e: any) => void;
    ghostMouseUp: (e: any) => void;
    getMarginAdjustedBounds: (layer: Layer) => {
        x: number;
        y: number;
        width: number;
        height: number;
        rootX: number;
        rootY: number;
        rotation: number;
    };
    endFlexLayerDragging: (event: any) => void;
    recordCurrentSnapshot: (parent: Layer) => void;
    changeToAbsolute: (parent: Layer) => void;
    revertBackToSnapshot: (parent: Layer, snapshotData: Map<Layer, any>) => void;
    findAbsolutePreviousLayer: (index: number) => Layer | undefined;
    findPreviousLayer: (index: number) => Layer | undefined;
    findAbsoluteNextLayer: (index: any) => Layer | undefined;
    findNextLayer: (index: number) => Layer | undefined;
    setTriggerPoints: () => void;
    calculateTriggerPoint: (previousLayerDims: IDimensionWithRotation, nextLayerDims: IDimensionWithRotation) => number;
    handleSwapWRTNewPosition: (oldCenter: number, newCenter: number) => void;
    internalMove: (targetLayer: Layer, newIndex: number) => void;
    layerDragStart: (next: any, event: any) => any;
    layerDrag: (next: any, event: any) => void;
    layerDragEnd: (next: any, event: any) => any;
    deactivate(): void;
}
