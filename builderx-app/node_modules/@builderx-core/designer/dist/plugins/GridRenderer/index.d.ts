import { IPlugin, IContext, Canvas } from '../../';
import GridDimension from './interfaces/GridDimension';
import GridData from './interfaces/GridData';
import { Layer } from '../../models/Layer';
export default class GridRenderer implements IPlugin {
    name: string;
    canvas: Canvas;
    dispose: any;
    gridLayers: Map<Layer, GridData>;
    gridWrapper: any;
    gridLayersRef: Map<Layer, Map<string, any>>;
    gridOffset: {
        x: number;
        y: number;
    };
    init(canvas: Canvas): void;
    activate(): void;
    deactivate(): void;
    refreshGrid: (layer: Layer) => void;
    getGridSize: (context: IContext) => GridDimension | null;
    setGridSize: (context: IContext, gridSize: any) => void;
    hideGrid: (context: IContext) => void;
    showGrid: (context: IContext, dims: GridDimension) => void;
    setGridOffset: (context: IContext, offset: any) => void;
    getGridOffset: (context: IContext, dims: GridDimension) => {
        x: number;
        y: number;
    };
    adjustStroke: () => void;
    createGrid: (layer: Layer, gridDims: GridDimension) => void;
}
