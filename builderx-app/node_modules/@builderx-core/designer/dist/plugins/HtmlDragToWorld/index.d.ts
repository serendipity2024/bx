import { Canvas, IPlugin, MouseEvent } from '../../';
import { IDimensionWithRotation, IPosition } from 'interfaces';
export default class HtmlDragToWorldPlugin implements IPlugin {
    name: string;
    namespace: string;
    canvas: Canvas;
    resizerHandleLayersRef: Map<string, any>;
    initPos: IPosition;
    relPos: IPosition;
    lastPos: IPosition;
    startValues: {
        x: number;
        y: number;
        height: number;
        width: number;
        rotation: number;
    };
    dragSession: {
        start: {
            x: number;
            y: number;
            deltaX: number;
            deltaY: number;
        };
        current: {
            x: number;
            y: number;
            deltaX: number;
            deltaY: number;
        };
        end: {
            x: number;
            y: number;
            deltaX: number;
            deltaY: number;
        };
    };
    init(canvas: Canvas): void;
    setStartValues: (dims: IDimensionWithRotation) => void;
    startDragSession: (x: number, y: number) => void;
    endDragSession: () => void;
    updateDragSession: (dx: number, dy: number) => void;
    dragStart(context: any, e: any, initialDims: IDimensionWithRotation): {
        event: MouseEvent;
        startValues: {
            x: number;
            y: number;
            height: number;
            width: number;
            rotation: number;
        };
        session: {
            start: {
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
            };
            current: {
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
            };
            end: {
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
            };
        };
    };
    drag(context: any, e: any): {
        event: MouseEvent;
        startValues: {
            x: number;
            y: number;
            height: number;
            width: number;
            rotation: number;
        };
        session: {
            start: {
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
            };
            current: {
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
            };
            end: {
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
            };
        };
    };
    dragEnd(context: any, e: any): {
        event: MouseEvent;
        startValues: {
            x: number;
            y: number;
            height: number;
            width: number;
            rotation: number;
        };
        session: {
            start: {
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
            };
            current: {
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
            };
            end: {
                x: number;
                y: number;
                deltaX: number;
                deltaY: number;
            };
        };
    };
    activate(): void;
    deactivate(): void;
}
