import { Canvas, IPlugin, Layer, IContext } from '../..';
export default class StageDesigner implements IPlugin {
    name: string;
    canvas: Canvas;
    artboards: Map<string, Layer>;
    selectedArtboard?: Layer;
    topLayerSelectionMode: boolean;
    previousMovedLayers: Array<Layer>;
    init(canvas: Canvas): void;
    activate(): void;
    getNewRootLayer: (targetDims: any, currentArtboard: any) => Layer | undefined;
    handleMoveLayerArtboard: (event: any) => void;
    moveLayer: (layer: Layer, newRootLayer: Layer) => Layer;
    addArtboard(context: IContext, filePath: string): Layer;
    removeArtboard(context: IContext, filePath: string): void;
    selectArtboard(context: IContext, artboard: Layer): void;
    focusArtboard(context: IContext): void;
    getHitArtboard(context: IContext, x: number, y: number): Layer | null;
    getSelectedArtboard(context: IContext, filePath: string): Layer | undefined;
    getSelectedArtboardId(context: IContext): any;
    getAllArtboards(context: IContext): Map<string, Layer>;
    getArtboardById(context: IContext, path: string): Layer | undefined;
    getArtboard(context: IContext): Layer | null;
    getNewArtboardPosition: () => {
        left: number;
        top: number;
        artTop: number;
        artLeft: number;
    };
    modifyEventForSelectableLayers(event: any, forLayerDrag?: boolean): void;
    setTopLayerSelectionMode(value: boolean): void;
    deactivate(): void;
}
