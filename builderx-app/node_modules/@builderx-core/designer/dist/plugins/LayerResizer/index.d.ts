import { Canvas, Layer } from '../../';
import { IDimensionWithRotation, IPlugin, IPosition } from 'interfaces';
export default class LayerResizerPlugin implements IPlugin {
    name: string;
    namespace: string;
    forbiddenLayers: Array<Layer>;
    canvas: Canvas;
    dispose: any;
    draggingHandles: boolean;
    targetLayer: Layer | undefined;
    selectedLayers: Array<Layer>;
    boundingBox: any;
    boundingBoxWRTWorld: any;
    selectedLayerDims: Map<Layer, any>;
    startValues: any;
    updatedStartValues: any;
    snapPoints: any;
    boundQueueUpdates: Map<Layer, any>;
    rerenderHandles: boolean;
    isAltPressed: boolean;
    isShiftPressed: boolean;
    layoutElementArray: Array<any>;
    shiftDirection: string;
    startX: number;
    startY: number;
    startAbsoluteX: number;
    startAbsoluteY: number;
    totalDx: number;
    totalDy: number;
    dragEventData: any;
    getHandlesForFill: (layer: Layer) => string[];
    getHandlesForAutoOrAbsoluteLayer: (isAutoHeight: boolean, isAutoWidth: boolean) => string[];
    getHandlesForFlexLayer: (isFillHeight: boolean, isFillWidth: boolean) => string[];
    getHandlesForFlexLayerWithSiblings: (layer: Layer, parentFlexDirection: string, isFillHeight: boolean, isFillWidth: boolean) => any;
    getResizerHandlesLayout: (layer: Layer, parentFlexDirection: string) => any;
    getHandles: (layers: Array<Layer>) => any;
    layersQueuedForUpdate: any;
    init(canvas: Canvas): void;
    hideLayerResizer(context: any): void;
    showLayerResizer(context: any): void;
    rerender(): void;
    onUpdate: () => void;
    queueUpdate: (layer: Layer) => void;
    setSelectedLayers(): void;
    getParentRelativeDims(dims: IDimensionWithRotation, layer: Layer): {
        x: number;
        y: number;
        width: number;
        height: number;
        rotation: number;
    };
    applyDimensions(eventType: string): void;
    normalizeChildrenFlex(): void;
    setLayoutChildren(): void;
    private setLayoutChildSize;
    private getDeltaFactor;
    dragLayout(layer: Layer, delta: IPosition, handle: any, eventName: string): void;
    private dragLayoutIsDoable;
    applyDimensionsForHandle(eventType: string): void;
    activate(): void;
    setNewLayout(layers: Array<Layer>, boundingBox: IDimensionWithRotation, session: any, handle: string, eventName: string, originalEvent: any, delta?: any, meta?: any): void;
    deactivate(): void;
}
