import * as React from 'react';
import { Layer, Gradient, Canvas } from '../../';
import { StopPoints } from '../../models/Gradient';
import { Stop } from 'line-segment-slider-input';
import { IDimensionWithRoot, IDimensionWithRotation, IPosition } from 'interfaces';
declare type propType = {
    layer: Layer;
    dims: IDimensionWithRoot & IDimensionWithRotation;
    gradient: Gradient;
    canvas: Canvas;
    zoom: number;
    scroll: IPosition;
    onChange: (gradient: LineSegmentGradient, type: '' | 'Skip' | 'Forget') => void;
    onClickOutside: (e: any) => void;
    onWrapperMouseDown: (e: any) => void;
    onWrapperContexMenu: (e: any) => void;
    onWrapperDoubleClick: (e: any) => void;
    onWrapperMouseOut: (e: any) => void;
    onWrapperDrop: (e: any) => void;
    onDragOver: (e: any) => void;
    onWrapperMouseMove: (e: any) => void;
    onWrapperMouseUp: (e: any) => void;
};
export declare type LineSegmentGradient = {
    from: number[];
    to: number[];
    stops: Stop[];
    activeIndex: number;
    gradientType: 'LinearGradient' | 'RadialGradient' | 'AngularGradient';
};
export declare const getLineSegmentObject: (gradient: Gradient) => {
    from: number[];
    to: number[];
    stops: Stop[];
    activeIndex: number | undefined;
    gradientType: "LinearGradient" | "RadialGradient" | "AngularGradient";
};
export declare const getGradientFromLineSegmentObject: (gradient: LineSegmentGradient) => {
    from: {
        x: number;
        y: number;
    };
    to: {
        x: number;
        y: number;
    };
    stops: StopPoints[];
    activeIndex: number;
    gradientType: "LinearGradient" | "RadialGradient" | "AngularGradient";
};
export default class GradientEditorRenderer extends React.Component<propType, any> {
    constructor(props: propType);
    componentDidMount(): void;
    handleMove: (type: string, handle: number[] | Stop[]) => null;
    removeHandle: () => void;
    changeIndex: (activeIndex: number) => void;
    handleDragStart: () => void;
    handleDragEnd: () => void;
    render(): JSX.Element;
}
export {};
